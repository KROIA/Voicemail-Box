
microSD_F469.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de30  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800dfe4  0800dfe4  0000efe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e110  0800e110  00010028  2**0
                  CONTENTS
  4 .ARM          00000008  0800e110  0800e110  0000f110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e118  0800e118  00010028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e118  0800e118  0000f118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e11c  0800e11c  0000f11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800e120  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010028  2**0
                  CONTENTS
 10 .bss          00000fd4  20000028  20000028  00010028  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20000ffc  20000ffc  00010028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010028  2**0
                  CONTENTS, READONLY
 13 .debug_info   000290f3  00000000  00000000  00010058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000500d  00000000  00000000  0003914b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002398  00000000  00000000  0003e158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bcc  00000000  00000000  000404f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030fce  00000000  00000000  000420bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fadc  00000000  00000000  0007308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011398d  00000000  00000000  000a2b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b64f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000099c0  00000000  00000000  001b6538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  001bfef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	@ (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	@ (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000028 	.word	0x20000028
 80001d0:	00000000 	.word	0x00000000
 80001d4:	0800dfcc 	.word	0x0800dfcc

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	@ (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	@ (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	2000002c 	.word	0x2000002c
 80001f0:	0800dfcc 	.word	0x0800dfcc

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f001 fd2b 	bl	8001f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f8a1 	bl	8000644 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000502:	f000 f911 	bl	8000728 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fd43 	bl	8000f90 <MX_GPIO_Init>
  MX_DMA_Init();
 800050a:	f000 fcc9 	bl	8000ea0 <MX_DMA_Init>
  MX_CRC_Init();
 800050e:	f000 f937 	bl	8000780 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000512:	f000 f949 	bl	80007a8 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000516:	f000 f979 	bl	800080c <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800051a:	f000 fce9 	bl	8000ef0 <MX_FMC_Init>
  MX_I2C1_Init();
 800051e:	f000 fa75 	bl	8000a0c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000522:	f000 faa1 	bl	8000a68 <MX_I2C2_Init>
  MX_LTDC_Init();
 8000526:	f000 facd 	bl	8000ac4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800052a:	f000 fb49 	bl	8000bc0 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800052e:	f000 fb73 	bl	8000c18 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8000532:	f000 fbcf 	bl	8000cd4 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8000536:	f000 fbed 	bl	8000d14 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800053a:	f000 fc3b 	bl	8000db4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800053e:	f000 fc63 	bl	8000e08 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000542:	f00a fce1 	bl	800af08 <MX_FATFS_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000546:	f000 fc89 	bl	8000e5c <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */

	if(res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800054a:	2200      	movs	r2, #0
 800054c:	4935      	ldr	r1, [pc, #212]	@ (8000624 <main+0x130>)
 800054e:	4836      	ldr	r0, [pc, #216]	@ (8000628 <main+0x134>)
 8000550:	f00c fc6a 	bl	800ce28 <f_mount>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf14      	ite	ne
 800055a:	2301      	movne	r3, #1
 800055c:	2300      	moveq	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	4b32      	ldr	r3, [pc, #200]	@ (800062c <main+0x138>)
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	4b31      	ldr	r3, [pc, #196]	@ (800062c <main+0x138>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d002      	beq.n	8000574 <main+0x80>
	{
		Error_Handler();
 800056e:	f000 fead 	bl	80012cc <Error_Handler>
 8000572:	e04c      	b.n	800060e <main+0x11a>
	}
	else
	{
		if(res = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000574:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	4b2d      	ldr	r3, [pc, #180]	@ (8000630 <main+0x13c>)
 800057c:	2200      	movs	r2, #0
 800057e:	2107      	movs	r1, #7
 8000580:	4828      	ldr	r0, [pc, #160]	@ (8000624 <main+0x130>)
 8000582:	f00d f86f 	bl	800d664 <f_mkfs>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	bf14      	ite	ne
 800058c:	2301      	movne	r3, #1
 800058e:	2300      	moveq	r3, #0
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	4b25      	ldr	r3, [pc, #148]	@ (800062c <main+0x138>)
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	4b24      	ldr	r3, [pc, #144]	@ (800062c <main+0x138>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d002      	beq.n	80005a6 <main+0xb2>
		{
			Error_Handler();
 80005a0:	f000 fe94 	bl	80012cc <Error_Handler>
 80005a4:	e033      	b.n	800060e <main+0x11a>
		}
		else
		{
			//Open file for writing (Create)
            		if(res = f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80005a6:	220a      	movs	r2, #10
 80005a8:	4922      	ldr	r1, [pc, #136]	@ (8000634 <main+0x140>)
 80005aa:	4823      	ldr	r0, [pc, #140]	@ (8000638 <main+0x144>)
 80005ac:	f00c fc82 	bl	800ceb4 <f_open>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf14      	ite	ne
 80005b6:	2301      	movne	r3, #1
 80005b8:	2300      	moveq	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	4b1b      	ldr	r3, [pc, #108]	@ (800062c <main+0x138>)
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	4b1a      	ldr	r3, [pc, #104]	@ (800062c <main+0x138>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <main+0xdc>
            		{
            			Error_Handler();
 80005ca:	f000 fe7f 	bl	80012cc <Error_Handler>
 80005ce:	e01e      	b.n	800060e <main+0x11a>
            		}
            		else
            		{
            			//Write to the text file
            			res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80005d0:	481a      	ldr	r0, [pc, #104]	@ (800063c <main+0x148>)
 80005d2:	f7ff fe0f 	bl	80001f4 <strlen>
 80005d6:	4602      	mov	r2, r0
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <main+0x14c>)
 80005da:	4918      	ldr	r1, [pc, #96]	@ (800063c <main+0x148>)
 80005dc:	4816      	ldr	r0, [pc, #88]	@ (8000638 <main+0x144>)
 80005de:	f00c fe23 	bl	800d228 <f_write>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <main+0x138>)
 80005e8:	701a      	strb	r2, [r3, #0]
            			if((byteswritten == 0) || (res != FR_OK))
 80005ea:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <main+0x14c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d003      	beq.n	80005fa <main+0x106>
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <main+0x138>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <main+0x10c>
            			{
            				Error_Handler();
 80005fa:	f000 fe67 	bl	80012cc <Error_Handler>
 80005fe:	e006      	b.n	800060e <main+0x11a>
            			}
            			else
            			{
            				res = f_close(&SDFile);
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <main+0x144>)
 8000602:	f00d f804 	bl	800d60e <f_close>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <main+0x138>)
 800060c:	701a      	strb	r2, [r3, #0]
            			}
            		}
		}
	}
	res = f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <main+0x134>)
 8000614:	f00c fc08 	bl	800ce28 <f_mount>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b03      	ldr	r3, [pc, #12]	@ (800062c <main+0x138>)
 800061e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0x12c>
 8000624:	20000b5c 	.word	0x20000b5c
 8000628:	20000b60 	.word	0x20000b60
 800062c:	200008fc 	.word	0x200008fc
 8000630:	20000904 	.word	0x20000904
 8000634:	0800dfe4 	.word	0x0800dfe4
 8000638:	20000d90 	.word	0x20000d90
 800063c:	20000000 	.word	0x20000000
 8000640:	20000900 	.word	0x20000900

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	@ 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f00d fc8d 	bl	800df72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <SystemClock_Config+0xdc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a2b      	ldr	r2, [pc, #172]	@ (8000720 <SystemClock_Config+0xdc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <SystemClock_Config+0xdc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <SystemClock_Config+0xe0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a25      	ldr	r2, [pc, #148]	@ (8000724 <SystemClock_Config+0xe0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <SystemClock_Config+0xe0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006b8:	23b4      	movs	r3, #180	@ 0xb4
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80006c0:	2306      	movs	r3, #6
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80006c4:	2306      	movs	r3, #6
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f006 fb93 	bl	8006df8 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d8:	f000 fdf8 	bl	80012cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006dc:	f005 fdea 	bl	80062b4 <HAL_PWREx_EnableOverDrive>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e6:	f000 fdf1 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2105      	movs	r1, #5
 8000708:	4618      	mov	r0, r3
 800070a:	f005 fee5 	bl	80064d8 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000714:	f000 fdda 	bl	80012cc <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	@ 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b090      	sub	sp, #64	@ 0x40
 800072c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	223c      	movs	r2, #60	@ 0x3c
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f00d fc1c 	bl	800df72 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 800073a:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 800073e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000740:	2390      	movs	r3, #144	@ 0x90
 8000742:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 800074c:	2306      	movs	r3, #6
 800074e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000754:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800075a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800075e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000760:	2300      	movs	r3, #0
 8000762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4618      	mov	r0, r3
 8000768:	f006 f908 	bl	800697c <HAL_RCCEx_PeriphCLKConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000772:	f000 fdab 	bl	80012cc <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3740      	adds	r7, #64	@ 0x40
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x20>)
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <MX_CRC_Init+0x24>)
 8000788:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_CRC_Init+0x20>)
 800078c:	f001 fd2a 	bl	80021e4 <HAL_CRC_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000796:	f000 fd99 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000044 	.word	0x20000044
 80007a4:	40023000 	.word	0x40023000

080007a8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_DMA2D_Init+0x5c>)
 80007ae:	4a16      	ldr	r2, [pc, #88]	@ (8000808 <MX_DMA2D_Init+0x60>)
 80007b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_DMA2D_Init+0x5c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <MX_DMA2D_Init+0x5c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_DMA2D_Init+0x5c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_DMA2D_Init+0x5c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_DMA2D_Init+0x5c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_DMA2D_Init+0x5c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_DMA2D_Init+0x5c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007dc:	4809      	ldr	r0, [pc, #36]	@ (8000804 <MX_DMA2D_Init+0x5c>)
 80007de:	f002 f8bb 	bl	8002958 <HAL_DMA2D_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007e8:	f000 fd70 	bl	80012cc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007ec:	2101      	movs	r1, #1
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_DMA2D_Init+0x5c>)
 80007f0:	f002 fa0c 	bl	8002c0c <HAL_DMA2D_ConfigLayer>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007fa:	f000 fd67 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000004c 	.word	0x2000004c
 8000808:	4002b000 	.word	0x4002b000

0800080c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0aa      	sub	sp, #168	@ 0xa8
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000812:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800081e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000822:	2224      	movs	r2, #36	@ 0x24
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f00d fba3 	bl	800df72 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800082c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800083e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000842:	2234      	movs	r2, #52	@ 0x34
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f00d fb93 	bl	800df72 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	222c      	movs	r2, #44	@ 0x2c
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f00d fb8d 	bl	800df72 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000858:	4b6a      	ldr	r3, [pc, #424]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 800085a:	4a6b      	ldr	r2, [pc, #428]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1fc>)
 800085c:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800085e:	4b69      	ldr	r3, [pc, #420]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000864:	4b67      	ldr	r3, [pc, #412]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000866:	2204      	movs	r2, #4
 8000868:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800086a:	4b66      	ldr	r3, [pc, #408]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000870:	237d      	movs	r3, #125	@ 0x7d
 8000872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000876:	2302      	movs	r3, #2
 8000878:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000882:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000886:	4619      	mov	r1, r3
 8000888:	485e      	ldr	r0, [pc, #376]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 800088a:	f002 fa51 	bl	8002d30 <HAL_DSI_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000894:	f000 fd1a 	bl	80012cc <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80008ca:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80008ce:	4619      	mov	r1, r3
 80008d0:	484c      	ldr	r0, [pc, #304]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008d2:	f002 ff41 	bl	8003758 <HAL_DSI_ConfigHostTimeouts>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80008dc:	f000 fcf6 	bl	80012cc <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80008e0:	231c      	movs	r3, #28
 80008e2:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80008e4:	2321      	movs	r3, #33	@ 0x21
 80008e6:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80008e8:	230f      	movs	r3, #15
 80008ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80008ec:	2319      	movs	r3, #25
 80008ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 80008f4:	230a      	movs	r3, #10
 80008f6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80008f8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008fc:	4619      	mov	r1, r3
 80008fe:	4841      	ldr	r0, [pc, #260]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000900:	f002 fec0 	bl	8003684 <HAL_DSI_ConfigPhyTimer>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800090a:	f000 fcdf 	bl	80012cc <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800090e:	2104      	movs	r1, #4
 8000910:	483c      	ldr	r0, [pc, #240]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000912:	f002 fe8f 	bl	8003634 <HAL_DSI_ConfigFlowControl>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800091c:	f000 fcd6 	bl	80012cc <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000920:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000924:	4837      	ldr	r0, [pc, #220]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000926:	f002 ffdd 	bl	80038e4 <HAL_DSI_SetLowPowerRXFilter>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000930:	f000 fccc 	bl	80012cc <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000934:	2100      	movs	r1, #0
 8000936:	4833      	ldr	r0, [pc, #204]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000938:	f002 fb7a 	bl	8003030 <HAL_DSI_ConfigErrorMonitor>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000942:	f000 fcc3 	bl	80012cc <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000946:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800094c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000950:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000956:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000958:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800095c:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 800095e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000968:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800096a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800096e:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000970:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000974:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000976:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800097a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800097c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000980:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000982:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000986:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800098c:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000992:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000996:	4619      	mov	r1, r3
 8000998:	481a      	ldr	r0, [pc, #104]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 800099a:	f002 fded 	bl	8003578 <HAL_DSI_ConfigCommand>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 80009a4:	f000 fc92 	bl	80012cc <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80009ac:	2305      	movs	r3, #5
 80009ae:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 80009b0:	23c8      	movs	r3, #200	@ 0xc8
 80009b2:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80009b4:	2310      	movs	r3, #16
 80009b6:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80009bc:	2304      	movs	r3, #4
 80009be:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	480a      	ldr	r0, [pc, #40]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009da:	f002 fcf5 	bl	80033c8 <HAL_DSI_ConfigAdaptedCommandMode>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 80009e4:	f000 fc72 	bl	80012cc <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009ec:	f002 fcc4 	bl	8003378 <HAL_DSI_SetGenericVCID>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 80009f6:	f000 fc69 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	37a8      	adds	r7, #168	@ 0xa8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000008c 	.word	0x2000008c
 8000a08:	40016c00 	.word	0x40016c00

08000a0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a12:	4a13      	ldr	r2, [pc, #76]	@ (8000a60 <MX_I2C1_Init+0x54>)
 8000a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a18:	4a12      	ldr	r2, [pc, #72]	@ (8000a64 <MX_I2C1_Init+0x58>)
 8000a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <MX_I2C1_Init+0x50>)
 8000a4a:	f004 ff87 	bl	800595c <HAL_I2C_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a54:	f000 fc3a 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000a8 	.word	0x200000a8
 8000a60:	40005400 	.word	0x40005400
 8000a64:	000186a0 	.word	0x000186a0

08000a68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <MX_I2C2_Init+0x50>)
 8000a6e:	4a13      	ldr	r2, [pc, #76]	@ (8000abc <MX_I2C2_Init+0x54>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_I2C2_Init+0x50>)
 8000a74:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <MX_I2C2_Init+0x58>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <MX_I2C2_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <MX_I2C2_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <MX_I2C2_Init+0x50>)
 8000a86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <MX_I2C2_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_I2C2_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <MX_I2C2_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <MX_I2C2_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <MX_I2C2_Init+0x50>)
 8000aa6:	f004 ff59 	bl	800595c <HAL_I2C_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ab0:	f000 fc0c 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200000fc 	.word	0x200000fc
 8000abc:	40005800 	.word	0x40005800
 8000ac0:	000186a0 	.word	0x000186a0

08000ac4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	@ 0x38
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2234      	movs	r2, #52	@ 0x34
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00d fa4e 	bl	800df72 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ad6:	4b38      	ldr	r3, [pc, #224]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000ad8:	4a38      	ldr	r2, [pc, #224]	@ (8000bbc <MX_LTDC_Init+0xf8>)
 8000ada:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000adc:	4b36      	ldr	r3, [pc, #216]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ae2:	4b35      	ldr	r3, [pc, #212]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ae8:	4b33      	ldr	r3, [pc, #204]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000aee:	4b32      	ldr	r3, [pc, #200]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000af4:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000afa:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000b00:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000b0e:	22c9      	movs	r2, #201	@ 0xc9
 8000b10:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000b12:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000b14:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000b18:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000b1c:	22ca      	movs	r2, #202	@ 0xca
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000b20:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000b22:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b28:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b30:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b40:	481d      	ldr	r0, [pc, #116]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000b42:	f005 f84f 	bl	8005be4 <HAL_LTDC_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 fbbe 	bl	80012cc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000b54:	23c8      	movs	r3, #200	@ 0xc8
 8000b56:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000b5c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b60:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b62:	2302      	movs	r3, #2
 8000b64:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b66:	23ff      	movs	r3, #255	@ 0xff
 8000b68:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b72:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b74:	2307      	movs	r3, #7
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b78:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000b7e:	23c8      	movs	r3, #200	@ 0xc8
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000b82:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_LTDC_Init+0xf4>)
 8000ba2:	f005 f9b1 	bl	8005f08 <HAL_LTDC_ConfigLayer>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000bac:	f000 fb8e 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3738      	adds	r7, #56	@ 0x38
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000150 	.word	0x20000150
 8000bbc:	40016800 	.word	0x40016800

08000bc0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <MX_QUADSPI_Init+0x50>)
 8000bc6:	4a13      	ldr	r2, [pc, #76]	@ (8000c14 <MX_QUADSPI_Init+0x54>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_QUADSPI_Init+0x50>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <MX_QUADSPI_Init+0x50>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_QUADSPI_Init+0x50>)
 8000bd8:	2210      	movs	r2, #16
 8000bda:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <MX_QUADSPI_Init+0x50>)
 8000bde:	2218      	movs	r2, #24
 8000be0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_QUADSPI_Init+0x50>)
 8000be4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000be8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_QUADSPI_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <MX_QUADSPI_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <MX_QUADSPI_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <MX_QUADSPI_Init+0x50>)
 8000bfe:	f005 fba9 	bl	8006354 <HAL_QSPI_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c08:	f000 fb60 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200001f8 	.word	0x200001f8
 8000c14:	a0001000 	.word	0xa0001000

08000c18 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000ccc <MX_SAI1_Init+0xb4>)
 8000c20:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c22:	4b29      	ldr	r3, [pc, #164]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c28:	4b27      	ldr	r3, [pc, #156]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000c2e:	4b26      	ldr	r3, [pc, #152]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c30:	2240      	movs	r2, #64	@ 0x40
 8000c32:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c34:	4b24      	ldr	r3, [pc, #144]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c3a:	4b23      	ldr	r3, [pc, #140]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c40:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c46:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c60:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd0 <MX_SAI1_Init+0xb8>)
 8000c62:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c70:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c76:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c7e:	2208      	movs	r2, #8
 8000c80:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000c82:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_SAI1_Init+0xb0>)
 8000cb4:	f006 fb24 	bl	8007300 <HAL_SAI_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000cbe:	f000 fb05 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000244 	.word	0x20000244
 8000ccc:	40015804 	.word	0x40015804
 8000cd0:	0002ee00 	.word	0x0002ee00

08000cd4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_SDIO_SD_Init+0x38>)
 8000cda:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <MX_SDIO_SD_Init+0x3c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_SDIO_SD_Init+0x38>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_SDIO_SD_Init+0x38>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_SDIO_SD_Init+0x38>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_SDIO_SD_Init+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cf6:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <MX_SDIO_SD_Init+0x38>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <MX_SDIO_SD_Init+0x38>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	200002cc 	.word	0x200002cc
 8000d10:	40012c00 	.word	0x40012c00

08000d14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	@ (8000dac <MX_TIM1_Init+0x98>)
 8000d32:	4a1f      	ldr	r2, [pc, #124]	@ (8000db0 <MX_TIM1_Init+0x9c>)
 8000d34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d36:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_TIM1_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dac <MX_TIM1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <MX_TIM1_Init+0x98>)
 8000d44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <MX_TIM1_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d50:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <MX_TIM1_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <MX_TIM1_Init+0x98>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d5c:	4813      	ldr	r0, [pc, #76]	@ (8000dac <MX_TIM1_Init+0x98>)
 8000d5e:	f007 fe47 	bl	80089f0 <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d68:	f000 fab0 	bl	80012cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4619      	mov	r1, r3
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_TIM1_Init+0x98>)
 8000d7a:	f007 ffe9 	bl	8008d50 <HAL_TIM_ConfigClockSource>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d84:	f000 faa2 	bl	80012cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_TIM1_Init+0x98>)
 8000d96:	f008 fa11 	bl	80091bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000da0:	f000 fa94 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000410 	.word	0x20000410
 8000db0:	40010000 	.word	0x40010000

08000db4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <MX_USART3_UART_Init+0x50>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_USART3_UART_Init+0x4c>)
 8000dec:	f008 fa76 	bl	80092dc <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000df6:	f000 fa69 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000458 	.word	0x20000458
 8000e04:	40004800 	.word	0x40004800

08000e08 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_USART6_UART_Init+0x4c>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <MX_USART6_UART_Init+0x50>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <MX_USART6_UART_Init+0x4c>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_USART6_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_USART6_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <MX_USART6_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_USART6_UART_Init+0x4c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <MX_USART6_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_USART6_UART_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_USART6_UART_Init+0x4c>)
 8000e40:	f008 fa4c 	bl	80092dc <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e4a:	f000 fa3f 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200004a0 	.word	0x200004a0
 8000e58:	40011400 	.word	0x40011400

08000e5c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000e62:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e66:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e74:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000e88:	f002 ff37 	bl	8003cfa <HAL_HCD_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8000e92:	f000 fa1b 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200004e8 	.word	0x200004e8

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <MX_DMA_Init+0x4c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a0f      	ldr	r2, [pc, #60]	@ (8000eec <MX_DMA_Init+0x4c>)
 8000eb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <MX_DMA_Init+0x4c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	203b      	movs	r0, #59	@ 0x3b
 8000ec8:	f001 f962 	bl	8002190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ecc:	203b      	movs	r0, #59	@ 0x3b
 8000ece:	f001 f97b 	bl	80021c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2045      	movs	r0, #69	@ 0x45
 8000ed8:	f001 f95a 	bl	8002190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000edc:	2045      	movs	r0, #69	@ 0x45
 8000ede:	f001 f973 	bl	80021c8 <HAL_NVIC_EnableIRQ>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f0a:	4a20      	ldr	r2, [pc, #128]	@ (8000f8c <MX_FMC_Init+0x9c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000f20:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f22:	2220      	movs	r2, #32
 8000f24:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f28:	2240      	movs	r2, #64	@ 0x40
 8000f2a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f2e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000f32:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f40:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f48:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f54:	2307      	movs	r3, #7
 8000f56:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000f60:	2303      	movs	r3, #3
 8000f62:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_FMC_Init+0x98>)
 8000f72:	f007 fd09 	bl	8008988 <HAL_SDRAM_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000f7c:	f000 f9a6 	bl	80012cc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200008c8 	.word	0x200008c8
 8000f8c:	a0000140 	.word	0xa0000140

08000f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	@ 0x40
 8000f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000faa:	4bae      	ldr	r3, [pc, #696]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4aad      	ldr	r2, [pc, #692]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fb0:	f043 0310 	orr.w	r3, r3, #16
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4bab      	ldr	r3, [pc, #684]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fc6:	4ba7      	ldr	r3, [pc, #668]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4aa6      	ldr	r2, [pc, #664]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4ba4      	ldr	r3, [pc, #656]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
 8000fe2:	4ba0      	ldr	r3, [pc, #640]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a9f      	ldr	r2, [pc, #636]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b9d      	ldr	r3, [pc, #628]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	4b99      	ldr	r3, [pc, #612]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a98      	ldr	r2, [pc, #608]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b96      	ldr	r3, [pc, #600]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	4b92      	ldr	r3, [pc, #584]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a91      	ldr	r2, [pc, #580]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b8f      	ldr	r3, [pc, #572]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	4b8b      	ldr	r3, [pc, #556]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a8a      	ldr	r2, [pc, #552]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b88      	ldr	r3, [pc, #544]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b84      	ldr	r3, [pc, #528]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a83      	ldr	r2, [pc, #524]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b81      	ldr	r3, [pc, #516]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b7d      	ldr	r3, [pc, #500]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a7c      	ldr	r2, [pc, #496]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b7a      	ldr	r3, [pc, #488]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b76      	ldr	r3, [pc, #472]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a75      	ldr	r2, [pc, #468]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b73      	ldr	r3, [pc, #460]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	4b68      	ldr	r3, [pc, #416]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a67      	ldr	r2, [pc, #412]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b65      	ldr	r3, [pc, #404]	@ (8001264 <MX_GPIO_Init+0x2d4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	210c      	movs	r1, #12
 80010de:	4862      	ldr	r0, [pc, #392]	@ (8001268 <MX_GPIO_Init+0x2d8>)
 80010e0:	f002 fdf2 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2130      	movs	r1, #48	@ 0x30
 80010e8:	4860      	ldr	r0, [pc, #384]	@ (800126c <MX_GPIO_Init+0x2dc>)
 80010ea:	f002 fded 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2108      	movs	r1, #8
 80010f2:	485f      	ldr	r0, [pc, #380]	@ (8001270 <MX_GPIO_Init+0x2e0>)
 80010f4:	f002 fde8 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2140      	movs	r1, #64	@ 0x40
 80010fc:	485d      	ldr	r0, [pc, #372]	@ (8001274 <MX_GPIO_Init+0x2e4>)
 80010fe:	f002 fde3 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2105      	movs	r1, #5
 8001106:	485c      	ldr	r0, [pc, #368]	@ (8001278 <MX_GPIO_Init+0x2e8>)
 8001108:	f002 fdde 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2180      	movs	r1, #128	@ 0x80
 8001110:	485a      	ldr	r0, [pc, #360]	@ (800127c <MX_GPIO_Init+0x2ec>)
 8001112:	f002 fdd9 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2108      	movs	r1, #8
 800111a:	4859      	ldr	r0, [pc, #356]	@ (8001280 <MX_GPIO_Init+0x2f0>)
 800111c:	f002 fdd4 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8001120:	230c      	movs	r3, #12
 8001122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001134:	4619      	mov	r1, r3
 8001136:	484c      	ldr	r0, [pc, #304]	@ (8001268 <MX_GPIO_Init+0x2d8>)
 8001138:	f002 fc02 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 800113c:	2308      	movs	r3, #8
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800114c:	2306      	movs	r3, #6
 800114e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001154:	4619      	mov	r1, r3
 8001156:	4848      	ldr	r0, [pc, #288]	@ (8001278 <MX_GPIO_Init+0x2e8>)
 8001158:	f002 fbf2 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001160:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001164:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800116e:	4619      	mov	r1, r3
 8001170:	4841      	ldr	r0, [pc, #260]	@ (8001278 <MX_GPIO_Init+0x2e8>)
 8001172:	f002 fbe5 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001176:	2330      	movs	r3, #48	@ 0x30
 8001178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800117a:	2311      	movs	r3, #17
 800117c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	4837      	ldr	r0, [pc, #220]	@ (800126c <MX_GPIO_Init+0x2dc>)
 800118e:	f002 fbd7 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001192:	2308      	movs	r3, #8
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001196:	2311      	movs	r3, #17
 8001198:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	4831      	ldr	r0, [pc, #196]	@ (8001270 <MX_GPIO_Init+0x2e0>)
 80011aa:	f002 fbc9 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80011ae:	2340      	movs	r3, #64	@ 0x40
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011b2:	2311      	movs	r3, #17
 80011b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	482b      	ldr	r0, [pc, #172]	@ (8001274 <MX_GPIO_Init+0x2e4>)
 80011c6:	f002 fbbb 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80011ca:	2305      	movs	r3, #5
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011de:	4619      	mov	r1, r3
 80011e0:	4825      	ldr	r0, [pc, #148]	@ (8001278 <MX_GPIO_Init+0x2e8>)
 80011e2:	f002 fbad 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80011e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011f8:	2302      	movs	r3, #2
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001200:	4619      	mov	r1, r3
 8001202:	481a      	ldr	r0, [pc, #104]	@ (800126c <MX_GPIO_Init+0x2dc>)
 8001204:	f002 fb9c 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001208:	2304      	movs	r3, #4
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001218:	4619      	mov	r1, r3
 800121a:	4816      	ldr	r0, [pc, #88]	@ (8001274 <MX_GPIO_Init+0x2e4>)
 800121c:	f002 fb90 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001220:	2320      	movs	r3, #32
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001224:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001228:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001232:	4619      	mov	r1, r3
 8001234:	4813      	ldr	r0, [pc, #76]	@ (8001284 <MX_GPIO_Init+0x2f4>)
 8001236:	f002 fb83 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800123a:	2380      	movs	r3, #128	@ 0x80
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800124a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800124e:	4619      	mov	r1, r3
 8001250:	480a      	ldr	r0, [pc, #40]	@ (800127c <MX_GPIO_Init+0x2ec>)
 8001252:	f002 fb75 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001256:	2308      	movs	r3, #8
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	e012      	b.n	8001288 <MX_GPIO_Init+0x2f8>
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40021000 	.word	0x40021000
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40022800 	.word	0x40022800
 8001274:	40021800 	.word	0x40021800
 8001278:	40020400 	.word	0x40020400
 800127c:	40021c00 	.word	0x40021c00
 8001280:	40020000 	.word	0x40020000
 8001284:	40022400 	.word	0x40022400
 8001288:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001292:	4619      	mov	r1, r3
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <MX_GPIO_Init+0x314>)
 8001296:	f002 fb53 	bl	8003940 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129a:	bf00      	nop
 800129c:	3740      	adds	r7, #64	@ 0x40
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020000 	.word	0x40020000

080012a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ba:	f000 fe6d 	bl	8001f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40001000 	.word	0x40001000

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart3, "ERROR: ", 7, 100);
 80012d0:	2364      	movs	r3, #100	@ 0x64
 80012d2:	2207      	movs	r2, #7
 80012d4:	4906      	ldr	r1, [pc, #24]	@ (80012f0 <Error_Handler+0x24>)
 80012d6:	4807      	ldr	r0, [pc, #28]	@ (80012f4 <Error_Handler+0x28>)
 80012d8:	f008 f850 	bl	800937c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &res, 1, 100);
 80012dc:	2364      	movs	r3, #100	@ 0x64
 80012de:	2201      	movs	r2, #1
 80012e0:	4905      	ldr	r1, [pc, #20]	@ (80012f8 <Error_Handler+0x2c>)
 80012e2:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <Error_Handler+0x28>)
 80012e4:	f008 f84a 	bl	800937c <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop

	__disable_irq();
	while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <Error_Handler+0x20>
 80012f0:	0800dff0 	.word	0x0800dff0
 80012f4:	20000458 	.word	0x20000458
 80012f8:	200008fc 	.word	0x200008fc

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <HAL_MspInit+0x58>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <HAL_MspInit+0x58>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <HAL_MspInit+0x58>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <HAL_MspInit+0x58>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <HAL_MspInit+0x58>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	6413      	str	r3, [r2, #64]	@ 0x40
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_MspInit+0x58>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2005      	movs	r0, #5
 8001340:	f000 ff26 	bl	8002190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001344:	2005      	movs	r0, #5
 8001346:	f000 ff3f 	bl	80021c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800

08001358 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0b      	ldr	r2, [pc, #44]	@ (8001394 <HAL_CRC_MspInit+0x3c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10d      	bne.n	8001386 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_CRC_MspInit+0x40>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <HAL_CRC_MspInit+0x40>)
 8001374:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <HAL_CRC_MspInit+0x40>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023000 	.word	0x40023000
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0e      	ldr	r2, [pc, #56]	@ (80013e4 <HAL_DMA2D_MspInit+0x48>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d115      	bne.n	80013da <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <HAL_DMA2D_MspInit+0x4c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a0c      	ldr	r2, [pc, #48]	@ (80013e8 <HAL_DMA2D_MspInit+0x4c>)
 80013b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_DMA2D_MspInit+0x4c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	205a      	movs	r0, #90	@ 0x5a
 80013d0:	f000 fede 	bl	8002190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013d4:	205a      	movs	r0, #90	@ 0x5a
 80013d6:	f000 fef7 	bl	80021c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	4002b000 	.word	0x4002b000
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <HAL_DSI_MspInit+0x94>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d133      	bne.n	8001476 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <HAL_DSI_MspInit+0x98>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a1b      	ldr	r2, [pc, #108]	@ (8001484 <HAL_DSI_MspInit+0x98>)
 8001418:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_DSI_MspInit+0x98>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <HAL_DSI_MspInit+0x98>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <HAL_DSI_MspInit+0x98>)
 8001434:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <HAL_DSI_MspInit+0x98>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8001446:	2304      	movs	r3, #4
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001456:	230d      	movs	r3, #13
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <HAL_DSI_MspInit+0x9c>)
 8001462:	f002 fa6d 	bl	8003940 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	205c      	movs	r0, #92	@ 0x5c
 800146c:	f000 fe90 	bl	8002190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001470:	205c      	movs	r0, #92	@ 0x5c
 8001472:	f000 fea9 	bl	80021c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	@ 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40016c00 	.word	0x40016c00
 8001484:	40023800 	.word	0x40023800
 8001488:	40022400 	.word	0x40022400

0800148c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	@ 0x30
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a32      	ldr	r2, [pc, #200]	@ (8001574 <HAL_I2C_MspInit+0xe8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d12d      	bne.n	800150a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a30      	ldr	r2, [pc, #192]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80014ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d0:	2312      	movs	r3, #18
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014dc:	2304      	movs	r3, #4
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	4825      	ldr	r0, [pc, #148]	@ (800157c <HAL_I2C_MspInit+0xf0>)
 80014e8:	f002 fa2a 	bl	8003940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	4a20      	ldr	r2, [pc, #128]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 80014f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001508:	e030      	b.n	800156c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a1c      	ldr	r2, [pc, #112]	@ (8001580 <HAL_I2C_MspInit+0xf4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d12b      	bne.n	800156c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151c:	4a16      	ldr	r2, [pc, #88]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 800151e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001522:	6313      	str	r3, [r2, #48]	@ 0x30
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8001530:	2330      	movs	r3, #48	@ 0x30
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001534:	2312      	movs	r3, #18
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001538:	2301      	movs	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001540:	2304      	movs	r3, #4
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	480e      	ldr	r0, [pc, #56]	@ (8001584 <HAL_I2C_MspInit+0xf8>)
 800154c:	f002 f9f8 	bl	8003940 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	4a07      	ldr	r2, [pc, #28]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 800155a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800155e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_I2C_MspInit+0xec>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	bf00      	nop
 800156e:	3730      	adds	r7, #48	@ 0x30
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40005400 	.word	0x40005400
 8001578:	40023800 	.word	0x40023800
 800157c:	40020400 	.word	0x40020400
 8001580:	40005800 	.word	0x40005800
 8001584:	40021c00 	.word	0x40021c00

08001588 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0e      	ldr	r2, [pc, #56]	@ (80015d0 <HAL_LTDC_MspInit+0x48>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d115      	bne.n	80015c6 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b0d      	ldr	r3, [pc, #52]	@ (80015d4 <HAL_LTDC_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a0c      	ldr	r2, [pc, #48]	@ (80015d4 <HAL_LTDC_MspInit+0x4c>)
 80015a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_LTDC_MspInit+0x4c>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2058      	movs	r0, #88	@ 0x58
 80015bc:	f000 fde8 	bl	8002190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015c0:	2058      	movs	r0, #88	@ 0x58
 80015c2:	f000 fe01 	bl	80021c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40016800 	.word	0x40016800
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a31      	ldr	r2, [pc, #196]	@ (80016bc <HAL_QSPI_MspInit+0xe4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d15b      	bne.n	80016b2 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <HAL_QSPI_MspInit+0xe8>)
 8001600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001602:	4a2f      	ldr	r2, [pc, #188]	@ (80016c0 <HAL_QSPI_MspInit+0xe8>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	6393      	str	r3, [r2, #56]	@ 0x38
 800160a:	4b2d      	ldr	r3, [pc, #180]	@ (80016c0 <HAL_QSPI_MspInit+0xe8>)
 800160c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b29      	ldr	r3, [pc, #164]	@ (80016c0 <HAL_QSPI_MspInit+0xe8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a28      	ldr	r2, [pc, #160]	@ (80016c0 <HAL_QSPI_MspInit+0xe8>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <HAL_QSPI_MspInit+0xe8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	4b22      	ldr	r3, [pc, #136]	@ (80016c0 <HAL_QSPI_MspInit+0xe8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <HAL_QSPI_MspInit+0xe8>)
 800163c:	f043 0320 	orr.w	r3, r3, #32
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <HAL_QSPI_MspInit+0xe8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800164e:	2340      	movs	r3, #64	@ 0x40
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800165e:	230a      	movs	r3, #10
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4816      	ldr	r0, [pc, #88]	@ (80016c4 <HAL_QSPI_MspInit+0xec>)
 800166a:	f002 f969 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800166e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001680:	2309      	movs	r3, #9
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	480f      	ldr	r0, [pc, #60]	@ (80016c8 <HAL_QSPI_MspInit+0xf0>)
 800168c:	f002 f958 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001690:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80016a2:	230a      	movs	r3, #10
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4806      	ldr	r0, [pc, #24]	@ (80016c8 <HAL_QSPI_MspInit+0xf0>)
 80016ae:	f002 f947 	bl	8003940 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	@ 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	a0001000 	.word	0xa0001000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40021400 	.word	0x40021400

080016cc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	@ 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a68      	ldr	r2, [pc, #416]	@ (800188c <HAL_SD_MspInit+0x1c0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	f040 80c9 	bne.w	8001882 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	4b66      	ldr	r3, [pc, #408]	@ (8001890 <HAL_SD_MspInit+0x1c4>)
 80016f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f8:	4a65      	ldr	r2, [pc, #404]	@ (8001890 <HAL_SD_MspInit+0x1c4>)
 80016fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001700:	4b63      	ldr	r3, [pc, #396]	@ (8001890 <HAL_SD_MspInit+0x1c4>)
 8001702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4b5f      	ldr	r3, [pc, #380]	@ (8001890 <HAL_SD_MspInit+0x1c4>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001714:	4a5e      	ldr	r2, [pc, #376]	@ (8001890 <HAL_SD_MspInit+0x1c4>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6313      	str	r3, [r2, #48]	@ 0x30
 800171c:	4b5c      	ldr	r3, [pc, #368]	@ (8001890 <HAL_SD_MspInit+0x1c4>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	4b58      	ldr	r3, [pc, #352]	@ (8001890 <HAL_SD_MspInit+0x1c4>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001730:	4a57      	ldr	r2, [pc, #348]	@ (8001890 <HAL_SD_MspInit+0x1c4>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6313      	str	r3, [r2, #48]	@ 0x30
 8001738:	4b55      	ldr	r3, [pc, #340]	@ (8001890 <HAL_SD_MspInit+0x1c4>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8001744:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001748:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001756:	230c      	movs	r3, #12
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	484c      	ldr	r0, [pc, #304]	@ (8001894 <HAL_SD_MspInit+0x1c8>)
 8001762:	f002 f8ed 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001766:	2304      	movs	r3, #4
 8001768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001776:	230c      	movs	r3, #12
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4845      	ldr	r0, [pc, #276]	@ (8001898 <HAL_SD_MspInit+0x1cc>)
 8001782:	f002 f8dd 	bl	8003940 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001786:	4b45      	ldr	r3, [pc, #276]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 8001788:	4a45      	ldr	r2, [pc, #276]	@ (80018a0 <HAL_SD_MspInit+0x1d4>)
 800178a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800178c:	4b43      	ldr	r3, [pc, #268]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 800178e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001792:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001794:	4b41      	ldr	r3, [pc, #260]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b40      	ldr	r3, [pc, #256]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b3e      	ldr	r3, [pc, #248]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017a6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017a8:	4b3c      	ldr	r3, [pc, #240]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017ae:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017b0:	4b3a      	ldr	r3, [pc, #232]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017b6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80017b8:	4b38      	ldr	r3, [pc, #224]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017ba:	2220      	movs	r2, #32
 80017bc:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017be:	4b37      	ldr	r3, [pc, #220]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017c4:	4b35      	ldr	r3, [pc, #212]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017c6:	2204      	movs	r2, #4
 80017c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017ca:	4b34      	ldr	r3, [pc, #208]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017cc:	2203      	movs	r2, #3
 80017ce:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80017d0:	4b32      	ldr	r3, [pc, #200]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017d8:	4b30      	ldr	r3, [pc, #192]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017da:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80017de:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80017e0:	482e      	ldr	r0, [pc, #184]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017e2:	f000 fd1b 	bl	800221c <HAL_DMA_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80017ec:	f7ff fd6e 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a2a      	ldr	r2, [pc, #168]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017f6:	4a29      	ldr	r2, [pc, #164]	@ (800189c <HAL_SD_MspInit+0x1d0>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80017fc:	4b29      	ldr	r3, [pc, #164]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 80017fe:	4a2a      	ldr	r2, [pc, #168]	@ (80018a8 <HAL_SD_MspInit+0x1dc>)
 8001800:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001802:	4b28      	ldr	r3, [pc, #160]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001804:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001808:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800180a:	4b26      	ldr	r3, [pc, #152]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 800180c:	2240      	movs	r2, #64	@ 0x40
 800180e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	4b24      	ldr	r3, [pc, #144]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	4b23      	ldr	r3, [pc, #140]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001818:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800181c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800181e:	4b21      	ldr	r3, [pc, #132]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001820:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001824:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001826:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001828:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800182c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800182e:	4b1d      	ldr	r3, [pc, #116]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001830:	2220      	movs	r2, #32
 8001832:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800183a:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 800183c:	2204      	movs	r2, #4
 800183e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001842:	2203      	movs	r2, #3
 8001844:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001848:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800184c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001850:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001854:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001856:	4813      	ldr	r0, [pc, #76]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 8001858:	f000 fce0 	bl	800221c <HAL_DMA_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001862:	f7ff fd33 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a0e      	ldr	r2, [pc, #56]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 800186a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800186c:	4a0d      	ldr	r2, [pc, #52]	@ (80018a4 <HAL_SD_MspInit+0x1d8>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2031      	movs	r0, #49	@ 0x31
 8001878:	f000 fc8a 	bl	8002190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800187c:	2031      	movs	r0, #49	@ 0x31
 800187e:	f000 fca3 	bl	80021c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	@ 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40012c00 	.word	0x40012c00
 8001890:	40023800 	.word	0x40023800
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	20000350 	.word	0x20000350
 80018a0:	40026458 	.word	0x40026458
 80018a4:	200003b0 	.word	0x200003b0
 80018a8:	400264a0 	.word	0x400264a0

080018ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0b      	ldr	r2, [pc, #44]	@ (80018e8 <HAL_TIM_Base_MspInit+0x3c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d10d      	bne.n	80018da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <HAL_TIM_Base_MspInit+0x40>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	4a09      	ldr	r2, [pc, #36]	@ (80018ec <HAL_TIM_Base_MspInit+0x40>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <HAL_TIM_Base_MspInit+0x40>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40010000 	.word	0x40010000
 80018ec:	40023800 	.word	0x40023800

080018f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08c      	sub	sp, #48	@ 0x30
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a33      	ldr	r2, [pc, #204]	@ (80019dc <HAL_UART_MspInit+0xec>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d12d      	bne.n	800196e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	4a31      	ldr	r2, [pc, #196]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001920:	6413      	str	r3, [r2, #64]	@ 0x40
 8001922:	4b2f      	ldr	r3, [pc, #188]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a2a      	ldr	r2, [pc, #168]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800194a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001954:	2301      	movs	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800195c:	2307      	movs	r3, #7
 800195e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	481f      	ldr	r0, [pc, #124]	@ (80019e4 <HAL_UART_MspInit+0xf4>)
 8001968:	f001 ffea 	bl	8003940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800196c:	e031      	b.n	80019d2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1d      	ldr	r2, [pc, #116]	@ (80019e8 <HAL_UART_MspInit+0xf8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d12c      	bne.n	80019d2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 800197e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001980:	4a17      	ldr	r2, [pc, #92]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 8001982:	f043 0320 	orr.w	r3, r3, #32
 8001986:	6453      	str	r3, [r2, #68]	@ 0x44
 8001988:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	4a10      	ldr	r2, [pc, #64]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 800199e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a4:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <HAL_UART_MspInit+0xf0>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 80019b0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019c2:	2308      	movs	r3, #8
 80019c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4807      	ldr	r0, [pc, #28]	@ (80019ec <HAL_UART_MspInit+0xfc>)
 80019ce:	f001 ffb7 	bl	8003940 <HAL_GPIO_Init>
}
 80019d2:	bf00      	nop
 80019d4:	3730      	adds	r7, #48	@ 0x30
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40004800 	.word	0x40004800
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40011400 	.word	0x40011400
 80019ec:	40021800 	.word	0x40021800

080019f0 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a10:	d147      	bne.n	8001aa2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b25      	ldr	r3, [pc, #148]	@ (8001aac <HAL_HCD_MspInit+0xbc>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a24      	ldr	r2, [pc, #144]	@ (8001aac <HAL_HCD_MspInit+0xbc>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <HAL_HCD_MspInit+0xbc>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 8001a2e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a40:	230a      	movs	r3, #10
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4819      	ldr	r0, [pc, #100]	@ (8001ab0 <HAL_HCD_MspInit+0xc0>)
 8001a4c:	f001 ff78 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 8001a50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4812      	ldr	r0, [pc, #72]	@ (8001ab0 <HAL_HCD_MspInit+0xc0>)
 8001a66:	f001 ff6b 	bl	8003940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <HAL_HCD_MspInit+0xbc>)
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001aac <HAL_HCD_MspInit+0xbc>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a74:	6353      	str	r3, [r2, #52]	@ 0x34
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <HAL_HCD_MspInit+0xbc>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001aac <HAL_HCD_MspInit+0xbc>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <HAL_HCD_MspInit+0xbc>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	2043      	movs	r0, #67	@ 0x43
 8001a98:	f000 fb7a 	bl	8002190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001a9c:	2043      	movs	r0, #67	@ 0x43
 8001a9e:	f000 fb93 	bl	80021c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	@ 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ac8:	4b44      	ldr	r3, [pc, #272]	@ (8001bdc <HAL_FMC_MspInit+0x128>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 8081 	bne.w	8001bd4 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001ad2:	4b42      	ldr	r3, [pc, #264]	@ (8001bdc <HAL_FMC_MspInit+0x128>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	4b40      	ldr	r3, [pc, #256]	@ (8001be0 <HAL_FMC_MspInit+0x12c>)
 8001ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ae0:	4a3f      	ldr	r2, [pc, #252]	@ (8001be0 <HAL_FMC_MspInit+0x12c>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8001be0 <HAL_FMC_MspInit+0x12c>)
 8001aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001af4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001af8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b06:	230c      	movs	r3, #12
 8001b08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4835      	ldr	r0, [pc, #212]	@ (8001be4 <HAL_FMC_MspInit+0x130>)
 8001b10:	f001 ff16 	bl	8003940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8001b14:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001b18:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b26:	230c      	movs	r3, #12
 8001b28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	482e      	ldr	r0, [pc, #184]	@ (8001be8 <HAL_FMC_MspInit+0x134>)
 8001b30:	f001 ff06 	bl	8003940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001b34:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001b38:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b46:	230c      	movs	r3, #12
 8001b48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4827      	ldr	r0, [pc, #156]	@ (8001bec <HAL_FMC_MspInit+0x138>)
 8001b50:	f001 fef6 	bl	8003940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001b54:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001b58:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b66:	230c      	movs	r3, #12
 8001b68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4820      	ldr	r0, [pc, #128]	@ (8001bf0 <HAL_FMC_MspInit+0x13c>)
 8001b70:	f001 fee6 	bl	8003940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001b74:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001b78:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b86:	230c      	movs	r3, #12
 8001b88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4819      	ldr	r0, [pc, #100]	@ (8001bf4 <HAL_FMC_MspInit+0x140>)
 8001b90:	f001 fed6 	bl	8003940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001b94:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8001b98:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ba6:	230c      	movs	r3, #12
 8001ba8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4812      	ldr	r0, [pc, #72]	@ (8001bf8 <HAL_FMC_MspInit+0x144>)
 8001bb0:	f001 fec6 	bl	8003940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480b      	ldr	r0, [pc, #44]	@ (8001bfc <HAL_FMC_MspInit+0x148>)
 8001bce:	f001 feb7 	bl	8003940 <HAL_GPIO_Init>
 8001bd2:	e000      	b.n	8001bd6 <HAL_FMC_MspInit+0x122>
    return;
 8001bd4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000b04 	.word	0x20000b04
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40020c00 	.word	0x40020c00
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	40021400 	.word	0x40021400
 8001bf8:	40021c00 	.word	0x40021c00
 8001bfc:	40020800 	.word	0x40020800

08001c00 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c08:	f7ff ff54 	bl	8001ab4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a26      	ldr	r2, [pc, #152]	@ (8001cbc <HAL_SAI_MspInit+0xa8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d146      	bne.n	8001cb4 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001c26:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <HAL_SAI_MspInit+0xac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10d      	bne.n	8001c4a <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	4b24      	ldr	r3, [pc, #144]	@ (8001cc4 <HAL_SAI_MspInit+0xb0>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	4a23      	ldr	r2, [pc, #140]	@ (8001cc4 <HAL_SAI_MspInit+0xb0>)
 8001c38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	4b21      	ldr	r3, [pc, #132]	@ (8001cc4 <HAL_SAI_MspInit+0xb0>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <HAL_SAI_MspInit+0xac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc0 <HAL_SAI_MspInit+0xac>)
 8001c52:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001c54:	2330      	movs	r3, #48	@ 0x30
 8001c56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001c64:	2306      	movs	r3, #6
 8001c66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4816      	ldr	r0, [pc, #88]	@ (8001cc8 <HAL_SAI_MspInit+0xb4>)
 8001c70:	f001 fe66 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001c74:	2340      	movs	r3, #64	@ 0x40
 8001c76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001c84:	2306      	movs	r3, #6
 8001c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480f      	ldr	r0, [pc, #60]	@ (8001ccc <HAL_SAI_MspInit+0xb8>)
 8001c90:	f001 fe56 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001c94:	2380      	movs	r3, #128	@ 0x80
 8001c96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ca4:	2306      	movs	r3, #6
 8001ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	4619      	mov	r1, r3
 8001cae:	4808      	ldr	r0, [pc, #32]	@ (8001cd0 <HAL_SAI_MspInit+0xbc>)
 8001cb0:	f001 fe46 	bl	8003940 <HAL_GPIO_Init>

    }
}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40015804 	.word	0x40015804
 8001cc0:	20000b08 	.word	0x20000b08
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40021800 	.word	0x40021800

08001cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08e      	sub	sp, #56	@ 0x38
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	4b33      	ldr	r3, [pc, #204]	@ (8001db8 <HAL_InitTick+0xe4>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	4a32      	ldr	r2, [pc, #200]	@ (8001db8 <HAL_InitTick+0xe4>)
 8001cee:	f043 0310 	orr.w	r3, r3, #16
 8001cf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf4:	4b30      	ldr	r3, [pc, #192]	@ (8001db8 <HAL_InitTick+0xe4>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d00:	f107 0210 	add.w	r2, r7, #16
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 fe04 	bl	8006918 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d1a:	f004 fdd5 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 8001d1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d20:	e004      	b.n	8001d2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d22:	f004 fdd1 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 8001d26:	4603      	mov	r3, r0
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2e:	4a23      	ldr	r2, [pc, #140]	@ (8001dbc <HAL_InitTick+0xe8>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	3b01      	subs	r3, #1
 8001d38:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d3a:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <HAL_InitTick+0xec>)
 8001d3c:	4a21      	ldr	r2, [pc, #132]	@ (8001dc4 <HAL_InitTick+0xf0>)
 8001d3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc0 <HAL_InitTick+0xec>)
 8001d42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d48:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_InitTick+0xec>)
 8001d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <HAL_InitTick+0xec>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <HAL_InitTick+0xec>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <HAL_InitTick+0xec>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d60:	4817      	ldr	r0, [pc, #92]	@ (8001dc0 <HAL_InitTick+0xec>)
 8001d62:	f006 fe45 	bl	80089f0 <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d11b      	bne.n	8001dac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d74:	4812      	ldr	r0, [pc, #72]	@ (8001dc0 <HAL_InitTick+0xec>)
 8001d76:	f006 fe8b 	bl	8008a90 <HAL_TIM_Base_Start_IT>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d111      	bne.n	8001dac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d88:	2036      	movs	r0, #54	@ 0x36
 8001d8a:	f000 fa1d 	bl	80021c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d808      	bhi.n	8001da6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	2036      	movs	r0, #54	@ 0x36
 8001d9a:	f000 f9f9 	bl	8002190 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <HAL_InitTick+0xf4>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e002      	b.n	8001dac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3738      	adds	r7, #56	@ 0x38
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	20000b0c 	.word	0x20000b0c
 8001dc4:	40001000 	.word	0x40001000
 8001dc8:	20000020 	.word	0x20000020

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <MemManage_Handler+0x4>

08001de4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001e40:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <SDIO_IRQHandler+0x10>)
 8001e42:	f005 fef9 	bl	8007c38 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200002cc 	.word	0x200002cc

08001e50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e54:	4802      	ldr	r0, [pc, #8]	@ (8001e60 <TIM6_DAC_IRQHandler+0x10>)
 8001e56:	f006 fe8b 	bl	8008b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000b0c 	.word	0x20000b0c

08001e64 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <DMA2_Stream3_IRQHandler+0x10>)
 8001e6a:	f000 faff 	bl	800246c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000350 	.word	0x20000350

08001e78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <OTG_FS_IRQHandler+0x10>)
 8001e7e:	f001 ffa3 	bl	8003dc8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200004e8 	.word	0x200004e8

08001e8c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <DMA2_Stream6_IRQHandler+0x10>)
 8001e92:	f000 faeb 	bl	800246c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200003b0 	.word	0x200003b0

08001ea0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <LTDC_IRQHandler+0x10>)
 8001ea6:	f003 ff6d 	bl	8005d84 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000150 	.word	0x20000150

08001eb4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001eb8:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <DMA2D_IRQHandler+0x10>)
 8001eba:	f000 fd96 	bl	80029ea <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000004c 	.word	0x2000004c

08001ec8 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <DSI_IRQHandler+0x10>)
 8001ece:	f001 f96c 	bl	80031aa <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000008c 	.word	0x2000008c

08001edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <SystemInit+0x20>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee6:	4a05      	ldr	r2, [pc, #20]	@ (8001efc <SystemInit+0x20>)
 8001ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f04:	f7ff ffea 	bl	8001edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f08:	480c      	ldr	r0, [pc, #48]	@ (8001f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f0a:	490d      	ldr	r1, [pc, #52]	@ (8001f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f10:	e002      	b.n	8001f18 <LoopCopyDataInit>

08001f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f16:	3304      	adds	r3, #4

08001f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f1c:	d3f9      	bcc.n	8001f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f20:	4c0a      	ldr	r4, [pc, #40]	@ (8001f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f24:	e001      	b.n	8001f2a <LoopFillZerobss>

08001f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f28:	3204      	adds	r2, #4

08001f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f2c:	d3fb      	bcc.n	8001f26 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001f2e:	f00c f829 	bl	800df84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f32:	f7fe fadf 	bl	80004f4 <main>
  bx  lr    
 8001f36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f40:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001f44:	0800e120 	.word	0x0800e120
  ldr r2, =_sbss
 8001f48:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001f4c:	20000ffc 	.word	0x20000ffc

08001f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f50:	e7fe      	b.n	8001f50 <ADC_IRQHandler>
	...

08001f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f58:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <HAL_Init+0x40>)
 8001f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f64:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <HAL_Init+0x40>)
 8001f6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f70:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a07      	ldr	r2, [pc, #28]	@ (8001f94 <HAL_Init+0x40>)
 8001f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	f000 f8fc 	bl	800217a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f82:	200f      	movs	r0, #15
 8001f84:	f7ff fea6 	bl	8001cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f88:	f7ff f9b8 	bl	80012fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023c00 	.word	0x40023c00

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000024 	.word	0x20000024
 8001fbc:	20000b54 	.word	0x20000b54

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000b54 	.word	0x20000b54

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff ffee 	bl	8001fc0 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_Delay+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffde 	bl	8001fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000024 	.word	0x20000024

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4907      	ldr	r1, [pc, #28]	@ (80020bc <__NVIC_EnableIRQ+0x38>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	@ (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	@ (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	@ 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff4c 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a2:	f7ff ff61 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	6978      	ldr	r0, [r7, #20]
 80021ae:	f7ff ffb1 	bl	8002114 <NVIC_EncodePriority>
 80021b2:	4602      	mov	r2, r0
 80021b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff80 	bl	80020c0 <__NVIC_SetPriority>
}
 80021c0:	bf00      	nop
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff54 	bl	8002084 <__NVIC_EnableIRQ>
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00e      	b.n	8002214 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	795b      	ldrb	r3, [r3, #5]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff f8a6 	bl	8001358 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff feca 	bl	8001fc0 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e099      	b.n	800236c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002258:	e00f      	b.n	800227a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800225a:	f7ff feb1 	bl	8001fc0 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b05      	cmp	r3, #5
 8002266:	d908      	bls.n	800227a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2203      	movs	r2, #3
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e078      	b.n	800236c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e8      	bne.n	800225a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4b38      	ldr	r3, [pc, #224]	@ (8002374 <HAL_DMA_Init+0x158>)
 8002294:	4013      	ands	r3, r2
 8002296:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d107      	bne.n	80022e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	4313      	orrs	r3, r2
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f023 0307 	bic.w	r3, r3, #7
 80022fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4313      	orrs	r3, r2
 8002304:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230a:	2b04      	cmp	r3, #4
 800230c:	d117      	bne.n	800233e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4313      	orrs	r3, r2
 8002316:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00e      	beq.n	800233e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fa9d 	bl	8002860 <DMA_CheckFifoParam>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2240      	movs	r2, #64	@ 0x40
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800233a:	2301      	movs	r3, #1
 800233c:	e016      	b.n	800236c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa54 	bl	80027f4 <DMA_CalcBaseAndBitshift>
 800234c:	4603      	mov	r3, r0
 800234e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002354:	223f      	movs	r2, #63	@ 0x3f
 8002356:	409a      	lsls	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	f010803f 	.word	0xf010803f

08002378 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_DMA_Start_IT+0x26>
 800239a:	2302      	movs	r3, #2
 800239c:	e040      	b.n	8002420 <HAL_DMA_Start_IT+0xa8>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d12f      	bne.n	8002412 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f9e6 	bl	8002798 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d0:	223f      	movs	r2, #63	@ 0x3f
 80023d2:	409a      	lsls	r2, r3
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0216 	orr.w	r2, r2, #22
 80023e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0208 	orr.w	r2, r2, #8
 80023fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e005      	b.n	800241e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800241a:	2302      	movs	r3, #2
 800241c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d004      	beq.n	8002446 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2280      	movs	r2, #128	@ 0x80
 8002440:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e00c      	b.n	8002460 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2205      	movs	r2, #5
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002478:	4b8e      	ldr	r3, [pc, #568]	@ (80026b4 <HAL_DMA_IRQHandler+0x248>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a8e      	ldr	r2, [pc, #568]	@ (80026b8 <HAL_DMA_IRQHandler+0x24c>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	0a9b      	lsrs	r3, r3, #10
 8002484:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002496:	2208      	movs	r2, #8
 8002498:	409a      	lsls	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01a      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0204 	bic.w	r2, r2, #4
 80024be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c4:	2208      	movs	r2, #8
 80024c6:	409a      	lsls	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024dc:	2201      	movs	r2, #1
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d012      	beq.n	800250e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	2201      	movs	r2, #1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002512:	2204      	movs	r2, #4
 8002514:	409a      	lsls	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d012      	beq.n	8002544 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002530:	2204      	movs	r2, #4
 8002532:	409a      	lsls	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253c:	f043 0204 	orr.w	r2, r3, #4
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002548:	2210      	movs	r2, #16
 800254a:	409a      	lsls	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d043      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d03c      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002566:	2210      	movs	r2, #16
 8002568:	409a      	lsls	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d018      	beq.n	80025ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d108      	bne.n	800259c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d024      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
 800259a:	e01f      	b.n	80025dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01b      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
 80025ac:	e016      	b.n	80025dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0208 	bic.w	r2, r2, #8
 80025ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e0:	2220      	movs	r2, #32
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 808f 	beq.w	800270c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 8087 	beq.w	800270c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002602:	2220      	movs	r2, #32
 8002604:	409a      	lsls	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b05      	cmp	r3, #5
 8002614:	d136      	bne.n	8002684 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0216 	bic.w	r2, r2, #22
 8002624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002634:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <HAL_DMA_IRQHandler+0x1da>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0208 	bic.w	r2, r2, #8
 8002654:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265a:	223f      	movs	r2, #63	@ 0x3f
 800265c:	409a      	lsls	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002676:	2b00      	cmp	r3, #0
 8002678:	d07e      	beq.n	8002778 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
        }
        return;
 8002682:	e079      	b.n	8002778 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01d      	beq.n	80026ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10d      	bne.n	80026bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d031      	beq.n	800270c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
 80026b0:	e02c      	b.n	800270c <HAL_DMA_IRQHandler+0x2a0>
 80026b2:	bf00      	nop
 80026b4:	2000001c 	.word	0x2000001c
 80026b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d023      	beq.n	800270c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
 80026cc:	e01e      	b.n	800270c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10f      	bne.n	80026fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0210 	bic.w	r2, r2, #16
 80026ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002710:	2b00      	cmp	r3, #0
 8002712:	d032      	beq.n	800277a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d022      	beq.n	8002766 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2205      	movs	r2, #5
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3301      	adds	r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	429a      	cmp	r2, r3
 8002742:	d307      	bcc.n	8002754 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f2      	bne.n	8002738 <HAL_DMA_IRQHandler+0x2cc>
 8002752:	e000      	b.n	8002756 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002754:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	4798      	blx	r3
 8002776:	e000      	b.n	800277a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002778:	bf00      	nop
    }
  }
}
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b40      	cmp	r3, #64	@ 0x40
 80027c4:	d108      	bne.n	80027d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027d6:	e007      	b.n	80027e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3b10      	subs	r3, #16
 8002804:	4a14      	ldr	r2, [pc, #80]	@ (8002858 <DMA_CalcBaseAndBitshift+0x64>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800280e:	4a13      	ldr	r2, [pc, #76]	@ (800285c <DMA_CalcBaseAndBitshift+0x68>)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b03      	cmp	r3, #3
 8002820:	d909      	bls.n	8002836 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	1d1a      	adds	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	659a      	str	r2, [r3, #88]	@ 0x58
 8002834:	e007      	b.n	8002846 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	aaaaaaab 	.word	0xaaaaaaab
 800285c:	0800e054 	.word	0x0800e054

08002860 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11f      	bne.n	80028ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d856      	bhi.n	800292e <DMA_CheckFifoParam+0xce>
 8002880:	a201      	add	r2, pc, #4	@ (adr r2, 8002888 <DMA_CheckFifoParam+0x28>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	08002899 	.word	0x08002899
 800288c:	080028ab 	.word	0x080028ab
 8002890:	08002899 	.word	0x08002899
 8002894:	0800292f 	.word	0x0800292f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d046      	beq.n	8002932 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a8:	e043      	b.n	8002932 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028b2:	d140      	bne.n	8002936 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b8:	e03d      	b.n	8002936 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028c2:	d121      	bne.n	8002908 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d837      	bhi.n	800293a <DMA_CheckFifoParam+0xda>
 80028ca:	a201      	add	r2, pc, #4	@ (adr r2, 80028d0 <DMA_CheckFifoParam+0x70>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	080028e7 	.word	0x080028e7
 80028d8:	080028e1 	.word	0x080028e1
 80028dc:	080028f9 	.word	0x080028f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e030      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d025      	beq.n	800293e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f6:	e022      	b.n	800293e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002900:	d11f      	bne.n	8002942 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002906:	e01c      	b.n	8002942 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d903      	bls.n	8002916 <DMA_CheckFifoParam+0xb6>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d003      	beq.n	800291c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002914:	e018      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      break;
 800291a:	e015      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00e      	beq.n	8002946 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e00b      	b.n	8002946 <DMA_CheckFifoParam+0xe6>
      break;
 800292e:	bf00      	nop
 8002930:	e00a      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
 8002934:	e008      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002936:	bf00      	nop
 8002938:	e006      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
 800293c:	e004      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 800293e:	bf00      	nop
 8002940:	e002      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;   
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <DMA_CheckFifoParam+0xe8>
      break;
 8002946:	bf00      	nop
    }
  } 
  
  return status; 
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop

08002958 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e03b      	b.n	80029e2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe fd0c 	bl	800139c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a8:	f023 0107 	bic.w	r1, r3, #7
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68d1      	ldr	r1, [r2, #12]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	430b      	orrs	r3, r1
 80029d0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d026      	beq.n	8002a5a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d021      	beq.n	8002a5a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a24:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2201      	movs	r2, #1
 8002a38:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d026      	beq.n	8002ab2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d021      	beq.n	8002ab2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a7c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2220      	movs	r2, #32
 8002a84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8a:	f043 0202 	orr.w	r2, r3, #2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2204      	movs	r2, #4
 8002a96:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d026      	beq.n	8002b0a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d021      	beq.n	8002b0a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2208      	movs	r2, #8
 8002adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2204      	movs	r2, #4
 8002aee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00e      	beq.n	8002b3c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2204      	movs	r2, #4
 8002b34:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f853 	bl	8002be2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d024      	beq.n	8002b90 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01f      	beq.n	8002b90 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2202      	movs	r2, #2
 8002b66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01f      	beq.n	8002bda <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01a      	beq.n	8002bda <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f80e 	bl	8002bf6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_DMA2D_ConfigLayer+0x20>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e079      	b.n	8002d20 <HAL_DMA2D_ConfigLayer+0x114>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	3318      	adds	r3, #24
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002c56:	4b35      	ldr	r3, [pc, #212]	@ (8002d2c <HAL_DMA2D_ConfigLayer+0x120>)
 8002c58:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b0a      	cmp	r3, #10
 8002c60:	d003      	beq.n	8002c6a <HAL_DMA2D_ConfigLayer+0x5e>
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b09      	cmp	r3, #9
 8002c68:	d107      	bne.n	8002c7a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e005      	b.n	8002c86 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	061b      	lsls	r3, r3, #24
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d120      	bne.n	8002cce <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	ea02 0103 	and.w	r1, r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b0a      	cmp	r3, #10
 8002cb4:	d003      	beq.n	8002cbe <HAL_DMA2D_ConfigLayer+0xb2>
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b09      	cmp	r3, #9
 8002cbc:	d127      	bne.n	8002d0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ccc:	e01f      	b.n	8002d0e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	ea02 0103 	and.w	r1, r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b0a      	cmp	r3, #10
 8002cf6:	d003      	beq.n	8002d00 <HAL_DMA2D_ConfigLayer+0xf4>
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b09      	cmp	r3, #9
 8002cfe:	d106      	bne.n	8002d0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002d0c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	ff03000f 	.word	0xff03000f

08002d30 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	@ 0x28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e16e      	b.n	8003022 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7c5b      	ldrb	r3, [r3, #17]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe fb4c 	bl	80013ec <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2203      	movs	r2, #3
 8002d58:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002d6e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002d7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d82:	f7ff f91d 	bl	8001fc0 <HAL_GetTick>
 8002d86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002d88:	e009      	b.n	8002d9e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002d8a:	f7ff f919 	bl	8001fc0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d98:	d901      	bls.n	8002d9e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e141      	b.n	8003022 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002da6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0ed      	beq.n	8002d8a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8002dbe:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8002dc2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002dda:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002de2:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7ff f8de 	bl	8001fd8 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e1c:	f7ff f8d0 	bl	8001fc0 <HAL_GetTick>
 8002e20:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002e22:	e009      	b.n	8002e38 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002e24:	f7ff f8cc 	bl	8001fc0 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e32:	d901      	bls.n	8002e38 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0f4      	b.n	8003022 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ed      	beq.n	8002e24 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e78:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0202 	orr.w	r2, r2, #2
 8002e9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0204 	orr.w	r2, r2, #4
 8002eb0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0203 	bic.w	r2, r2, #3
 8002ec4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ede:	f7ff f86f 	bl	8001fc0 <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d123      	bne.n	8002f3c <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002ef4:	e00c      	b.n	8002f10 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002ef6:	f7ff f863 	bl	8001fc0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f04:	d904      	bls.n	8002f10 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e088      	b.n	8003022 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f18:	f003 0314 	and.w	r3, r3, #20
 8002f1c:	2b14      	cmp	r3, #20
 8002f1e:	d1ea      	bne.n	8002ef6 <HAL_DSI_Init+0x1c6>
 8002f20:	e014      	b.n	8002f4c <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002f22:	f7ff f84d 	bl	8001fc0 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f30:	d904      	bls.n	8002f3c <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e072      	b.n	8003022 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f44:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8002f48:	2b94      	cmp	r3, #148	@ 0x94
 8002f4a:	d1ea      	bne.n	8002f22 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_DSI_Init+0x22a>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	e000      	b.n	8002f5c <HAL_DSI_Init+0x22c>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	4a32      	ldr	r2, [pc, #200]	@ (800302c <HAL_DSI_Init+0x2fc>)
 8002f62:	fb03 f202 	mul.w	r2, r3, r2
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002f92:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0203 	bic.w	r2, r2, #3
 8002ff6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3728      	adds	r7, #40	@ 0x28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	003d0900 	.word	0x003d0900

08003030 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7c1b      	ldrb	r3, [r3, #16]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003042:	2302      	movs	r3, #2
 8003044:	e0ab      	b.n	800319e <HAL_DSI_ConfigErrorMonitor+0x16e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2200      	movs	r2, #0
 8003052:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003080:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003084:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 80030a2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0202 	orr.w	r2, r2, #2
 80030de:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 020c 	orr.w	r2, r2, #12
 80030fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0210 	orr.w	r2, r2, #16
 800311a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0220 	orr.w	r2, r2, #32
 8003138:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003156:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003174:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8003192:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00f      	beq.n	80031e2 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f8ad 	bl	800333c <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00f      	beq.n	8003212 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2202      	movs	r2, #2
 8003208:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f89f 	bl	8003350 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 808c 	beq.w	8003334 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003224:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800323c:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4013      	ands	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f043 0202 	orr.w	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f043 0204 	orr.w	r2, r3, #4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f043 0208 	orr.w	r2, r3, #8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f043 0210 	orr.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f043 0220 	orr.w	r2, r3, #32
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f818 	bl	8003364 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7c1b      	ldrb	r3, [r3, #16]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_DSI_SetGenericVCID+0x16>
 800338a:	2302      	movs	r3, #2
 800338c:	e016      	b.n	80033bc <HAL_DSI_SetGenericVCID+0x44>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0203 	bic.w	r2, r2, #3
 80033a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7c1b      	ldrb	r3, [r3, #16]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0c5      	b.n	800356a <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0203 	bic.w	r2, r2, #3
 800342a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68d9      	ldr	r1, [r3, #12]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0207 	bic.w	r2, r2, #7
 800344c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6959      	ldr	r1, [r3, #20]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	431a      	orrs	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 020f 	bic.w	r2, r2, #15
 800347a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6919      	ldr	r1, [r3, #16]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 020e 	bic.w	r2, r2, #14
 800349e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	005a      	lsls	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	0c1b      	lsrs	r3, r3, #16
 80034c6:	041b      	lsls	r3, r3, #16
 80034c8:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80034ec:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	431a      	orrs	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0202 	orr.w	r2, r2, #2
 800355e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	7c1b      	ldrb	r3, [r3, #16]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_DSI_ConfigCommand+0x16>
 800358a:	2302      	movs	r3, #2
 800358c:	e049      	b.n	8003622 <HAL_DSI_ConfigCommand+0xaa>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_DSI_ConfigCommand+0xb8>)
 80035a0:	400b      	ands	r3, r1
 80035a2:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80035b2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80035b8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80035be:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80035c4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80035ca:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80035d0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80035d6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80035dc:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80035e2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80035e8:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80035ee:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0202 	bic.w	r2, r2, #2
 8003606:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	fef080ff 	.word	0xfef080ff

08003634 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7c1b      	ldrb	r3, [r3, #16]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_DSI_ConfigFlowControl+0x16>
 8003646:	2302      	movs	r3, #2
 8003648:	e016      	b.n	8003678 <HAL_DSI_ConfigFlowControl+0x44>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 021f 	bic.w	r2, r2, #31
 800365e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7c1b      	ldrb	r3, [r3, #16]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_DSI_ConfigPhyTimer+0x16>
 8003696:	2302      	movs	r3, #2
 8003698:	e058      	b.n	800374c <HAL_DSI_ConfigPhyTimer+0xc8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bf38      	it	cc
 80036ac:	4613      	movcc	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80036c0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	041a      	lsls	r2, r3, #16
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80036ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003728:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	021a      	lsls	r2, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7c1b      	ldrb	r3, [r3, #16]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_DSI_ConfigHostTimeouts+0x16>
 800376a:	2302      	movs	r3, #2
 800376c:	e0b4      	b.n	80038d8 <HAL_DSI_ConfigHostTimeouts+0x180>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003782:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6899      	ldr	r1, [r3, #8]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	021a      	lsls	r2, r3, #8
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	b292      	uxth	r2, r2
 80037a4:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	041a      	lsls	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	0c1b      	lsrs	r3, r3, #16
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	0c1b      	lsrs	r3, r3, #16
 80038b4:	041b      	lsls	r3, r3, #16
 80038b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6a1a      	ldr	r2, [r3, #32]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	7c1b      	ldrb	r3, [r3, #16]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_DSI_SetLowPowerRXFilter+0x16>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e01b      	b.n	8003932 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8003910:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	065a      	lsls	r2, r3, #25
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	@ 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	e177      	b.n	8003c4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800395c:	2201      	movs	r2, #1
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	f040 8166 	bne.w	8003c46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d005      	beq.n	8003992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800398e:	2b02      	cmp	r3, #2
 8003990:	d130      	bne.n	80039f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	2203      	movs	r2, #3
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039c8:	2201      	movs	r2, #1
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 0201 	and.w	r2, r3, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d017      	beq.n	8003a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d123      	bne.n	8003a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	08da      	lsrs	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3208      	adds	r2, #8
 8003a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	220f      	movs	r2, #15
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	08da      	lsrs	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3208      	adds	r2, #8
 8003a7e:	69b9      	ldr	r1, [r7, #24]
 8003a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0203 	and.w	r2, r3, #3
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80c0 	beq.w	8003c46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b66      	ldr	r3, [pc, #408]	@ (8003c64 <HAL_GPIO_Init+0x324>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	4a65      	ldr	r2, [pc, #404]	@ (8003c64 <HAL_GPIO_Init+0x324>)
 8003ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ad6:	4b63      	ldr	r3, [pc, #396]	@ (8003c64 <HAL_GPIO_Init+0x324>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ae2:	4a61      	ldr	r2, [pc, #388]	@ (8003c68 <HAL_GPIO_Init+0x328>)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	3302      	adds	r3, #2
 8003aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	220f      	movs	r2, #15
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a58      	ldr	r2, [pc, #352]	@ (8003c6c <HAL_GPIO_Init+0x32c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d037      	beq.n	8003b7e <HAL_GPIO_Init+0x23e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a57      	ldr	r2, [pc, #348]	@ (8003c70 <HAL_GPIO_Init+0x330>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d031      	beq.n	8003b7a <HAL_GPIO_Init+0x23a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a56      	ldr	r2, [pc, #344]	@ (8003c74 <HAL_GPIO_Init+0x334>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d02b      	beq.n	8003b76 <HAL_GPIO_Init+0x236>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a55      	ldr	r2, [pc, #340]	@ (8003c78 <HAL_GPIO_Init+0x338>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d025      	beq.n	8003b72 <HAL_GPIO_Init+0x232>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a54      	ldr	r2, [pc, #336]	@ (8003c7c <HAL_GPIO_Init+0x33c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01f      	beq.n	8003b6e <HAL_GPIO_Init+0x22e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a53      	ldr	r2, [pc, #332]	@ (8003c80 <HAL_GPIO_Init+0x340>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d019      	beq.n	8003b6a <HAL_GPIO_Init+0x22a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a52      	ldr	r2, [pc, #328]	@ (8003c84 <HAL_GPIO_Init+0x344>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_GPIO_Init+0x226>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a51      	ldr	r2, [pc, #324]	@ (8003c88 <HAL_GPIO_Init+0x348>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00d      	beq.n	8003b62 <HAL_GPIO_Init+0x222>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a50      	ldr	r2, [pc, #320]	@ (8003c8c <HAL_GPIO_Init+0x34c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <HAL_GPIO_Init+0x21e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4f      	ldr	r2, [pc, #316]	@ (8003c90 <HAL_GPIO_Init+0x350>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_GPIO_Init+0x21a>
 8003b56:	2309      	movs	r3, #9
 8003b58:	e012      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b5a:	230a      	movs	r3, #10
 8003b5c:	e010      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b5e:	2308      	movs	r3, #8
 8003b60:	e00e      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b62:	2307      	movs	r3, #7
 8003b64:	e00c      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b66:	2306      	movs	r3, #6
 8003b68:	e00a      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b6a:	2305      	movs	r3, #5
 8003b6c:	e008      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	e006      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b72:	2303      	movs	r3, #3
 8003b74:	e004      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_GPIO_Init+0x240>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	f002 0203 	and.w	r2, r2, #3
 8003b86:	0092      	lsls	r2, r2, #2
 8003b88:	4093      	lsls	r3, r2
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b90:	4935      	ldr	r1, [pc, #212]	@ (8003c68 <HAL_GPIO_Init+0x328>)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3302      	adds	r3, #2
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c94 <HAL_GPIO_Init+0x354>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bc2:	4a34      	ldr	r2, [pc, #208]	@ (8003c94 <HAL_GPIO_Init+0x354>)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bc8:	4b32      	ldr	r3, [pc, #200]	@ (8003c94 <HAL_GPIO_Init+0x354>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bec:	4a29      	ldr	r2, [pc, #164]	@ (8003c94 <HAL_GPIO_Init+0x354>)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bf2:	4b28      	ldr	r3, [pc, #160]	@ (8003c94 <HAL_GPIO_Init+0x354>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c16:	4a1f      	ldr	r2, [pc, #124]	@ (8003c94 <HAL_GPIO_Init+0x354>)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c94 <HAL_GPIO_Init+0x354>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c40:	4a14      	ldr	r2, [pc, #80]	@ (8003c94 <HAL_GPIO_Init+0x354>)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	f67f ae84 	bls.w	800395c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3724      	adds	r7, #36	@ 0x24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40013800 	.word	0x40013800
 8003c6c:	40020000 	.word	0x40020000
 8003c70:	40020400 	.word	0x40020400
 8003c74:	40020800 	.word	0x40020800
 8003c78:	40020c00 	.word	0x40020c00
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40021400 	.word	0x40021400
 8003c84:	40021800 	.word	0x40021800
 8003c88:	40021c00 	.word	0x40021c00
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	40022400 	.word	0x40022400
 8003c94:	40013c00 	.word	0x40013c00

08003c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	887b      	ldrh	r3, [r7, #2]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
 8003cb4:	e001      	b.n	8003cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd8:	787b      	ldrb	r3, [r7, #1]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ce4:	e003      	b.n	8003cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ce6:	887b      	ldrh	r3, [r7, #2]
 8003ce8:	041a      	lsls	r2, r3, #16
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	619a      	str	r2, [r3, #24]
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af02      	add	r7, sp, #8
 8003d00:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e059      	b.n	8003dc0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fd fe62 	bl	80019f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d3a:	d102      	bne.n	8003d42 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f006 fd30 	bl	800a7ac <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7c1a      	ldrb	r2, [r3, #16]
 8003d54:	f88d 2000 	strb.w	r2, [sp]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d5c:	f006 fcc2 	bl	800a6e4 <USB_CoreInit>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e026      	b.n	8003dc0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2101      	movs	r1, #1
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f006 fd28 	bl	800a7ce <USB_SetCurrentMode>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e017      	b.n	8003dc0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7c1a      	ldrb	r2, [r3, #16]
 8003d98:	f88d 2000 	strb.w	r2, [sp]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003da0:	f006 fe8c 	bl	800aabc <USB_HostInit>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e004      	b.n	8003dc0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f006 fe2d 	bl	800aa3e <USB_GetMode>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	f040 80fb 	bne.w	8003fe2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f006 fdf0 	bl	800a9d6 <USB_ReadInterrupts>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80f1 	beq.w	8003fe0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f006 fde7 	bl	800a9d6 <USB_ReadInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e12:	d104      	bne.n	8003e1e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003e1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f006 fdd7 	bl	800a9d6 <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e32:	d104      	bne.n	8003e3e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f006 fdc7 	bl	800a9d6 <USB_ReadInterrupts>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e52:	d104      	bne.n	8003e5e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003e5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f006 fdb7 	bl	800a9d6 <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d103      	bne.n	8003e7a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2202      	movs	r2, #2
 8003e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f006 fda9 	bl	800a9d6 <USB_ReadInterrupts>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e8e:	d120      	bne.n	8003ed2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003e98:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d113      	bne.n	8003ed2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003eaa:	2110      	movs	r1, #16
 8003eac:	6938      	ldr	r0, [r7, #16]
 8003eae:	f006 fcda 	bl	800a866 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003eb2:	6938      	ldr	r0, [r7, #16]
 8003eb4:	f006 fd09 	bl	800a8ca <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7a5b      	ldrb	r3, [r3, #9]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d105      	bne.n	8003ecc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f006 feb0 	bl	800ac2c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f89f 	bl	8004010 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f006 fd7d 	bl	800a9d6 <USB_ReadInterrupts>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ee2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ee6:	d102      	bne.n	8003eee <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 fcc4 	bl	8005876 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f006 fd6f 	bl	800a9d6 <USB_ReadInterrupts>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d106      	bne.n	8003f10 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f870 	bl	8003fe8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f006 fd5e 	bl	800a9d6 <USB_ReadInterrupts>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f24:	d139      	bne.n	8003f9a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f006 febb 	bl	800aca6 <USB_HC_ReadInterrupt>
 8003f30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e025      	b.n	8003f84 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d018      	beq.n	8003f7e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f62:	d106      	bne.n	8003f72 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f87c 	bl	8004068 <HCD_HC_IN_IRQHandler>
 8003f70:	e005      	b.n	8003f7e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fede 	bl	8004d3a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	3301      	adds	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	795b      	ldrb	r3, [r3, #5]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d3d3      	bcc.n	8003f38 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f006 fd19 	bl	800a9d6 <USB_ReadInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d101      	bne.n	8003fb2 <HAL_HCD_IRQHandler+0x1ea>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_HCD_IRQHandler+0x1ec>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d014      	beq.n	8003fe2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0210 	bic.w	r2, r2, #16
 8003fc6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f001 fb75 	bl	80056b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0210 	orr.w	r2, r2, #16
 8003fdc:	619a      	str	r2, [r3, #24]
 8003fde:	e000      	b.n	8003fe2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003fe0:	bf00      	nop
    }
  }
}
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	70fb      	strb	r3, [r7, #3]
 8004058:	4613      	mov	r3, r2
 800405a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f006 fcb8 	bl	800a9fc <USB_ReadChInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b04      	cmp	r3, #4
 8004094:	d11a      	bne.n	80040cc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4413      	add	r3, r2
 800409e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a2:	461a      	mov	r2, r3
 80040a4:	2304      	movs	r3, #4
 80040a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	334d      	adds	r3, #77	@ 0x4d
 80040b8:	2207      	movs	r2, #7
 80040ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	4611      	mov	r1, r2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f006 fdff 	bl	800acc8 <USB_HC_Halt>
 80040ca:	e09e      	b.n	800420a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f006 fc91 	bl	800a9fc <USB_ReadChInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e4:	d11b      	bne.n	800411e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f2:	461a      	mov	r2, r3
 80040f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	334d      	adds	r3, #77	@ 0x4d
 800410a:	2208      	movs	r2, #8
 800410c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	4611      	mov	r1, r2
 8004116:	4618      	mov	r0, r3
 8004118:	f006 fdd6 	bl	800acc8 <USB_HC_Halt>
 800411c:	e075      	b.n	800420a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f006 fc68 	bl	800a9fc <USB_ReadChInterrupts>
 800412c:	4603      	mov	r3, r0
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b08      	cmp	r3, #8
 8004134:	d11a      	bne.n	800416c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004142:	461a      	mov	r2, r3
 8004144:	2308      	movs	r3, #8
 8004146:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	334d      	adds	r3, #77	@ 0x4d
 8004158:	2206      	movs	r2, #6
 800415a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f006 fdaf 	bl	800acc8 <USB_HC_Halt>
 800416a:	e04e      	b.n	800420a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f006 fc41 	bl	800a9fc <USB_ReadChInterrupts>
 800417a:	4603      	mov	r3, r0
 800417c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004184:	d11b      	bne.n	80041be <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004192:	461a      	mov	r2, r3
 8004194:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004198:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	334d      	adds	r3, #77	@ 0x4d
 80041aa:	2209      	movs	r2, #9
 80041ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	4611      	mov	r1, r2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f006 fd86 	bl	800acc8 <USB_HC_Halt>
 80041bc:	e025      	b.n	800420a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f006 fc18 	bl	800a9fc <USB_ReadChInterrupts>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d2:	2b80      	cmp	r3, #128	@ 0x80
 80041d4:	d119      	bne.n	800420a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e2:	461a      	mov	r2, r3
 80041e4:	2380      	movs	r3, #128	@ 0x80
 80041e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	334d      	adds	r3, #77	@ 0x4d
 80041f8:	2207      	movs	r2, #7
 80041fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f006 fd5f 	bl	800acc8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f006 fbf2 	bl	800a9fc <USB_ReadChInterrupts>
 8004218:	4603      	mov	r3, r0
 800421a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800421e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004222:	d112      	bne.n	800424a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	4611      	mov	r1, r2
 800422c:	4618      	mov	r0, r3
 800422e:	f006 fd4b 	bl	800acc8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4413      	add	r3, r2
 800423a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800423e:	461a      	mov	r2, r3
 8004240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004244:	6093      	str	r3, [r2, #8]
 8004246:	f000 bd75 	b.w	8004d34 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f006 fbd2 	bl	800a9fc <USB_ReadChInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	f040 8128 	bne.w	80044b4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004270:	461a      	mov	r2, r3
 8004272:	2320      	movs	r3, #32
 8004274:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	331b      	adds	r3, #27
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d119      	bne.n	80042c0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	331b      	adds	r3, #27
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	0151      	lsls	r1, r2, #5
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	440a      	add	r2, r1
 80042b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042be:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	799b      	ldrb	r3, [r3, #6]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01b      	beq.n	8004300 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3330      	adds	r3, #48	@ 0x30
 80042d8:	6819      	ldr	r1, [r3, #0]
 80042da:	78fb      	ldrb	r3, [r7, #3]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	1ac9      	subs	r1, r1, r3
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4403      	add	r3, r0
 80042fc:	3338      	adds	r3, #56	@ 0x38
 80042fe:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	334d      	adds	r3, #77	@ 0x4d
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3344      	adds	r3, #68	@ 0x44
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004334:	461a      	mov	r2, r3
 8004336:	2301      	movs	r3, #1
 8004338:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	3326      	adds	r3, #38	@ 0x26
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	3326      	adds	r3, #38	@ 0x26
 8004360:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004362:	2b02      	cmp	r3, #2
 8004364:	d110      	bne.n	8004388 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f006 fcaa 	bl	800acc8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004380:	461a      	mov	r2, r3
 8004382:	2310      	movs	r3, #16
 8004384:	6093      	str	r3, [r2, #8]
 8004386:	e03d      	b.n	8004404 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004388:	78fa      	ldrb	r2, [r7, #3]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	3326      	adds	r3, #38	@ 0x26
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d00a      	beq.n	80043b4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	3326      	adds	r3, #38	@ 0x26
 80043ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d127      	bne.n	8004404 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	334c      	adds	r3, #76	@ 0x4c
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	334c      	adds	r3, #76	@ 0x4c
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff fe24 	bl	800404c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	799b      	ldrb	r3, [r3, #6]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d13b      	bne.n	8004484 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	3338      	adds	r3, #56	@ 0x38
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4403      	add	r3, r0
 800442c:	3328      	adds	r3, #40	@ 0x28
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	440b      	add	r3, r1
 8004432:	1e59      	subs	r1, r3, #1
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4403      	add	r3, r0
 8004442:	3328      	adds	r3, #40	@ 0x28
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	fbb1 f3f3 	udiv	r3, r1, r3
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8470 	beq.w	8004d34 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	333c      	adds	r3, #60	@ 0x3c
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	f083 0301 	eor.w	r3, r3, #1
 800446c:	b2d8      	uxtb	r0, r3
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	333c      	adds	r3, #60	@ 0x3c
 800447c:	4602      	mov	r2, r0
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	f000 bc58 	b.w	8004d34 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	333c      	adds	r3, #60	@ 0x3c
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	f083 0301 	eor.w	r3, r3, #1
 800449c:	b2d8      	uxtb	r0, r3
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	333c      	adds	r3, #60	@ 0x3c
 80044ac:	4602      	mov	r2, r0
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	f000 bc40 	b.w	8004d34 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	78fa      	ldrb	r2, [r7, #3]
 80044ba:	4611      	mov	r1, r2
 80044bc:	4618      	mov	r0, r3
 80044be:	f006 fa9d 	bl	800a9fc <USB_ReadChInterrupts>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d131      	bne.n	8004530 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044d8:	461a      	mov	r2, r3
 80044da:	2320      	movs	r3, #32
 80044dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	331a      	adds	r3, #26
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	f040 841f 	bne.w	8004d34 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	331b      	adds	r3, #27
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	334d      	adds	r3, #77	@ 0x4d
 800451a:	2203      	movs	r2, #3
 800451c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	4611      	mov	r1, r2
 8004526:	4618      	mov	r0, r3
 8004528:	f006 fbce 	bl	800acc8 <USB_HC_Halt>
 800452c:	f000 bc02 	b.w	8004d34 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f006 fa5f 	bl	800a9fc <USB_ReadChInterrupts>
 800453e:	4603      	mov	r3, r0
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b02      	cmp	r3, #2
 8004546:	f040 8305 	bne.w	8004b54 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4413      	add	r3, r2
 8004552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004556:	461a      	mov	r2, r3
 8004558:	2302      	movs	r3, #2
 800455a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	334d      	adds	r3, #77	@ 0x4d
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d114      	bne.n	800459c <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	334d      	adds	r3, #77	@ 0x4d
 8004582:	2202      	movs	r2, #2
 8004584:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004586:	78fa      	ldrb	r2, [r7, #3]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	334c      	adds	r3, #76	@ 0x4c
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e2cc      	b.n	8004b36 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800459c:	78fa      	ldrb	r2, [r7, #3]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	334d      	adds	r3, #77	@ 0x4d
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d114      	bne.n	80045dc <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	334d      	adds	r3, #77	@ 0x4d
 80045c2:	2202      	movs	r2, #2
 80045c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	334c      	adds	r3, #76	@ 0x4c
 80045d6:	2205      	movs	r2, #5
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e2ac      	b.n	8004b36 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	334d      	adds	r3, #77	@ 0x4d
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b07      	cmp	r3, #7
 80045f0:	d00b      	beq.n	800460a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	334d      	adds	r3, #77	@ 0x4d
 8004602:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004604:	2b09      	cmp	r3, #9
 8004606:	f040 80a6 	bne.w	8004756 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	334d      	adds	r3, #77	@ 0x4d
 800461a:	2202      	movs	r2, #2
 800461c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	3344      	adds	r3, #68	@ 0x44
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	1c59      	adds	r1, r3, #1
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4403      	add	r3, r0
 800463e:	3344      	adds	r3, #68	@ 0x44
 8004640:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004642:	78fa      	ldrb	r2, [r7, #3]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	3344      	adds	r3, #68	@ 0x44
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d943      	bls.n	80046e0 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3344      	adds	r3, #68	@ 0x44
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	331a      	adds	r3, #26
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d123      	bne.n	80046ca <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	331b      	adds	r3, #27
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	331c      	adds	r3, #28
 80046a6:	2200      	movs	r2, #0
 80046a8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	334c      	adds	r3, #76	@ 0x4c
 80046da:	2204      	movs	r2, #4
 80046dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046de:	e229      	b.n	8004b34 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	334c      	adds	r3, #76	@ 0x4c
 80046f0:	2202      	movs	r2, #2
 80046f2:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	3326      	adds	r3, #38	@ 0x26
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00b      	beq.n	8004722 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	3326      	adds	r3, #38	@ 0x26
 800471a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800471c:	2b02      	cmp	r3, #2
 800471e:	f040 8209 	bne.w	8004b34 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004738:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004740:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4413      	add	r3, r2
 800474a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004754:	e1ee      	b.n	8004b34 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	334d      	adds	r3, #77	@ 0x4d
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b05      	cmp	r3, #5
 800476a:	f040 80c8 	bne.w	80048fe <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800476e:	78fa      	ldrb	r2, [r7, #3]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	334d      	adds	r3, #77	@ 0x4d
 800477e:	2202      	movs	r2, #2
 8004780:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	331b      	adds	r3, #27
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	f040 81ce 	bne.w	8004b36 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	3326      	adds	r3, #38	@ 0x26
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d16b      	bne.n	8004888 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	3348      	adds	r3, #72	@ 0x48
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4403      	add	r3, r0
 80047d0:	3348      	adds	r3, #72	@ 0x48
 80047d2:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	3348      	adds	r3, #72	@ 0x48
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d943      	bls.n	8004872 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3348      	adds	r3, #72	@ 0x48
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	331b      	adds	r3, #27
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	3344      	adds	r3, #68	@ 0x44
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d809      	bhi.n	800483c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	331c      	adds	r3, #28
 8004838:	2201      	movs	r2, #1
 800483a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4413      	add	r3, r2
 8004844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	440a      	add	r2, r1
 8004852:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800485a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	334c      	adds	r3, #76	@ 0x4c
 800486c:	2204      	movs	r2, #4
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	e014      	b.n	800489c <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	334c      	adds	r3, #76	@ 0x4c
 8004882:	2202      	movs	r2, #2
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	e009      	b.n	800489c <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	334c      	adds	r3, #76	@ 0x4c
 8004898:	2202      	movs	r2, #2
 800489a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	3326      	adds	r3, #38	@ 0x26
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	3326      	adds	r3, #38	@ 0x26
 80048c2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	f040 8136 	bne.w	8004b36 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80048ca:	78fb      	ldrb	r3, [r7, #3]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048e0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048e8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e11b      	b.n	8004b36 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80048fe:	78fa      	ldrb	r2, [r7, #3]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	334d      	adds	r3, #77	@ 0x4d
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b03      	cmp	r3, #3
 8004912:	f040 8081 	bne.w	8004a18 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	334d      	adds	r3, #77	@ 0x4d
 8004926:	2202      	movs	r2, #2
 8004928:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	331b      	adds	r3, #27
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	f040 80fa 	bne.w	8004b36 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	334c      	adds	r3, #76	@ 0x4c
 8004952:	2202      	movs	r2, #2
 8004954:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	78fa      	ldrb	r2, [r7, #3]
 8004966:	0151      	lsls	r1, r2, #5
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	440a      	add	r2, r1
 800496c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004974:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4413      	add	r3, r2
 800497e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	440a      	add	r2, r1
 800498c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004994:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	0151      	lsls	r1, r2, #5
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	440a      	add	r2, r1
 80049ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049b0:	f023 0320 	bic.w	r3, r3, #32
 80049b4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	3326      	adds	r3, #38	@ 0x26
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	3326      	adds	r3, #38	@ 0x26
 80049dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049de:	2b02      	cmp	r3, #2
 80049e0:	f040 80a9 	bne.w	8004b36 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a02:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a10:	461a      	mov	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	e08e      	b.n	8004b36 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334d      	adds	r3, #77	@ 0x4d
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d143      	bne.n	8004ab6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	334d      	adds	r3, #77	@ 0x4d
 8004a3e:	2202      	movs	r2, #2
 8004a40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	334c      	adds	r3, #76	@ 0x4c
 8004a52:	2202      	movs	r2, #2
 8004a54:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a56:	78fa      	ldrb	r2, [r7, #3]
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	3326      	adds	r3, #38	@ 0x26
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	3326      	adds	r3, #38	@ 0x26
 8004a7c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d159      	bne.n	8004b36 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a98:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004aa0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e03f      	b.n	8004b36 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	334d      	adds	r3, #77	@ 0x4d
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d126      	bne.n	8004b1a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	334d      	adds	r3, #77	@ 0x4d
 8004adc:	2202      	movs	r2, #2
 8004ade:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ae0:	78fa      	ldrb	r2, [r7, #3]
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	3344      	adds	r3, #68	@ 0x44
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	1c59      	adds	r1, r3, #1
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	1a9b      	subs	r3, r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4403      	add	r3, r0
 8004b00:	3344      	adds	r3, #68	@ 0x44
 8004b02:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	334c      	adds	r3, #76	@ 0x4c
 8004b14:	2204      	movs	r2, #4
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e00d      	b.n	8004b36 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004b1a:	78fa      	ldrb	r2, [r7, #3]
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	334d      	adds	r3, #77	@ 0x4d
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f000 8100 	beq.w	8004d32 <HCD_HC_IN_IRQHandler+0xcca>
 8004b32:	e000      	b.n	8004b36 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b34:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	334c      	adds	r3, #76	@ 0x4c
 8004b46:	781a      	ldrb	r2, [r3, #0]
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fa7d 	bl	800404c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b52:	e0ef      	b.n	8004d34 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	78fa      	ldrb	r2, [r7, #3]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f005 ff4d 	bl	800a9fc <USB_ReadChInterrupts>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b68:	2b40      	cmp	r3, #64	@ 0x40
 8004b6a:	d12f      	bne.n	8004bcc <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2340      	movs	r3, #64	@ 0x40
 8004b7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004b7e:	78fa      	ldrb	r2, [r7, #3]
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	334d      	adds	r3, #77	@ 0x4d
 8004b8e:	2205      	movs	r2, #5
 8004b90:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	331a      	adds	r3, #26
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3344      	adds	r3, #68	@ 0x44
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f006 f87f 	bl	800acc8 <USB_HC_Halt>
 8004bca:	e0b3      	b.n	8004d34 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f005 ff11 	bl	800a9fc <USB_ReadChInterrupts>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	f040 80a7 	bne.w	8004d34 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3326      	adds	r3, #38	@ 0x26
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d11b      	bne.n	8004c34 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	3344      	adds	r3, #68	@ 0x44
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	334d      	adds	r3, #77	@ 0x4d
 8004c20:	2204      	movs	r2, #4
 8004c22:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	78fa      	ldrb	r2, [r7, #3]
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f006 f84b 	bl	800acc8 <USB_HC_Halt>
 8004c32:	e03f      	b.n	8004cb4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3326      	adds	r3, #38	@ 0x26
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	3326      	adds	r3, #38	@ 0x26
 8004c5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d129      	bne.n	8004cb4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c60:	78fa      	ldrb	r2, [r7, #3]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	3344      	adds	r3, #68	@ 0x44
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	799b      	ldrb	r3, [r3, #6]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HCD_HC_IN_IRQHandler+0xc2a>
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	331b      	adds	r3, #27
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d110      	bne.n	8004cb4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	334d      	adds	r3, #77	@ 0x4d
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	78fa      	ldrb	r2, [r7, #3]
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f006 f80a 	bl	800acc8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	331b      	adds	r3, #27
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d129      	bne.n	8004d1e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004cca:	78fa      	ldrb	r2, [r7, #3]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	331b      	adds	r3, #27
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cfc:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d18:	f043 0320 	orr.w	r3, r3, #32
 8004d1c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	6093      	str	r3, [r2, #8]
 8004d30:	e000      	b.n	8004d34 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004d32:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f005 fe4f 	bl	800a9fc <USB_ReadChInterrupts>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d11b      	bne.n	8004da0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d74:	461a      	mov	r2, r3
 8004d76:	2304      	movs	r3, #4
 8004d78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	334d      	adds	r3, #77	@ 0x4d
 8004d8a:	2207      	movs	r2, #7
 8004d8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	4611      	mov	r1, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f005 ff96 	bl	800acc8 <USB_HC_Halt>
 8004d9c:	f000 bc89 	b.w	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	4611      	mov	r1, r2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f005 fe27 	bl	800a9fc <USB_ReadChInterrupts>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	f040 8082 	bne.w	8004ebe <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2320      	movs	r3, #32
 8004dca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004dcc:	78fa      	ldrb	r2, [r7, #3]
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	3319      	adds	r3, #25
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d124      	bne.n	8004e2c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	3319      	adds	r3, #25
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	334c      	adds	r3, #76	@ 0x4c
 8004e06:	2202      	movs	r2, #2
 8004e08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	334d      	adds	r3, #77	@ 0x4d
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	78fa      	ldrb	r2, [r7, #3]
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f005 ff4e 	bl	800acc8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	331a      	adds	r3, #26
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	f040 8437 	bne.w	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	331b      	adds	r3, #27
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f040 842b 	bne.w	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004e5c:	78fa      	ldrb	r2, [r7, #3]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	011b      	lsls	r3, r3, #4
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	3326      	adds	r3, #38	@ 0x26
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d009      	beq.n	8004e86 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	011b      	lsls	r3, r3, #4
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	440b      	add	r3, r1
 8004e80:	331b      	adds	r3, #27
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	334d      	adds	r3, #77	@ 0x4d
 8004e96:	2203      	movs	r2, #3
 8004e98:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f005 ff10 	bl	800acc8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3344      	adds	r3, #68	@ 0x44
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e3f9      	b.n	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f005 fd98 	bl	800a9fc <USB_ReadChInterrupts>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed6:	d111      	bne.n	8004efc <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f005 fee7 	bl	800acc8 <USB_HC_Halt>
 8004efa:	e3da      	b.n	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f005 fd79 	bl	800a9fc <USB_ReadChInterrupts>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d168      	bne.n	8004fe6 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	3344      	adds	r3, #68	@ 0x44
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f005 fd63 	bl	800a9fc <USB_ReadChInterrupts>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3c:	2b40      	cmp	r3, #64	@ 0x40
 8004f3e:	d112      	bne.n	8004f66 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3319      	adds	r3, #25
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f60:	461a      	mov	r2, r3
 8004f62:	2340      	movs	r3, #64	@ 0x40
 8004f64:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	331b      	adds	r3, #27
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d019      	beq.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004f7c:	78fa      	ldrb	r2, [r7, #3]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	331b      	adds	r3, #27
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fae:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	334d      	adds	r3, #77	@ 0x4d
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	4611      	mov	r1, r2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f005 fe72 	bl	800acc8 <USB_HC_Halt>
 8004fe4:	e365      	b.n	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	4611      	mov	r1, r2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f005 fd04 	bl	800a9fc <USB_ReadChInterrupts>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffa:	2b40      	cmp	r3, #64	@ 0x40
 8004ffc:	d139      	bne.n	8005072 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004ffe:	78fa      	ldrb	r2, [r7, #3]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	334d      	adds	r3, #77	@ 0x4d
 800500e:	2205      	movs	r2, #5
 8005010:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005012:	78fa      	ldrb	r2, [r7, #3]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	331a      	adds	r3, #26
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	3319      	adds	r3, #25
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	3344      	adds	r3, #68	@ 0x44
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	78fa      	ldrb	r2, [r7, #3]
 8005056:	4611      	mov	r1, r2
 8005058:	4618      	mov	r0, r3
 800505a:	f005 fe35 	bl	800acc8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4413      	add	r3, r2
 8005066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800506a:	461a      	mov	r2, r3
 800506c:	2340      	movs	r3, #64	@ 0x40
 800506e:	6093      	str	r3, [r2, #8]
 8005070:	e31f      	b.n	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	78fa      	ldrb	r2, [r7, #3]
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f005 fcbe 	bl	800a9fc <USB_ReadChInterrupts>
 8005080:	4603      	mov	r3, r0
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b08      	cmp	r3, #8
 8005088:	d11a      	bne.n	80050c0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005096:	461a      	mov	r2, r3
 8005098:	2308      	movs	r3, #8
 800509a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	334d      	adds	r3, #77	@ 0x4d
 80050ac:	2206      	movs	r2, #6
 80050ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	78fa      	ldrb	r2, [r7, #3]
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f005 fe05 	bl	800acc8 <USB_HC_Halt>
 80050be:	e2f8      	b.n	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	78fa      	ldrb	r2, [r7, #3]
 80050c6:	4611      	mov	r1, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f005 fc97 	bl	800a9fc <USB_ReadChInterrupts>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d144      	bne.n	8005162 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	3344      	adds	r3, #68	@ 0x44
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	4613      	mov	r3, r2
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	334d      	adds	r3, #77	@ 0x4d
 80050fc:	2204      	movs	r2, #4
 80050fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	3319      	adds	r3, #25
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d114      	bne.n	8005140 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	3318      	adds	r3, #24
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800512c:	78fa      	ldrb	r2, [r7, #3]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	3319      	adds	r3, #25
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	78fa      	ldrb	r2, [r7, #3]
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f005 fdbd 	bl	800acc8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	4413      	add	r3, r2
 8005156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800515a:	461a      	mov	r2, r3
 800515c:	2310      	movs	r3, #16
 800515e:	6093      	str	r3, [r2, #8]
 8005160:	e2a7      	b.n	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f005 fc46 	bl	800a9fc <USB_ReadChInterrupts>
 8005170:	4603      	mov	r3, r0
 8005172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005176:	2b80      	cmp	r3, #128	@ 0x80
 8005178:	f040 8083 	bne.w	8005282 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	799b      	ldrb	r3, [r3, #6]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d111      	bne.n	80051a8 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005184:	78fa      	ldrb	r2, [r7, #3]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	334d      	adds	r3, #77	@ 0x4d
 8005194:	2207      	movs	r2, #7
 8005196:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	78fa      	ldrb	r2, [r7, #3]
 800519e:	4611      	mov	r1, r2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f005 fd91 	bl	800acc8 <USB_HC_Halt>
 80051a6:	e062      	b.n	800526e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3344      	adds	r3, #68	@ 0x44
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4403      	add	r3, r0
 80051c8:	3344      	adds	r3, #68	@ 0x44
 80051ca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	3344      	adds	r3, #68	@ 0x44
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d922      	bls.n	8005228 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3344      	adds	r3, #68	@ 0x44
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	334c      	adds	r3, #76	@ 0x4c
 8005206:	2204      	movs	r2, #4
 8005208:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	334c      	adds	r3, #76	@ 0x4c
 800521a:	781a      	ldrb	r2, [r3, #0]
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	4619      	mov	r1, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fe ff13 	bl	800404c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005226:	e022      	b.n	800526e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	334c      	adds	r3, #76	@ 0x4c
 8005238:	2202      	movs	r2, #2
 800523a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4413      	add	r3, r2
 8005244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005252:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800525a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005268:	461a      	mov	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800527a:	461a      	mov	r2, r3
 800527c:	2380      	movs	r3, #128	@ 0x80
 800527e:	6093      	str	r3, [r2, #8]
 8005280:	e217      	b.n	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f005 fbb6 	bl	800a9fc <USB_ReadChInterrupts>
 8005290:	4603      	mov	r3, r0
 8005292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529a:	d11b      	bne.n	80052d4 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	334d      	adds	r3, #77	@ 0x4d
 80052ac:	2209      	movs	r2, #9
 80052ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f005 fd05 	bl	800acc8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ca:	461a      	mov	r2, r3
 80052cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052d0:	6093      	str	r3, [r2, #8]
 80052d2:	e1ee      	b.n	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	78fa      	ldrb	r2, [r7, #3]
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f005 fb8d 	bl	800a9fc <USB_ReadChInterrupts>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	f040 81df 	bne.w	80056ac <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80052ee:	78fb      	ldrb	r3, [r7, #3]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052fa:	461a      	mov	r2, r3
 80052fc:	2302      	movs	r3, #2
 80052fe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	334d      	adds	r3, #77	@ 0x4d
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b01      	cmp	r3, #1
 8005314:	f040 8093 	bne.w	800543e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005318:	78fa      	ldrb	r2, [r7, #3]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	1a9b      	subs	r3, r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	334d      	adds	r3, #77	@ 0x4d
 8005328:	2202      	movs	r2, #2
 800532a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	334c      	adds	r3, #76	@ 0x4c
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005340:	78fa      	ldrb	r2, [r7, #3]
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	3326      	adds	r3, #38	@ 0x26
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d00b      	beq.n	800536e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	3326      	adds	r3, #38	@ 0x26
 8005366:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005368:	2b03      	cmp	r3, #3
 800536a:	f040 8190 	bne.w	800568e <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	799b      	ldrb	r3, [r3, #6]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d115      	bne.n	80053a2 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	333d      	adds	r3, #61	@ 0x3d
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	f083 0301 	eor.w	r3, r3, #1
 800538e:	b2d8      	uxtb	r0, r3
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	333d      	adds	r3, #61	@ 0x3d
 800539e:	4602      	mov	r2, r0
 80053a0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	799b      	ldrb	r3, [r3, #6]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	f040 8171 	bne.w	800568e <HCD_HC_OUT_IRQHandler+0x954>
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	3334      	adds	r3, #52	@ 0x34
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8165 	beq.w	800568e <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	3334      	adds	r3, #52	@ 0x34
 80053d4:	6819      	ldr	r1, [r3, #0]
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4403      	add	r3, r0
 80053e4:	3328      	adds	r3, #40	@ 0x28
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	440b      	add	r3, r1
 80053ea:	1e59      	subs	r1, r3, #1
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4403      	add	r3, r0
 80053fa:	3328      	adds	r3, #40	@ 0x28
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005402:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 813f 	beq.w	800568e <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	4613      	mov	r3, r2
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	333d      	adds	r3, #61	@ 0x3d
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	f083 0301 	eor.w	r3, r3, #1
 8005428:	b2d8      	uxtb	r0, r3
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	333d      	adds	r3, #61	@ 0x3d
 8005438:	4602      	mov	r2, r0
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	e127      	b.n	800568e <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800543e:	78fa      	ldrb	r2, [r7, #3]
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	334d      	adds	r3, #77	@ 0x4d
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d120      	bne.n	8005496 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	334d      	adds	r3, #77	@ 0x4d
 8005464:	2202      	movs	r2, #2
 8005466:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	331b      	adds	r3, #27
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b01      	cmp	r3, #1
 800547c:	f040 8107 	bne.w	800568e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	334c      	adds	r3, #76	@ 0x4c
 8005490:	2202      	movs	r2, #2
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	e0fb      	b.n	800568e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	334d      	adds	r3, #77	@ 0x4d
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d13a      	bne.n	8005522 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	334d      	adds	r3, #77	@ 0x4d
 80054bc:	2202      	movs	r2, #2
 80054be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054c0:	78fa      	ldrb	r2, [r7, #3]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	334c      	adds	r3, #76	@ 0x4c
 80054d0:	2202      	movs	r2, #2
 80054d2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	331b      	adds	r3, #27
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	f040 80d1 	bne.w	800568e <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80054ec:	78fa      	ldrb	r2, [r7, #3]
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	4613      	mov	r3, r2
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	331b      	adds	r3, #27
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4413      	add	r3, r2
 8005508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	78fa      	ldrb	r2, [r7, #3]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	440a      	add	r2, r1
 8005516:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800551a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800551e:	6053      	str	r3, [r2, #4]
 8005520:	e0b5      	b.n	800568e <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	334d      	adds	r3, #77	@ 0x4d
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b05      	cmp	r3, #5
 8005536:	d114      	bne.n	8005562 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	1a9b      	subs	r3, r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	334d      	adds	r3, #77	@ 0x4d
 8005548:	2202      	movs	r2, #2
 800554a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800554c:	78fa      	ldrb	r2, [r7, #3]
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	4613      	mov	r3, r2
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	334c      	adds	r3, #76	@ 0x4c
 800555c:	2202      	movs	r2, #2
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	e095      	b.n	800568e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005562:	78fa      	ldrb	r2, [r7, #3]
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	1a9b      	subs	r3, r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	334d      	adds	r3, #77	@ 0x4d
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b06      	cmp	r3, #6
 8005576:	d114      	bne.n	80055a2 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005578:	78fa      	ldrb	r2, [r7, #3]
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	334d      	adds	r3, #77	@ 0x4d
 8005588:	2202      	movs	r2, #2
 800558a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800558c:	78fa      	ldrb	r2, [r7, #3]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	334c      	adds	r3, #76	@ 0x4c
 800559c:	2205      	movs	r2, #5
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e075      	b.n	800568e <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	334d      	adds	r3, #77	@ 0x4d
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b07      	cmp	r3, #7
 80055b6:	d00a      	beq.n	80055ce <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	334d      	adds	r3, #77	@ 0x4d
 80055c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80055ca:	2b09      	cmp	r3, #9
 80055cc:	d170      	bne.n	80056b0 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	334d      	adds	r3, #77	@ 0x4d
 80055de:	2202      	movs	r2, #2
 80055e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	3344      	adds	r3, #68	@ 0x44
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	1c59      	adds	r1, r3, #1
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4403      	add	r3, r0
 8005602:	3344      	adds	r3, #68	@ 0x44
 8005604:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005606:	78fa      	ldrb	r2, [r7, #3]
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	3344      	adds	r3, #68	@ 0x44
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d914      	bls.n	8005646 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800561c:	78fa      	ldrb	r2, [r7, #3]
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	3344      	adds	r3, #68	@ 0x44
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	334c      	adds	r3, #76	@ 0x4c
 8005640:	2204      	movs	r2, #4
 8005642:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005644:	e022      	b.n	800568c <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005646:	78fa      	ldrb	r2, [r7, #3]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	334c      	adds	r3, #76	@ 0x4c
 8005656:	2202      	movs	r2, #2
 8005658:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005670:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005678:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800568c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	334c      	adds	r3, #76	@ 0x4c
 800569e:	781a      	ldrb	r2, [r3, #0]
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7fe fcd1 	bl	800404c <HAL_HCD_HC_NotifyURBChange_Callback>
 80056aa:	e002      	b.n	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80056ac:	bf00      	nop
 80056ae:	e000      	b.n	80056b2 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80056b0:	bf00      	nop
  }
}
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	@ 0x28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	0c5b      	lsrs	r3, r3, #17
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d004      	beq.n	80056fe <HCD_RXQLVL_IRQHandler+0x46>
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	f000 80b6 	beq.w	8005868 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80056fc:	e0b7      	b.n	800586e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80b3 	beq.w	800586c <HCD_RXQLVL_IRQHandler+0x1b4>
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4613      	mov	r3, r2
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	332c      	adds	r3, #44	@ 0x2c
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80a7 	beq.w	800586c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4613      	mov	r3, r2
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	3338      	adds	r3, #56	@ 0x38
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	18d1      	adds	r1, r2, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4613      	mov	r3, r2
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4403      	add	r3, r0
 8005742:	3334      	adds	r3, #52	@ 0x34
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4299      	cmp	r1, r3
 8005748:	f200 8083 	bhi.w	8005852 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4613      	mov	r3, r2
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	332c      	adds	r3, #44	@ 0x2c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	b292      	uxth	r2, r2
 8005766:	4619      	mov	r1, r3
 8005768:	f005 f8dd 	bl	800a926 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4613      	mov	r3, r2
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	332c      	adds	r3, #44	@ 0x2c
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	18d1      	adds	r1, r2, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4613      	mov	r3, r2
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4403      	add	r3, r0
 8005790:	332c      	adds	r3, #44	@ 0x2c
 8005792:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4613      	mov	r3, r2
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	3338      	adds	r3, #56	@ 0x38
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	18d1      	adds	r1, r2, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4613      	mov	r3, r2
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4403      	add	r3, r0
 80057b8:	3338      	adds	r3, #56	@ 0x38
 80057ba:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	0cdb      	lsrs	r3, r3, #19
 80057cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057d0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4613      	mov	r3, r2
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	1a9b      	subs	r3, r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	3328      	adds	r3, #40	@ 0x28
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d13f      	bne.n	800586c <HCD_RXQLVL_IRQHandler+0x1b4>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d03c      	beq.n	800586c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005808:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005810:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	4413      	add	r3, r2
 800581a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800581e:	461a      	mov	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4613      	mov	r3, r2
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	1a9b      	subs	r3, r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	333c      	adds	r3, #60	@ 0x3c
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f083 0301 	eor.w	r3, r3, #1
 800583a:	b2d8      	uxtb	r0, r3
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4613      	mov	r3, r2
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	333c      	adds	r3, #60	@ 0x3c
 800584c:	4602      	mov	r2, r0
 800584e:	701a      	strb	r2, [r3, #0]
      break;
 8005850:	e00c      	b.n	800586c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4613      	mov	r3, r2
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	1a9b      	subs	r3, r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	334c      	adds	r3, #76	@ 0x4c
 8005862:	2204      	movs	r2, #4
 8005864:	701a      	strb	r2, [r3, #0]
      break;
 8005866:	e001      	b.n	800586c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005868:	bf00      	nop
 800586a:	e000      	b.n	800586e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800586c:	bf00      	nop
  }
}
 800586e:	bf00      	nop
 8005870:	3728      	adds	r7, #40	@ 0x28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b086      	sub	sp, #24
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80058a2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d10b      	bne.n	80058c6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d102      	bne.n	80058be <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7fe fb9f 	bl	8003ffc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f043 0302 	orr.w	r3, r3, #2
 80058c4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d132      	bne.n	8005936 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f043 0308 	orr.w	r3, r3, #8
 80058d6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d126      	bne.n	8005930 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	7a5b      	ldrb	r3, [r3, #9]
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d113      	bne.n	8005912 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80058f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058f4:	d106      	bne.n	8005904 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2102      	movs	r1, #2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f005 f995 	bl	800ac2c <USB_InitFSLSPClkSel>
 8005902:	e011      	b.n	8005928 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2101      	movs	r1, #1
 800590a:	4618      	mov	r0, r3
 800590c:	f005 f98e 	bl	800ac2c <USB_InitFSLSPClkSel>
 8005910:	e00a      	b.n	8005928 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	79db      	ldrb	r3, [r3, #7]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d106      	bne.n	8005928 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005920:	461a      	mov	r2, r3
 8005922:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005926:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7fe fb7b 	bl	8004024 <HAL_HCD_PortEnabled_Callback>
 800592e:	e002      	b.n	8005936 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fe fb81 	bl	8004038 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b20      	cmp	r3, #32
 800593e:	d103      	bne.n	8005948 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f043 0320 	orr.w	r3, r3, #32
 8005946:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800594e:	461a      	mov	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6013      	str	r3, [r2, #0]
}
 8005954:	bf00      	nop
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e12b      	b.n	8005bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fb fd82 	bl	800148c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2224      	movs	r2, #36	@ 0x24
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0201 	bic.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059c0:	f000 ff82 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 80059c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	4a81      	ldr	r2, [pc, #516]	@ (8005bd0 <HAL_I2C_Init+0x274>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d807      	bhi.n	80059e0 <HAL_I2C_Init+0x84>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4a80      	ldr	r2, [pc, #512]	@ (8005bd4 <HAL_I2C_Init+0x278>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bf94      	ite	ls
 80059d8:	2301      	movls	r3, #1
 80059da:	2300      	movhi	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	e006      	b.n	80059ee <HAL_I2C_Init+0x92>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a7d      	ldr	r2, [pc, #500]	@ (8005bd8 <HAL_I2C_Init+0x27c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	bf94      	ite	ls
 80059e8:	2301      	movls	r3, #1
 80059ea:	2300      	movhi	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0e7      	b.n	8005bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a78      	ldr	r2, [pc, #480]	@ (8005bdc <HAL_I2C_Init+0x280>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	0c9b      	lsrs	r3, r3, #18
 8005a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4a6a      	ldr	r2, [pc, #424]	@ (8005bd0 <HAL_I2C_Init+0x274>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d802      	bhi.n	8005a30 <HAL_I2C_Init+0xd4>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	e009      	b.n	8005a44 <HAL_I2C_Init+0xe8>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	4a69      	ldr	r2, [pc, #420]	@ (8005be0 <HAL_I2C_Init+0x284>)
 8005a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a40:	099b      	lsrs	r3, r3, #6
 8005a42:	3301      	adds	r3, #1
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	495c      	ldr	r1, [pc, #368]	@ (8005bd0 <HAL_I2C_Init+0x274>)
 8005a60:	428b      	cmp	r3, r1
 8005a62:	d819      	bhi.n	8005a98 <HAL_I2C_Init+0x13c>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	1e59      	subs	r1, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a72:	1c59      	adds	r1, r3, #1
 8005a74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a78:	400b      	ands	r3, r1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_I2C_Init+0x138>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	1e59      	subs	r1, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a92:	e051      	b.n	8005b38 <HAL_I2C_Init+0x1dc>
 8005a94:	2304      	movs	r3, #4
 8005a96:	e04f      	b.n	8005b38 <HAL_I2C_Init+0x1dc>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d111      	bne.n	8005ac4 <HAL_I2C_Init+0x168>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	1e58      	subs	r0, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6859      	ldr	r1, [r3, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	440b      	add	r3, r1
 8005aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	e012      	b.n	8005aea <HAL_I2C_Init+0x18e>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1e58      	subs	r0, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	0099      	lsls	r1, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ada:	3301      	adds	r3, #1
 8005adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bf0c      	ite	eq
 8005ae4:	2301      	moveq	r3, #1
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_I2C_Init+0x196>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e022      	b.n	8005b38 <HAL_I2C_Init+0x1dc>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10e      	bne.n	8005b18 <HAL_I2C_Init+0x1bc>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1e58      	subs	r0, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	440b      	add	r3, r1
 8005b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b16:	e00f      	b.n	8005b38 <HAL_I2C_Init+0x1dc>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	1e58      	subs	r0, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6859      	ldr	r1, [r3, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	0099      	lsls	r1, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b2e:	3301      	adds	r3, #1
 8005b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	6809      	ldr	r1, [r1, #0]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6911      	ldr	r1, [r2, #16]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	68d2      	ldr	r2, [r2, #12]
 8005b72:	4311      	orrs	r1, r2
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695a      	ldr	r2, [r3, #20]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	000186a0 	.word	0x000186a0
 8005bd4:	001e847f 	.word	0x001e847f
 8005bd8:	003d08ff 	.word	0x003d08ff
 8005bdc:	431bde83 	.word	0x431bde83
 8005be0:	10624dd3 	.word	0x10624dd3

08005be4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e0bf      	b.n	8005d76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb fcbc 	bl	8001588 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005c26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6999      	ldr	r1, [r3, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6899      	ldr	r1, [r3, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	4b4a      	ldr	r3, [pc, #296]	@ (8005d80 <HAL_LTDC_Init+0x19c>)
 8005c58:	400b      	ands	r3, r1
 8005c5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	041b      	lsls	r3, r3, #16
 8005c62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6899      	ldr	r1, [r3, #8]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68d9      	ldr	r1, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	4b3e      	ldr	r3, [pc, #248]	@ (8005d80 <HAL_LTDC_Init+0x19c>)
 8005c86:	400b      	ands	r3, r1
 8005c88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68d9      	ldr	r1, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1a      	ldr	r2, [r3, #32]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6919      	ldr	r1, [r3, #16]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b33      	ldr	r3, [pc, #204]	@ (8005d80 <HAL_LTDC_Init+0x19c>)
 8005cb4:	400b      	ands	r3, r1
 8005cb6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	041b      	lsls	r3, r3, #16
 8005cbe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6919      	ldr	r1, [r3, #16]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6959      	ldr	r1, [r3, #20]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	4b27      	ldr	r3, [pc, #156]	@ (8005d80 <HAL_LTDC_Init+0x19c>)
 8005ce2:	400b      	ands	r3, r1
 8005ce4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6959      	ldr	r1, [r3, #20]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0206 	orr.w	r2, r2, #6
 8005d52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	f000f800 	.word	0xf000f800

08005d84 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d92:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d9a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d023      	beq.n	8005dee <HAL_LTDC_IRQHandler+0x6a>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01e      	beq.n	8005dee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0204 	bic.w	r2, r2, #4
 8005dbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005dce:	f043 0201 	orr.w	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f86f 	bl	8005ecc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d023      	beq.n	8005e40 <HAL_LTDC_IRQHandler+0xbc>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01e      	beq.n	8005e40 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0202 	bic.w	r2, r2, #2
 8005e10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2202      	movs	r2, #2
 8005e18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e20:	f043 0202 	orr.w	r2, r3, #2
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f846 	bl	8005ecc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01b      	beq.n	8005e82 <HAL_LTDC_IRQHandler+0xfe>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d016      	beq.n	8005e82 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f82f 	bl	8005ee0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01b      	beq.n	8005ec4 <HAL_LTDC_IRQHandler+0x140>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d016      	beq.n	8005ec4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0208 	bic.w	r2, r2, #8
 8005ea4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2208      	movs	r2, #8
 8005eac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f818 	bl	8005ef4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f08:	b5b0      	push	{r4, r5, r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_LTDC_ConfigLayer+0x1a>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e02c      	b.n	8005f7c <HAL_LTDC_ConfigLayer+0x74>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2134      	movs	r1, #52	@ 0x34
 8005f38:	fb01 f303 	mul.w	r3, r1, r3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4614      	mov	r4, r2
 8005f46:	461d      	mov	r5, r3
 8005f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f811 	bl	8005f84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2201      	movs	r2, #1
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bdb0      	pop	{r4, r5, r7, pc}

08005f84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b089      	sub	sp, #36	@ 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	0c1b      	lsrs	r3, r3, #16
 8005f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa0:	4413      	add	r3, r2
 8005fa2:	041b      	lsls	r3, r3, #16
 8005fa4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	01db      	lsls	r3, r3, #7
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3384      	adds	r3, #132	@ 0x84
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	4611      	mov	r1, r2
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	01d2      	lsls	r2, r2, #7
 8005fc0:	440a      	add	r2, r1
 8005fc2:	3284      	adds	r2, #132	@ 0x84
 8005fc4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005fc8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005fda:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005fdc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	01db      	lsls	r3, r3, #7
 8005fe8:	440b      	add	r3, r1
 8005fea:	3384      	adds	r3, #132	@ 0x84
 8005fec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005ff2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006002:	4413      	add	r3, r2
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	01db      	lsls	r3, r3, #7
 8006012:	4413      	add	r3, r2
 8006014:	3384      	adds	r3, #132	@ 0x84
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	4611      	mov	r1, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	01d2      	lsls	r2, r2, #7
 8006022:	440a      	add	r2, r1
 8006024:	3284      	adds	r2, #132	@ 0x84
 8006026:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800602a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800603a:	4413      	add	r3, r2
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4619      	mov	r1, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	01db      	lsls	r3, r3, #7
 8006048:	440b      	add	r3, r1
 800604a:	3384      	adds	r3, #132	@ 0x84
 800604c:	4619      	mov	r1, r3
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4313      	orrs	r3, r2
 8006052:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	01db      	lsls	r3, r3, #7
 800605e:	4413      	add	r3, r2
 8006060:	3384      	adds	r3, #132	@ 0x84
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	4611      	mov	r1, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	01d2      	lsls	r2, r2, #7
 800606e:	440a      	add	r2, r1
 8006070:	3284      	adds	r2, #132	@ 0x84
 8006072:	f023 0307 	bic.w	r3, r3, #7
 8006076:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	01db      	lsls	r3, r3, #7
 8006082:	4413      	add	r3, r2
 8006084:	3384      	adds	r3, #132	@ 0x84
 8006086:	461a      	mov	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	061b      	lsls	r3, r3, #24
 80060a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	01db      	lsls	r3, r3, #7
 80060b4:	4413      	add	r3, r2
 80060b6:	3384      	adds	r3, #132	@ 0x84
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	01db      	lsls	r3, r3, #7
 80060c4:	4413      	add	r3, r2
 80060c6:	3384      	adds	r3, #132	@ 0x84
 80060c8:	461a      	mov	r2, r3
 80060ca:	2300      	movs	r3, #0
 80060cc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060d4:	461a      	mov	r2, r3
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	431a      	orrs	r2, r3
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	431a      	orrs	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4619      	mov	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	01db      	lsls	r3, r3, #7
 80060e8:	440b      	add	r3, r1
 80060ea:	3384      	adds	r3, #132	@ 0x84
 80060ec:	4619      	mov	r1, r3
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	01db      	lsls	r3, r3, #7
 80060fe:	4413      	add	r3, r2
 8006100:	3384      	adds	r3, #132	@ 0x84
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	4611      	mov	r1, r2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	01d2      	lsls	r2, r2, #7
 800610e:	440a      	add	r2, r1
 8006110:	3284      	adds	r2, #132	@ 0x84
 8006112:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006116:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	01db      	lsls	r3, r3, #7
 8006122:	4413      	add	r3, r2
 8006124:	3384      	adds	r3, #132	@ 0x84
 8006126:	461a      	mov	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	01db      	lsls	r3, r3, #7
 8006138:	4413      	add	r3, r2
 800613a:	3384      	adds	r3, #132	@ 0x84
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	4611      	mov	r1, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	01d2      	lsls	r2, r2, #7
 8006148:	440a      	add	r2, r1
 800614a:	3284      	adds	r2, #132	@ 0x84
 800614c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006150:	f023 0307 	bic.w	r3, r3, #7
 8006154:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	69da      	ldr	r2, [r3, #28]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	6809      	ldr	r1, [r1, #0]
 8006162:	4608      	mov	r0, r1
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	01c9      	lsls	r1, r1, #7
 8006168:	4401      	add	r1, r0
 800616a:	3184      	adds	r1, #132	@ 0x84
 800616c:	4313      	orrs	r3, r2
 800616e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	01db      	lsls	r3, r3, #7
 800617a:	4413      	add	r3, r2
 800617c:	3384      	adds	r3, #132	@ 0x84
 800617e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	01db      	lsls	r3, r3, #7
 800618a:	4413      	add	r3, r2
 800618c:	3384      	adds	r3, #132	@ 0x84
 800618e:	461a      	mov	r2, r3
 8006190:	2300      	movs	r3, #0
 8006192:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	01db      	lsls	r3, r3, #7
 800619e:	4413      	add	r3, r2
 80061a0:	3384      	adds	r3, #132	@ 0x84
 80061a2:	461a      	mov	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80061b2:	2304      	movs	r3, #4
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	e01b      	b.n	80061f0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d102      	bne.n	80061c6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80061c0:	2303      	movs	r3, #3
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e014      	b.n	80061f0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d00b      	beq.n	80061e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d007      	beq.n	80061e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80061da:	2b03      	cmp	r3, #3
 80061dc:	d003      	beq.n	80061e6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80061e2:	2b07      	cmp	r3, #7
 80061e4:	d102      	bne.n	80061ec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80061e6:	2302      	movs	r3, #2
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	e001      	b.n	80061f0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80061ec:	2301      	movs	r3, #1
 80061ee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	01db      	lsls	r3, r3, #7
 80061fa:	4413      	add	r3, r2
 80061fc:	3384      	adds	r3, #132	@ 0x84
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	4611      	mov	r1, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	01d2      	lsls	r2, r2, #7
 800620a:	440a      	add	r2, r1
 800620c:	3284      	adds	r2, #132	@ 0x84
 800620e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006212:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	fb02 f303 	mul.w	r3, r2, r3
 800621e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6859      	ldr	r1, [r3, #4]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	1acb      	subs	r3, r1, r3
 800622a:	69f9      	ldr	r1, [r7, #28]
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	6809      	ldr	r1, [r1, #0]
 8006236:	4608      	mov	r0, r1
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	01c9      	lsls	r1, r1, #7
 800623c:	4401      	add	r1, r0
 800623e:	3184      	adds	r1, #132	@ 0x84
 8006240:	4313      	orrs	r3, r2
 8006242:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	01db      	lsls	r3, r3, #7
 800624e:	4413      	add	r3, r2
 8006250:	3384      	adds	r3, #132	@ 0x84
 8006252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	4611      	mov	r1, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	01d2      	lsls	r2, r2, #7
 800625e:	440a      	add	r2, r1
 8006260:	3284      	adds	r2, #132	@ 0x84
 8006262:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006266:	f023 0307 	bic.w	r3, r3, #7
 800626a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	01db      	lsls	r3, r3, #7
 8006276:	4413      	add	r3, r2
 8006278:	3384      	adds	r3, #132	@ 0x84
 800627a:	461a      	mov	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	01db      	lsls	r3, r3, #7
 800628c:	4413      	add	r3, r2
 800628e:	3384      	adds	r3, #132	@ 0x84
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	4611      	mov	r1, r2
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	01d2      	lsls	r2, r2, #7
 800629c:	440a      	add	r2, r1
 800629e:	3284      	adds	r2, #132	@ 0x84
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	6013      	str	r3, [r2, #0]
}
 80062a6:	bf00      	nop
 80062a8:	3724      	adds	r7, #36	@ 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80062be:	2300      	movs	r3, #0
 80062c0:	603b      	str	r3, [r7, #0]
 80062c2:	4b20      	ldr	r3, [pc, #128]	@ (8006344 <HAL_PWREx_EnableOverDrive+0x90>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <HAL_PWREx_EnableOverDrive+0x90>)
 80062c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80062ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006344 <HAL_PWREx_EnableOverDrive+0x90>)
 80062d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80062da:	4b1b      	ldr	r3, [pc, #108]	@ (8006348 <HAL_PWREx_EnableOverDrive+0x94>)
 80062dc:	2201      	movs	r2, #1
 80062de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062e0:	f7fb fe6e 	bl	8001fc0 <HAL_GetTick>
 80062e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062e6:	e009      	b.n	80062fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062e8:	f7fb fe6a 	bl	8001fc0 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062f6:	d901      	bls.n	80062fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e01f      	b.n	800633c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062fc:	4b13      	ldr	r3, [pc, #76]	@ (800634c <HAL_PWREx_EnableOverDrive+0x98>)
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006308:	d1ee      	bne.n	80062e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800630a:	4b11      	ldr	r3, [pc, #68]	@ (8006350 <HAL_PWREx_EnableOverDrive+0x9c>)
 800630c:	2201      	movs	r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006310:	f7fb fe56 	bl	8001fc0 <HAL_GetTick>
 8006314:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006316:	e009      	b.n	800632c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006318:	f7fb fe52 	bl	8001fc0 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006326:	d901      	bls.n	800632c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e007      	b.n	800633c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800632c:	4b07      	ldr	r3, [pc, #28]	@ (800634c <HAL_PWREx_EnableOverDrive+0x98>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006338:	d1ee      	bne.n	8006318 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40023800 	.word	0x40023800
 8006348:	420e0040 	.word	0x420e0040
 800634c:	40007000 	.word	0x40007000
 8006350:	420e0044 	.word	0x420e0044

08006354 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af02      	add	r7, sp, #8
 800635a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800635c:	f7fb fe30 	bl	8001fc0 <HAL_GetTick>
 8006360:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e069      	b.n	8006440 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10b      	bne.n	8006390 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7fb f929 	bl	80015d8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006386:	f241 3188 	movw	r1, #5000	@ 0x1388
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f85e 	bl	800644c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	3b01      	subs	r3, #1
 80063a0:	021a      	lsls	r2, r3, #8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	2120      	movs	r1, #32
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f856 	bl	8006468 <QSPI_WaitFlagStateUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80063c0:	7afb      	ldrb	r3, [r7, #11]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d137      	bne.n	8006436 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80063d0:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6852      	ldr	r2, [r2, #4]
 80063d8:	0611      	lsls	r1, r2, #24
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	68d2      	ldr	r2, [r2, #12]
 80063de:	4311      	orrs	r1, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	69d2      	ldr	r2, [r2, #28]
 80063e4:	4311      	orrs	r1, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6a12      	ldr	r2, [r2, #32]
 80063ea:	4311      	orrs	r1, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6812      	ldr	r2, [r2, #0]
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	4b13      	ldr	r3, [pc, #76]	@ (8006448 <HAL_QSPI_Init+0xf4>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6912      	ldr	r2, [r2, #16]
 8006402:	0411      	lsls	r1, r2, #16
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6952      	ldr	r2, [r2, #20]
 8006408:	4311      	orrs	r1, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6992      	ldr	r2, [r2, #24]
 800640e:	4311      	orrs	r1, r2
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	430b      	orrs	r3, r1
 8006416:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800643e:	7afb      	ldrb	r3, [r7, #11]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	ffe0f8fe 	.word	0xffe0f8fe

0800644c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	4613      	mov	r3, r2
 8006476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006478:	e01a      	b.n	80064b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d016      	beq.n	80064b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006482:	f7fb fd9d 	bl	8001fc0 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	429a      	cmp	r2, r3
 8006490:	d302      	bcc.n	8006498 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10b      	bne.n	80064b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2204      	movs	r2, #4
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a4:	f043 0201 	orr.w	r2, r3, #1
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e00e      	b.n	80064ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4013      	ands	r3, r2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bf14      	ite	ne
 80064be:	2301      	movne	r3, #1
 80064c0:	2300      	moveq	r3, #0
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	461a      	mov	r2, r3
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d1d6      	bne.n	800647a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e0cc      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064ec:	4b68      	ldr	r3, [pc, #416]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d90c      	bls.n	8006514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	4b65      	ldr	r3, [pc, #404]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b63      	ldr	r3, [pc, #396]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d001      	beq.n	8006514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0b8      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d020      	beq.n	8006562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800652c:	4b59      	ldr	r3, [pc, #356]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a58      	ldr	r2, [pc, #352]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006536:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006544:	4b53      	ldr	r3, [pc, #332]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a52      	ldr	r2, [pc, #328]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800654a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800654e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006550:	4b50      	ldr	r3, [pc, #320]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	494d      	ldr	r1, [pc, #308]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	4313      	orrs	r3, r2
 8006560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d044      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d107      	bne.n	8006586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	4b47      	ldr	r3, [pc, #284]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d119      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e07f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d003      	beq.n	8006596 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006592:	2b03      	cmp	r3, #3
 8006594:	d107      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006596:	4b3f      	ldr	r3, [pc, #252]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e06f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e067      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065b6:	4b37      	ldr	r3, [pc, #220]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 0203 	bic.w	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4934      	ldr	r1, [pc, #208]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c8:	f7fb fcfa 	bl	8001fc0 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d0:	f7fb fcf6 	bl	8001fc0 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e04f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 020c 	and.w	r2, r3, #12
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d1eb      	bne.n	80065d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065f8:	4b25      	ldr	r3, [pc, #148]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d20c      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b22      	ldr	r3, [pc, #136]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b20      	ldr	r3, [pc, #128]	@ (8006690 <HAL_RCC_ClockConfig+0x1b8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e032      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800662c:	4b19      	ldr	r3, [pc, #100]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4916      	ldr	r1, [pc, #88]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	4313      	orrs	r3, r2
 800663c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800664a:	4b12      	ldr	r3, [pc, #72]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	490e      	ldr	r1, [pc, #56]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800665e:	f000 f821 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8006662:	4602      	mov	r2, r0
 8006664:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	490a      	ldr	r1, [pc, #40]	@ (8006698 <HAL_RCC_ClockConfig+0x1c0>)
 8006670:	5ccb      	ldrb	r3, [r1, r3]
 8006672:	fa22 f303 	lsr.w	r3, r2, r3
 8006676:	4a09      	ldr	r2, [pc, #36]	@ (800669c <HAL_RCC_ClockConfig+0x1c4>)
 8006678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800667a:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <HAL_RCC_ClockConfig+0x1c8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fb fb28 	bl	8001cd4 <HAL_InitTick>

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40023c00 	.word	0x40023c00
 8006694:	40023800 	.word	0x40023800
 8006698:	0800e03c 	.word	0x0800e03c
 800669c:	2000001c 	.word	0x2000001c
 80066a0:	20000020 	.word	0x20000020

080066a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a8:	b094      	sub	sp, #80	@ 0x50
 80066aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066bc:	4b79      	ldr	r3, [pc, #484]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 030c 	and.w	r3, r3, #12
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d00d      	beq.n	80066e4 <HAL_RCC_GetSysClockFreq+0x40>
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	f200 80e1 	bhi.w	8006890 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_RCC_GetSysClockFreq+0x34>
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d003      	beq.n	80066de <HAL_RCC_GetSysClockFreq+0x3a>
 80066d6:	e0db      	b.n	8006890 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066d8:	4b73      	ldr	r3, [pc, #460]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80066da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066dc:	e0db      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066de:	4b73      	ldr	r3, [pc, #460]	@ (80068ac <HAL_RCC_GetSysClockFreq+0x208>)
 80066e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066e2:	e0d8      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066e4:	4b6f      	ldr	r3, [pc, #444]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066ee:	4b6d      	ldr	r3, [pc, #436]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d063      	beq.n	80067c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066fa:	4b6a      	ldr	r3, [pc, #424]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	099b      	lsrs	r3, r3, #6
 8006700:	2200      	movs	r2, #0
 8006702:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006704:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800670c:	633b      	str	r3, [r7, #48]	@ 0x30
 800670e:	2300      	movs	r3, #0
 8006710:	637b      	str	r3, [r7, #52]	@ 0x34
 8006712:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006716:	4622      	mov	r2, r4
 8006718:	462b      	mov	r3, r5
 800671a:	f04f 0000 	mov.w	r0, #0
 800671e:	f04f 0100 	mov.w	r1, #0
 8006722:	0159      	lsls	r1, r3, #5
 8006724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006728:	0150      	lsls	r0, r2, #5
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4621      	mov	r1, r4
 8006730:	1a51      	subs	r1, r2, r1
 8006732:	6139      	str	r1, [r7, #16]
 8006734:	4629      	mov	r1, r5
 8006736:	eb63 0301 	sbc.w	r3, r3, r1
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006748:	4659      	mov	r1, fp
 800674a:	018b      	lsls	r3, r1, #6
 800674c:	4651      	mov	r1, sl
 800674e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006752:	4651      	mov	r1, sl
 8006754:	018a      	lsls	r2, r1, #6
 8006756:	4651      	mov	r1, sl
 8006758:	ebb2 0801 	subs.w	r8, r2, r1
 800675c:	4659      	mov	r1, fp
 800675e:	eb63 0901 	sbc.w	r9, r3, r1
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	f04f 0300 	mov.w	r3, #0
 800676a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800676e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006776:	4690      	mov	r8, r2
 8006778:	4699      	mov	r9, r3
 800677a:	4623      	mov	r3, r4
 800677c:	eb18 0303 	adds.w	r3, r8, r3
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	462b      	mov	r3, r5
 8006784:	eb49 0303 	adc.w	r3, r9, r3
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006796:	4629      	mov	r1, r5
 8006798:	024b      	lsls	r3, r1, #9
 800679a:	4621      	mov	r1, r4
 800679c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067a0:	4621      	mov	r1, r4
 80067a2:	024a      	lsls	r2, r1, #9
 80067a4:	4610      	mov	r0, r2
 80067a6:	4619      	mov	r1, r3
 80067a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067aa:	2200      	movs	r2, #0
 80067ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067b4:	f7f9 fd26 	bl	8000204 <__aeabi_uldivmod>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4613      	mov	r3, r2
 80067be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067c0:	e058      	b.n	8006874 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067c2:	4b38      	ldr	r3, [pc, #224]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	099b      	lsrs	r3, r3, #6
 80067c8:	2200      	movs	r2, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	4611      	mov	r1, r2
 80067ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067d2:	623b      	str	r3, [r7, #32]
 80067d4:	2300      	movs	r3, #0
 80067d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067dc:	4642      	mov	r2, r8
 80067de:	464b      	mov	r3, r9
 80067e0:	f04f 0000 	mov.w	r0, #0
 80067e4:	f04f 0100 	mov.w	r1, #0
 80067e8:	0159      	lsls	r1, r3, #5
 80067ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067ee:	0150      	lsls	r0, r2, #5
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4641      	mov	r1, r8
 80067f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80067fa:	4649      	mov	r1, r9
 80067fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800680c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006810:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006814:	ebb2 040a 	subs.w	r4, r2, sl
 8006818:	eb63 050b 	sbc.w	r5, r3, fp
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	00eb      	lsls	r3, r5, #3
 8006826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800682a:	00e2      	lsls	r2, r4, #3
 800682c:	4614      	mov	r4, r2
 800682e:	461d      	mov	r5, r3
 8006830:	4643      	mov	r3, r8
 8006832:	18e3      	adds	r3, r4, r3
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	464b      	mov	r3, r9
 8006838:	eb45 0303 	adc.w	r3, r5, r3
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	f04f 0300 	mov.w	r3, #0
 8006846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800684a:	4629      	mov	r1, r5
 800684c:	028b      	lsls	r3, r1, #10
 800684e:	4621      	mov	r1, r4
 8006850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006854:	4621      	mov	r1, r4
 8006856:	028a      	lsls	r2, r1, #10
 8006858:	4610      	mov	r0, r2
 800685a:	4619      	mov	r1, r3
 800685c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800685e:	2200      	movs	r2, #0
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	61fa      	str	r2, [r7, #28]
 8006864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006868:	f7f9 fccc 	bl	8000204 <__aeabi_uldivmod>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4613      	mov	r3, r2
 8006872:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006874:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	0c1b      	lsrs	r3, r3, #16
 800687a:	f003 0303 	and.w	r3, r3, #3
 800687e:	3301      	adds	r3, #1
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006884:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006888:	fbb2 f3f3 	udiv	r3, r2, r3
 800688c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800688e:	e002      	b.n	8006896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006890:	4b05      	ldr	r3, [pc, #20]	@ (80068a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006892:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006898:	4618      	mov	r0, r3
 800689a:	3750      	adds	r7, #80	@ 0x50
 800689c:	46bd      	mov	sp, r7
 800689e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068a2:	bf00      	nop
 80068a4:	40023800 	.word	0x40023800
 80068a8:	00f42400 	.word	0x00f42400
 80068ac:	007a1200 	.word	0x007a1200

080068b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068b4:	4b03      	ldr	r3, [pc, #12]	@ (80068c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068b6:	681b      	ldr	r3, [r3, #0]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	2000001c 	.word	0x2000001c

080068c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068cc:	f7ff fff0 	bl	80068b0 <HAL_RCC_GetHCLKFreq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	0a9b      	lsrs	r3, r3, #10
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	4903      	ldr	r1, [pc, #12]	@ (80068ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80068de:	5ccb      	ldrb	r3, [r1, r3]
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40023800 	.word	0x40023800
 80068ec:	0800e04c 	.word	0x0800e04c

080068f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068f4:	f7ff ffdc 	bl	80068b0 <HAL_RCC_GetHCLKFreq>
 80068f8:	4602      	mov	r2, r0
 80068fa:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	0b5b      	lsrs	r3, r3, #13
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	4903      	ldr	r1, [pc, #12]	@ (8006914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006906:	5ccb      	ldrb	r3, [r1, r3]
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800690c:	4618      	mov	r0, r3
 800690e:	bd80      	pop	{r7, pc}
 8006910:	40023800 	.word	0x40023800
 8006914:	0800e04c 	.word	0x0800e04c

08006918 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	220f      	movs	r2, #15
 8006926:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006928:	4b12      	ldr	r3, [pc, #72]	@ (8006974 <HAL_RCC_GetClockConfig+0x5c>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 0203 	and.w	r2, r3, #3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006934:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <HAL_RCC_GetClockConfig+0x5c>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006940:	4b0c      	ldr	r3, [pc, #48]	@ (8006974 <HAL_RCC_GetClockConfig+0x5c>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800694c:	4b09      	ldr	r3, [pc, #36]	@ (8006974 <HAL_RCC_GetClockConfig+0x5c>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	08db      	lsrs	r3, r3, #3
 8006952:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800695a:	4b07      	ldr	r3, [pc, #28]	@ (8006978 <HAL_RCC_GetClockConfig+0x60>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 020f 	and.w	r2, r3, #15
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	601a      	str	r2, [r3, #0]
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40023800 	.word	0x40023800
 8006978:	40023c00 	.word	0x40023c00

0800697c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069a4:	4b66      	ldr	r3, [pc, #408]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80069a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069aa:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b2:	4963      	ldr	r1, [pc, #396]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80069c6:	4b5e      	ldr	r3, [pc, #376]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80069c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069cc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d4:	495a      	ldr	r1, [pc, #360]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10b      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d075      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a00:	4b50      	ldr	r3, [pc, #320]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a06:	f7fb fadb 	bl	8001fc0 <HAL_GetTick>
 8006a0a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a0c:	e008      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a0e:	f7fb fad7 	bl	8001fc0 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e1dc      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a20:	4b47      	ldr	r3, [pc, #284]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1f0      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d009      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	019a      	lsls	r2, r3, #6
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	071b      	lsls	r3, r3, #28
 8006a44:	493e      	ldr	r1, [pc, #248]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01f      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a58:	4b39      	ldr	r3, [pc, #228]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a5e:	0f1b      	lsrs	r3, r3, #28
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	019a      	lsls	r2, r3, #6
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	061b      	lsls	r3, r3, #24
 8006a72:	431a      	orrs	r2, r3
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	071b      	lsls	r3, r3, #28
 8006a78:	4931      	ldr	r1, [pc, #196]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a80:	4b2f      	ldr	r3, [pc, #188]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a86:	f023 021f 	bic.w	r2, r3, #31
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	492b      	ldr	r1, [pc, #172]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	019a      	lsls	r2, r3, #6
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	061b      	lsls	r3, r3, #24
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	071b      	lsls	r3, r3, #28
 8006ab8:	4921      	ldr	r1, [pc, #132]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ac0:	4b20      	ldr	r3, [pc, #128]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ac6:	f7fb fa7b 	bl	8001fc0 <HAL_GetTick>
 8006aca:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ace:	f7fb fa77 	bl	8001fc0 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e17c      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ae0:	4b17      	ldr	r3, [pc, #92]	@ (8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d0f0      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d112      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10c      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80ce 	beq.w	8006cae <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006b16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b1a:	f040 80c8 	bne.w	8006cae <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b24:	f7fb fa4c 	bl	8001fc0 <HAL_GetTick>
 8006b28:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b2a:	e00f      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b2c:	f7fb fa48 	bl	8001fc0 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d908      	bls.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e14d      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8006b3e:	bf00      	nop
 8006b40:	40023800 	.word	0x40023800
 8006b44:	42470068 	.word	0x42470068
 8006b48:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b4c:	4ba5      	ldr	r3, [pc, #660]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b58:	d0e8      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d02e      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006b66:	4b9f      	ldr	r3, [pc, #636]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	3301      	adds	r3, #1
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b78:	4b9a      	ldr	r3, [pc, #616]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7e:	0f1b      	lsrs	r3, r3, #28
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	019a      	lsls	r2, r3, #6
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	3b01      	subs	r3, #1
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	061b      	lsls	r3, r3, #24
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	071b      	lsls	r3, r3, #28
 8006ba2:	4990      	ldr	r1, [pc, #576]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006baa:	4b8e      	ldr	r3, [pc, #568]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bb0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	4989      	ldr	r1, [pc, #548]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d02c      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006bd0:	4b84      	ldr	r3, [pc, #528]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd6:	0c1b      	lsrs	r3, r3, #16
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	3301      	adds	r3, #1
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006be2:	4b80      	ldr	r3, [pc, #512]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be8:	0e1b      	lsrs	r3, r3, #24
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	019a      	lsls	r2, r3, #6
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	041b      	lsls	r3, r3, #16
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	061b      	lsls	r3, r3, #24
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	071b      	lsls	r3, r3, #28
 8006c0c:	4975      	ldr	r1, [pc, #468]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c14:	4b73      	ldr	r3, [pc, #460]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c22:	4970      	ldr	r1, [pc, #448]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d024      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c3e:	d11f      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c40:	4b68      	ldr	r3, [pc, #416]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c46:	0e1b      	lsrs	r3, r3, #24
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c4e:	4b65      	ldr	r3, [pc, #404]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c54:	0f1b      	lsrs	r3, r3, #28
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	019a      	lsls	r2, r3, #6
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	085b      	lsrs	r3, r3, #1
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	041b      	lsls	r3, r3, #16
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	061b      	lsls	r3, r3, #24
 8006c72:	431a      	orrs	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	071b      	lsls	r3, r3, #28
 8006c78:	495a      	ldr	r1, [pc, #360]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c80:	4b59      	ldr	r3, [pc, #356]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c86:	f7fb f99b 	bl	8001fc0 <HAL_GetTick>
 8006c8a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c8e:	f7fb f997 	bl	8001fc0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e09c      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ca0:	4b50      	ldr	r3, [pc, #320]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cac:	d1ef      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 8083 	beq.w	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	4b48      	ldr	r3, [pc, #288]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc4:	4a47      	ldr	r2, [pc, #284]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ccc:	4b45      	ldr	r3, [pc, #276]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cd4:	60bb      	str	r3, [r7, #8]
 8006cd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006cd8:	4b44      	ldr	r3, [pc, #272]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a43      	ldr	r2, [pc, #268]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ce2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ce4:	f7fb f96c 	bl	8001fc0 <HAL_GetTick>
 8006ce8:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006cea:	e008      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cec:	f7fb f968 	bl	8001fc0 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e06d      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0f0      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d0a:	4b36      	ldr	r3, [pc, #216]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d12:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d02f      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d028      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d28:	4b2e      	ldr	r3, [pc, #184]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d30:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d32:	4b2f      	ldr	r3, [pc, #188]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d34:	2201      	movs	r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d38:	4b2d      	ldr	r3, [pc, #180]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d3e:	4a29      	ldr	r2, [pc, #164]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d44:	4b27      	ldr	r3, [pc, #156]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d114      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d50:	f7fb f936 	bl	8001fc0 <HAL_GetTick>
 8006d54:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d56:	e00a      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d58:	f7fb f932 	bl	8001fc0 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e035      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0ee      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d86:	d10d      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006d88:	4b16      	ldr	r3, [pc, #88]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d94:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d9c:	4911      	ldr	r1, [pc, #68]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	608b      	str	r3, [r1, #8]
 8006da2:	e005      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006da4:	4b0f      	ldr	r3, [pc, #60]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	4a0e      	ldr	r2, [pc, #56]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006daa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006dae:	6093      	str	r3, [r2, #8]
 8006db0:	4b0c      	ldr	r3, [pc, #48]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006db2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dbc:	4909      	ldr	r1, [pc, #36]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006dd4:	4b07      	ldr	r3, [pc, #28]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006dd6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40023800 	.word	0x40023800
 8006de8:	42470070 	.word	0x42470070
 8006dec:	40007000 	.word	0x40007000
 8006df0:	42470e40 	.word	0x42470e40
 8006df4:	424711e0 	.word	0x424711e0

08006df8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e273      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d075      	beq.n	8006f02 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006e16:	4b88      	ldr	r3, [pc, #544]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 030c 	and.w	r3, r3, #12
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d00c      	beq.n	8006e3c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e22:	4b85      	ldr	r3, [pc, #532]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 030c 	and.w	r3, r3, #12
        || \
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d112      	bne.n	8006e54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e2e:	4b82      	ldr	r3, [pc, #520]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e3a:	d10b      	bne.n	8006e54 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d05b      	beq.n	8006f00 <HAL_RCC_OscConfig+0x108>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d157      	bne.n	8006f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e24e      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e5c:	d106      	bne.n	8006e6c <HAL_RCC_OscConfig+0x74>
 8006e5e:	4b76      	ldr	r3, [pc, #472]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a75      	ldr	r2, [pc, #468]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	e01d      	b.n	8006ea8 <HAL_RCC_OscConfig+0xb0>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e74:	d10c      	bne.n	8006e90 <HAL_RCC_OscConfig+0x98>
 8006e76:	4b70      	ldr	r3, [pc, #448]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a6f      	ldr	r2, [pc, #444]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	4b6d      	ldr	r3, [pc, #436]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a6c      	ldr	r2, [pc, #432]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	e00b      	b.n	8006ea8 <HAL_RCC_OscConfig+0xb0>
 8006e90:	4b69      	ldr	r3, [pc, #420]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a68      	ldr	r2, [pc, #416]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	4b66      	ldr	r3, [pc, #408]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a65      	ldr	r2, [pc, #404]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006ea2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d013      	beq.n	8006ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb0:	f7fb f886 	bl	8001fc0 <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eb8:	f7fb f882 	bl	8001fc0 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b64      	cmp	r3, #100	@ 0x64
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e213      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eca:	4b5b      	ldr	r3, [pc, #364]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0f0      	beq.n	8006eb8 <HAL_RCC_OscConfig+0xc0>
 8006ed6:	e014      	b.n	8006f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed8:	f7fb f872 	bl	8001fc0 <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ee0:	f7fb f86e 	bl	8001fc0 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b64      	cmp	r3, #100	@ 0x64
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e1ff      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ef2:	4b51      	ldr	r3, [pc, #324]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1f0      	bne.n	8006ee0 <HAL_RCC_OscConfig+0xe8>
 8006efe:	e000      	b.n	8006f02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d063      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 030c 	and.w	r3, r3, #12
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00b      	beq.n	8006f32 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f1a:	4b47      	ldr	r3, [pc, #284]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 030c 	and.w	r3, r3, #12
        || \
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d11c      	bne.n	8006f60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f26:	4b44      	ldr	r3, [pc, #272]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d116      	bne.n	8006f60 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f32:	4b41      	ldr	r3, [pc, #260]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d005      	beq.n	8006f4a <HAL_RCC_OscConfig+0x152>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d001      	beq.n	8006f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e1d3      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	4937      	ldr	r1, [pc, #220]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f5e:	e03a      	b.n	8006fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d020      	beq.n	8006faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f68:	4b34      	ldr	r3, [pc, #208]	@ (800703c <HAL_RCC_OscConfig+0x244>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6e:	f7fb f827 	bl	8001fc0 <HAL_GetTick>
 8006f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f76:	f7fb f823 	bl	8001fc0 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e1b4      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f88:	4b2b      	ldr	r3, [pc, #172]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f94:	4b28      	ldr	r3, [pc, #160]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	4925      	ldr	r1, [pc, #148]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	600b      	str	r3, [r1, #0]
 8006fa8:	e015      	b.n	8006fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006faa:	4b24      	ldr	r3, [pc, #144]	@ (800703c <HAL_RCC_OscConfig+0x244>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb0:	f7fb f806 	bl	8001fc0 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fb8:	f7fb f802 	bl	8001fc0 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e193      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fca:	4b1b      	ldr	r3, [pc, #108]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d036      	beq.n	8007050 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d016      	beq.n	8007018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fea:	4b15      	ldr	r3, [pc, #84]	@ (8007040 <HAL_RCC_OscConfig+0x248>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff0:	f7fa ffe6 	bl	8001fc0 <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ff8:	f7fa ffe2 	bl	8001fc0 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e173      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800700a:	4b0b      	ldr	r3, [pc, #44]	@ (8007038 <HAL_RCC_OscConfig+0x240>)
 800700c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0f0      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x200>
 8007016:	e01b      	b.n	8007050 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007018:	4b09      	ldr	r3, [pc, #36]	@ (8007040 <HAL_RCC_OscConfig+0x248>)
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800701e:	f7fa ffcf 	bl	8001fc0 <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007024:	e00e      	b.n	8007044 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007026:	f7fa ffcb 	bl	8001fc0 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d907      	bls.n	8007044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e15c      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
 8007038:	40023800 	.word	0x40023800
 800703c:	42470000 	.word	0x42470000
 8007040:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007044:	4b8a      	ldr	r3, [pc, #552]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1ea      	bne.n	8007026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8097 	beq.w	800718c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800705e:	2300      	movs	r3, #0
 8007060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007062:	4b83      	ldr	r3, [pc, #524]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10f      	bne.n	800708e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800706e:	2300      	movs	r3, #0
 8007070:	60bb      	str	r3, [r7, #8]
 8007072:	4b7f      	ldr	r3, [pc, #508]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007076:	4a7e      	ldr	r2, [pc, #504]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800707c:	6413      	str	r3, [r2, #64]	@ 0x40
 800707e:	4b7c      	ldr	r3, [pc, #496]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007086:	60bb      	str	r3, [r7, #8]
 8007088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800708e:	4b79      	ldr	r3, [pc, #484]	@ (8007274 <HAL_RCC_OscConfig+0x47c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007096:	2b00      	cmp	r3, #0
 8007098:	d118      	bne.n	80070cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800709a:	4b76      	ldr	r3, [pc, #472]	@ (8007274 <HAL_RCC_OscConfig+0x47c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a75      	ldr	r2, [pc, #468]	@ (8007274 <HAL_RCC_OscConfig+0x47c>)
 80070a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070a6:	f7fa ff8b 	bl	8001fc0 <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070ae:	f7fa ff87 	bl	8001fc0 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e118      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c0:	4b6c      	ldr	r3, [pc, #432]	@ (8007274 <HAL_RCC_OscConfig+0x47c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0f0      	beq.n	80070ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d106      	bne.n	80070e2 <HAL_RCC_OscConfig+0x2ea>
 80070d4:	4b66      	ldr	r3, [pc, #408]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 80070d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d8:	4a65      	ldr	r2, [pc, #404]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	6713      	str	r3, [r2, #112]	@ 0x70
 80070e0:	e01c      	b.n	800711c <HAL_RCC_OscConfig+0x324>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	d10c      	bne.n	8007104 <HAL_RCC_OscConfig+0x30c>
 80070ea:	4b61      	ldr	r3, [pc, #388]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 80070ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ee:	4a60      	ldr	r2, [pc, #384]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 80070f0:	f043 0304 	orr.w	r3, r3, #4
 80070f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80070f6:	4b5e      	ldr	r3, [pc, #376]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 80070f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070fa:	4a5d      	ldr	r2, [pc, #372]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 80070fc:	f043 0301 	orr.w	r3, r3, #1
 8007100:	6713      	str	r3, [r2, #112]	@ 0x70
 8007102:	e00b      	b.n	800711c <HAL_RCC_OscConfig+0x324>
 8007104:	4b5a      	ldr	r3, [pc, #360]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007108:	4a59      	ldr	r2, [pc, #356]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 800710a:	f023 0301 	bic.w	r3, r3, #1
 800710e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007110:	4b57      	ldr	r3, [pc, #348]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007114:	4a56      	ldr	r2, [pc, #344]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007116:	f023 0304 	bic.w	r3, r3, #4
 800711a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d015      	beq.n	8007150 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007124:	f7fa ff4c 	bl	8001fc0 <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800712a:	e00a      	b.n	8007142 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800712c:	f7fa ff48 	bl	8001fc0 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800713a:	4293      	cmp	r3, r2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e0d7      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007142:	4b4b      	ldr	r3, [pc, #300]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0ee      	beq.n	800712c <HAL_RCC_OscConfig+0x334>
 800714e:	e014      	b.n	800717a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007150:	f7fa ff36 	bl	8001fc0 <HAL_GetTick>
 8007154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007156:	e00a      	b.n	800716e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007158:	f7fa ff32 	bl	8001fc0 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007166:	4293      	cmp	r3, r2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e0c1      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800716e:	4b40      	ldr	r3, [pc, #256]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1ee      	bne.n	8007158 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800717a:	7dfb      	ldrb	r3, [r7, #23]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d105      	bne.n	800718c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007180:	4b3b      	ldr	r3, [pc, #236]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007184:	4a3a      	ldr	r2, [pc, #232]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800718a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80ad 	beq.w	80072f0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007196:	4b36      	ldr	r3, [pc, #216]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 030c 	and.w	r3, r3, #12
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d060      	beq.n	8007264 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d145      	bne.n	8007236 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071aa:	4b33      	ldr	r3, [pc, #204]	@ (8007278 <HAL_RCC_OscConfig+0x480>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fa ff06 	bl	8001fc0 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071b8:	f7fa ff02 	bl	8001fc0 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e093      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ca:	4b29      	ldr	r3, [pc, #164]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69da      	ldr	r2, [r3, #28]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e4:	019b      	lsls	r3, r3, #6
 80071e6:	431a      	orrs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	3b01      	subs	r3, #1
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f8:	061b      	lsls	r3, r3, #24
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007200:	071b      	lsls	r3, r3, #28
 8007202:	491b      	ldr	r1, [pc, #108]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007204:	4313      	orrs	r3, r2
 8007206:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007208:	4b1b      	ldr	r3, [pc, #108]	@ (8007278 <HAL_RCC_OscConfig+0x480>)
 800720a:	2201      	movs	r2, #1
 800720c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720e:	f7fa fed7 	bl	8001fc0 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007216:	f7fa fed3 	bl	8001fc0 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e064      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007228:	4b11      	ldr	r3, [pc, #68]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0f0      	beq.n	8007216 <HAL_RCC_OscConfig+0x41e>
 8007234:	e05c      	b.n	80072f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007236:	4b10      	ldr	r3, [pc, #64]	@ (8007278 <HAL_RCC_OscConfig+0x480>)
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723c:	f7fa fec0 	bl	8001fc0 <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007244:	f7fa febc 	bl	8001fc0 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e04d      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007256:	4b06      	ldr	r3, [pc, #24]	@ (8007270 <HAL_RCC_OscConfig+0x478>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <HAL_RCC_OscConfig+0x44c>
 8007262:	e045      	b.n	80072f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d107      	bne.n	800727c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e040      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
 8007270:	40023800 	.word	0x40023800
 8007274:	40007000 	.word	0x40007000
 8007278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800727c:	4b1f      	ldr	r3, [pc, #124]	@ (80072fc <HAL_RCC_OscConfig+0x504>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d030      	beq.n	80072ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007294:	429a      	cmp	r2, r3
 8007296:	d129      	bne.n	80072ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d122      	bne.n	80072ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80072ac:	4013      	ands	r3, r2
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d119      	bne.n	80072ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c2:	085b      	lsrs	r3, r3, #1
 80072c4:	3b01      	subs	r3, #1
 80072c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d10f      	bne.n	80072ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072d8:	429a      	cmp	r2, r3
 80072da:	d107      	bne.n	80072ec <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d001      	beq.n	80072f0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40023800 	.word	0x40023800

08007300 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e10c      	b.n	800753c <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d106      	bne.n	800733c <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fa fc6c 	bl	8001c14 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f903 	bl	8007550 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f938 	bl	80075c0 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d030      	beq.n	80073ba <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f957 	bl	800760c <SAI_GetInputClock>
 800735e:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	461a      	mov	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	025b      	lsls	r3, r3, #9
 8007372:	fbb2 f3f3 	udiv	r3, r2, r3
 8007376:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4a72      	ldr	r2, [pc, #456]	@ (8007544 <HAL_SAI_Init+0x244>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	08da      	lsrs	r2, r3, #3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8007386:	68f9      	ldr	r1, [r7, #12]
 8007388:	4b6e      	ldr	r3, [pc, #440]	@ (8007544 <HAL_SAI_Init+0x244>)
 800738a:	fba3 2301 	umull	r2, r3, r3, r1
 800738e:	08da      	lsrs	r2, r3, #3
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	1aca      	subs	r2, r1, r3
 800739a:	2a08      	cmp	r2, #8
 800739c:	d904      	bls.n	80073a8 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d104      	bne.n	80073ba <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b4:	085a      	lsrs	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_SAI_Init+0xca>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d109      	bne.n	80073de <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_SAI_Init+0xd6>
 80073d2:	2300      	movs	r3, #0
 80073d4:	e001      	b.n	80073da <HAL_SAI_Init+0xda>
 80073d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	e008      	b.n	80073f0 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d102      	bne.n	80073ec <HAL_SAI_Init+0xec>
 80073e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073ea:	e000      	b.n	80073ee <HAL_SAI_Init+0xee>
 80073ec:	2300      	movs	r3, #0
 80073ee:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d811      	bhi.n	800741c <HAL_SAI_Init+0x11c>
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d20b      	bcs.n	8007414 <HAL_SAI_Init+0x114>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <HAL_SAI_Init+0x106>
 8007400:	2b01      	cmp	r3, #1
 8007402:	d003      	beq.n	800740c <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007404:	e00a      	b.n	800741c <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	613b      	str	r3, [r7, #16]
    break;
 800740a:	e008      	b.n	800741e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800740c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007410:	613b      	str	r3, [r7, #16]
    break;
 8007412:	e004      	b.n	800741e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007414:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007418:	613b      	str	r3, [r7, #16]
    break;
 800741a:	e000      	b.n	800741e <HAL_SAI_Init+0x11e>
      break;
 800741c:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6819      	ldr	r1, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	4b47      	ldr	r3, [pc, #284]	@ (8007548 <HAL_SAI_Init+0x248>)
 800742a:	400b      	ands	r3, r1
 800742c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6819      	ldr	r1, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007442:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007448:	431a      	orrs	r2, r3
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007456:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007462:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007468:	051b      	lsls	r3, r3, #20
 800746a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6812      	ldr	r2, [r2, #0]
 800747e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007482:	f023 030f 	bic.w	r3, r3, #15
 8007486:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6859      	ldr	r1, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749c:	431a      	orrs	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6899      	ldr	r1, [r3, #8]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	4b26      	ldr	r3, [pc, #152]	@ (800754c <HAL_SAI_Init+0x24c>)
 80074b2:	400b      	ands	r3, r1
 80074b4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6899      	ldr	r1, [r3, #8]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80074c6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 80074cc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 80074d2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074d8:	3b01      	subs	r3, #1
 80074da:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80074dc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68d9      	ldr	r1, [r3, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80074f4:	400b      	ands	r3, r1
 80074f6:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68d9      	ldr	r1, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007506:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800750c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800750e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007514:	3b01      	subs	r3, #1
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	cccccccd 	.word	0xcccccccd
 8007548:	ff05c010 	.word	0xff05c010
 800754c:	fff88000 	.word	0xfff88000

08007550 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007558:	4b17      	ldr	r3, [pc, #92]	@ (80075b8 <SAI_Disable+0x68>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a17      	ldr	r2, [pc, #92]	@ (80075bc <SAI_Disable+0x6c>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	0b1b      	lsrs	r3, r3, #12
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800757a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	1e5a      	subs	r2, r3, #1
 8007580:	60fa      	str	r2, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800758c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	72fb      	strb	r3, [r7, #11]
      break;
 800759a:	e006      	b.n	80075aa <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1e8      	bne.n	800757c <SAI_Disable+0x2c>

  return status;
 80075aa:	7afb      	ldrb	r3, [r7, #11]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	2000001c 	.word	0x2000001c
 80075bc:	95cbec1b 	.word	0x95cbec1b

080075c0 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d00c      	beq.n	80075ea <SAI_BlockSynchroConfig+0x2a>
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d80d      	bhi.n	80075f0 <SAI_BlockSynchroConfig+0x30>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <SAI_BlockSynchroConfig+0x1e>
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d003      	beq.n	80075e4 <SAI_BlockSynchroConfig+0x24>
 80075dc:	e008      	b.n	80075f0 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	60fb      	str	r3, [r7, #12]
      break;
 80075e2:	e008      	b.n	80075f6 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80075e4:	2310      	movs	r3, #16
 80075e6:	60fb      	str	r3, [r7, #12]
      break;
 80075e8:	e005      	b.n	80075f6 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80075ea:	2320      	movs	r3, #32
 80075ec:	60fb      	str	r3, [r7, #12]
      break;
 80075ee:	e002      	b.n	80075f6 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]
      break;
 80075f4:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 80075f6:	4a04      	ldr	r2, [pc, #16]	@ (8007608 <SAI_BlockSynchroConfig+0x48>)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80075fc:	bf00      	nop
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	40015800 	.word	0x40015800

0800760c <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a46      	ldr	r2, [pc, #280]	@ (8007740 <SAI_GetInputClock+0x134>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d10b      	bne.n	8007642 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800762a:	4b46      	ldr	r3, [pc, #280]	@ (8007744 <SAI_GetInputClock+0x138>)
 800762c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007630:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	4942      	ldr	r1, [pc, #264]	@ (8007744 <SAI_GetInputClock+0x138>)
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007640:	e00b      	b.n	800765a <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8007642:	4b40      	ldr	r3, [pc, #256]	@ (8007744 <SAI_GetInputClock+0x138>)
 8007644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007648:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	493c      	ldr	r1, [pc, #240]	@ (8007744 <SAI_GetInputClock+0x138>)
 8007654:	4313      	orrs	r3, r2
 8007656:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800765a:	4b3a      	ldr	r3, [pc, #232]	@ (8007744 <SAI_GetInputClock+0x138>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d108      	bne.n	8007678 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007666:	4b37      	ldr	r3, [pc, #220]	@ (8007744 <SAI_GetInputClock+0x138>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800766e:	4a36      	ldr	r2, [pc, #216]	@ (8007748 <SAI_GetInputClock+0x13c>)
 8007670:	fbb2 f3f3 	udiv	r3, r2, r3
 8007674:	613b      	str	r3, [r7, #16]
 8007676:	e007      	b.n	8007688 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007678:	4b32      	ldr	r3, [pc, #200]	@ (8007744 <SAI_GetInputClock+0x138>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007680:	4a32      	ldr	r2, [pc, #200]	@ (800774c <SAI_GetInputClock+0x140>)
 8007682:	fbb2 f3f3 	udiv	r3, r2, r3
 8007686:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d121      	bne.n	80076d4 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8007690:	4b2c      	ldr	r3, [pc, #176]	@ (8007744 <SAI_GetInputClock+0x138>)
 8007692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007696:	0e1b      	lsrs	r3, r3, #24
 8007698:	f003 030f 	and.w	r3, r3, #15
 800769c:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800769e:	4b29      	ldr	r3, [pc, #164]	@ (8007744 <SAI_GetInputClock+0x138>)
 80076a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a4:	099b      	lsrs	r3, r3, #6
 80076a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	fb03 f202 	mul.w	r2, r3, r2
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b6:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80076b8:	4b22      	ldr	r3, [pc, #136]	@ (8007744 <SAI_GetInputClock+0x138>)
 80076ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076be:	0a1b      	lsrs	r3, r3, #8
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	3301      	adds	r3, #1
 80076c6:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	e02d      	b.n	8007730 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076dc:	d120      	bne.n	8007720 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80076de:	4b19      	ldr	r3, [pc, #100]	@ (8007744 <SAI_GetInputClock+0x138>)
 80076e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076e4:	0e1b      	lsrs	r3, r3, #24
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80076ec:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <SAI_GetInputClock+0x138>)
 80076ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076f2:	099b      	lsrs	r3, r3, #6
 80076f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	fb03 f202 	mul.w	r2, r3, r2
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	fbb2 f3f3 	udiv	r3, r2, r3
 8007704:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8007706:	4b0f      	ldr	r3, [pc, #60]	@ (8007744 <SAI_GetInputClock+0x138>)
 8007708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800770c:	f003 031f 	and.w	r3, r3, #31
 8007710:	3301      	adds	r3, #1
 8007712:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	fbb2 f3f3 	udiv	r3, r2, r3
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	e007      	b.n	8007730 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8007720:	4b08      	ldr	r3, [pc, #32]	@ (8007744 <SAI_GetInputClock+0x138>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	4a07      	ldr	r2, [pc, #28]	@ (8007744 <SAI_GetInputClock+0x138>)
 8007726:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800772a:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 800772c:	4b08      	ldr	r3, [pc, #32]	@ (8007750 <SAI_GetInputClock+0x144>)
 800772e:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8007730:	697b      	ldr	r3, [r7, #20]
}
 8007732:	4618      	mov	r0, r3
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	40015804 	.word	0x40015804
 8007744:	40023800 	.word	0x40023800
 8007748:	00f42400 	.word	0x00f42400
 800774c:	007a1200 	.word	0x007a1200
 8007750:	00bb8000 	.word	0x00bb8000

08007754 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e022      	b.n	80077ac <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d105      	bne.n	800777e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7f9 ffa7 	bl	80016cc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2203      	movs	r2, #3
 8007782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f814 	bl	80077b4 <HAL_SD_InitCard>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e00a      	b.n	80077ac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80077b4:	b5b0      	push	{r4, r5, r7, lr}
 80077b6:	b08e      	sub	sp, #56	@ 0x38
 80077b8:	af04      	add	r7, sp, #16
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80077bc:	2300      	movs	r3, #0
 80077be:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80077cc:	2300      	movs	r3, #0
 80077ce:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80077d0:	2376      	movs	r3, #118	@ 0x76
 80077d2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681d      	ldr	r5, [r3, #0]
 80077d8:	466c      	mov	r4, sp
 80077da:	f107 0314 	add.w	r3, r7, #20
 80077de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077e6:	f107 0308 	add.w	r3, r7, #8
 80077ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80077ec:	4628      	mov	r0, r5
 80077ee:	f002 fa47 	bl	8009c80 <SDIO_Init>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80077f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e04f      	b.n	80078a4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007804:	4b29      	ldr	r3, [pc, #164]	@ (80078ac <HAL_SD_InitCard+0xf8>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f002 fa7f 	bl	8009d12 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007814:	4b25      	ldr	r3, [pc, #148]	@ (80078ac <HAL_SD_InitCard+0xf8>)
 8007816:	2201      	movs	r2, #1
 8007818:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800781a:	2002      	movs	r0, #2
 800781c:	f7fa fbdc 	bl	8001fd8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 ff55 	bl	80086d0 <SD_PowerON>
 8007826:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	431a      	orrs	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e02e      	b.n	80078a4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fe74 	bl	8008534 <SD_InitCard>
 800784c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00b      	beq.n	800786c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e01b      	b.n	80078a4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007874:	4618      	mov	r0, r3
 8007876:	f002 fade 	bl	8009e36 <SDMMC_CmdBlockLength>
 800787a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00f      	beq.n	80078a2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a0a      	ldr	r2, [pc, #40]	@ (80078b0 <HAL_SD_InitCard+0xfc>)
 8007888:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e000      	b.n	80078a4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3728      	adds	r7, #40	@ 0x28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bdb0      	pop	{r4, r5, r7, pc}
 80078ac:	422580a0 	.word	0x422580a0
 80078b0:	004005ff 	.word	0x004005ff

080078b4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08c      	sub	sp, #48	@ 0x30
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d107      	bne.n	80078dc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e0be      	b.n	8007a5a <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	f040 80b7 	bne.w	8007a58 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80078f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d907      	bls.n	800790e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007902:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e0a5      	b.n	8007a5a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2203      	movs	r2, #3
 8007912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2200      	movs	r2, #0
 800791c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800792c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007932:	4a4c      	ldr	r2, [pc, #304]	@ (8007a64 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007934:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793a:	4a4b      	ldr	r2, [pc, #300]	@ (8007a68 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800793c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007942:	2200      	movs	r2, #0
 8007944:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794a:	2200      	movs	r2, #0
 800794c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3380      	adds	r3, #128	@ 0x80
 8007974:	4619      	mov	r1, r3
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	025b      	lsls	r3, r3, #9
 800797c:	089b      	lsrs	r3, r3, #2
 800797e:	f7fa fcfb 	bl	8002378 <HAL_DMA_Start_IT>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d017      	beq.n	80079b8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007996:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a33      	ldr	r2, [pc, #204]	@ (8007a6c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800799e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e050      	b.n	8007a5a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80079b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007a70 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80079ba:	2201      	movs	r2, #1
 80079bc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d002      	beq.n	80079cc <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 80079c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c8:	025b      	lsls	r3, r3, #9
 80079ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079cc:	f04f 33ff 	mov.w	r3, #4294967295
 80079d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	025b      	lsls	r3, r3, #9
 80079d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80079d8:	2390      	movs	r3, #144	@ 0x90
 80079da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80079dc:	2302      	movs	r3, #2
 80079de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80079e4:	2301      	movs	r3, #1
 80079e6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f107 0210 	add.w	r2, r7, #16
 80079f0:	4611      	mov	r1, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f002 f9f3 	bl	8009dde <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d90a      	bls.n	8007a14 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2282      	movs	r2, #130	@ 0x82
 8007a02:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f002 fa57 	bl	8009ebe <SDMMC_CmdReadMultiBlock>
 8007a10:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007a12:	e009      	b.n	8007a28 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2281      	movs	r2, #129	@ 0x81
 8007a18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a20:	4618      	mov	r0, r3
 8007a22:	f002 fa2a 	bl	8009e7a <SDMMC_CmdReadSingleBlock>
 8007a26:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d012      	beq.n	8007a54 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a0e      	ldr	r2, [pc, #56]	@ (8007a6c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007a34:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e002      	b.n	8007a5a <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	e000      	b.n	8007a5a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007a58:	2302      	movs	r3, #2
  }
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3730      	adds	r7, #48	@ 0x30
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	08008343 	.word	0x08008343
 8007a68:	080083b5 	.word	0x080083b5
 8007a6c:	004005ff 	.word	0x004005ff
 8007a70:	4225858c 	.word	0x4225858c

08007a74 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08c      	sub	sp, #48	@ 0x30
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d107      	bne.n	8007a9c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a90:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0c1      	b.n	8007c20 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	f040 80ba 	bne.w	8007c1e <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	441a      	add	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d907      	bls.n	8007ace <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e0a8      	b.n	8007c20 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2200      	movs	r2, #0
 8007adc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 021a 	orr.w	r2, r2, #26
 8007aec:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af2:	4a4d      	ldr	r2, [pc, #308]	@ (8007c28 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8007af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007afa:	4a4c      	ldr	r2, [pc, #304]	@ (8007c2c <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8007afc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b02:	2200      	movs	r2, #0
 8007b04:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d002      	beq.n	8007b14 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8007b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b10:	025b      	lsls	r3, r3, #9
 8007b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d90a      	bls.n	8007b30 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	22a0      	movs	r2, #160	@ 0xa0
 8007b1e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b26:	4618      	mov	r0, r3
 8007b28:	f002 fa0d 	bl	8009f46 <SDMMC_CmdWriteMultiBlock>
 8007b2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007b2e:	e009      	b.n	8007b44 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2290      	movs	r2, #144	@ 0x90
 8007b34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f002 f9e0 	bl	8009f02 <SDMMC_CmdWriteSingleBlock>
 8007b42:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d012      	beq.n	8007b70 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a38      	ldr	r2, [pc, #224]	@ (8007c30 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007b50:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e057      	b.n	8007c20 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007b70:	4b30      	ldr	r3, [pc, #192]	@ (8007c34 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007b72:	2201      	movs	r2, #1
 8007b74:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b7a:	2240      	movs	r2, #64	@ 0x40
 8007b7c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3380      	adds	r3, #128	@ 0x80
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	025b      	lsls	r3, r3, #9
 8007bac:	089b      	lsrs	r3, r3, #2
 8007bae:	f7fa fbe3 	bl	8002378 <HAL_DMA_Start_IT>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01a      	beq.n	8007bee <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 021a 	bic.w	r2, r2, #26
 8007bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a18      	ldr	r2, [pc, #96]	@ (8007c30 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007bce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e018      	b.n	8007c20 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bee:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	025b      	lsls	r3, r3, #9
 8007bf8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007bfa:	2390      	movs	r3, #144	@ 0x90
 8007bfc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007c06:	2301      	movs	r3, #1
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f107 0210 	add.w	r2, r7, #16
 8007c12:	4611      	mov	r1, r2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f002 f8e2 	bl	8009dde <SDIO_ConfigData>

      return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e000      	b.n	8007c20 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8007c1e:	2302      	movs	r3, #2
  }
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3730      	adds	r7, #48	@ 0x30
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	08008319 	.word	0x08008319
 8007c2c:	080083b5 	.word	0x080083b5
 8007c30:	004005ff 	.word	0x004005ff
 8007c34:	4225858c 	.word	0x4225858c

08007c38 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <HAL_SD_IRQHandler+0x2e>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fdec 	bl	800883c <SD_Read_IT>
 8007c64:	e155      	b.n	8007f12 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 808f 	beq.w	8007d94 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c7e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8007c8e:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8007c92:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d039      	beq.n	8007d22 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d104      	bne.n	8007cc2 <HAL_SD_IRQHandler+0x8a>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d011      	beq.n	8007ce6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f002 f960 	bl	8009f8c <SDMMC_CmdStopTransfer>
 8007ccc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d008      	beq.n	8007ce6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f91f 	bl	8007f24 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007cee:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d104      	bne.n	8007d12 <HAL_SD_IRQHandler+0xda>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f003 f990 	bl	800b038 <HAL_SD_RxCpltCallback>
 8007d18:	e0fb      	b.n	8007f12 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f003 f982 	bl	800b024 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d20:	e0f7      	b.n	8007f12 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 80f2 	beq.w	8007f12 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f003 0320 	and.w	r3, r3, #32
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d011      	beq.n	8007d5c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f002 f925 	bl	8009f8c <SDMMC_CmdStopTransfer>
 8007d42:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d008      	beq.n	8007d5c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	431a      	orrs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f8e4 	bl	8007f24 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f040 80d5 	bne.w	8007f12 <HAL_SD_IRQHandler+0x2da>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f040 80cf 	bne.w	8007f12 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0208 	bic.w	r2, r2, #8
 8007d82:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f003 f949 	bl	800b024 <HAL_SD_TxCpltCallback>
}
 8007d92:	e0be      	b.n	8007f12 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d008      	beq.n	8007db4 <HAL_SD_IRQHandler+0x17c>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fd96 	bl	80088de <SD_Write_IT>
 8007db2:	e0ae      	b.n	8007f12 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dba:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 80a7 	beq.w	8007f12 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd6:	f043 0202 	orr.w	r2, r3, #2
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	f043 0208 	orr.w	r2, r3, #8
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0a:	f043 0220 	orr.w	r2, r3, #32
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e18:	f003 0310 	and.w	r3, r3, #16
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e24:	f043 0210 	orr.w	r2, r3, #16
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007e34:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007e44:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f002 f89e 	bl	8009f8c <SDMMC_CmdStopTransfer>
 8007e50:	4602      	mov	r2, r0
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f003 0308 	and.w	r3, r3, #8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f855 	bl	8007f24 <HAL_SD_ErrorCallback>
}
 8007e7a:	e04a      	b.n	8007f12 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d045      	beq.n	8007f12 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f003 0310 	and.w	r3, r3, #16
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <HAL_SD_IRQHandler+0x262>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d011      	beq.n	8007ebe <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f1c <HAL_SD_IRQHandler+0x2e4>)
 8007ea0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fa fabe 	bl	8002428 <HAL_DMA_Abort_IT>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d02f      	beq.n	8007f12 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 face 	bl	8008458 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007ebc:	e029      	b.n	8007f12 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <HAL_SD_IRQHandler+0x29a>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d011      	beq.n	8007ef6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed6:	4a12      	ldr	r2, [pc, #72]	@ (8007f20 <HAL_SD_IRQHandler+0x2e8>)
 8007ed8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fa faa2 	bl	8002428 <HAL_DMA_Abort_IT>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d013      	beq.n	8007f12 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fae9 	bl	80084c6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007ef4:	e00d      	b.n	8007f12 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f003 f880 	bl	800b010 <HAL_SD_AbortCallback>
}
 8007f10:	e7ff      	b.n	8007f12 <HAL_SD_IRQHandler+0x2da>
 8007f12:	bf00      	nop
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	08008459 	.word	0x08008459
 8007f20:	080084c7 	.word	0x080084c7

08007f24 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f46:	0f9b      	lsrs	r3, r3, #30
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f52:	0e9b      	lsrs	r3, r3, #26
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f64:	0e1b      	lsrs	r3, r3, #24
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f76:	0c1b      	lsrs	r3, r3, #16
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f82:	0a1b      	lsrs	r3, r3, #8
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f98:	0d1b      	lsrs	r3, r3, #20
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fa4:	0c1b      	lsrs	r3, r3, #16
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fb6:	0bdb      	lsrs	r3, r3, #15
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fc8:	0b9b      	lsrs	r3, r3, #14
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fda:	0b5b      	lsrs	r3, r3, #13
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 0301 	and.w	r3, r3, #1
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fec:	0b1b      	lsrs	r3, r3, #12
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008004:	2b00      	cmp	r3, #0
 8008006:	d163      	bne.n	80080d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800800c:	009a      	lsls	r2, r3, #2
 800800e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008012:	4013      	ands	r3, r2
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008018:	0f92      	lsrs	r2, r2, #30
 800801a:	431a      	orrs	r2, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008024:	0edb      	lsrs	r3, r3, #27
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	b2da      	uxtb	r2, r3
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008036:	0e1b      	lsrs	r3, r3, #24
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0307 	and.w	r3, r3, #7
 800803e:	b2da      	uxtb	r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008048:	0d5b      	lsrs	r3, r3, #21
 800804a:	b2db      	uxtb	r3, r3
 800804c:	f003 0307 	and.w	r3, r3, #7
 8008050:	b2da      	uxtb	r2, r3
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800805a:	0c9b      	lsrs	r3, r3, #18
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 0307 	and.w	r3, r3, #7
 8008062:	b2da      	uxtb	r2, r3
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800806c:	0bdb      	lsrs	r3, r3, #15
 800806e:	b2db      	uxtb	r3, r3
 8008070:	f003 0307 	and.w	r3, r3, #7
 8008074:	b2da      	uxtb	r2, r3
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	7e1b      	ldrb	r3, [r3, #24]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f003 0307 	and.w	r3, r3, #7
 800808e:	3302      	adds	r3, #2
 8008090:	2201      	movs	r2, #1
 8008092:	fa02 f303 	lsl.w	r3, r2, r3
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800809a:	fb03 f202 	mul.w	r2, r3, r2
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	7a1b      	ldrb	r3, [r3, #8]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	2201      	movs	r2, #1
 80080ae:	409a      	lsls	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80080bc:	0a52      	lsrs	r2, r2, #9
 80080be:	fb03 f202 	mul.w	r2, r3, r2
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80080ce:	e031      	b.n	8008134 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d11d      	bne.n	8008114 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080dc:	041b      	lsls	r3, r3, #16
 80080de:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080e6:	0c1b      	lsrs	r3, r3, #16
 80080e8:	431a      	orrs	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	3301      	adds	r3, #1
 80080f4:	029a      	lsls	r2, r3, #10
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008108:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	661a      	str	r2, [r3, #96]	@ 0x60
 8008112:	e00f      	b.n	8008134 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a58      	ldr	r2, [pc, #352]	@ (800827c <HAL_SD_GetCardCSD+0x344>)
 800811a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008120:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e09d      	b.n	8008270 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008138:	0b9b      	lsrs	r3, r3, #14
 800813a:	b2db      	uxtb	r3, r3
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	b2da      	uxtb	r2, r3
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800814a:	09db      	lsrs	r3, r3, #7
 800814c:	b2db      	uxtb	r3, r3
 800814e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008152:	b2da      	uxtb	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008162:	b2da      	uxtb	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800816c:	0fdb      	lsrs	r3, r3, #31
 800816e:	b2da      	uxtb	r2, r3
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008178:	0f5b      	lsrs	r3, r3, #29
 800817a:	b2db      	uxtb	r3, r3
 800817c:	f003 0303 	and.w	r3, r3, #3
 8008180:	b2da      	uxtb	r2, r3
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800818a:	0e9b      	lsrs	r3, r3, #26
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	b2da      	uxtb	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800819c:	0d9b      	lsrs	r3, r3, #22
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f003 030f 	and.w	r3, r3, #15
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ae:	0d5b      	lsrs	r3, r3, #21
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081de:	0bdb      	lsrs	r3, r3, #15
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f2:	0b9b      	lsrs	r3, r3, #14
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008206:	0b5b      	lsrs	r3, r3, #13
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	b2da      	uxtb	r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821a:	0b1b      	lsrs	r3, r3, #12
 800821c:	b2db      	uxtb	r3, r3
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	b2da      	uxtb	r2, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822e:	0a9b      	lsrs	r3, r3, #10
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	b2da      	uxtb	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	b2da      	uxtb	r2, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008256:	085b      	lsrs	r3, r3, #1
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800825e:	b2da      	uxtb	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	004005ff 	.word	0x004005ff

08008280 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80082e4:	f107 030c 	add.w	r3, r7, #12
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fa7e 	bl	80087ec <SD_SendStatus>
 80082f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	0a5b      	lsrs	r3, r3, #9
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800830e:	693b      	ldr	r3, [r7, #16]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008324:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008334:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008336:	bf00      	nop
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008354:	2b82      	cmp	r3, #130	@ 0x82
 8008356:	d111      	bne.n	800837c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4618      	mov	r0, r3
 800835e:	f001 fe15 	bl	8009f8c <SDMMC_CmdStopTransfer>
 8008362:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d008      	beq.n	800837c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	431a      	orrs	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7ff fdd4 	bl	8007f24 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 0208 	bic.w	r2, r2, #8
 800838a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008394:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f002 fe47 	bl	800b038 <HAL_SD_RxCpltCallback>
#endif
}
 80083aa:	bf00      	nop
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
	...

080083b4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7fa f9dc 	bl	8002780 <HAL_DMA_GetError>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d03e      	beq.n	800844c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083d4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083dc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d002      	beq.n	80083ea <SD_DMAError+0x36>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d12d      	bne.n	8008446 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a19      	ldr	r2, [pc, #100]	@ (8008454 <SD_DMAError+0xa0>)
 80083f0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008400:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008406:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800840e:	6978      	ldr	r0, [r7, #20]
 8008410:	f7ff ff62 	bl	80082d8 <HAL_SD_GetCardState>
 8008414:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b06      	cmp	r3, #6
 800841a:	d002      	beq.n	8008422 <SD_DMAError+0x6e>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b05      	cmp	r3, #5
 8008420:	d10a      	bne.n	8008438 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4618      	mov	r0, r3
 8008428:	f001 fdb0 	bl	8009f8c <SDMMC_CmdStopTransfer>
 800842c:	4602      	mov	r2, r0
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008432:	431a      	orrs	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2200      	movs	r2, #0
 8008444:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008446:	6978      	ldr	r0, [r7, #20]
 8008448:	f7ff fd6c 	bl	8007f24 <HAL_SD_ErrorCallback>
#endif
  }
}
 800844c:	bf00      	nop
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	004005ff 	.word	0x004005ff

08008458 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008464:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800846e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f7ff ff31 	bl	80082d8 <HAL_SD_GetCardState>
 8008476:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b06      	cmp	r3, #6
 800848a:	d002      	beq.n	8008492 <SD_DMATxAbort+0x3a>
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2b05      	cmp	r3, #5
 8008490:	d10a      	bne.n	80084a8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f001 fd78 	bl	8009f8c <SDMMC_CmdStopTransfer>
 800849c:	4602      	mov	r2, r0
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a2:	431a      	orrs	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d103      	bne.n	80084b8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f002 fdad 	bl	800b010 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80084b6:	e002      	b.n	80084be <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f7ff fd33 	bl	8007f24 <HAL_SD_ErrorCallback>
}
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f240 523a 	movw	r2, #1338	@ 0x53a
 80084dc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f7ff fefa 	bl	80082d8 <HAL_SD_GetCardState>
 80084e4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b06      	cmp	r3, #6
 80084f8:	d002      	beq.n	8008500 <SD_DMARxAbort+0x3a>
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b05      	cmp	r3, #5
 80084fe:	d10a      	bne.n	8008516 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4618      	mov	r0, r3
 8008506:	f001 fd41 	bl	8009f8c <SDMMC_CmdStopTransfer>
 800850a:	4602      	mov	r2, r0
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008510:	431a      	orrs	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851a:	2b00      	cmp	r3, #0
 800851c:	d103      	bne.n	8008526 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f002 fd76 	bl	800b010 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008524:	e002      	b.n	800852c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7ff fcfc 	bl	8007f24 <HAL_SD_ErrorCallback>
}
 800852c:	bf00      	nop
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008534:	b5b0      	push	{r4, r5, r7, lr}
 8008536:	b094      	sub	sp, #80	@ 0x50
 8008538:	af04      	add	r7, sp, #16
 800853a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800853c:	2301      	movs	r3, #1
 800853e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4618      	mov	r0, r3
 8008546:	f001 fbf2 	bl	8009d2e <SDIO_GetPowerState>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d102      	bne.n	8008556 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008550:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008554:	e0b8      	b.n	80086c8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800855a:	2b03      	cmp	r3, #3
 800855c:	d02f      	beq.n	80085be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4618      	mov	r0, r3
 8008564:	f001 fdd9 	bl	800a11a <SDMMC_CmdSendCID>
 8008568:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800856a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <SD_InitCard+0x40>
    {
      return errorstate;
 8008570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008572:	e0a9      	b.n	80086c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2100      	movs	r1, #0
 800857a:	4618      	mov	r0, r3
 800857c:	f001 fc1c 	bl	8009db8 <SDIO_GetResponse>
 8008580:	4602      	mov	r2, r0
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2104      	movs	r1, #4
 800858c:	4618      	mov	r0, r3
 800858e:	f001 fc13 	bl	8009db8 <SDIO_GetResponse>
 8008592:	4602      	mov	r2, r0
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2108      	movs	r1, #8
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 fc0a 	bl	8009db8 <SDIO_GetResponse>
 80085a4:	4602      	mov	r2, r0
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	210c      	movs	r1, #12
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 fc01 	bl	8009db8 <SDIO_GetResponse>
 80085b6:	4602      	mov	r2, r0
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085c2:	2b03      	cmp	r3, #3
 80085c4:	d00d      	beq.n	80085e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f107 020e 	add.w	r2, r7, #14
 80085ce:	4611      	mov	r1, r2
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 fddf 	bl	800a194 <SDMMC_CmdSetRelAdd>
 80085d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <SD_InitCard+0xae>
    {
      return errorstate;
 80085de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085e0:	e072      	b.n	80086c8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d036      	beq.n	8008658 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80085ea:	89fb      	ldrh	r3, [r7, #14]
 80085ec:	461a      	mov	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085fa:	041b      	lsls	r3, r3, #16
 80085fc:	4619      	mov	r1, r3
 80085fe:	4610      	mov	r0, r2
 8008600:	f001 fda9 	bl	800a156 <SDMMC_CmdSendCSD>
 8008604:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <SD_InitCard+0xdc>
    {
      return errorstate;
 800860c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800860e:	e05b      	b.n	80086c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2100      	movs	r1, #0
 8008616:	4618      	mov	r0, r3
 8008618:	f001 fbce 	bl	8009db8 <SDIO_GetResponse>
 800861c:	4602      	mov	r2, r0
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2104      	movs	r1, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fbc5 	bl	8009db8 <SDIO_GetResponse>
 800862e:	4602      	mov	r2, r0
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2108      	movs	r1, #8
 800863a:	4618      	mov	r0, r3
 800863c:	f001 fbbc 	bl	8009db8 <SDIO_GetResponse>
 8008640:	4602      	mov	r2, r0
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	210c      	movs	r1, #12
 800864c:	4618      	mov	r0, r3
 800864e:	f001 fbb3 	bl	8009db8 <SDIO_GetResponse>
 8008652:	4602      	mov	r2, r0
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2104      	movs	r1, #4
 800865e:	4618      	mov	r0, r3
 8008660:	f001 fbaa 	bl	8009db8 <SDIO_GetResponse>
 8008664:	4603      	mov	r3, r0
 8008666:	0d1a      	lsrs	r2, r3, #20
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800866c:	f107 0310 	add.w	r3, r7, #16
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7ff fc60 	bl	8007f38 <HAL_SD_GetCardCSD>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800867e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008682:	e021      	b.n	80086c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6819      	ldr	r1, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800868c:	041b      	lsls	r3, r3, #16
 800868e:	2200      	movs	r2, #0
 8008690:	461c      	mov	r4, r3
 8008692:	4615      	mov	r5, r2
 8008694:	4622      	mov	r2, r4
 8008696:	462b      	mov	r3, r5
 8008698:	4608      	mov	r0, r1
 800869a:	f001 fc99 	bl	8009fd0 <SDMMC_CmdSelDesel>
 800869e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <SD_InitCard+0x176>
  {
    return errorstate;
 80086a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a8:	e00e      	b.n	80086c8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681d      	ldr	r5, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	466c      	mov	r4, sp
 80086b2:	f103 0210 	add.w	r2, r3, #16
 80086b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80086b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086bc:	3304      	adds	r3, #4
 80086be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086c0:	4628      	mov	r0, r5
 80086c2:	f001 fadd 	bl	8009c80 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3740      	adds	r7, #64	@ 0x40
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bdb0      	pop	{r4, r5, r7, pc}

080086d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	2300      	movs	r3, #0
 80086e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 fc94 	bl	800a016 <SDMMC_CmdGoIdleState>
 80086ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d001      	beq.n	80086fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	e072      	b.n	80087e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4618      	mov	r0, r3
 8008700:	f001 fca7 	bl	800a052 <SDMMC_CmdOperCond>
 8008704:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00d      	beq.n	8008728 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f001 fc7d 	bl	800a016 <SDMMC_CmdGoIdleState>
 800871c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d004      	beq.n	800872e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	e05b      	b.n	80087e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008732:	2b01      	cmp	r3, #1
 8008734:	d137      	bne.n	80087a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2100      	movs	r1, #0
 800873c:	4618      	mov	r0, r3
 800873e:	f001 fca7 	bl	800a090 <SDMMC_CmdAppCommand>
 8008742:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d02d      	beq.n	80087a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800874a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800874e:	e047      	b.n	80087e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f001 fc9a 	bl	800a090 <SDMMC_CmdAppCommand>
 800875c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <SD_PowerON+0x98>
    {
      return errorstate;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	e03b      	b.n	80087e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	491e      	ldr	r1, [pc, #120]	@ (80087e8 <SD_PowerON+0x118>)
 800876e:	4618      	mov	r0, r3
 8008770:	f001 fcb0 	bl	800a0d4 <SDMMC_CmdAppOperCommand>
 8008774:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800877c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008780:	e02e      	b.n	80087e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2100      	movs	r1, #0
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fb15 	bl	8009db8 <SDIO_GetResponse>
 800878e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	0fdb      	lsrs	r3, r3, #31
 8008794:	2b01      	cmp	r3, #1
 8008796:	d101      	bne.n	800879c <SD_PowerON+0xcc>
 8008798:	2301      	movs	r3, #1
 800879a:	e000      	b.n	800879e <SD_PowerON+0xce>
 800879c:	2300      	movs	r3, #0
 800879e:	613b      	str	r3, [r7, #16]

    count++;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	3301      	adds	r3, #1
 80087a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d802      	bhi.n	80087b6 <SD_PowerON+0xe6>
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0cc      	beq.n	8008750 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80087bc:	4293      	cmp	r3, r2
 80087be:	d902      	bls.n	80087c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80087c4:	e00c      	b.n	80087e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d003      	beq.n	80087d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80087d6:	e002      	b.n	80087de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	c1100000 	.word	0xc1100000

080087ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d102      	bne.n	8008802 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80087fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008800:	e018      	b.n	8008834 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800880a:	041b      	lsls	r3, r3, #16
 800880c:	4619      	mov	r1, r3
 800880e:	4610      	mov	r0, r2
 8008810:	f001 fce1 	bl	800a1d6 <SDMMC_CmdSendStatus>
 8008814:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <SD_SendStatus+0x34>
  {
    return errorstate;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	e009      	b.n	8008834 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f001 fac6 	bl	8009db8 <SDIO_GetResponse>
 800882c:	4602      	mov	r2, r0
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008848:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d03f      	beq.n	80088d6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008856:	2300      	movs	r3, #0
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	e033      	b.n	80088c4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4618      	mov	r0, r3
 8008862:	f001 fa38 	bl	8009cd6 <SDIO_ReadFIFO>
 8008866:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	b2da      	uxtb	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	3b01      	subs	r3, #1
 800887a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	0a1b      	lsrs	r3, r3, #8
 8008880:	b2da      	uxtb	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3301      	adds	r3, #1
 800888a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	3b01      	subs	r3, #1
 8008890:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	0c1b      	lsrs	r3, r3, #16
 8008896:	b2da      	uxtb	r2, r3
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3301      	adds	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	0e1b      	lsrs	r3, r3, #24
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3301      	adds	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	3301      	adds	r3, #1
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b07      	cmp	r3, #7
 80088c8:	d9c8      	bls.n	800885c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80088d6:	bf00      	nop
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b086      	sub	sp, #24
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d043      	beq.n	8008980 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	e037      	b.n	800896e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3301      	adds	r3, #1
 8008908:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	3b01      	subs	r3, #1
 800890e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	021a      	lsls	r2, r3, #8
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	4313      	orrs	r3, r2
 800891a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	3301      	adds	r3, #1
 8008920:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	3b01      	subs	r3, #1
 8008926:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	041a      	lsls	r2, r3, #16
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	4313      	orrs	r3, r2
 8008932:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3301      	adds	r3, #1
 8008938:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	3b01      	subs	r3, #1
 800893e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	061a      	lsls	r2, r3, #24
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	4313      	orrs	r3, r2
 800894a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	3b01      	subs	r3, #1
 8008956:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f107 0208 	add.w	r2, r7, #8
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f001 f9c4 	bl	8009cf0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	3301      	adds	r3, #1
 800896c:	617b      	str	r3, [r7, #20]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b07      	cmp	r3, #7
 8008972:	d9c4      	bls.n	80088fe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008980:	bf00      	nop
 8008982:	3718      	adds	r7, #24
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e025      	b.n	80089e8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d106      	bne.n	80089b6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7f9 f925 	bl	8001c00 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2202      	movs	r2, #2
 80089ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3304      	adds	r3, #4
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f001 f893 	bl	8009af4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	461a      	mov	r2, r3
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	f001 f8e8 	bl	8009bae <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e041      	b.n	8008a86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d106      	bne.n	8008a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7f8 ff48 	bl	80018ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f000 fa7e 	bl	8008f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d001      	beq.n	8008aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e04e      	b.n	8008b46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a23      	ldr	r2, [pc, #140]	@ (8008b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d022      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x80>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ad2:	d01d      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x80>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8008b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d018      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x80>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8008b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d013      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x80>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1c      	ldr	r2, [pc, #112]	@ (8008b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d00e      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x80>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1b      	ldr	r2, [pc, #108]	@ (8008b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d009      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x80>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a19      	ldr	r2, [pc, #100]	@ (8008b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d004      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x80>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a18      	ldr	r2, [pc, #96]	@ (8008b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d111      	bne.n	8008b34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b06      	cmp	r3, #6
 8008b20:	d010      	beq.n	8008b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f042 0201 	orr.w	r2, r2, #1
 8008b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b32:	e007      	b.n	8008b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0201 	orr.w	r2, r2, #1
 8008b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	40010000 	.word	0x40010000
 8008b58:	40000400 	.word	0x40000400
 8008b5c:	40000800 	.word	0x40000800
 8008b60:	40000c00 	.word	0x40000c00
 8008b64:	40010400 	.word	0x40010400
 8008b68:	40014000 	.word	0x40014000
 8008b6c:	40001800 	.word	0x40001800

08008b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d020      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d01b      	beq.n	8008bd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f06f 0202 	mvn.w	r2, #2
 8008ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	699b      	ldr	r3, [r3, #24]
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f999 	bl	8008ef2 <HAL_TIM_IC_CaptureCallback>
 8008bc0:	e005      	b.n	8008bce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f98b 	bl	8008ede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f99c 	bl	8008f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f003 0304 	and.w	r3, r3, #4
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d020      	beq.n	8008c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01b      	beq.n	8008c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f06f 0204 	mvn.w	r2, #4
 8008bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f973 	bl	8008ef2 <HAL_TIM_IC_CaptureCallback>
 8008c0c:	e005      	b.n	8008c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f965 	bl	8008ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 f976 	bl	8008f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f003 0308 	and.w	r3, r3, #8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d020      	beq.n	8008c6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0308 	and.w	r3, r3, #8
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d01b      	beq.n	8008c6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0208 	mvn.w	r2, #8
 8008c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2204      	movs	r2, #4
 8008c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f94d 	bl	8008ef2 <HAL_TIM_IC_CaptureCallback>
 8008c58:	e005      	b.n	8008c66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f93f 	bl	8008ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f950 	bl	8008f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f003 0310 	and.w	r3, r3, #16
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d020      	beq.n	8008cb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01b      	beq.n	8008cb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f06f 0210 	mvn.w	r2, #16
 8008c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2208      	movs	r2, #8
 8008c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69db      	ldr	r3, [r3, #28]
 8008c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f927 	bl	8008ef2 <HAL_TIM_IC_CaptureCallback>
 8008ca4:	e005      	b.n	8008cb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f919 	bl	8008ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f92a 	bl	8008f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00c      	beq.n	8008cdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0201 	mvn.w	r2, #1
 8008cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7f8 fae6 	bl	80012a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00c      	beq.n	8008d00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d007      	beq.n	8008d00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fae4 	bl	80092c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00c      	beq.n	8008d24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d007      	beq.n	8008d24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f8fb 	bl	8008f1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f003 0320 	and.w	r3, r3, #32
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00c      	beq.n	8008d48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f003 0320 	and.w	r3, r3, #32
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f06f 0220 	mvn.w	r2, #32
 8008d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fab6 	bl	80092b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d48:	bf00      	nop
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_TIM_ConfigClockSource+0x1c>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e0b4      	b.n	8008ed6 <HAL_TIM_ConfigClockSource+0x186>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2202      	movs	r2, #2
 8008d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008da4:	d03e      	beq.n	8008e24 <HAL_TIM_ConfigClockSource+0xd4>
 8008da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008daa:	f200 8087 	bhi.w	8008ebc <HAL_TIM_ConfigClockSource+0x16c>
 8008dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008db2:	f000 8086 	beq.w	8008ec2 <HAL_TIM_ConfigClockSource+0x172>
 8008db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dba:	d87f      	bhi.n	8008ebc <HAL_TIM_ConfigClockSource+0x16c>
 8008dbc:	2b70      	cmp	r3, #112	@ 0x70
 8008dbe:	d01a      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0xa6>
 8008dc0:	2b70      	cmp	r3, #112	@ 0x70
 8008dc2:	d87b      	bhi.n	8008ebc <HAL_TIM_ConfigClockSource+0x16c>
 8008dc4:	2b60      	cmp	r3, #96	@ 0x60
 8008dc6:	d050      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0x11a>
 8008dc8:	2b60      	cmp	r3, #96	@ 0x60
 8008dca:	d877      	bhi.n	8008ebc <HAL_TIM_ConfigClockSource+0x16c>
 8008dcc:	2b50      	cmp	r3, #80	@ 0x50
 8008dce:	d03c      	beq.n	8008e4a <HAL_TIM_ConfigClockSource+0xfa>
 8008dd0:	2b50      	cmp	r3, #80	@ 0x50
 8008dd2:	d873      	bhi.n	8008ebc <HAL_TIM_ConfigClockSource+0x16c>
 8008dd4:	2b40      	cmp	r3, #64	@ 0x40
 8008dd6:	d058      	beq.n	8008e8a <HAL_TIM_ConfigClockSource+0x13a>
 8008dd8:	2b40      	cmp	r3, #64	@ 0x40
 8008dda:	d86f      	bhi.n	8008ebc <HAL_TIM_ConfigClockSource+0x16c>
 8008ddc:	2b30      	cmp	r3, #48	@ 0x30
 8008dde:	d064      	beq.n	8008eaa <HAL_TIM_ConfigClockSource+0x15a>
 8008de0:	2b30      	cmp	r3, #48	@ 0x30
 8008de2:	d86b      	bhi.n	8008ebc <HAL_TIM_ConfigClockSource+0x16c>
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	d060      	beq.n	8008eaa <HAL_TIM_ConfigClockSource+0x15a>
 8008de8:	2b20      	cmp	r3, #32
 8008dea:	d867      	bhi.n	8008ebc <HAL_TIM_ConfigClockSource+0x16c>
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d05c      	beq.n	8008eaa <HAL_TIM_ConfigClockSource+0x15a>
 8008df0:	2b10      	cmp	r3, #16
 8008df2:	d05a      	beq.n	8008eaa <HAL_TIM_ConfigClockSource+0x15a>
 8008df4:	e062      	b.n	8008ebc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e06:	f000 f9b9 	bl	800917c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	609a      	str	r2, [r3, #8]
      break;
 8008e22:	e04f      	b.n	8008ec4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e34:	f000 f9a2 	bl	800917c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689a      	ldr	r2, [r3, #8]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e46:	609a      	str	r2, [r3, #8]
      break;
 8008e48:	e03c      	b.n	8008ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e56:	461a      	mov	r2, r3
 8008e58:	f000 f916 	bl	8009088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2150      	movs	r1, #80	@ 0x50
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 f96f 	bl	8009146 <TIM_ITRx_SetConfig>
      break;
 8008e68:	e02c      	b.n	8008ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e76:	461a      	mov	r2, r3
 8008e78:	f000 f935 	bl	80090e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2160      	movs	r1, #96	@ 0x60
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 f95f 	bl	8009146 <TIM_ITRx_SetConfig>
      break;
 8008e88:	e01c      	b.n	8008ec4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e96:	461a      	mov	r2, r3
 8008e98:	f000 f8f6 	bl	8009088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2140      	movs	r1, #64	@ 0x40
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f94f 	bl	8009146 <TIM_ITRx_SetConfig>
      break;
 8008ea8:	e00c      	b.n	8008ec4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	f000 f946 	bl	8009146 <TIM_ITRx_SetConfig>
      break;
 8008eba:	e003      	b.n	8008ec4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8008ec0:	e000      	b.n	8008ec4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b083      	sub	sp, #12
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008efa:	bf00      	nop
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f22:	bf00      	nop
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
	...

08008f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a46      	ldr	r2, [pc, #280]	@ (800905c <TIM_Base_SetConfig+0x12c>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d013      	beq.n	8008f70 <TIM_Base_SetConfig+0x40>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f4e:	d00f      	beq.n	8008f70 <TIM_Base_SetConfig+0x40>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a43      	ldr	r2, [pc, #268]	@ (8009060 <TIM_Base_SetConfig+0x130>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d00b      	beq.n	8008f70 <TIM_Base_SetConfig+0x40>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a42      	ldr	r2, [pc, #264]	@ (8009064 <TIM_Base_SetConfig+0x134>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d007      	beq.n	8008f70 <TIM_Base_SetConfig+0x40>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a41      	ldr	r2, [pc, #260]	@ (8009068 <TIM_Base_SetConfig+0x138>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d003      	beq.n	8008f70 <TIM_Base_SetConfig+0x40>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a40      	ldr	r2, [pc, #256]	@ (800906c <TIM_Base_SetConfig+0x13c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d108      	bne.n	8008f82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a35      	ldr	r2, [pc, #212]	@ (800905c <TIM_Base_SetConfig+0x12c>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d02b      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f90:	d027      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a32      	ldr	r2, [pc, #200]	@ (8009060 <TIM_Base_SetConfig+0x130>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d023      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a31      	ldr	r2, [pc, #196]	@ (8009064 <TIM_Base_SetConfig+0x134>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d01f      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a30      	ldr	r2, [pc, #192]	@ (8009068 <TIM_Base_SetConfig+0x138>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d01b      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a2f      	ldr	r2, [pc, #188]	@ (800906c <TIM_Base_SetConfig+0x13c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d017      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8009070 <TIM_Base_SetConfig+0x140>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d013      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8009074 <TIM_Base_SetConfig+0x144>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d00f      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8009078 <TIM_Base_SetConfig+0x148>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d00b      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800907c <TIM_Base_SetConfig+0x14c>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d007      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8009080 <TIM_Base_SetConfig+0x150>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d003      	beq.n	8008fe2 <TIM_Base_SetConfig+0xb2>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a29      	ldr	r2, [pc, #164]	@ (8009084 <TIM_Base_SetConfig+0x154>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d108      	bne.n	8008ff4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a10      	ldr	r2, [pc, #64]	@ (800905c <TIM_Base_SetConfig+0x12c>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d003      	beq.n	8009028 <TIM_Base_SetConfig+0xf8>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a12      	ldr	r2, [pc, #72]	@ (800906c <TIM_Base_SetConfig+0x13c>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d103      	bne.n	8009030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	691a      	ldr	r2, [r3, #16]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b01      	cmp	r3, #1
 8009040:	d105      	bne.n	800904e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	f023 0201 	bic.w	r2, r3, #1
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	611a      	str	r2, [r3, #16]
  }
}
 800904e:	bf00      	nop
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	40010000 	.word	0x40010000
 8009060:	40000400 	.word	0x40000400
 8009064:	40000800 	.word	0x40000800
 8009068:	40000c00 	.word	0x40000c00
 800906c:	40010400 	.word	0x40010400
 8009070:	40014000 	.word	0x40014000
 8009074:	40014400 	.word	0x40014400
 8009078:	40014800 	.word	0x40014800
 800907c:	40001800 	.word	0x40001800
 8009080:	40001c00 	.word	0x40001c00
 8009084:	40002000 	.word	0x40002000

08009088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	f023 0201 	bic.w	r2, r3, #1
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	011b      	lsls	r3, r3, #4
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f023 030a 	bic.w	r3, r3, #10
 80090c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	621a      	str	r2, [r3, #32]
}
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b087      	sub	sp, #28
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	f023 0210 	bic.w	r2, r3, #16
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	031b      	lsls	r3, r3, #12
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	4313      	orrs	r3, r2
 800911a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009122:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	011b      	lsls	r3, r3, #4
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	4313      	orrs	r3, r2
 800912c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	621a      	str	r2, [r3, #32]
}
 800913a:	bf00      	nop
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800915c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4313      	orrs	r3, r2
 8009164:	f043 0307 	orr.w	r3, r3, #7
 8009168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	609a      	str	r2, [r3, #8]
}
 8009170:	bf00      	nop
 8009172:	3714      	adds	r7, #20
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	021a      	lsls	r2, r3, #8
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	431a      	orrs	r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	609a      	str	r2, [r3, #8]
}
 80091b0:	bf00      	nop
 80091b2:	371c      	adds	r7, #28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e05a      	b.n	800928a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a21      	ldr	r2, [pc, #132]	@ (8009298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d022      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009220:	d01d      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a1d      	ldr	r2, [pc, #116]	@ (800929c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d018      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a1b      	ldr	r2, [pc, #108]	@ (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d013      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a1a      	ldr	r2, [pc, #104]	@ (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d00e      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a18      	ldr	r2, [pc, #96]	@ (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d009      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a17      	ldr	r2, [pc, #92]	@ (80092ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d004      	beq.n	800925e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a15      	ldr	r2, [pc, #84]	@ (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d10c      	bne.n	8009278 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	4313      	orrs	r3, r2
 800926e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	40010000 	.word	0x40010000
 800929c:	40000400 	.word	0x40000400
 80092a0:	40000800 	.word	0x40000800
 80092a4:	40000c00 	.word	0x40000c00
 80092a8:	40010400 	.word	0x40010400
 80092ac:	40014000 	.word	0x40014000
 80092b0:	40001800 	.word	0x40001800

080092b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e042      	b.n	8009374 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d106      	bne.n	8009308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7f8 faf4 	bl	80018f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2224      	movs	r2, #36	@ 0x24
 800930c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68da      	ldr	r2, [r3, #12]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800931e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f973 	bl	800960c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	691a      	ldr	r2, [r3, #16]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	695a      	ldr	r2, [r3, #20]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2220      	movs	r2, #32
 8009360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2220      	movs	r2, #32
 8009368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08a      	sub	sp, #40	@ 0x28
 8009380:	af02      	add	r7, sp, #8
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	603b      	str	r3, [r7, #0]
 8009388:	4613      	mov	r3, r2
 800938a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800938c:	2300      	movs	r3, #0
 800938e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b20      	cmp	r3, #32
 800939a:	d175      	bne.n	8009488 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <HAL_UART_Transmit+0x2c>
 80093a2:	88fb      	ldrh	r3, [r7, #6]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e06e      	b.n	800948a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2221      	movs	r2, #33	@ 0x21
 80093b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093ba:	f7f8 fe01 	bl	8001fc0 <HAL_GetTick>
 80093be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	88fa      	ldrh	r2, [r7, #6]
 80093c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	88fa      	ldrh	r2, [r7, #6]
 80093ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093d4:	d108      	bne.n	80093e8 <HAL_UART_Transmit+0x6c>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d104      	bne.n	80093e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80093de:	2300      	movs	r3, #0
 80093e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	61bb      	str	r3, [r7, #24]
 80093e6:	e003      	b.n	80093f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80093f0:	e02e      	b.n	8009450 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2200      	movs	r2, #0
 80093fa:	2180      	movs	r1, #128	@ 0x80
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f848 	bl	8009492 <UART_WaitOnFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d005      	beq.n	8009414 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2220      	movs	r2, #32
 800940c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e03a      	b.n	800948a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10b      	bne.n	8009432 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009428:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	3302      	adds	r3, #2
 800942e:	61bb      	str	r3, [r7, #24]
 8009430:	e007      	b.n	8009442 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	781a      	ldrb	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	3301      	adds	r3, #1
 8009440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009446:	b29b      	uxth	r3, r3
 8009448:	3b01      	subs	r3, #1
 800944a:	b29a      	uxth	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009454:	b29b      	uxth	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1cb      	bne.n	80093f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	2200      	movs	r2, #0
 8009462:	2140      	movs	r1, #64	@ 0x40
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 f814 	bl	8009492 <UART_WaitOnFlagUntilTimeout>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d005      	beq.n	800947c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2220      	movs	r2, #32
 8009474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e006      	b.n	800948a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2220      	movs	r2, #32
 8009480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	e000      	b.n	800948a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009488:	2302      	movs	r3, #2
  }
}
 800948a:	4618      	mov	r0, r3
 800948c:	3720      	adds	r7, #32
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b086      	sub	sp, #24
 8009496:	af00      	add	r7, sp, #0
 8009498:	60f8      	str	r0, [r7, #12]
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	4613      	mov	r3, r2
 80094a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094a2:	e03b      	b.n	800951c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094aa:	d037      	beq.n	800951c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ac:	f7f8 fd88 	bl	8001fc0 <HAL_GetTick>
 80094b0:	4602      	mov	r2, r0
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	6a3a      	ldr	r2, [r7, #32]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d302      	bcc.n	80094c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e03a      	b.n	800953c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f003 0304 	and.w	r3, r3, #4
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d023      	beq.n	800951c <UART_WaitOnFlagUntilTimeout+0x8a>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b80      	cmp	r3, #128	@ 0x80
 80094d8:	d020      	beq.n	800951c <UART_WaitOnFlagUntilTimeout+0x8a>
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2b40      	cmp	r3, #64	@ 0x40
 80094de:	d01d      	beq.n	800951c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0308 	and.w	r3, r3, #8
 80094ea:	2b08      	cmp	r3, #8
 80094ec:	d116      	bne.n	800951c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80094ee:	2300      	movs	r3, #0
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	617b      	str	r3, [r7, #20]
 8009502:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 f81d 	bl	8009544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2208      	movs	r2, #8
 800950e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e00f      	b.n	800953c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	4013      	ands	r3, r2
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	429a      	cmp	r2, r3
 800952a:	bf0c      	ite	eq
 800952c:	2301      	moveq	r3, #1
 800952e:	2300      	movne	r3, #0
 8009530:	b2db      	uxtb	r3, r3
 8009532:	461a      	mov	r2, r3
 8009534:	79fb      	ldrb	r3, [r7, #7]
 8009536:	429a      	cmp	r2, r3
 8009538:	d0b4      	beq.n	80094a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b095      	sub	sp, #84	@ 0x54
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	330c      	adds	r3, #12
 8009552:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009556:	e853 3f00 	ldrex	r3, [r3]
 800955a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	330c      	adds	r3, #12
 800956a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800956c:	643a      	str	r2, [r7, #64]	@ 0x40
 800956e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009574:	e841 2300 	strex	r3, r2, [r1]
 8009578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800957a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1e5      	bne.n	800954c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	3314      	adds	r3, #20
 8009586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6a3b      	ldr	r3, [r7, #32]
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	f023 0301 	bic.w	r3, r3, #1
 8009596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3314      	adds	r3, #20
 800959e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e5      	bne.n	8009580 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d119      	bne.n	80095f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	330c      	adds	r3, #12
 80095c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	e853 3f00 	ldrex	r3, [r3]
 80095ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f023 0310 	bic.w	r3, r3, #16
 80095d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	330c      	adds	r3, #12
 80095da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095dc:	61ba      	str	r2, [r7, #24]
 80095de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6979      	ldr	r1, [r7, #20]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	613b      	str	r3, [r7, #16]
   return(result);
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e5      	bne.n	80095bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2220      	movs	r2, #32
 80095f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80095fe:	bf00      	nop
 8009600:	3754      	adds	r7, #84	@ 0x54
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
	...

0800960c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800960c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009610:	b0c0      	sub	sp, #256	@ 0x100
 8009612:	af00      	add	r7, sp, #0
 8009614:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009628:	68d9      	ldr	r1, [r3, #12]
 800962a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	ea40 0301 	orr.w	r3, r0, r1
 8009634:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	431a      	orrs	r2, r3
 8009644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	431a      	orrs	r2, r3
 800964c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009650:	69db      	ldr	r3, [r3, #28]
 8009652:	4313      	orrs	r3, r2
 8009654:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009664:	f021 010c 	bic.w	r1, r1, #12
 8009668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009672:	430b      	orrs	r3, r1
 8009674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009686:	6999      	ldr	r1, [r3, #24]
 8009688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	ea40 0301 	orr.w	r3, r0, r1
 8009692:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4b8f      	ldr	r3, [pc, #572]	@ (80098d8 <UART_SetConfig+0x2cc>)
 800969c:	429a      	cmp	r2, r3
 800969e:	d005      	beq.n	80096ac <UART_SetConfig+0xa0>
 80096a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	4b8d      	ldr	r3, [pc, #564]	@ (80098dc <UART_SetConfig+0x2d0>)
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d104      	bne.n	80096b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096ac:	f7fd f920 	bl	80068f0 <HAL_RCC_GetPCLK2Freq>
 80096b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80096b4:	e003      	b.n	80096be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096b6:	f7fd f907 	bl	80068c8 <HAL_RCC_GetPCLK1Freq>
 80096ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096c8:	f040 810c 	bne.w	80098e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80096d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80096da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80096de:	4622      	mov	r2, r4
 80096e0:	462b      	mov	r3, r5
 80096e2:	1891      	adds	r1, r2, r2
 80096e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80096e6:	415b      	adcs	r3, r3
 80096e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80096ee:	4621      	mov	r1, r4
 80096f0:	eb12 0801 	adds.w	r8, r2, r1
 80096f4:	4629      	mov	r1, r5
 80096f6:	eb43 0901 	adc.w	r9, r3, r1
 80096fa:	f04f 0200 	mov.w	r2, #0
 80096fe:	f04f 0300 	mov.w	r3, #0
 8009702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800970a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800970e:	4690      	mov	r8, r2
 8009710:	4699      	mov	r9, r3
 8009712:	4623      	mov	r3, r4
 8009714:	eb18 0303 	adds.w	r3, r8, r3
 8009718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800971c:	462b      	mov	r3, r5
 800971e:	eb49 0303 	adc.w	r3, r9, r3
 8009722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009732:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009736:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800973a:	460b      	mov	r3, r1
 800973c:	18db      	adds	r3, r3, r3
 800973e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009740:	4613      	mov	r3, r2
 8009742:	eb42 0303 	adc.w	r3, r2, r3
 8009746:	657b      	str	r3, [r7, #84]	@ 0x54
 8009748:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800974c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009750:	f7f6 fd58 	bl	8000204 <__aeabi_uldivmod>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4b61      	ldr	r3, [pc, #388]	@ (80098e0 <UART_SetConfig+0x2d4>)
 800975a:	fba3 2302 	umull	r2, r3, r3, r2
 800975e:	095b      	lsrs	r3, r3, #5
 8009760:	011c      	lsls	r4, r3, #4
 8009762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009766:	2200      	movs	r2, #0
 8009768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800976c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009770:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009774:	4642      	mov	r2, r8
 8009776:	464b      	mov	r3, r9
 8009778:	1891      	adds	r1, r2, r2
 800977a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800977c:	415b      	adcs	r3, r3
 800977e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009780:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009784:	4641      	mov	r1, r8
 8009786:	eb12 0a01 	adds.w	sl, r2, r1
 800978a:	4649      	mov	r1, r9
 800978c:	eb43 0b01 	adc.w	fp, r3, r1
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800979c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80097a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097a4:	4692      	mov	sl, r2
 80097a6:	469b      	mov	fp, r3
 80097a8:	4643      	mov	r3, r8
 80097aa:	eb1a 0303 	adds.w	r3, sl, r3
 80097ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097b2:	464b      	mov	r3, r9
 80097b4:	eb4b 0303 	adc.w	r3, fp, r3
 80097b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80097cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80097d0:	460b      	mov	r3, r1
 80097d2:	18db      	adds	r3, r3, r3
 80097d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80097d6:	4613      	mov	r3, r2
 80097d8:	eb42 0303 	adc.w	r3, r2, r3
 80097dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80097de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80097e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80097e6:	f7f6 fd0d 	bl	8000204 <__aeabi_uldivmod>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4611      	mov	r1, r2
 80097f0:	4b3b      	ldr	r3, [pc, #236]	@ (80098e0 <UART_SetConfig+0x2d4>)
 80097f2:	fba3 2301 	umull	r2, r3, r3, r1
 80097f6:	095b      	lsrs	r3, r3, #5
 80097f8:	2264      	movs	r2, #100	@ 0x64
 80097fa:	fb02 f303 	mul.w	r3, r2, r3
 80097fe:	1acb      	subs	r3, r1, r3
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009806:	4b36      	ldr	r3, [pc, #216]	@ (80098e0 <UART_SetConfig+0x2d4>)
 8009808:	fba3 2302 	umull	r2, r3, r3, r2
 800980c:	095b      	lsrs	r3, r3, #5
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009814:	441c      	add	r4, r3
 8009816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800981a:	2200      	movs	r2, #0
 800981c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009820:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009824:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009828:	4642      	mov	r2, r8
 800982a:	464b      	mov	r3, r9
 800982c:	1891      	adds	r1, r2, r2
 800982e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009830:	415b      	adcs	r3, r3
 8009832:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009834:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009838:	4641      	mov	r1, r8
 800983a:	1851      	adds	r1, r2, r1
 800983c:	6339      	str	r1, [r7, #48]	@ 0x30
 800983e:	4649      	mov	r1, r9
 8009840:	414b      	adcs	r3, r1
 8009842:	637b      	str	r3, [r7, #52]	@ 0x34
 8009844:	f04f 0200 	mov.w	r2, #0
 8009848:	f04f 0300 	mov.w	r3, #0
 800984c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009850:	4659      	mov	r1, fp
 8009852:	00cb      	lsls	r3, r1, #3
 8009854:	4651      	mov	r1, sl
 8009856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800985a:	4651      	mov	r1, sl
 800985c:	00ca      	lsls	r2, r1, #3
 800985e:	4610      	mov	r0, r2
 8009860:	4619      	mov	r1, r3
 8009862:	4603      	mov	r3, r0
 8009864:	4642      	mov	r2, r8
 8009866:	189b      	adds	r3, r3, r2
 8009868:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800986c:	464b      	mov	r3, r9
 800986e:	460a      	mov	r2, r1
 8009870:	eb42 0303 	adc.w	r3, r2, r3
 8009874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009884:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009888:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800988c:	460b      	mov	r3, r1
 800988e:	18db      	adds	r3, r3, r3
 8009890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009892:	4613      	mov	r3, r2
 8009894:	eb42 0303 	adc.w	r3, r2, r3
 8009898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800989a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800989e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80098a2:	f7f6 fcaf 	bl	8000204 <__aeabi_uldivmod>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4b0d      	ldr	r3, [pc, #52]	@ (80098e0 <UART_SetConfig+0x2d4>)
 80098ac:	fba3 1302 	umull	r1, r3, r3, r2
 80098b0:	095b      	lsrs	r3, r3, #5
 80098b2:	2164      	movs	r1, #100	@ 0x64
 80098b4:	fb01 f303 	mul.w	r3, r1, r3
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	3332      	adds	r3, #50	@ 0x32
 80098be:	4a08      	ldr	r2, [pc, #32]	@ (80098e0 <UART_SetConfig+0x2d4>)
 80098c0:	fba2 2303 	umull	r2, r3, r2, r3
 80098c4:	095b      	lsrs	r3, r3, #5
 80098c6:	f003 0207 	and.w	r2, r3, #7
 80098ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4422      	add	r2, r4
 80098d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098d4:	e106      	b.n	8009ae4 <UART_SetConfig+0x4d8>
 80098d6:	bf00      	nop
 80098d8:	40011000 	.word	0x40011000
 80098dc:	40011400 	.word	0x40011400
 80098e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098e8:	2200      	movs	r2, #0
 80098ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80098f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80098f6:	4642      	mov	r2, r8
 80098f8:	464b      	mov	r3, r9
 80098fa:	1891      	adds	r1, r2, r2
 80098fc:	6239      	str	r1, [r7, #32]
 80098fe:	415b      	adcs	r3, r3
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24
 8009902:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009906:	4641      	mov	r1, r8
 8009908:	1854      	adds	r4, r2, r1
 800990a:	4649      	mov	r1, r9
 800990c:	eb43 0501 	adc.w	r5, r3, r1
 8009910:	f04f 0200 	mov.w	r2, #0
 8009914:	f04f 0300 	mov.w	r3, #0
 8009918:	00eb      	lsls	r3, r5, #3
 800991a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800991e:	00e2      	lsls	r2, r4, #3
 8009920:	4614      	mov	r4, r2
 8009922:	461d      	mov	r5, r3
 8009924:	4643      	mov	r3, r8
 8009926:	18e3      	adds	r3, r4, r3
 8009928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800992c:	464b      	mov	r3, r9
 800992e:	eb45 0303 	adc.w	r3, r5, r3
 8009932:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009942:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	f04f 0300 	mov.w	r3, #0
 800994e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009952:	4629      	mov	r1, r5
 8009954:	008b      	lsls	r3, r1, #2
 8009956:	4621      	mov	r1, r4
 8009958:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800995c:	4621      	mov	r1, r4
 800995e:	008a      	lsls	r2, r1, #2
 8009960:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009964:	f7f6 fc4e 	bl	8000204 <__aeabi_uldivmod>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4b60      	ldr	r3, [pc, #384]	@ (8009af0 <UART_SetConfig+0x4e4>)
 800996e:	fba3 2302 	umull	r2, r3, r3, r2
 8009972:	095b      	lsrs	r3, r3, #5
 8009974:	011c      	lsls	r4, r3, #4
 8009976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800997a:	2200      	movs	r2, #0
 800997c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009980:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009984:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009988:	4642      	mov	r2, r8
 800998a:	464b      	mov	r3, r9
 800998c:	1891      	adds	r1, r2, r2
 800998e:	61b9      	str	r1, [r7, #24]
 8009990:	415b      	adcs	r3, r3
 8009992:	61fb      	str	r3, [r7, #28]
 8009994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009998:	4641      	mov	r1, r8
 800999a:	1851      	adds	r1, r2, r1
 800999c:	6139      	str	r1, [r7, #16]
 800999e:	4649      	mov	r1, r9
 80099a0:	414b      	adcs	r3, r1
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	f04f 0300 	mov.w	r3, #0
 80099ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80099b0:	4659      	mov	r1, fp
 80099b2:	00cb      	lsls	r3, r1, #3
 80099b4:	4651      	mov	r1, sl
 80099b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099ba:	4651      	mov	r1, sl
 80099bc:	00ca      	lsls	r2, r1, #3
 80099be:	4610      	mov	r0, r2
 80099c0:	4619      	mov	r1, r3
 80099c2:	4603      	mov	r3, r0
 80099c4:	4642      	mov	r2, r8
 80099c6:	189b      	adds	r3, r3, r2
 80099c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80099cc:	464b      	mov	r3, r9
 80099ce:	460a      	mov	r2, r1
 80099d0:	eb42 0303 	adc.w	r3, r2, r3
 80099d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80099d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	f04f 0300 	mov.w	r3, #0
 80099ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80099f0:	4649      	mov	r1, r9
 80099f2:	008b      	lsls	r3, r1, #2
 80099f4:	4641      	mov	r1, r8
 80099f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099fa:	4641      	mov	r1, r8
 80099fc:	008a      	lsls	r2, r1, #2
 80099fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009a02:	f7f6 fbff 	bl	8000204 <__aeabi_uldivmod>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	4b38      	ldr	r3, [pc, #224]	@ (8009af0 <UART_SetConfig+0x4e4>)
 8009a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8009a12:	095b      	lsrs	r3, r3, #5
 8009a14:	2264      	movs	r2, #100	@ 0x64
 8009a16:	fb02 f303 	mul.w	r3, r2, r3
 8009a1a:	1acb      	subs	r3, r1, r3
 8009a1c:	011b      	lsls	r3, r3, #4
 8009a1e:	3332      	adds	r3, #50	@ 0x32
 8009a20:	4a33      	ldr	r2, [pc, #204]	@ (8009af0 <UART_SetConfig+0x4e4>)
 8009a22:	fba2 2303 	umull	r2, r3, r2, r3
 8009a26:	095b      	lsrs	r3, r3, #5
 8009a28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a2c:	441c      	add	r4, r3
 8009a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a32:	2200      	movs	r2, #0
 8009a34:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a36:	677a      	str	r2, [r7, #116]	@ 0x74
 8009a38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009a3c:	4642      	mov	r2, r8
 8009a3e:	464b      	mov	r3, r9
 8009a40:	1891      	adds	r1, r2, r2
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	415b      	adcs	r3, r3
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a4c:	4641      	mov	r1, r8
 8009a4e:	1851      	adds	r1, r2, r1
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	4649      	mov	r1, r9
 8009a54:	414b      	adcs	r3, r1
 8009a56:	607b      	str	r3, [r7, #4]
 8009a58:	f04f 0200 	mov.w	r2, #0
 8009a5c:	f04f 0300 	mov.w	r3, #0
 8009a60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a64:	4659      	mov	r1, fp
 8009a66:	00cb      	lsls	r3, r1, #3
 8009a68:	4651      	mov	r1, sl
 8009a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a6e:	4651      	mov	r1, sl
 8009a70:	00ca      	lsls	r2, r1, #3
 8009a72:	4610      	mov	r0, r2
 8009a74:	4619      	mov	r1, r3
 8009a76:	4603      	mov	r3, r0
 8009a78:	4642      	mov	r2, r8
 8009a7a:	189b      	adds	r3, r3, r2
 8009a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a7e:	464b      	mov	r3, r9
 8009a80:	460a      	mov	r2, r1
 8009a82:	eb42 0303 	adc.w	r3, r2, r3
 8009a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a92:	667a      	str	r2, [r7, #100]	@ 0x64
 8009a94:	f04f 0200 	mov.w	r2, #0
 8009a98:	f04f 0300 	mov.w	r3, #0
 8009a9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	008b      	lsls	r3, r1, #2
 8009aa4:	4641      	mov	r1, r8
 8009aa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009aaa:	4641      	mov	r1, r8
 8009aac:	008a      	lsls	r2, r1, #2
 8009aae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009ab2:	f7f6 fba7 	bl	8000204 <__aeabi_uldivmod>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4b0d      	ldr	r3, [pc, #52]	@ (8009af0 <UART_SetConfig+0x4e4>)
 8009abc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ac0:	095b      	lsrs	r3, r3, #5
 8009ac2:	2164      	movs	r1, #100	@ 0x64
 8009ac4:	fb01 f303 	mul.w	r3, r1, r3
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	011b      	lsls	r3, r3, #4
 8009acc:	3332      	adds	r3, #50	@ 0x32
 8009ace:	4a08      	ldr	r2, [pc, #32]	@ (8009af0 <UART_SetConfig+0x4e4>)
 8009ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad4:	095b      	lsrs	r3, r3, #5
 8009ad6:	f003 020f 	and.w	r2, r3, #15
 8009ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4422      	add	r2, r4
 8009ae2:	609a      	str	r2, [r3, #8]
}
 8009ae4:	bf00      	nop
 8009ae6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009aea:	46bd      	mov	sp, r7
 8009aec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009af0:	51eb851f 	.word	0x51eb851f

08009af4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d123      	bne.n	8009b4e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009b0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	6851      	ldr	r1, [r2, #4]
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	6892      	ldr	r2, [r2, #8]
 8009b1a:	4311      	orrs	r1, r2
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	68d2      	ldr	r2, [r2, #12]
 8009b20:	4311      	orrs	r1, r2
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	6912      	ldr	r2, [r2, #16]
 8009b26:	4311      	orrs	r1, r2
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	6952      	ldr	r2, [r2, #20]
 8009b2c:	4311      	orrs	r1, r2
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	6992      	ldr	r2, [r2, #24]
 8009b32:	4311      	orrs	r1, r2
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	69d2      	ldr	r2, [r2, #28]
 8009b38:	4311      	orrs	r1, r2
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	6a12      	ldr	r2, [r2, #32]
 8009b3e:	4311      	orrs	r1, r2
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009b44:	430a      	orrs	r2, r1
 8009b46:	431a      	orrs	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	e028      	b.n	8009ba0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	69d9      	ldr	r1, [r3, #28]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	4319      	orrs	r1, r3
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b64:	430b      	orrs	r3, r1
 8009b66:	431a      	orrs	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009b74:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	6851      	ldr	r1, [r2, #4]
 8009b7c:	683a      	ldr	r2, [r7, #0]
 8009b7e:	6892      	ldr	r2, [r2, #8]
 8009b80:	4311      	orrs	r1, r2
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	68d2      	ldr	r2, [r2, #12]
 8009b86:	4311      	orrs	r1, r2
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	6912      	ldr	r2, [r2, #16]
 8009b8c:	4311      	orrs	r1, r2
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	6952      	ldr	r2, [r2, #20]
 8009b92:	4311      	orrs	r1, r2
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	6992      	ldr	r2, [r2, #24]
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	60b9      	str	r1, [r7, #8]
 8009bb8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d128      	bne.n	8009c12 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	1e59      	subs	r1, r3, #1
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	4319      	orrs	r1, r3
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	4319      	orrs	r1, r3
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	031b      	lsls	r3, r3, #12
 8009bea:	4319      	orrs	r1, r3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	041b      	lsls	r3, r3, #16
 8009bf4:	4319      	orrs	r1, r3
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	051b      	lsls	r3, r3, #20
 8009bfe:	4319      	orrs	r1, r3
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	061b      	lsls	r3, r3, #24
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	609a      	str	r2, [r3, #8]
 8009c10:	e02f      	b.n	8009c72 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009c1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	68d2      	ldr	r2, [r2, #12]
 8009c22:	3a01      	subs	r2, #1
 8009c24:	0311      	lsls	r1, r2, #12
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	6952      	ldr	r2, [r2, #20]
 8009c2a:	3a01      	subs	r2, #1
 8009c2c:	0512      	lsls	r2, r2, #20
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	431a      	orrs	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	1e59      	subs	r1, r3, #1
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	4319      	orrs	r1, r3
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	021b      	lsls	r3, r3, #8
 8009c56:	4319      	orrs	r1, r3
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	041b      	lsls	r3, r3, #16
 8009c60:	4319      	orrs	r1, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	061b      	lsls	r3, r3, #24
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	431a      	orrs	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009c80:	b084      	sub	sp, #16
 8009c82:	b480      	push	{r7}
 8009c84:	b085      	sub	sp, #20
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
 8009c8a:	f107 001c 	add.w	r0, r7, #28
 8009c8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009c96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009c98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009c9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009c9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009ca2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009ca6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009caa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009cba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	b004      	add	sp, #16
 8009cd4:	4770      	bx	lr

08009cd6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b083      	sub	sp, #12
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009d12:	b480      	push	{r7}
 8009d14:	b083      	sub	sp, #12
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2203      	movs	r2, #3
 8009d1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0303 	and.w	r3, r3, #3
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d68:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009d6e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009d74:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009d84:	f023 030f 	bic.w	r3, r3, #15
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b083      	sub	sp, #12
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	b2db      	uxtb	r3, r3
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3314      	adds	r3, #20
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	4413      	add	r3, r2
 8009dcc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
}  
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e04:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009e0a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009e10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0

}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr

08009e36 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b088      	sub	sp, #32
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009e44:	2310      	movs	r3, #16
 8009e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e48:	2340      	movs	r3, #64	@ 0x40
 8009e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e56:	f107 0308 	add.w	r3, r7, #8
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff ff74 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e66:	2110      	movs	r1, #16
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f9d7 	bl	800a21c <SDMMC_GetCmdResp1>
 8009e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e70:	69fb      	ldr	r3, [r7, #28]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3720      	adds	r7, #32
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b088      	sub	sp, #32
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009e88:	2311      	movs	r3, #17
 8009e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e8c:	2340      	movs	r3, #64	@ 0x40
 8009e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e9a:	f107 0308 	add.w	r3, r7, #8
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff ff52 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eaa:	2111      	movs	r1, #17
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f9b5 	bl	800a21c <SDMMC_GetCmdResp1>
 8009eb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eb4:	69fb      	ldr	r3, [r7, #28]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3720      	adds	r7, #32
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b088      	sub	sp, #32
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009ecc:	2312      	movs	r3, #18
 8009ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ed0:	2340      	movs	r3, #64	@ 0x40
 8009ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009edc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ede:	f107 0308 	add.w	r3, r7, #8
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff ff30 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eee:	2112      	movs	r1, #18
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f993 	bl	800a21c <SDMMC_GetCmdResp1>
 8009ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ef8:	69fb      	ldr	r3, [r7, #28]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3720      	adds	r7, #32
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b088      	sub	sp, #32
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009f10:	2318      	movs	r3, #24
 8009f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f14:	2340      	movs	r3, #64	@ 0x40
 8009f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f22:	f107 0308 	add.w	r3, r7, #8
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff ff0e 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f32:	2118      	movs	r1, #24
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f971 	bl	800a21c <SDMMC_GetCmdResp1>
 8009f3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f3c:	69fb      	ldr	r3, [r7, #28]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3720      	adds	r7, #32
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b088      	sub	sp, #32
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009f54:	2319      	movs	r3, #25
 8009f56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f58:	2340      	movs	r3, #64	@ 0x40
 8009f5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f66:	f107 0308 	add.w	r3, r7, #8
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7ff feec 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f76:	2119      	movs	r1, #25
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f94f 	bl	800a21c <SDMMC_GetCmdResp1>
 8009f7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f80:	69fb      	ldr	r3, [r7, #28]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3720      	adds	r7, #32
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
	...

08009f8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009f98:	230c      	movs	r3, #12
 8009f9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f9c:	2340      	movs	r3, #64	@ 0x40
 8009f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009faa:	f107 0308 	add.w	r3, r7, #8
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff feca 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009fb6:	4a05      	ldr	r2, [pc, #20]	@ (8009fcc <SDMMC_CmdStopTransfer+0x40>)
 8009fb8:	210c      	movs	r1, #12
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f92e 	bl	800a21c <SDMMC_GetCmdResp1>
 8009fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fc2:	69fb      	ldr	r3, [r7, #28]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3720      	adds	r7, #32
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	05f5e100 	.word	0x05f5e100

08009fd0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08a      	sub	sp, #40	@ 0x28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009fe0:	2307      	movs	r3, #7
 8009fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fe4:	2340      	movs	r3, #64	@ 0x40
 8009fe6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ff0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ff2:	f107 0310 	add.w	r3, r7, #16
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7ff fea6 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a002:	2107      	movs	r1, #7
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 f909 	bl	800a21c <SDMMC_GetCmdResp1>
 800a00a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3728      	adds	r7, #40	@ 0x28
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b088      	sub	sp, #32
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a01e:	2300      	movs	r3, #0
 800a020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a02a:	2300      	movs	r3, #0
 800a02c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a02e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a032:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a034:	f107 0308 	add.w	r3, r7, #8
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff fe85 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fb23 	bl	800a68c <SDMMC_GetCmdError>
 800a046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a048:	69fb      	ldr	r3, [r7, #28]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3720      	adds	r7, #32
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b088      	sub	sp, #32
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a05a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a05e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a060:	2308      	movs	r3, #8
 800a062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a064:	2340      	movs	r3, #64	@ 0x40
 800a066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a068:	2300      	movs	r3, #0
 800a06a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a06c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a070:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a072:	f107 0308 	add.w	r3, r7, #8
 800a076:	4619      	mov	r1, r3
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7ff fe66 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fab6 	bl	800a5f0 <SDMMC_GetCmdResp7>
 800a084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a086:	69fb      	ldr	r3, [r7, #28]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3720      	adds	r7, #32
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a09e:	2337      	movs	r3, #55	@ 0x37
 800a0a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0a2:	2340      	movs	r3, #64	@ 0x40
 800a0a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0b0:	f107 0308 	add.w	r3, r7, #8
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7ff fe47 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a0bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0c0:	2137      	movs	r1, #55	@ 0x37
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f8aa 	bl	800a21c <SDMMC_GetCmdResp1>
 800a0c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ca:	69fb      	ldr	r3, [r7, #28]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3720      	adds	r7, #32
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a0e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a0ea:	2329      	movs	r3, #41	@ 0x29
 800a0ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0ee:	2340      	movs	r3, #64	@ 0x40
 800a0f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0fc:	f107 0308 	add.w	r3, r7, #8
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff fe21 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f9bd 	bl	800a488 <SDMMC_GetCmdResp3>
 800a10e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a110:	69fb      	ldr	r3, [r7, #28]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3720      	adds	r7, #32
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b088      	sub	sp, #32
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a126:	2302      	movs	r3, #2
 800a128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a12a:	23c0      	movs	r3, #192	@ 0xc0
 800a12c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a138:	f107 0308 	add.w	r3, r7, #8
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff fe03 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f957 	bl	800a3f8 <SDMMC_GetCmdResp2>
 800a14a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a14c:	69fb      	ldr	r3, [r7, #28]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3720      	adds	r7, #32
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b088      	sub	sp, #32
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a164:	2309      	movs	r3, #9
 800a166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a168:	23c0      	movs	r3, #192	@ 0xc0
 800a16a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a16c:	2300      	movs	r3, #0
 800a16e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a170:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a176:	f107 0308 	add.w	r3, r7, #8
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff fde4 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f938 	bl	800a3f8 <SDMMC_GetCmdResp2>
 800a188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a18a:	69fb      	ldr	r3, [r7, #28]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3720      	adds	r7, #32
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b088      	sub	sp, #32
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1a6:	2340      	movs	r3, #64	@ 0x40
 800a1a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1b4:	f107 0308 	add.w	r3, r7, #8
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff fdc5 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	2103      	movs	r1, #3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f99d 	bl	800a504 <SDMMC_GetCmdResp6>
 800a1ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1cc:	69fb      	ldr	r3, [r7, #28]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3720      	adds	r7, #32
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b088      	sub	sp, #32
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a1e4:	230d      	movs	r3, #13
 800a1e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1e8:	2340      	movs	r3, #64	@ 0x40
 800a1ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1f6:	f107 0308 	add.w	r3, r7, #8
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7ff fda4 	bl	8009d4a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a202:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a206:	210d      	movs	r1, #13
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f807 	bl	800a21c <SDMMC_GetCmdResp1>
 800a20e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a210:	69fb      	ldr	r3, [r7, #28]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3720      	adds	r7, #32
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	460b      	mov	r3, r1
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a22a:	4b70      	ldr	r3, [pc, #448]	@ (800a3ec <SDMMC_GetCmdResp1+0x1d0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a70      	ldr	r2, [pc, #448]	@ (800a3f0 <SDMMC_GetCmdResp1+0x1d4>)
 800a230:	fba2 2303 	umull	r2, r3, r2, r3
 800a234:	0a5a      	lsrs	r2, r3, #9
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	fb02 f303 	mul.w	r3, r2, r3
 800a23c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	1e5a      	subs	r2, r3, #1
 800a242:	61fa      	str	r2, [r7, #28]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d102      	bne.n	800a24e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a248:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a24c:	e0c9      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a252:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0ef      	beq.n	800a23e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1ea      	bne.n	800a23e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d004      	beq.n	800a27e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2204      	movs	r2, #4
 800a278:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a27a:	2304      	movs	r3, #4
 800a27c:	e0b1      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	2b00      	cmp	r3, #0
 800a288:	d004      	beq.n	800a294 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2201      	movs	r2, #1
 800a28e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a290:	2301      	movs	r3, #1
 800a292:	e0a6      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	22c5      	movs	r2, #197	@ 0xc5
 800a298:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7ff fd7f 	bl	8009d9e <SDIO_GetCommandResponse>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	7afb      	ldrb	r3, [r7, #11]
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d001      	beq.n	800a2ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e099      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f7ff fd81 	bl	8009db8 <SDIO_GetResponse>
 800a2b6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	4b4e      	ldr	r3, [pc, #312]	@ (800a3f4 <SDMMC_GetCmdResp1+0x1d8>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	e08d      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	da02      	bge.n	800a2d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a2cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a2d0:	e087      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a2dc:	2340      	movs	r3, #64	@ 0x40
 800a2de:	e080      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a2ea:	2380      	movs	r3, #128	@ 0x80
 800a2ec:	e079      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a2f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2fc:	e071      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a308:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a30c:	e069      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a31c:	e061      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a328:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a32c:	e059      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a33c:	e051      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a348:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a34c:	e049      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a358:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a35c:	e041      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a368:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a36c:	e039      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d002      	beq.n	800a37e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a378:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a37c:	e031      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a388:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a38c:	e029      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a398:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a39c:	e021      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a3a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a3ac:	e019      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a3b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a3bc:	e011      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a3c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a3cc:	e009      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f003 0308 	and.w	r3, r3, #8
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a3d8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a3dc:	e001      	b.n	800a3e2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3720      	adds	r7, #32
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	2000001c 	.word	0x2000001c
 800a3f0:	10624dd3 	.word	0x10624dd3
 800a3f4:	fdffe008 	.word	0xfdffe008

0800a3f8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a400:	4b1f      	ldr	r3, [pc, #124]	@ (800a480 <SDMMC_GetCmdResp2+0x88>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a1f      	ldr	r2, [pc, #124]	@ (800a484 <SDMMC_GetCmdResp2+0x8c>)
 800a406:	fba2 2303 	umull	r2, r3, r2, r3
 800a40a:	0a5b      	lsrs	r3, r3, #9
 800a40c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a410:	fb02 f303 	mul.w	r3, r2, r3
 800a414:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	1e5a      	subs	r2, r3, #1
 800a41a:	60fa      	str	r2, [r7, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a420:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a424:	e026      	b.n	800a474 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a42a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a432:	2b00      	cmp	r3, #0
 800a434:	d0ef      	beq.n	800a416 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1ea      	bne.n	800a416 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d004      	beq.n	800a456 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2204      	movs	r2, #4
 800a450:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a452:	2304      	movs	r3, #4
 800a454:	e00e      	b.n	800a474 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d004      	beq.n	800a46c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a468:	2301      	movs	r3, #1
 800a46a:	e003      	b.n	800a474 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	22c5      	movs	r2, #197	@ 0xc5
 800a470:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	2000001c 	.word	0x2000001c
 800a484:	10624dd3 	.word	0x10624dd3

0800a488 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a490:	4b1a      	ldr	r3, [pc, #104]	@ (800a4fc <SDMMC_GetCmdResp3+0x74>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a1a      	ldr	r2, [pc, #104]	@ (800a500 <SDMMC_GetCmdResp3+0x78>)
 800a496:	fba2 2303 	umull	r2, r3, r2, r3
 800a49a:	0a5b      	lsrs	r3, r3, #9
 800a49c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4a0:	fb02 f303 	mul.w	r3, r2, r3
 800a4a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	1e5a      	subs	r2, r3, #1
 800a4aa:	60fa      	str	r2, [r7, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d102      	bne.n	800a4b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4b4:	e01b      	b.n	800a4ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0ef      	beq.n	800a4a6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1ea      	bne.n	800a4a6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d004      	beq.n	800a4e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2204      	movs	r2, #4
 800a4e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4e2:	2304      	movs	r3, #4
 800a4e4:	e003      	b.n	800a4ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	22c5      	movs	r2, #197	@ 0xc5
 800a4ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	2000001c 	.word	0x2000001c
 800a500:	10624dd3 	.word	0x10624dd3

0800a504 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	460b      	mov	r3, r1
 800a50e:	607a      	str	r2, [r7, #4]
 800a510:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a512:	4b35      	ldr	r3, [pc, #212]	@ (800a5e8 <SDMMC_GetCmdResp6+0xe4>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a35      	ldr	r2, [pc, #212]	@ (800a5ec <SDMMC_GetCmdResp6+0xe8>)
 800a518:	fba2 2303 	umull	r2, r3, r2, r3
 800a51c:	0a5b      	lsrs	r3, r3, #9
 800a51e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a522:	fb02 f303 	mul.w	r3, r2, r3
 800a526:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	1e5a      	subs	r2, r3, #1
 800a52c:	61fa      	str	r2, [r7, #28]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d102      	bne.n	800a538 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a532:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a536:	e052      	b.n	800a5de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a53c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0ef      	beq.n	800a528 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1ea      	bne.n	800a528 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a556:	f003 0304 	and.w	r3, r3, #4
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d004      	beq.n	800a568 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2204      	movs	r2, #4
 800a562:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a564:	2304      	movs	r3, #4
 800a566:	e03a      	b.n	800a5de <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a56c:	f003 0301 	and.w	r3, r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	d004      	beq.n	800a57e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2201      	movs	r2, #1
 800a578:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e02f      	b.n	800a5de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff fc0d 	bl	8009d9e <SDIO_GetCommandResponse>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	7afb      	ldrb	r3, [r7, #11]
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d001      	beq.n	800a592 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a58e:	2301      	movs	r3, #1
 800a590:	e025      	b.n	800a5de <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	22c5      	movs	r2, #197	@ 0xc5
 800a596:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a598:	2100      	movs	r1, #0
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7ff fc0c 	bl	8009db8 <SDIO_GetResponse>
 800a5a0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d106      	bne.n	800a5ba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	0c1b      	lsrs	r3, r3, #16
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e011      	b.n	800a5de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a5c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5c8:	e009      	b.n	800a5de <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a5d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5d8:	e001      	b.n	800a5de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a5da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3720      	adds	r7, #32
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	2000001c 	.word	0x2000001c
 800a5ec:	10624dd3 	.word	0x10624dd3

0800a5f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5f8:	4b22      	ldr	r3, [pc, #136]	@ (800a684 <SDMMC_GetCmdResp7+0x94>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a22      	ldr	r2, [pc, #136]	@ (800a688 <SDMMC_GetCmdResp7+0x98>)
 800a5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a602:	0a5b      	lsrs	r3, r3, #9
 800a604:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a608:	fb02 f303 	mul.w	r3, r2, r3
 800a60c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	1e5a      	subs	r2, r3, #1
 800a612:	60fa      	str	r2, [r7, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d102      	bne.n	800a61e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a618:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a61c:	e02c      	b.n	800a678 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a622:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d0ef      	beq.n	800a60e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1ea      	bne.n	800a60e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	d004      	beq.n	800a64e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2204      	movs	r2, #4
 800a648:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a64a:	2304      	movs	r3, #4
 800a64c:	e014      	b.n	800a678 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	d004      	beq.n	800a664 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a660:	2301      	movs	r3, #1
 800a662:	e009      	b.n	800a678 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2240      	movs	r2, #64	@ 0x40
 800a674:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a676:	2300      	movs	r3, #0
  
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr
 800a684:	2000001c 	.word	0x2000001c
 800a688:	10624dd3 	.word	0x10624dd3

0800a68c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a694:	4b11      	ldr	r3, [pc, #68]	@ (800a6dc <SDMMC_GetCmdError+0x50>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a11      	ldr	r2, [pc, #68]	@ (800a6e0 <SDMMC_GetCmdError+0x54>)
 800a69a:	fba2 2303 	umull	r2, r3, r2, r3
 800a69e:	0a5b      	lsrs	r3, r3, #9
 800a6a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6a4:	fb02 f303 	mul.w	r3, r2, r3
 800a6a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	1e5a      	subs	r2, r3, #1
 800a6ae:	60fa      	str	r2, [r7, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6b8:	e009      	b.n	800a6ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0f1      	beq.n	800a6aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	22c5      	movs	r2, #197	@ 0xc5
 800a6ca:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	2000001c 	.word	0x2000001c
 800a6e0:	10624dd3 	.word	0x10624dd3

0800a6e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	f107 001c 	add.w	r0, r7, #28
 800a6f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d123      	bne.n	800a746 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a702:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a712:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a726:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d105      	bne.n	800a73a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f98d 	bl	800aa5a <USB_CoreReset>
 800a740:	4603      	mov	r3, r0
 800a742:	73fb      	strb	r3, [r7, #15]
 800a744:	e01b      	b.n	800a77e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f981 	bl	800aa5a <USB_CoreReset>
 800a758:	4603      	mov	r3, r0
 800a75a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a75c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a760:	2b00      	cmp	r3, #0
 800a762:	d106      	bne.n	800a772 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a768:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a770:	e005      	b.n	800a77e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a776:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a77e:	7fbb      	ldrb	r3, [r7, #30]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d10b      	bne.n	800a79c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f043 0206 	orr.w	r2, r3, #6
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	f043 0220 	orr.w	r2, r3, #32
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7a8:	b004      	add	sp, #16
 800a7aa:	4770      	bx	lr

0800a7ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f023 0201 	bic.w	r2, r3, #1
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b084      	sub	sp, #16
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d115      	bne.n	800a81c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a7fc:	200a      	movs	r0, #10
 800a7fe:	f7f7 fbeb 	bl	8001fd8 <HAL_Delay>
      ms += 10U;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	330a      	adds	r3, #10
 800a806:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f918 	bl	800aa3e <USB_GetMode>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b01      	cmp	r3, #1
 800a812:	d01e      	beq.n	800a852 <USB_SetCurrentMode+0x84>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2bc7      	cmp	r3, #199	@ 0xc7
 800a818:	d9f0      	bls.n	800a7fc <USB_SetCurrentMode+0x2e>
 800a81a:	e01a      	b.n	800a852 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a81c:	78fb      	ldrb	r3, [r7, #3]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d115      	bne.n	800a84e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a82e:	200a      	movs	r0, #10
 800a830:	f7f7 fbd2 	bl	8001fd8 <HAL_Delay>
      ms += 10U;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	330a      	adds	r3, #10
 800a838:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f8ff 	bl	800aa3e <USB_GetMode>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <USB_SetCurrentMode+0x84>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2bc7      	cmp	r3, #199	@ 0xc7
 800a84a:	d9f0      	bls.n	800a82e <USB_SetCurrentMode+0x60>
 800a84c:	e001      	b.n	800a852 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e005      	b.n	800a85e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2bc8      	cmp	r3, #200	@ 0xc8
 800a856:	d101      	bne.n	800a85c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e000      	b.n	800a85e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a866:	b480      	push	{r7}
 800a868:	b085      	sub	sp, #20
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	3301      	adds	r3, #1
 800a878:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a880:	d901      	bls.n	800a886 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e01b      	b.n	800a8be <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	daf2      	bge.n	800a874 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	019b      	lsls	r3, r3, #6
 800a896:	f043 0220 	orr.w	r2, r3, #32
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8aa:	d901      	bls.n	800a8b0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e006      	b.n	800a8be <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	f003 0320 	and.w	r3, r3, #32
 800a8b8:	2b20      	cmp	r3, #32
 800a8ba:	d0f0      	beq.n	800a89e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b085      	sub	sp, #20
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8e2:	d901      	bls.n	800a8e8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e018      	b.n	800a91a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	daf2      	bge.n	800a8d6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2210      	movs	r2, #16
 800a8f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a906:	d901      	bls.n	800a90c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e006      	b.n	800a91a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	f003 0310 	and.w	r3, r3, #16
 800a914:	2b10      	cmp	r3, #16
 800a916:	d0f0      	beq.n	800a8fa <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a926:	b480      	push	{r7}
 800a928:	b08b      	sub	sp, #44	@ 0x2c
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	60f8      	str	r0, [r7, #12]
 800a92e:	60b9      	str	r1, [r7, #8]
 800a930:	4613      	mov	r3, r2
 800a932:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a93c:	88fb      	ldrh	r3, [r7, #6]
 800a93e:	089b      	lsrs	r3, r3, #2
 800a940:	b29b      	uxth	r3, r3
 800a942:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a944:	88fb      	ldrh	r3, [r7, #6]
 800a946:	f003 0303 	and.w	r3, r3, #3
 800a94a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a94c:	2300      	movs	r3, #0
 800a94e:	623b      	str	r3, [r7, #32]
 800a950:	e014      	b.n	800a97c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	601a      	str	r2, [r3, #0]
    pDest++;
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	3301      	adds	r3, #1
 800a962:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	3301      	adds	r3, #1
 800a968:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96c:	3301      	adds	r3, #1
 800a96e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a972:	3301      	adds	r3, #1
 800a974:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	3301      	adds	r3, #1
 800a97a:	623b      	str	r3, [r7, #32]
 800a97c:	6a3a      	ldr	r2, [r7, #32]
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	429a      	cmp	r2, r3
 800a982:	d3e6      	bcc.n	800a952 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a984:	8bfb      	ldrh	r3, [r7, #30]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d01e      	beq.n	800a9c8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a98a:	2300      	movs	r3, #0
 800a98c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a994:	461a      	mov	r2, r3
 800a996:	f107 0310 	add.w	r3, r7, #16
 800a99a:	6812      	ldr	r2, [r2, #0]
 800a99c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a99e:	693a      	ldr	r2, [r7, #16]
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	00db      	lsls	r3, r3, #3
 800a9a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ae:	701a      	strb	r2, [r3, #0]
      i++;
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	623b      	str	r3, [r7, #32]
      pDest++;
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a9bc:	8bfb      	ldrh	r3, [r7, #30]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a9c2:	8bfb      	ldrh	r3, [r7, #30]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d1ea      	bne.n	800a99e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	372c      	adds	r7, #44	@ 0x2c
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b085      	sub	sp, #20
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	699b      	ldr	r3, [r3, #24]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3714      	adds	r7, #20
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	460b      	mov	r3, r1
 800aa06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800aa0c:	78fb      	ldrb	r3, [r7, #3]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800aa1c:	78fb      	ldrb	r3, [r7, #3]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa30:	68bb      	ldr	r3, [r7, #8]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	695b      	ldr	r3, [r3, #20]
 800aa4a:	f003 0301 	and.w	r3, r3, #1
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa62:	2300      	movs	r3, #0
 800aa64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa72:	d901      	bls.n	800aa78 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e01b      	b.n	800aab0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	daf2      	bge.n	800aa66 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa80:	2300      	movs	r3, #0
 800aa82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	f043 0201 	orr.w	r2, r3, #1
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	3301      	adds	r3, #1
 800aa94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa9c:	d901      	bls.n	800aaa2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e006      	b.n	800aab0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d0f0      	beq.n	800aa90 <USB_CoreReset+0x36>

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aabc:	b084      	sub	sp, #16
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b086      	sub	sp, #24
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aaca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aadc:	461a      	mov	r2, r3
 800aade:	2300      	movs	r3, #0
 800aae0:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d119      	bne.n	800ab2e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800aafa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d10a      	bne.n	800ab18 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab10:	f043 0304 	orr.w	r3, r3, #4
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	e014      	b.n	800ab42 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab26:	f023 0304 	bic.w	r3, r3, #4
 800ab2a:	6013      	str	r3, [r2, #0]
 800ab2c:	e009      	b.n	800ab42 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab3c:	f023 0304 	bic.w	r3, r3, #4
 800ab40:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab42:	2110      	movs	r1, #16
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7ff fe8e 	bl	800a866 <USB_FlushTxFifo>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7ff feb8 	bl	800a8ca <USB_FlushRxFifo>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab64:	2300      	movs	r3, #0
 800ab66:	613b      	str	r3, [r7, #16]
 800ab68:	e015      	b.n	800ab96 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab76:	461a      	mov	r2, r3
 800ab78:	f04f 33ff 	mov.w	r3, #4294967295
 800ab7c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	015a      	lsls	r2, r3, #5
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	3301      	adds	r3, #1
 800ab94:	613b      	str	r3, [r7, #16]
 800ab96:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d3e3      	bcc.n	800ab6a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f04f 32ff 	mov.w	r2, #4294967295
 800abae:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a18      	ldr	r2, [pc, #96]	@ (800ac14 <USB_HostInit+0x158>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d10b      	bne.n	800abd0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abbe:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a15      	ldr	r2, [pc, #84]	@ (800ac18 <USB_HostInit+0x15c>)
 800abc4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a14      	ldr	r2, [pc, #80]	@ (800ac1c <USB_HostInit+0x160>)
 800abca:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800abce:	e009      	b.n	800abe4 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2280      	movs	r2, #128	@ 0x80
 800abd4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a11      	ldr	r2, [pc, #68]	@ (800ac20 <USB_HostInit+0x164>)
 800abda:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a11      	ldr	r2, [pc, #68]	@ (800ac24 <USB_HostInit+0x168>)
 800abe0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800abe4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d105      	bne.n	800abf8 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	f043 0210 	orr.w	r2, r3, #16
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	699a      	ldr	r2, [r3, #24]
 800abfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ac28 <USB_HostInit+0x16c>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800ac04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac10:	b004      	add	sp, #16
 800ac12:	4770      	bx	lr
 800ac14:	40040000 	.word	0x40040000
 800ac18:	01000200 	.word	0x01000200
 800ac1c:	00e00300 	.word	0x00e00300
 800ac20:	00600080 	.word	0x00600080
 800ac24:	004000e0 	.word	0x004000e0
 800ac28:	a3200008 	.word	0xa3200008

0800ac2c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac4a:	f023 0303 	bic.w	r3, r3, #3
 800ac4e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	78fb      	ldrb	r3, [r7, #3]
 800ac5a:	f003 0303 	and.w	r3, r3, #3
 800ac5e:	68f9      	ldr	r1, [r7, #12]
 800ac60:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ac64:	4313      	orrs	r3, r2
 800ac66:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d107      	bne.n	800ac7e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac74:	461a      	mov	r2, r3
 800ac76:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ac7a:	6053      	str	r3, [r2, #4]
 800ac7c:	e00c      	b.n	800ac98 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800ac7e:	78fb      	ldrb	r3, [r7, #3]
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d107      	bne.n	800ac94 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800ac90:	6053      	str	r3, [r2, #4]
 800ac92:	e001      	b.n	800ac98 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	e000      	b.n	800ac9a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b085      	sub	sp, #20
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	b29b      	uxth	r3, r3
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800acc8:	b480      	push	{r7}
 800acca:	b089      	sub	sp, #36	@ 0x24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800acd8:	78fb      	ldrb	r3, [r7, #3]
 800acda:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	015a      	lsls	r2, r3, #5
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	0c9b      	lsrs	r3, r3, #18
 800acf0:	f003 0303 	and.w	r3, r3, #3
 800acf4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	0fdb      	lsrs	r3, r3, #31
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	015a      	lsls	r2, r3, #5
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	4413      	add	r3, r2
 800ad14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	0fdb      	lsrs	r3, r3, #31
 800ad1c:	f003 0301 	and.w	r3, r3, #1
 800ad20:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f003 0320 	and.w	r3, r3, #32
 800ad2a:	2b20      	cmp	r3, #32
 800ad2c:	d10d      	bne.n	800ad4a <USB_HC_Halt+0x82>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10a      	bne.n	800ad4a <USB_HC_Halt+0x82>
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d005      	beq.n	800ad46 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d002      	beq.n	800ad46 <USB_HC_Halt+0x7e>
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d101      	bne.n	800ad4a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	e0d8      	b.n	800aefc <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d002      	beq.n	800ad56 <USB_HC_Halt+0x8e>
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	d173      	bne.n	800ae3e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	015a      	lsls	r2, r3, #5
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	69ba      	ldr	r2, [r7, #24]
 800ad66:	0151      	lsls	r1, r2, #5
 800ad68:	69fa      	ldr	r2, [r7, #28]
 800ad6a:	440a      	add	r2, r1
 800ad6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ad70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad74:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d14a      	bne.n	800ae18 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad86:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d133      	bne.n	800adf6 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	69ba      	ldr	r2, [r7, #24]
 800ad9e:	0151      	lsls	r1, r2, #5
 800ada0:	69fa      	ldr	r2, [r7, #28]
 800ada2:	440a      	add	r2, r1
 800ada4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ada8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800adac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	69ba      	ldr	r2, [r7, #24]
 800adbe:	0151      	lsls	r1, r2, #5
 800adc0:	69fa      	ldr	r2, [r7, #28]
 800adc2:	440a      	add	r2, r1
 800adc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800adcc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	3301      	adds	r3, #1
 800add2:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800adda:	d82e      	bhi.n	800ae3a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adf2:	d0ec      	beq.n	800adce <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800adf4:	e081      	b.n	800aefa <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	015a      	lsls	r2, r3, #5
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	4413      	add	r3, r2
 800adfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	0151      	lsls	r1, r2, #5
 800ae08:	69fa      	ldr	r2, [r7, #28]
 800ae0a:	440a      	add	r2, r1
 800ae0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae14:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae16:	e070      	b.n	800aefa <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	015a      	lsls	r2, r3, #5
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	4413      	add	r3, r2
 800ae20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	69ba      	ldr	r2, [r7, #24]
 800ae28:	0151      	lsls	r1, r2, #5
 800ae2a:	69fa      	ldr	r2, [r7, #28]
 800ae2c:	440a      	add	r2, r1
 800ae2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ae36:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae38:	e05f      	b.n	800aefa <USB_HC_Halt+0x232>
            break;
 800ae3a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae3c:	e05d      	b.n	800aefa <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	0151      	lsls	r1, r2, #5
 800ae50:	69fa      	ldr	r2, [r7, #28]
 800ae52:	440a      	add	r2, r1
 800ae54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae5c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d133      	bne.n	800aed6 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	69ba      	ldr	r2, [r7, #24]
 800ae7e:	0151      	lsls	r1, r2, #5
 800ae80:	69fa      	ldr	r2, [r7, #28]
 800ae82:	440a      	add	r2, r1
 800ae84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae8c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	015a      	lsls	r2, r3, #5
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	4413      	add	r3, r2
 800ae96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	69ba      	ldr	r2, [r7, #24]
 800ae9e:	0151      	lsls	r1, r2, #5
 800aea0:	69fa      	ldr	r2, [r7, #28]
 800aea2:	440a      	add	r2, r1
 800aea4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aea8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aeac:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aeba:	d81d      	bhi.n	800aef8 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	015a      	lsls	r2, r3, #5
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aed2:	d0ec      	beq.n	800aeae <USB_HC_Halt+0x1e6>
 800aed4:	e011      	b.n	800aefa <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	015a      	lsls	r2, r3, #5
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	4413      	add	r3, r2
 800aede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	69ba      	ldr	r2, [r7, #24]
 800aee6:	0151      	lsls	r1, r2, #5
 800aee8:	69fa      	ldr	r2, [r7, #28]
 800aeea:	440a      	add	r2, r1
 800aeec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aef0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aef4:	6013      	str	r3, [r2, #0]
 800aef6:	e000      	b.n	800aefa <USB_HC_Halt+0x232>
          break;
 800aef8:	bf00      	nop
    }
  }

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3724      	adds	r7, #36	@ 0x24
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800af0c:	4904      	ldr	r1, [pc, #16]	@ (800af20 <MX_FATFS_Init+0x18>)
 800af0e:	4805      	ldr	r0, [pc, #20]	@ (800af24 <MX_FATFS_Init+0x1c>)
 800af10:	f003 f820 	bl	800df54 <FATFS_LinkDriver>
 800af14:	4603      	mov	r3, r0
 800af16:	461a      	mov	r2, r3
 800af18:	4b03      	ldr	r3, [pc, #12]	@ (800af28 <MX_FATFS_Init+0x20>)
 800af1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af1c:	bf00      	nop
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	20000b5c 	.word	0x20000b5c
 800af24:	0800e05c 	.word	0x0800e05c
 800af28:	20000b58 	.word	0x20000b58

0800af2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800af2c:	b480      	push	{r7}
 800af2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af32:	4618      	mov	r0, r3
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800af46:	f000 f888 	bl	800b05a <BSP_SD_IsDetected>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d001      	beq.n	800af54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	e005      	b.n	800af60 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800af54:	4804      	ldr	r0, [pc, #16]	@ (800af68 <BSP_SD_Init+0x2c>)
 800af56:	f7fc fbfd 	bl	8007754 <HAL_SD_Init>
 800af5a:	4603      	mov	r3, r0
 800af5c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800af5e:	79fb      	ldrb	r3, [r7, #7]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	200002cc 	.word	0x200002cc

0800af6c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	68f9      	ldr	r1, [r7, #12]
 800af82:	4806      	ldr	r0, [pc, #24]	@ (800af9c <BSP_SD_ReadBlocks_DMA+0x30>)
 800af84:	f7fc fc96 	bl	80078b4 <HAL_SD_ReadBlocks_DMA>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af92:	7dfb      	ldrb	r3, [r7, #23]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	200002cc 	.word	0x200002cc

0800afa0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	68f9      	ldr	r1, [r7, #12]
 800afb6:	4806      	ldr	r0, [pc, #24]	@ (800afd0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800afb8:	f7fc fd5c 	bl	8007a74 <HAL_SD_WriteBlocks_DMA>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	200002cc 	.word	0x200002cc

0800afd4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800afd8:	4805      	ldr	r0, [pc, #20]	@ (800aff0 <BSP_SD_GetCardState+0x1c>)
 800afda:	f7fd f97d 	bl	80082d8 <HAL_SD_GetCardState>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b04      	cmp	r3, #4
 800afe2:	bf14      	ite	ne
 800afe4:	2301      	movne	r3, #1
 800afe6:	2300      	moveq	r3, #0
 800afe8:	b2db      	uxtb	r3, r3
}
 800afea:	4618      	mov	r0, r3
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	200002cc 	.word	0x200002cc

0800aff4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	4803      	ldr	r0, [pc, #12]	@ (800b00c <BSP_SD_GetCardInfo+0x18>)
 800b000:	f7fd f93e 	bl	8008280 <HAL_SD_GetCardInfo>
}
 800b004:	bf00      	nop
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	200002cc 	.word	0x200002cc

0800b010 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b018:	f000 f818 	bl	800b04c <BSP_SD_AbortCallback>
}
 800b01c:	bf00      	nop
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b02c:	f000 f9a8 	bl	800b380 <BSP_SD_WriteCpltCallback>
}
 800b030:	bf00      	nop
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b040:	f000 f9aa 	bl	800b398 <BSP_SD_ReadCpltCallback>
}
 800b044:	bf00      	nop
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0

}
 800b050:	bf00      	nop
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b082      	sub	sp, #8
 800b05e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b060:	2301      	movs	r3, #1
 800b062:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b064:	f000 f80c 	bl	800b080 <BSP_PlatformIsDetected>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b06e:	2300      	movs	r3, #0
 800b070:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b072:	79fb      	ldrb	r3, [r7, #7]
 800b074:	b2db      	uxtb	r3, r3
}
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b086:	2301      	movs	r3, #1
 800b088:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b08a:	2104      	movs	r1, #4
 800b08c:	4806      	ldr	r0, [pc, #24]	@ (800b0a8 <BSP_PlatformIsDetected+0x28>)
 800b08e:	f7f8 fe03 	bl	8003c98 <HAL_GPIO_ReadPin>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b098:	2300      	movs	r3, #0
 800b09a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b09c:	79fb      	ldrb	r3, [r7, #7]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	40021800 	.word	0x40021800

0800b0ac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b0b4:	f7f6 ff84 	bl	8001fc0 <HAL_GetTick>
 800b0b8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b0ba:	e006      	b.n	800b0ca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0bc:	f7ff ff8a 	bl	800afd4 <BSP_SD_GetCardState>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	e009      	b.n	800b0de <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b0ca:	f7f6 ff79 	bl	8001fc0 <HAL_GetTick>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d8f0      	bhi.n	800b0bc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b0da:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
	...

0800b0e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b0f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b120 <SD_CheckStatus+0x38>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b0f8:	f7ff ff6c 	bl	800afd4 <BSP_SD_GetCardState>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d107      	bne.n	800b112 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b102:	4b07      	ldr	r3, [pc, #28]	@ (800b120 <SD_CheckStatus+0x38>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	b2db      	uxtb	r3, r3
 800b108:	f023 0301 	bic.w	r3, r3, #1
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	4b04      	ldr	r3, [pc, #16]	@ (800b120 <SD_CheckStatus+0x38>)
 800b110:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b112:	4b03      	ldr	r3, [pc, #12]	@ (800b120 <SD_CheckStatus+0x38>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b2db      	uxtb	r3, r3
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	20000025 	.word	0x20000025

0800b124 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	4603      	mov	r3, r0
 800b12c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b12e:	f7ff ff05 	bl	800af3c <BSP_SD_Init>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d107      	bne.n	800b148 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7ff ffd4 	bl	800b0e8 <SD_CheckStatus>
 800b140:	4603      	mov	r3, r0
 800b142:	461a      	mov	r2, r3
 800b144:	4b04      	ldr	r3, [pc, #16]	@ (800b158 <SD_initialize+0x34>)
 800b146:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b148:	4b03      	ldr	r3, [pc, #12]	@ (800b158 <SD_initialize+0x34>)
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	b2db      	uxtb	r3, r3
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20000025 	.word	0x20000025

0800b15c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff ffbd 	bl	800b0e8 <SD_CheckStatus>
 800b16e:	4603      	mov	r3, r0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60b9      	str	r1, [r7, #8]
 800b180:	607a      	str	r2, [r7, #4]
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b18c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b190:	f7ff ff8c 	bl	800b0ac <SD_CheckStatusWithTimeout>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	da01      	bge.n	800b19e <SD_read+0x26>
  {
    return res;
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
 800b19c:	e03b      	b.n	800b216 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b19e:	683a      	ldr	r2, [r7, #0]
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	68b8      	ldr	r0, [r7, #8]
 800b1a4:	f7ff fee2 	bl	800af6c <BSP_SD_ReadBlocks_DMA>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d132      	bne.n	800b214 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b1ae:	4b1c      	ldr	r3, [pc, #112]	@ (800b220 <SD_read+0xa8>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b1b4:	f7f6 ff04 	bl	8001fc0 <HAL_GetTick>
 800b1b8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b1ba:	bf00      	nop
 800b1bc:	4b18      	ldr	r3, [pc, #96]	@ (800b220 <SD_read+0xa8>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d108      	bne.n	800b1d6 <SD_read+0x5e>
 800b1c4:	f7f6 fefc 	bl	8001fc0 <HAL_GetTick>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d9f2      	bls.n	800b1bc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b1d6:	4b12      	ldr	r3, [pc, #72]	@ (800b220 <SD_read+0xa8>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d102      	bne.n	800b1e4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	75fb      	strb	r3, [r7, #23]
 800b1e2:	e017      	b.n	800b214 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b1e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b220 <SD_read+0xa8>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b1ea:	f7f6 fee9 	bl	8001fc0 <HAL_GetTick>
 800b1ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b1f0:	e007      	b.n	800b202 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b1f2:	f7ff feef 	bl	800afd4 <BSP_SD_GetCardState>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d102      	bne.n	800b202 <SD_read+0x8a>
          {
            res = RES_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b200:	e008      	b.n	800b214 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b202:	f7f6 fedd 	bl	8001fc0 <HAL_GetTick>
 800b206:	4602      	mov	r2, r0
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b210:	4293      	cmp	r3, r2
 800b212:	d9ee      	bls.n	800b1f2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20000fc4 	.word	0x20000fc4

0800b224 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	607a      	str	r2, [r7, #4]
 800b22e:	603b      	str	r3, [r7, #0]
 800b230:	4603      	mov	r3, r0
 800b232:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b238:	4b24      	ldr	r3, [pc, #144]	@ (800b2cc <SD_write+0xa8>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b23e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b242:	f7ff ff33 	bl	800b0ac <SD_CheckStatusWithTimeout>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	da01      	bge.n	800b250 <SD_write+0x2c>
  {
    return res;
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
 800b24e:	e038      	b.n	800b2c2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	68b8      	ldr	r0, [r7, #8]
 800b256:	f7ff fea3 	bl	800afa0 <BSP_SD_WriteBlocks_DMA>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d12f      	bne.n	800b2c0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b260:	f7f6 feae 	bl	8001fc0 <HAL_GetTick>
 800b264:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b266:	bf00      	nop
 800b268:	4b18      	ldr	r3, [pc, #96]	@ (800b2cc <SD_write+0xa8>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d108      	bne.n	800b282 <SD_write+0x5e>
 800b270:	f7f6 fea6 	bl	8001fc0 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b27e:	4293      	cmp	r3, r2
 800b280:	d9f2      	bls.n	800b268 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b282:	4b12      	ldr	r3, [pc, #72]	@ (800b2cc <SD_write+0xa8>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d102      	bne.n	800b290 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	75fb      	strb	r3, [r7, #23]
 800b28e:	e017      	b.n	800b2c0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b290:	4b0e      	ldr	r3, [pc, #56]	@ (800b2cc <SD_write+0xa8>)
 800b292:	2200      	movs	r2, #0
 800b294:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b296:	f7f6 fe93 	bl	8001fc0 <HAL_GetTick>
 800b29a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b29c:	e007      	b.n	800b2ae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b29e:	f7ff fe99 	bl	800afd4 <BSP_SD_GetCardState>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d102      	bne.n	800b2ae <SD_write+0x8a>
          {
            res = RES_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	75fb      	strb	r3, [r7, #23]
            break;
 800b2ac:	e008      	b.n	800b2c0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b2ae:	f7f6 fe87 	bl	8001fc0 <HAL_GetTick>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	1ad3      	subs	r3, r2, r3
 800b2b8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d9ee      	bls.n	800b29e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20000fc0 	.word	0x20000fc0

0800b2d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b08c      	sub	sp, #48	@ 0x30
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	603a      	str	r2, [r7, #0]
 800b2da:	71fb      	strb	r3, [r7, #7]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2e6:	4b25      	ldr	r3, [pc, #148]	@ (800b37c <SD_ioctl+0xac>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	f003 0301 	and.w	r3, r3, #1
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <SD_ioctl+0x28>
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e03c      	b.n	800b372 <SD_ioctl+0xa2>

  switch (cmd)
 800b2f8:	79bb      	ldrb	r3, [r7, #6]
 800b2fa:	2b03      	cmp	r3, #3
 800b2fc:	d834      	bhi.n	800b368 <SD_ioctl+0x98>
 800b2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b304 <SD_ioctl+0x34>)
 800b300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b304:	0800b315 	.word	0x0800b315
 800b308:	0800b31d 	.word	0x0800b31d
 800b30c:	0800b335 	.word	0x0800b335
 800b310:	0800b34f 	.word	0x0800b34f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b31a:	e028      	b.n	800b36e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b31c:	f107 030c 	add.w	r3, r7, #12
 800b320:	4618      	mov	r0, r3
 800b322:	f7ff fe67 	bl	800aff4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b332:	e01c      	b.n	800b36e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b334:	f107 030c 	add.w	r3, r7, #12
 800b338:	4618      	mov	r0, r3
 800b33a:	f7ff fe5b 	bl	800aff4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b340:	b29a      	uxth	r2, r3
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b34c:	e00f      	b.n	800b36e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b34e:	f107 030c 	add.w	r3, r7, #12
 800b352:	4618      	mov	r0, r3
 800b354:	f7ff fe4e 	bl	800aff4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	0a5a      	lsrs	r2, r3, #9
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b366:	e002      	b.n	800b36e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b368:	2304      	movs	r3, #4
 800b36a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b36e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b372:	4618      	mov	r0, r3
 800b374:	3730      	adds	r7, #48	@ 0x30
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000025 	.word	0x20000025

0800b380 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b380:	b480      	push	{r7}
 800b382:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b384:	4b03      	ldr	r3, [pc, #12]	@ (800b394 <BSP_SD_WriteCpltCallback+0x14>)
 800b386:	2201      	movs	r2, #1
 800b388:	601a      	str	r2, [r3, #0]
}
 800b38a:	bf00      	nop
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	20000fc0 	.word	0x20000fc0

0800b398 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b398:	b480      	push	{r7}
 800b39a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b39c:	4b03      	ldr	r3, [pc, #12]	@ (800b3ac <BSP_SD_ReadCpltCallback+0x14>)
 800b39e:	2201      	movs	r2, #1
 800b3a0:	601a      	str	r2, [r3, #0]
}
 800b3a2:	bf00      	nop
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	20000fc4 	.word	0x20000fc4

0800b3b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b3ba:	79fb      	ldrb	r3, [r7, #7]
 800b3bc:	4a08      	ldr	r2, [pc, #32]	@ (800b3e0 <disk_status+0x30>)
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	79fa      	ldrb	r2, [r7, #7]
 800b3c8:	4905      	ldr	r1, [pc, #20]	@ (800b3e0 <disk_status+0x30>)
 800b3ca:	440a      	add	r2, r1
 800b3cc:	7a12      	ldrb	r2, [r2, #8]
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	4798      	blx	r3
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	20000ff0 	.word	0x20000ff0

0800b3e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b3f2:	79fb      	ldrb	r3, [r7, #7]
 800b3f4:	4a0e      	ldr	r2, [pc, #56]	@ (800b430 <disk_initialize+0x4c>)
 800b3f6:	5cd3      	ldrb	r3, [r2, r3]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d114      	bne.n	800b426 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b3fc:	79fb      	ldrb	r3, [r7, #7]
 800b3fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b430 <disk_initialize+0x4c>)
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	79fa      	ldrb	r2, [r7, #7]
 800b40a:	4909      	ldr	r1, [pc, #36]	@ (800b430 <disk_initialize+0x4c>)
 800b40c:	440a      	add	r2, r1
 800b40e:	7a12      	ldrb	r2, [r2, #8]
 800b410:	4610      	mov	r0, r2
 800b412:	4798      	blx	r3
 800b414:	4603      	mov	r3, r0
 800b416:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d103      	bne.n	800b426 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	4a03      	ldr	r2, [pc, #12]	@ (800b430 <disk_initialize+0x4c>)
 800b422:	2101      	movs	r1, #1
 800b424:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b426:	7bfb      	ldrb	r3, [r7, #15]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20000ff0 	.word	0x20000ff0

0800b434 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b434:	b590      	push	{r4, r7, lr}
 800b436:	b087      	sub	sp, #28
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60b9      	str	r1, [r7, #8]
 800b43c:	607a      	str	r2, [r7, #4]
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	4603      	mov	r3, r0
 800b442:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b444:	7bfb      	ldrb	r3, [r7, #15]
 800b446:	4a0a      	ldr	r2, [pc, #40]	@ (800b470 <disk_read+0x3c>)
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4413      	add	r3, r2
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	689c      	ldr	r4, [r3, #8]
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	4a07      	ldr	r2, [pc, #28]	@ (800b470 <disk_read+0x3c>)
 800b454:	4413      	add	r3, r2
 800b456:	7a18      	ldrb	r0, [r3, #8]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	68b9      	ldr	r1, [r7, #8]
 800b45e:	47a0      	blx	r4
 800b460:	4603      	mov	r3, r0
 800b462:	75fb      	strb	r3, [r7, #23]
  return res;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
}
 800b466:	4618      	mov	r0, r3
 800b468:	371c      	adds	r7, #28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd90      	pop	{r4, r7, pc}
 800b46e:	bf00      	nop
 800b470:	20000ff0 	.word	0x20000ff0

0800b474 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b474:	b590      	push	{r4, r7, lr}
 800b476:	b087      	sub	sp, #28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60b9      	str	r1, [r7, #8]
 800b47c:	607a      	str	r2, [r7, #4]
 800b47e:	603b      	str	r3, [r7, #0]
 800b480:	4603      	mov	r3, r0
 800b482:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	4a0a      	ldr	r2, [pc, #40]	@ (800b4b0 <disk_write+0x3c>)
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	68dc      	ldr	r4, [r3, #12]
 800b490:	7bfb      	ldrb	r3, [r7, #15]
 800b492:	4a07      	ldr	r2, [pc, #28]	@ (800b4b0 <disk_write+0x3c>)
 800b494:	4413      	add	r3, r2
 800b496:	7a18      	ldrb	r0, [r3, #8]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	68b9      	ldr	r1, [r7, #8]
 800b49e:	47a0      	blx	r4
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	371c      	adds	r7, #28
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd90      	pop	{r4, r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20000ff0 	.word	0x20000ff0

0800b4b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	603a      	str	r2, [r7, #0]
 800b4be:	71fb      	strb	r3, [r7, #7]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b4c4:	79fb      	ldrb	r3, [r7, #7]
 800b4c6:	4a09      	ldr	r2, [pc, #36]	@ (800b4ec <disk_ioctl+0x38>)
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4413      	add	r3, r2
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	79fa      	ldrb	r2, [r7, #7]
 800b4d2:	4906      	ldr	r1, [pc, #24]	@ (800b4ec <disk_ioctl+0x38>)
 800b4d4:	440a      	add	r2, r1
 800b4d6:	7a10      	ldrb	r0, [r2, #8]
 800b4d8:	79b9      	ldrb	r1, [r7, #6]
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	4798      	blx	r3
 800b4de:	4603      	mov	r3, r0
 800b4e0:	73fb      	strb	r3, [r7, #15]
  return res;
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	20000ff0 	.word	0x20000ff0

0800b4f0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b500:	89fb      	ldrh	r3, [r7, #14]
 800b502:	021b      	lsls	r3, r3, #8
 800b504:	b21a      	sxth	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	b21b      	sxth	r3, r3
 800b50c:	4313      	orrs	r3, r2
 800b50e:	b21b      	sxth	r3, r3
 800b510:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b512:	89fb      	ldrh	r3, [r7, #14]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3303      	adds	r3, #3
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	021b      	lsls	r3, r3, #8
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	3202      	adds	r2, #2
 800b538:	7812      	ldrb	r2, [r2, #0]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	021b      	lsls	r3, r3, #8
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	3201      	adds	r2, #1
 800b546:	7812      	ldrb	r2, [r2, #0]
 800b548:	4313      	orrs	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	021b      	lsls	r3, r3, #8
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	7812      	ldrb	r2, [r2, #0]
 800b554:	4313      	orrs	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]
	return rv;
 800b558:	68fb      	ldr	r3, [r7, #12]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b566:	b480      	push	{r7}
 800b568:	b083      	sub	sp, #12
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
 800b56e:	460b      	mov	r3, r1
 800b570:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	1c5a      	adds	r2, r3, #1
 800b576:	607a      	str	r2, [r7, #4]
 800b578:	887a      	ldrh	r2, [r7, #2]
 800b57a:	b2d2      	uxtb	r2, r2
 800b57c:	701a      	strb	r2, [r3, #0]
 800b57e:	887b      	ldrh	r3, [r7, #2]
 800b580:	0a1b      	lsrs	r3, r3, #8
 800b582:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	1c5a      	adds	r2, r3, #1
 800b588:	607a      	str	r2, [r7, #4]
 800b58a:	887a      	ldrh	r2, [r7, #2]
 800b58c:	b2d2      	uxtb	r2, r2
 800b58e:	701a      	strb	r2, [r3, #0]
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	b2d2      	uxtb	r2, r2
 800b5b0:	701a      	strb	r2, [r3, #0]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	0a1b      	lsrs	r3, r3, #8
 800b5b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	607a      	str	r2, [r7, #4]
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	b2d2      	uxtb	r2, r2
 800b5c2:	701a      	strb	r2, [r3, #0]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	0a1b      	lsrs	r3, r3, #8
 800b5c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	683a      	ldr	r2, [r7, #0]
 800b5d2:	b2d2      	uxtb	r2, r2
 800b5d4:	701a      	strb	r2, [r3, #0]
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	0a1b      	lsrs	r3, r3, #8
 800b5da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	1c5a      	adds	r2, r3, #1
 800b5e0:	607a      	str	r2, [r7, #4]
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	b2d2      	uxtb	r2, r2
 800b5e6:	701a      	strb	r2, [r3, #0]
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b5f4:	b480      	push	{r7}
 800b5f6:	b087      	sub	sp, #28
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00d      	beq.n	800b62a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b60e:	693a      	ldr	r2, [r7, #16]
 800b610:	1c53      	adds	r3, r2, #1
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	1c59      	adds	r1, r3, #1
 800b618:	6179      	str	r1, [r7, #20]
 800b61a:	7812      	ldrb	r2, [r2, #0]
 800b61c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3b01      	subs	r3, #1
 800b622:	607b      	str	r3, [r7, #4]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1f1      	bne.n	800b60e <mem_cpy+0x1a>
	}
}
 800b62a:	bf00      	nop
 800b62c:	371c      	adds	r7, #28
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr

0800b636 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b636:	b480      	push	{r7}
 800b638:	b087      	sub	sp, #28
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	60f8      	str	r0, [r7, #12]
 800b63e:	60b9      	str	r1, [r7, #8]
 800b640:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	1c5a      	adds	r2, r3, #1
 800b64a:	617a      	str	r2, [r7, #20]
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	b2d2      	uxtb	r2, r2
 800b650:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	3b01      	subs	r3, #1
 800b656:	607b      	str	r3, [r7, #4]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d1f3      	bne.n	800b646 <mem_set+0x10>
}
 800b65e:	bf00      	nop
 800b660:	bf00      	nop
 800b662:	371c      	adds	r7, #28
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b66c:	b480      	push	{r7}
 800b66e:	b089      	sub	sp, #36	@ 0x24
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	61fb      	str	r3, [r7, #28]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	61fa      	str	r2, [r7, #28]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	4619      	mov	r1, r3
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	61ba      	str	r2, [r7, #24]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	1acb      	subs	r3, r1, r3
 800b698:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	607b      	str	r3, [r7, #4]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <mem_cmp+0x40>
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d0eb      	beq.n	800b684 <mem_cmp+0x18>

	return r;
 800b6ac:	697b      	ldr	r3, [r7, #20]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3724      	adds	r7, #36	@ 0x24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b6c4:	e002      	b.n	800b6cc <chk_chr+0x12>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	607b      	str	r3, [r7, #4]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d005      	beq.n	800b6e0 <chk_chr+0x26>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d1f2      	bne.n	800b6c6 <chk_chr+0xc>
	return *str;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	60bb      	str	r3, [r7, #8]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	e029      	b.n	800b758 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b704:	4a27      	ldr	r2, [pc, #156]	@ (800b7a4 <chk_lock+0xb4>)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	011b      	lsls	r3, r3, #4
 800b70a:	4413      	add	r3, r2
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d01d      	beq.n	800b74e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b712:	4a24      	ldr	r2, [pc, #144]	@ (800b7a4 <chk_lock+0xb4>)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	011b      	lsls	r3, r3, #4
 800b718:	4413      	add	r3, r2
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	429a      	cmp	r2, r3
 800b722:	d116      	bne.n	800b752 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b724:	4a1f      	ldr	r2, [pc, #124]	@ (800b7a4 <chk_lock+0xb4>)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	011b      	lsls	r3, r3, #4
 800b72a:	4413      	add	r3, r2
 800b72c:	3304      	adds	r3, #4
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b734:	429a      	cmp	r2, r3
 800b736:	d10c      	bne.n	800b752 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b738:	4a1a      	ldr	r2, [pc, #104]	@ (800b7a4 <chk_lock+0xb4>)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	011b      	lsls	r3, r3, #4
 800b73e:	4413      	add	r3, r2
 800b740:	3308      	adds	r3, #8
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b748:	429a      	cmp	r2, r3
 800b74a:	d102      	bne.n	800b752 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b74c:	e007      	b.n	800b75e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b74e:	2301      	movs	r3, #1
 800b750:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3301      	adds	r3, #1
 800b756:	60fb      	str	r3, [r7, #12]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d9d2      	bls.n	800b704 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b02      	cmp	r3, #2
 800b762:	d109      	bne.n	800b778 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d102      	bne.n	800b770 <chk_lock+0x80>
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d101      	bne.n	800b774 <chk_lock+0x84>
 800b770:	2300      	movs	r3, #0
 800b772:	e010      	b.n	800b796 <chk_lock+0xa6>
 800b774:	2312      	movs	r3, #18
 800b776:	e00e      	b.n	800b796 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d108      	bne.n	800b790 <chk_lock+0xa0>
 800b77e:	4a09      	ldr	r2, [pc, #36]	@ (800b7a4 <chk_lock+0xb4>)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	011b      	lsls	r3, r3, #4
 800b784:	4413      	add	r3, r2
 800b786:	330c      	adds	r3, #12
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b78e:	d101      	bne.n	800b794 <chk_lock+0xa4>
 800b790:	2310      	movs	r3, #16
 800b792:	e000      	b.n	800b796 <chk_lock+0xa6>
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	20000fd0 	.word	0x20000fd0

0800b7a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	607b      	str	r3, [r7, #4]
 800b7b2:	e002      	b.n	800b7ba <enq_lock+0x12>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	607b      	str	r3, [r7, #4]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d806      	bhi.n	800b7ce <enq_lock+0x26>
 800b7c0:	4a09      	ldr	r2, [pc, #36]	@ (800b7e8 <enq_lock+0x40>)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	011b      	lsls	r3, r3, #4
 800b7c6:	4413      	add	r3, r2
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1f2      	bne.n	800b7b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	bf14      	ite	ne
 800b7d4:	2301      	movne	r3, #1
 800b7d6:	2300      	moveq	r3, #0
 800b7d8:	b2db      	uxtb	r3, r3
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	370c      	adds	r7, #12
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	20000fd0 	.word	0x20000fd0

0800b7ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	e01f      	b.n	800b83c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b7fc:	4a41      	ldr	r2, [pc, #260]	@ (800b904 <inc_lock+0x118>)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	011b      	lsls	r3, r3, #4
 800b802:	4413      	add	r3, r2
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d113      	bne.n	800b836 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b80e:	4a3d      	ldr	r2, [pc, #244]	@ (800b904 <inc_lock+0x118>)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	011b      	lsls	r3, r3, #4
 800b814:	4413      	add	r3, r2
 800b816:	3304      	adds	r3, #4
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b81e:	429a      	cmp	r2, r3
 800b820:	d109      	bne.n	800b836 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b822:	4a38      	ldr	r2, [pc, #224]	@ (800b904 <inc_lock+0x118>)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	4413      	add	r3, r2
 800b82a:	3308      	adds	r3, #8
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b832:	429a      	cmp	r2, r3
 800b834:	d006      	beq.n	800b844 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3301      	adds	r3, #1
 800b83a:	60fb      	str	r3, [r7, #12]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d9dc      	bls.n	800b7fc <inc_lock+0x10>
 800b842:	e000      	b.n	800b846 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b844:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d132      	bne.n	800b8b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b84c:	2300      	movs	r3, #0
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	e002      	b.n	800b858 <inc_lock+0x6c>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3301      	adds	r3, #1
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d806      	bhi.n	800b86c <inc_lock+0x80>
 800b85e:	4a29      	ldr	r2, [pc, #164]	@ (800b904 <inc_lock+0x118>)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	011b      	lsls	r3, r3, #4
 800b864:	4413      	add	r3, r2
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1f2      	bne.n	800b852 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d101      	bne.n	800b876 <inc_lock+0x8a>
 800b872:	2300      	movs	r3, #0
 800b874:	e040      	b.n	800b8f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	4922      	ldr	r1, [pc, #136]	@ (800b904 <inc_lock+0x118>)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	011b      	lsls	r3, r3, #4
 800b880:	440b      	add	r3, r1
 800b882:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	689a      	ldr	r2, [r3, #8]
 800b888:	491e      	ldr	r1, [pc, #120]	@ (800b904 <inc_lock+0x118>)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	011b      	lsls	r3, r3, #4
 800b88e:	440b      	add	r3, r1
 800b890:	3304      	adds	r3, #4
 800b892:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	695a      	ldr	r2, [r3, #20]
 800b898:	491a      	ldr	r1, [pc, #104]	@ (800b904 <inc_lock+0x118>)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	011b      	lsls	r3, r3, #4
 800b89e:	440b      	add	r3, r1
 800b8a0:	3308      	adds	r3, #8
 800b8a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b8a4:	4a17      	ldr	r2, [pc, #92]	@ (800b904 <inc_lock+0x118>)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	011b      	lsls	r3, r3, #4
 800b8aa:	4413      	add	r3, r2
 800b8ac:	330c      	adds	r3, #12
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d009      	beq.n	800b8cc <inc_lock+0xe0>
 800b8b8:	4a12      	ldr	r2, [pc, #72]	@ (800b904 <inc_lock+0x118>)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	011b      	lsls	r3, r3, #4
 800b8be:	4413      	add	r3, r2
 800b8c0:	330c      	adds	r3, #12
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d001      	beq.n	800b8cc <inc_lock+0xe0>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e015      	b.n	800b8f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d108      	bne.n	800b8e4 <inc_lock+0xf8>
 800b8d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b904 <inc_lock+0x118>)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	011b      	lsls	r3, r3, #4
 800b8d8:	4413      	add	r3, r2
 800b8da:	330c      	adds	r3, #12
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	e001      	b.n	800b8e8 <inc_lock+0xfc>
 800b8e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b8e8:	4906      	ldr	r1, [pc, #24]	@ (800b904 <inc_lock+0x118>)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	011b      	lsls	r3, r3, #4
 800b8ee:	440b      	add	r3, r1
 800b8f0:	330c      	adds	r3, #12
 800b8f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	3301      	adds	r3, #1
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr
 800b904:	20000fd0 	.word	0x20000fd0

0800b908 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	3b01      	subs	r3, #1
 800b914:	607b      	str	r3, [r7, #4]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d825      	bhi.n	800b968 <dec_lock+0x60>
		n = Files[i].ctr;
 800b91c:	4a17      	ldr	r2, [pc, #92]	@ (800b97c <dec_lock+0x74>)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	011b      	lsls	r3, r3, #4
 800b922:	4413      	add	r3, r2
 800b924:	330c      	adds	r3, #12
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b92a:	89fb      	ldrh	r3, [r7, #14]
 800b92c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b930:	d101      	bne.n	800b936 <dec_lock+0x2e>
 800b932:	2300      	movs	r3, #0
 800b934:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b936:	89fb      	ldrh	r3, [r7, #14]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <dec_lock+0x3a>
 800b93c:	89fb      	ldrh	r3, [r7, #14]
 800b93e:	3b01      	subs	r3, #1
 800b940:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b942:	4a0e      	ldr	r2, [pc, #56]	@ (800b97c <dec_lock+0x74>)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	4413      	add	r3, r2
 800b94a:	330c      	adds	r3, #12
 800b94c:	89fa      	ldrh	r2, [r7, #14]
 800b94e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b950:	89fb      	ldrh	r3, [r7, #14]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d105      	bne.n	800b962 <dec_lock+0x5a>
 800b956:	4a09      	ldr	r2, [pc, #36]	@ (800b97c <dec_lock+0x74>)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	011b      	lsls	r3, r3, #4
 800b95c:	4413      	add	r3, r2
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	737b      	strb	r3, [r7, #13]
 800b966:	e001      	b.n	800b96c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b968:	2302      	movs	r3, #2
 800b96a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b96c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	20000fd0 	.word	0x20000fd0

0800b980 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b988:	2300      	movs	r3, #0
 800b98a:	60fb      	str	r3, [r7, #12]
 800b98c:	e010      	b.n	800b9b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b98e:	4a0d      	ldr	r2, [pc, #52]	@ (800b9c4 <clear_lock+0x44>)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	011b      	lsls	r3, r3, #4
 800b994:	4413      	add	r3, r2
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d105      	bne.n	800b9aa <clear_lock+0x2a>
 800b99e:	4a09      	ldr	r2, [pc, #36]	@ (800b9c4 <clear_lock+0x44>)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	011b      	lsls	r3, r3, #4
 800b9a4:	4413      	add	r3, r2
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	60fb      	str	r3, [r7, #12]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d9eb      	bls.n	800b98e <clear_lock+0xe>
	}
}
 800b9b6:	bf00      	nop
 800b9b8:	bf00      	nop
 800b9ba:	3714      	adds	r7, #20
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr
 800b9c4:	20000fd0 	.word	0x20000fd0

0800b9c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	78db      	ldrb	r3, [r3, #3]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d034      	beq.n	800ba46 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	7858      	ldrb	r0, [r3, #1]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	f7ff fd40 	bl	800b474 <disk_write>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	73fb      	strb	r3, [r7, #15]
 800b9fe:	e022      	b.n	800ba46 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	1ad2      	subs	r2, r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	699b      	ldr	r3, [r3, #24]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d217      	bcs.n	800ba46 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	789b      	ldrb	r3, [r3, #2]
 800ba1a:	613b      	str	r3, [r7, #16]
 800ba1c:	e010      	b.n	800ba40 <sync_window+0x78>
					wsect += fs->fsize;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	697a      	ldr	r2, [r7, #20]
 800ba24:	4413      	add	r3, r2
 800ba26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	7858      	ldrb	r0, [r3, #1]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba32:	2301      	movs	r3, #1
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	f7ff fd1d 	bl	800b474 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	613b      	str	r3, [r7, #16]
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d8eb      	bhi.n	800ba1e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d01b      	beq.n	800baa0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7ff ffad 	bl	800b9c8 <sync_window>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d113      	bne.n	800baa0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	7858      	ldrb	r0, [r3, #1]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba82:	2301      	movs	r3, #1
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	f7ff fcd5 	bl	800b434 <disk_read>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d004      	beq.n	800ba9a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ba90:	f04f 33ff 	mov.w	r3, #4294967295
 800ba94:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff ff87 	bl	800b9c8 <sync_window>
 800baba:	4603      	mov	r3, r0
 800babc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800babe:	7bfb      	ldrb	r3, [r7, #15]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d158      	bne.n	800bb76 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d148      	bne.n	800bb5e <sync_fs+0xb2>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	791b      	ldrb	r3, [r3, #4]
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d144      	bne.n	800bb5e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3330      	adds	r3, #48	@ 0x30
 800bad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800badc:	2100      	movs	r1, #0
 800bade:	4618      	mov	r0, r3
 800bae0:	f7ff fda9 	bl	800b636 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	3330      	adds	r3, #48	@ 0x30
 800bae8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800baec:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7ff fd38 	bl	800b566 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	3330      	adds	r3, #48	@ 0x30
 800bafa:	4921      	ldr	r1, [pc, #132]	@ (800bb80 <sync_fs+0xd4>)
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7ff fd4d 	bl	800b59c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	3330      	adds	r3, #48	@ 0x30
 800bb06:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bb0a:	491e      	ldr	r1, [pc, #120]	@ (800bb84 <sync_fs+0xd8>)
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7ff fd45 	bl	800b59c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	3330      	adds	r3, #48	@ 0x30
 800bb16:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	4619      	mov	r1, r3
 800bb20:	4610      	mov	r0, r2
 800bb22:	f7ff fd3b 	bl	800b59c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	3330      	adds	r3, #48	@ 0x30
 800bb2a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	4619      	mov	r1, r3
 800bb34:	4610      	mov	r0, r2
 800bb36:	f7ff fd31 	bl	800b59c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	69db      	ldr	r3, [r3, #28]
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	7858      	ldrb	r0, [r3, #1]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb52:	2301      	movs	r3, #1
 800bb54:	f7ff fc8e 	bl	800b474 <disk_write>
			fs->fsi_flag = 0;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	785b      	ldrb	r3, [r3, #1]
 800bb62:	2200      	movs	r2, #0
 800bb64:	2100      	movs	r1, #0
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7ff fca4 	bl	800b4b4 <disk_ioctl>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <sync_fs+0xca>
 800bb72:	2301      	movs	r3, #1
 800bb74:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bb76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	41615252 	.word	0x41615252
 800bb84:	61417272 	.word	0x61417272

0800bb88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	3b02      	subs	r3, #2
 800bb96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	3b02      	subs	r3, #2
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d301      	bcc.n	800bba8 <clust2sect+0x20>
 800bba4:	2300      	movs	r3, #0
 800bba6:	e008      	b.n	800bbba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	895b      	ldrh	r3, [r3, #10]
 800bbac:	461a      	mov	r2, r3
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	fb03 f202 	mul.w	r2, r3, r2
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb8:	4413      	add	r3, r2
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	370c      	adds	r7, #12
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr

0800bbc6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b086      	sub	sp, #24
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
 800bbce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d904      	bls.n	800bbe6 <get_fat+0x20>
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	695b      	ldr	r3, [r3, #20]
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d302      	bcc.n	800bbec <get_fat+0x26>
		val = 1;	/* Internal error */
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]
 800bbea:	e08e      	b.n	800bd0a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bbec:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d061      	beq.n	800bcbe <get_fat+0xf8>
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	dc7b      	bgt.n	800bcf6 <get_fat+0x130>
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d002      	beq.n	800bc08 <get_fat+0x42>
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d041      	beq.n	800bc8a <get_fat+0xc4>
 800bc06:	e076      	b.n	800bcf6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	085b      	lsrs	r3, r3, #1
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	4413      	add	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	6a1a      	ldr	r2, [r3, #32]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	0a5b      	lsrs	r3, r3, #9
 800bc1e:	4413      	add	r3, r2
 800bc20:	4619      	mov	r1, r3
 800bc22:	6938      	ldr	r0, [r7, #16]
 800bc24:	f7ff ff14 	bl	800ba50 <move_window>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d166      	bne.n	800bcfc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	60fa      	str	r2, [r7, #12]
 800bc34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc40:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	6a1a      	ldr	r2, [r3, #32]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	0a5b      	lsrs	r3, r3, #9
 800bc4a:	4413      	add	r3, r2
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6938      	ldr	r0, [r7, #16]
 800bc50:	f7ff fefe 	bl	800ba50 <move_window>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d152      	bne.n	800bd00 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	4413      	add	r3, r2
 800bc64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc68:	021b      	lsls	r3, r3, #8
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	f003 0301 	and.w	r3, r3, #1
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d002      	beq.n	800bc80 <get_fat+0xba>
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	091b      	lsrs	r3, r3, #4
 800bc7e:	e002      	b.n	800bc86 <get_fat+0xc0>
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc86:	617b      	str	r3, [r7, #20]
			break;
 800bc88:	e03f      	b.n	800bd0a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	6a1a      	ldr	r2, [r3, #32]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	0a1b      	lsrs	r3, r3, #8
 800bc92:	4413      	add	r3, r2
 800bc94:	4619      	mov	r1, r3
 800bc96:	6938      	ldr	r0, [r7, #16]
 800bc98:	f7ff feda 	bl	800ba50 <move_window>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d130      	bne.n	800bd04 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bcb0:	4413      	add	r3, r2
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7ff fc1c 	bl	800b4f0 <ld_word>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	617b      	str	r3, [r7, #20]
			break;
 800bcbc:	e025      	b.n	800bd0a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	6a1a      	ldr	r2, [r3, #32]
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	09db      	lsrs	r3, r3, #7
 800bcc6:	4413      	add	r3, r2
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6938      	ldr	r0, [r7, #16]
 800bccc:	f7ff fec0 	bl	800ba50 <move_window>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d118      	bne.n	800bd08 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bce4:	4413      	add	r3, r2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7ff fc1a 	bl	800b520 <ld_dword>
 800bcec:	4603      	mov	r3, r0
 800bcee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bcf2:	617b      	str	r3, [r7, #20]
			break;
 800bcf4:	e009      	b.n	800bd0a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	617b      	str	r3, [r7, #20]
 800bcfa:	e006      	b.n	800bd0a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcfc:	bf00      	nop
 800bcfe:	e004      	b.n	800bd0a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd00:	bf00      	nop
 800bd02:	e002      	b.n	800bd0a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd04:	bf00      	nop
 800bd06:	e000      	b.n	800bd0a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd08:	bf00      	nop
		}
	}

	return val;
 800bd0a:	697b      	ldr	r3, [r7, #20]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bd14:	b590      	push	{r4, r7, lr}
 800bd16:	b089      	sub	sp, #36	@ 0x24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bd20:	2302      	movs	r3, #2
 800bd22:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	f240 80d9 	bls.w	800bede <put_fat+0x1ca>
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	f080 80d3 	bcs.w	800bede <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	2b03      	cmp	r3, #3
 800bd3e:	f000 8096 	beq.w	800be6e <put_fat+0x15a>
 800bd42:	2b03      	cmp	r3, #3
 800bd44:	f300 80cb 	bgt.w	800bede <put_fat+0x1ca>
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d002      	beq.n	800bd52 <put_fat+0x3e>
 800bd4c:	2b02      	cmp	r3, #2
 800bd4e:	d06e      	beq.n	800be2e <put_fat+0x11a>
 800bd50:	e0c5      	b.n	800bede <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	61bb      	str	r3, [r7, #24]
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	085b      	lsrs	r3, r3, #1
 800bd5a:	69ba      	ldr	r2, [r7, #24]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6a1a      	ldr	r2, [r3, #32]
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	0a5b      	lsrs	r3, r3, #9
 800bd68:	4413      	add	r3, r2
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f7ff fe6f 	bl	800ba50 <move_window>
 800bd72:	4603      	mov	r3, r0
 800bd74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd76:	7ffb      	ldrb	r3, [r7, #31]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f040 80a9 	bne.w	800bed0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	1c59      	adds	r1, r3, #1
 800bd88:	61b9      	str	r1, [r7, #24]
 800bd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd8e:	4413      	add	r3, r2
 800bd90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00d      	beq.n	800bdb8 <put_fat+0xa4>
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	b25b      	sxtb	r3, r3
 800bda2:	f003 030f 	and.w	r3, r3, #15
 800bda6:	b25a      	sxtb	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	011b      	lsls	r3, r3, #4
 800bdae:	b25b      	sxtb	r3, r3
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	b25b      	sxtb	r3, r3
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	e001      	b.n	800bdbc <put_fat+0xa8>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	697a      	ldr	r2, [r7, #20]
 800bdbe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6a1a      	ldr	r2, [r3, #32]
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	0a5b      	lsrs	r3, r3, #9
 800bdce:	4413      	add	r3, r2
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f7ff fe3c 	bl	800ba50 <move_window>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bddc:	7ffb      	ldrb	r3, [r7, #31]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d178      	bne.n	800bed4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdee:	4413      	add	r3, r2
 800bdf0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	f003 0301 	and.w	r3, r3, #1
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d003      	beq.n	800be04 <put_fat+0xf0>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	091b      	lsrs	r3, r3, #4
 800be00:	b2db      	uxtb	r3, r3
 800be02:	e00e      	b.n	800be22 <put_fat+0x10e>
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	b25b      	sxtb	r3, r3
 800be0a:	f023 030f 	bic.w	r3, r3, #15
 800be0e:	b25a      	sxtb	r2, r3
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	0a1b      	lsrs	r3, r3, #8
 800be14:	b25b      	sxtb	r3, r3
 800be16:	f003 030f 	and.w	r3, r3, #15
 800be1a:	b25b      	sxtb	r3, r3
 800be1c:	4313      	orrs	r3, r2
 800be1e:	b25b      	sxtb	r3, r3
 800be20:	b2db      	uxtb	r3, r3
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2201      	movs	r2, #1
 800be2a:	70da      	strb	r2, [r3, #3]
			break;
 800be2c:	e057      	b.n	800bede <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6a1a      	ldr	r2, [r3, #32]
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	0a1b      	lsrs	r3, r3, #8
 800be36:	4413      	add	r3, r2
 800be38:	4619      	mov	r1, r3
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f7ff fe08 	bl	800ba50 <move_window>
 800be40:	4603      	mov	r3, r0
 800be42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be44:	7ffb      	ldrb	r3, [r7, #31]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d146      	bne.n	800bed8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800be58:	4413      	add	r3, r2
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	b292      	uxth	r2, r2
 800be5e:	4611      	mov	r1, r2
 800be60:	4618      	mov	r0, r3
 800be62:	f7ff fb80 	bl	800b566 <st_word>
			fs->wflag = 1;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2201      	movs	r2, #1
 800be6a:	70da      	strb	r2, [r3, #3]
			break;
 800be6c:	e037      	b.n	800bede <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6a1a      	ldr	r2, [r3, #32]
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	09db      	lsrs	r3, r3, #7
 800be76:	4413      	add	r3, r2
 800be78:	4619      	mov	r1, r3
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f7ff fde8 	bl	800ba50 <move_window>
 800be80:	4603      	mov	r3, r0
 800be82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be84:	7ffb      	ldrb	r3, [r7, #31]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d128      	bne.n	800bedc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800be9e:	4413      	add	r3, r2
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff fb3d 	bl	800b520 <ld_dword>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800beac:	4323      	orrs	r3, r4
 800beae:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bebe:	4413      	add	r3, r2
 800bec0:	6879      	ldr	r1, [r7, #4]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff fb6a 	bl	800b59c <st_dword>
			fs->wflag = 1;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2201      	movs	r2, #1
 800becc:	70da      	strb	r2, [r3, #3]
			break;
 800bece:	e006      	b.n	800bede <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bed0:	bf00      	nop
 800bed2:	e004      	b.n	800bede <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bed4:	bf00      	nop
 800bed6:	e002      	b.n	800bede <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bed8:	bf00      	nop
 800beda:	e000      	b.n	800bede <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bedc:	bf00      	nop
		}
	}
	return res;
 800bede:	7ffb      	ldrb	r3, [r7, #31]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3724      	adds	r7, #36	@ 0x24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd90      	pop	{r4, r7, pc}

0800bee8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b088      	sub	sp, #32
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bef4:	2300      	movs	r3, #0
 800bef6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d904      	bls.n	800bf0e <remove_chain+0x26>
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d301      	bcc.n	800bf12 <remove_chain+0x2a>
 800bf0e:	2302      	movs	r3, #2
 800bf10:	e04b      	b.n	800bfaa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00c      	beq.n	800bf32 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bf18:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	69b8      	ldr	r0, [r7, #24]
 800bf20:	f7ff fef8 	bl	800bd14 <put_fat>
 800bf24:	4603      	mov	r3, r0
 800bf26:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bf28:	7ffb      	ldrb	r3, [r7, #31]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <remove_chain+0x4a>
 800bf2e:	7ffb      	ldrb	r3, [r7, #31]
 800bf30:	e03b      	b.n	800bfaa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f7ff fe46 	bl	800bbc6 <get_fat>
 800bf3a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d031      	beq.n	800bfa6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d101      	bne.n	800bf4c <remove_chain+0x64>
 800bf48:	2302      	movs	r3, #2
 800bf4a:	e02e      	b.n	800bfaa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf52:	d101      	bne.n	800bf58 <remove_chain+0x70>
 800bf54:	2301      	movs	r3, #1
 800bf56:	e028      	b.n	800bfaa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bf58:	2200      	movs	r2, #0
 800bf5a:	68b9      	ldr	r1, [r7, #8]
 800bf5c:	69b8      	ldr	r0, [r7, #24]
 800bf5e:	f7ff fed9 	bl	800bd14 <put_fat>
 800bf62:	4603      	mov	r3, r0
 800bf64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bf66:	7ffb      	ldrb	r3, [r7, #31]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d001      	beq.n	800bf70 <remove_chain+0x88>
 800bf6c:	7ffb      	ldrb	r3, [r7, #31]
 800bf6e:	e01c      	b.n	800bfaa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	691a      	ldr	r2, [r3, #16]
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	3b02      	subs	r3, #2
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d20b      	bcs.n	800bf96 <remove_chain+0xae>
			fs->free_clst++;
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	791b      	ldrb	r3, [r3, #4]
 800bf8c:	f043 0301 	orr.w	r3, r3, #1
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	695b      	ldr	r3, [r3, #20]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d3c6      	bcc.n	800bf32 <remove_chain+0x4a>
 800bfa4:	e000      	b.n	800bfa8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bfa6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3720      	adds	r7, #32
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b088      	sub	sp, #32
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
 800bfba:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10d      	bne.n	800bfe4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <create_chain+0x2c>
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d31b      	bcc.n	800c016 <create_chain+0x64>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	61bb      	str	r3, [r7, #24]
 800bfe2:	e018      	b.n	800c016 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff fded 	bl	800bbc6 <get_fat>
 800bfec:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d801      	bhi.n	800bff8 <create_chain+0x46>
 800bff4:	2301      	movs	r3, #1
 800bff6:	e070      	b.n	800c0da <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffe:	d101      	bne.n	800c004 <create_chain+0x52>
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	e06a      	b.n	800c0da <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d201      	bcs.n	800c012 <create_chain+0x60>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	e063      	b.n	800c0da <create_chain+0x128>
		scl = clst;
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	3301      	adds	r3, #1
 800c01e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	695b      	ldr	r3, [r3, #20]
 800c024:	69fa      	ldr	r2, [r7, #28]
 800c026:	429a      	cmp	r2, r3
 800c028:	d307      	bcc.n	800c03a <create_chain+0x88>
				ncl = 2;
 800c02a:	2302      	movs	r3, #2
 800c02c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c02e:	69fa      	ldr	r2, [r7, #28]
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	429a      	cmp	r2, r3
 800c034:	d901      	bls.n	800c03a <create_chain+0x88>
 800c036:	2300      	movs	r3, #0
 800c038:	e04f      	b.n	800c0da <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c03a:	69f9      	ldr	r1, [r7, #28]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff fdc2 	bl	800bbc6 <get_fat>
 800c042:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00e      	beq.n	800c068 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d003      	beq.n	800c058 <create_chain+0xa6>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c056:	d101      	bne.n	800c05c <create_chain+0xaa>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	e03e      	b.n	800c0da <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c05c:	69fa      	ldr	r2, [r7, #28]
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	429a      	cmp	r2, r3
 800c062:	d1da      	bne.n	800c01a <create_chain+0x68>
 800c064:	2300      	movs	r3, #0
 800c066:	e038      	b.n	800c0da <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c068:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c06a:	f04f 32ff 	mov.w	r2, #4294967295
 800c06e:	69f9      	ldr	r1, [r7, #28]
 800c070:	6938      	ldr	r0, [r7, #16]
 800c072:	f7ff fe4f 	bl	800bd14 <put_fat>
 800c076:	4603      	mov	r3, r0
 800c078:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d109      	bne.n	800c094 <create_chain+0xe2>
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d006      	beq.n	800c094 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c086:	69fa      	ldr	r2, [r7, #28]
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6938      	ldr	r0, [r7, #16]
 800c08c:	f7ff fe42 	bl	800bd14 <put_fat>
 800c090:	4603      	mov	r3, r0
 800c092:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c094:	7dfb      	ldrb	r3, [r7, #23]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d116      	bne.n	800c0c8 <create_chain+0x116>
		fs->last_clst = ncl;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	69fa      	ldr	r2, [r7, #28]
 800c09e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	691a      	ldr	r2, [r3, #16]
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	3b02      	subs	r3, #2
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d804      	bhi.n	800c0b8 <create_chain+0x106>
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	1e5a      	subs	r2, r3, #1
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	791b      	ldrb	r3, [r3, #4]
 800c0bc:	f043 0301 	orr.w	r3, r3, #1
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	711a      	strb	r2, [r3, #4]
 800c0c6:	e007      	b.n	800c0d8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c0c8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d102      	bne.n	800c0d4 <create_chain+0x122>
 800c0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d2:	e000      	b.n	800c0d6 <create_chain+0x124>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c0d8:	69fb      	ldr	r3, [r7, #28]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3720      	adds	r7, #32
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b087      	sub	sp, #28
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	0a5b      	lsrs	r3, r3, #9
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	8952      	ldrh	r2, [r2, #10]
 800c102:	fbb3 f3f2 	udiv	r3, r3, r2
 800c106:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	1d1a      	adds	r2, r3, #4
 800c10c:	613a      	str	r2, [r7, #16]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <clmt_clust+0x3a>
 800c118:	2300      	movs	r3, #0
 800c11a:	e010      	b.n	800c13e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c11c:	697a      	ldr	r2, [r7, #20]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	429a      	cmp	r2, r3
 800c122:	d307      	bcc.n	800c134 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c124:	697a      	ldr	r2, [r7, #20]
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	617b      	str	r3, [r7, #20]
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	3304      	adds	r3, #4
 800c130:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c132:	e7e9      	b.n	800c108 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c134:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	4413      	add	r3, r2
}
 800c13e:	4618      	mov	r0, r3
 800c140:	371c      	adds	r7, #28
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b086      	sub	sp, #24
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c160:	d204      	bcs.n	800c16c <dir_sdi+0x22>
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	f003 031f 	and.w	r3, r3, #31
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d001      	beq.n	800c170 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c16c:	2302      	movs	r3, #2
 800c16e:	e063      	b.n	800c238 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	689b      	ldr	r3, [r3, #8]
 800c17a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d106      	bne.n	800c190 <dir_sdi+0x46>
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	2b02      	cmp	r3, #2
 800c188:	d902      	bls.n	800c190 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c18e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10c      	bne.n	800c1b0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	095b      	lsrs	r3, r3, #5
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	8912      	ldrh	r2, [r2, #8]
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d301      	bcc.n	800c1a6 <dir_sdi+0x5c>
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	e048      	b.n	800c238 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	61da      	str	r2, [r3, #28]
 800c1ae:	e029      	b.n	800c204 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	895b      	ldrh	r3, [r3, #10]
 800c1b4:	025b      	lsls	r3, r3, #9
 800c1b6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1b8:	e019      	b.n	800c1ee <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6979      	ldr	r1, [r7, #20]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7ff fd01 	bl	800bbc6 <get_fat>
 800c1c4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1cc:	d101      	bne.n	800c1d2 <dir_sdi+0x88>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e032      	b.n	800c238 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d904      	bls.n	800c1e2 <dir_sdi+0x98>
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	695b      	ldr	r3, [r3, #20]
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d301      	bcc.n	800c1e6 <dir_sdi+0x9c>
 800c1e2:	2302      	movs	r3, #2
 800c1e4:	e028      	b.n	800c238 <dir_sdi+0xee>
			ofs -= csz;
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	1ad3      	subs	r3, r2, r3
 800c1ec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d2e1      	bcs.n	800c1ba <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c1f6:	6979      	ldr	r1, [r7, #20]
 800c1f8:	6938      	ldr	r0, [r7, #16]
 800c1fa:	f7ff fcc5 	bl	800bb88 <clust2sect>
 800c1fe:	4602      	mov	r2, r0
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	69db      	ldr	r3, [r3, #28]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d101      	bne.n	800c216 <dir_sdi+0xcc>
 800c212:	2302      	movs	r3, #2
 800c214:	e010      	b.n	800c238 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	69da      	ldr	r2, [r3, #28]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	0a5b      	lsrs	r3, r3, #9
 800c21e:	441a      	add	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c230:	441a      	add	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c236:	2300      	movs	r3, #0
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3718      	adds	r7, #24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	695b      	ldr	r3, [r3, #20]
 800c254:	3320      	adds	r3, #32
 800c256:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	69db      	ldr	r3, [r3, #28]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d003      	beq.n	800c268 <dir_next+0x28>
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c266:	d301      	bcc.n	800c26c <dir_next+0x2c>
 800c268:	2304      	movs	r3, #4
 800c26a:	e0aa      	b.n	800c3c2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c272:	2b00      	cmp	r3, #0
 800c274:	f040 8098 	bne.w	800c3a8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	69db      	ldr	r3, [r3, #28]
 800c27c:	1c5a      	adds	r2, r3, #1
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10b      	bne.n	800c2a2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	095b      	lsrs	r3, r3, #5
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	8912      	ldrh	r2, [r2, #8]
 800c292:	4293      	cmp	r3, r2
 800c294:	f0c0 8088 	bcc.w	800c3a8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	61da      	str	r2, [r3, #28]
 800c29e:	2304      	movs	r3, #4
 800c2a0:	e08f      	b.n	800c3c2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	0a5b      	lsrs	r3, r3, #9
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	8952      	ldrh	r2, [r2, #10]
 800c2aa:	3a01      	subs	r2, #1
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d17a      	bne.n	800c3a8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	699b      	ldr	r3, [r3, #24]
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	f7ff fc83 	bl	800bbc6 <get_fat>
 800c2c0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d801      	bhi.n	800c2cc <dir_next+0x8c>
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	e07a      	b.n	800c3c2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d2:	d101      	bne.n	800c2d8 <dir_next+0x98>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e074      	b.n	800c3c2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d358      	bcc.n	800c394 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d104      	bne.n	800c2f2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	61da      	str	r2, [r3, #28]
 800c2ee:	2304      	movs	r3, #4
 800c2f0:	e067      	b.n	800c3c2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	f7ff fe59 	bl	800bfb2 <create_chain>
 800c300:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d101      	bne.n	800c30c <dir_next+0xcc>
 800c308:	2307      	movs	r3, #7
 800c30a:	e05a      	b.n	800c3c2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d101      	bne.n	800c316 <dir_next+0xd6>
 800c312:	2302      	movs	r3, #2
 800c314:	e055      	b.n	800c3c2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c31c:	d101      	bne.n	800c322 <dir_next+0xe2>
 800c31e:	2301      	movs	r3, #1
 800c320:	e04f      	b.n	800c3c2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	f7ff fb50 	bl	800b9c8 <sync_window>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <dir_next+0xf2>
 800c32e:	2301      	movs	r3, #1
 800c330:	e047      	b.n	800c3c2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3330      	adds	r3, #48	@ 0x30
 800c336:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c33a:	2100      	movs	r1, #0
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7ff f97a 	bl	800b636 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c342:	2300      	movs	r3, #0
 800c344:	613b      	str	r3, [r7, #16]
 800c346:	6979      	ldr	r1, [r7, #20]
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f7ff fc1d 	bl	800bb88 <clust2sect>
 800c34e:	4602      	mov	r2, r0
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c354:	e012      	b.n	800c37c <dir_next+0x13c>
						fs->wflag = 1;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2201      	movs	r2, #1
 800c35a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7ff fb33 	bl	800b9c8 <sync_window>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <dir_next+0x12c>
 800c368:	2301      	movs	r3, #1
 800c36a:	e02a      	b.n	800c3c2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	3301      	adds	r3, #1
 800c370:	613b      	str	r3, [r7, #16]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	895b      	ldrh	r3, [r3, #10]
 800c380:	461a      	mov	r2, r3
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	4293      	cmp	r3, r2
 800c386:	d3e6      	bcc.n	800c356 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	1ad2      	subs	r2, r2, r3
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c39a:	6979      	ldr	r1, [r7, #20]
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f7ff fbf3 	bl	800bb88 <clust2sect>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ba:	441a      	add	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3718      	adds	r7, #24
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b086      	sub	sp, #24
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c3da:	2100      	movs	r1, #0
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f7ff feb4 	bl	800c14a <dir_sdi>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d12b      	bne.n	800c444 <dir_alloc+0x7a>
		n = 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	69db      	ldr	r3, [r3, #28]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f7ff fb2a 	bl	800ba50 <move_window>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c400:	7dfb      	ldrb	r3, [r7, #23]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d11d      	bne.n	800c442 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a1b      	ldr	r3, [r3, #32]
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	2be5      	cmp	r3, #229	@ 0xe5
 800c40e:	d004      	beq.n	800c41a <dir_alloc+0x50>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a1b      	ldr	r3, [r3, #32]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d107      	bne.n	800c42a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	3301      	adds	r3, #1
 800c41e:	613b      	str	r3, [r7, #16]
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d102      	bne.n	800c42e <dir_alloc+0x64>
 800c428:	e00c      	b.n	800c444 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c42a:	2300      	movs	r3, #0
 800c42c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c42e:	2101      	movs	r1, #1
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7ff ff05 	bl	800c240 <dir_next>
 800c436:	4603      	mov	r3, r0
 800c438:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d0d7      	beq.n	800c3f0 <dir_alloc+0x26>
 800c440:	e000      	b.n	800c444 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c442:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c444:	7dfb      	ldrb	r3, [r7, #23]
 800c446:	2b04      	cmp	r3, #4
 800c448:	d101      	bne.n	800c44e <dir_alloc+0x84>
 800c44a:	2307      	movs	r3, #7
 800c44c:	75fb      	strb	r3, [r7, #23]
	return res;
 800c44e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	331a      	adds	r3, #26
 800c466:	4618      	mov	r0, r3
 800c468:	f7ff f842 	bl	800b4f0 <ld_word>
 800c46c:	4603      	mov	r3, r0
 800c46e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	2b03      	cmp	r3, #3
 800c476:	d109      	bne.n	800c48c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	3314      	adds	r3, #20
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff f837 	bl	800b4f0 <ld_word>
 800c482:	4603      	mov	r3, r0
 800c484:	041b      	lsls	r3, r3, #16
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	4313      	orrs	r3, r2
 800c48a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c48c:	68fb      	ldr	r3, [r7, #12]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	60f8      	str	r0, [r7, #12]
 800c49e:	60b9      	str	r1, [r7, #8]
 800c4a0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	331a      	adds	r3, #26
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	b292      	uxth	r2, r2
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7ff f85a 	bl	800b566 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	d109      	bne.n	800c4ce <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	f103 0214 	add.w	r2, r3, #20
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	0c1b      	lsrs	r3, r3, #16
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	f7ff f84c 	bl	800b566 <st_word>
	}
}
 800c4ce:	bf00      	nop
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b086      	sub	sp, #24
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7ff fe2f 	bl	800c14a <dir_sdi>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d001      	beq.n	800c4fa <dir_find+0x24>
 800c4f6:	7dfb      	ldrb	r3, [r7, #23]
 800c4f8:	e03e      	b.n	800c578 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	4619      	mov	r1, r3
 800c500:	6938      	ldr	r0, [r7, #16]
 800c502:	f7ff faa5 	bl	800ba50 <move_window>
 800c506:	4603      	mov	r3, r0
 800c508:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c50a:	7dfb      	ldrb	r3, [r7, #23]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d12f      	bne.n	800c570 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a1b      	ldr	r3, [r3, #32]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c518:	7bfb      	ldrb	r3, [r7, #15]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d102      	bne.n	800c524 <dir_find+0x4e>
 800c51e:	2304      	movs	r3, #4
 800c520:	75fb      	strb	r3, [r7, #23]
 800c522:	e028      	b.n	800c576 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6a1b      	ldr	r3, [r3, #32]
 800c528:	330b      	adds	r3, #11
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c530:	b2da      	uxtb	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	330b      	adds	r3, #11
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	f003 0308 	and.w	r3, r3, #8
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10a      	bne.n	800c55c <dir_find+0x86>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a18      	ldr	r0, [r3, #32]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	3324      	adds	r3, #36	@ 0x24
 800c54e:	220b      	movs	r2, #11
 800c550:	4619      	mov	r1, r3
 800c552:	f7ff f88b 	bl	800b66c <mem_cmp>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00b      	beq.n	800c574 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c55c:	2100      	movs	r1, #0
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff fe6e 	bl	800c240 <dir_next>
 800c564:	4603      	mov	r3, r0
 800c566:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c568:	7dfb      	ldrb	r3, [r7, #23]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d0c5      	beq.n	800c4fa <dir_find+0x24>
 800c56e:	e002      	b.n	800c576 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c570:	bf00      	nop
 800c572:	e000      	b.n	800c576 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c574:	bf00      	nop

	return res;
 800c576:	7dfb      	ldrb	r3, [r7, #23]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3718      	adds	r7, #24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c58e:	2101      	movs	r1, #1
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7ff ff1a 	bl	800c3ca <dir_alloc>
 800c596:	4603      	mov	r3, r0
 800c598:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d11c      	bne.n	800c5da <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	69db      	ldr	r3, [r3, #28]
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	68b8      	ldr	r0, [r7, #8]
 800c5a8:	f7ff fa52 	bl	800ba50 <move_window>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d111      	bne.n	800c5da <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a1b      	ldr	r3, [r3, #32]
 800c5ba:	2220      	movs	r2, #32
 800c5bc:	2100      	movs	r1, #0
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f7ff f839 	bl	800b636 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a18      	ldr	r0, [r3, #32]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	3324      	adds	r3, #36	@ 0x24
 800c5cc:	220b      	movs	r2, #11
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	f7ff f810 	bl	800b5f4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b088      	sub	sp, #32
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	3324      	adds	r3, #36	@ 0x24
 800c5f8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c5fa:	220b      	movs	r2, #11
 800c5fc:	2120      	movs	r1, #32
 800c5fe:	68b8      	ldr	r0, [r7, #8]
 800c600:	f7ff f819 	bl	800b636 <mem_set>
	si = i = 0; ni = 8;
 800c604:	2300      	movs	r3, #0
 800c606:	613b      	str	r3, [r7, #16]
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	61fb      	str	r3, [r7, #28]
 800c60c:	2308      	movs	r3, #8
 800c60e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	1c5a      	adds	r2, r3, #1
 800c614:	61fa      	str	r2, [r7, #28]
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	4413      	add	r3, r2
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c61e:	7efb      	ldrb	r3, [r7, #27]
 800c620:	2b20      	cmp	r3, #32
 800c622:	d94e      	bls.n	800c6c2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c624:	7efb      	ldrb	r3, [r7, #27]
 800c626:	2b2f      	cmp	r3, #47	@ 0x2f
 800c628:	d006      	beq.n	800c638 <create_name+0x54>
 800c62a:	7efb      	ldrb	r3, [r7, #27]
 800c62c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c62e:	d110      	bne.n	800c652 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c630:	e002      	b.n	800c638 <create_name+0x54>
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	3301      	adds	r3, #1
 800c636:	61fb      	str	r3, [r7, #28]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	4413      	add	r3, r2
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	2b2f      	cmp	r3, #47	@ 0x2f
 800c642:	d0f6      	beq.n	800c632 <create_name+0x4e>
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	4413      	add	r3, r2
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c64e:	d0f0      	beq.n	800c632 <create_name+0x4e>
			break;
 800c650:	e038      	b.n	800c6c4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c652:	7efb      	ldrb	r3, [r7, #27]
 800c654:	2b2e      	cmp	r3, #46	@ 0x2e
 800c656:	d003      	beq.n	800c660 <create_name+0x7c>
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d30c      	bcc.n	800c67a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	2b0b      	cmp	r3, #11
 800c664:	d002      	beq.n	800c66c <create_name+0x88>
 800c666:	7efb      	ldrb	r3, [r7, #27]
 800c668:	2b2e      	cmp	r3, #46	@ 0x2e
 800c66a:	d001      	beq.n	800c670 <create_name+0x8c>
 800c66c:	2306      	movs	r3, #6
 800c66e:	e044      	b.n	800c6fa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c670:	2308      	movs	r3, #8
 800c672:	613b      	str	r3, [r7, #16]
 800c674:	230b      	movs	r3, #11
 800c676:	617b      	str	r3, [r7, #20]
			continue;
 800c678:	e022      	b.n	800c6c0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c67a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	da04      	bge.n	800c68c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c682:	7efb      	ldrb	r3, [r7, #27]
 800c684:	3b80      	subs	r3, #128	@ 0x80
 800c686:	4a1f      	ldr	r2, [pc, #124]	@ (800c704 <create_name+0x120>)
 800c688:	5cd3      	ldrb	r3, [r2, r3]
 800c68a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c68c:	7efb      	ldrb	r3, [r7, #27]
 800c68e:	4619      	mov	r1, r3
 800c690:	481d      	ldr	r0, [pc, #116]	@ (800c708 <create_name+0x124>)
 800c692:	f7ff f812 	bl	800b6ba <chk_chr>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <create_name+0xbc>
 800c69c:	2306      	movs	r3, #6
 800c69e:	e02c      	b.n	800c6fa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c6a0:	7efb      	ldrb	r3, [r7, #27]
 800c6a2:	2b60      	cmp	r3, #96	@ 0x60
 800c6a4:	d905      	bls.n	800c6b2 <create_name+0xce>
 800c6a6:	7efb      	ldrb	r3, [r7, #27]
 800c6a8:	2b7a      	cmp	r3, #122	@ 0x7a
 800c6aa:	d802      	bhi.n	800c6b2 <create_name+0xce>
 800c6ac:	7efb      	ldrb	r3, [r7, #27]
 800c6ae:	3b20      	subs	r3, #32
 800c6b0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	1c5a      	adds	r2, r3, #1
 800c6b6:	613a      	str	r2, [r7, #16]
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	4413      	add	r3, r2
 800c6bc:	7efa      	ldrb	r2, [r7, #27]
 800c6be:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c6c0:	e7a6      	b.n	800c610 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c6c2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	441a      	add	r2, r3
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <create_name+0xf4>
 800c6d4:	2306      	movs	r3, #6
 800c6d6:	e010      	b.n	800c6fa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2be5      	cmp	r3, #229	@ 0xe5
 800c6de:	d102      	bne.n	800c6e6 <create_name+0x102>
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	2205      	movs	r2, #5
 800c6e4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c6e6:	7efb      	ldrb	r3, [r7, #27]
 800c6e8:	2b20      	cmp	r3, #32
 800c6ea:	d801      	bhi.n	800c6f0 <create_name+0x10c>
 800c6ec:	2204      	movs	r2, #4
 800c6ee:	e000      	b.n	800c6f2 <create_name+0x10e>
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	330b      	adds	r3, #11
 800c6f6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c6f8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3720      	adds	r7, #32
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	0800e070 	.word	0x0800e070
 800c708:	0800dff8 	.word	0x0800dff8

0800c70c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c720:	e002      	b.n	800c728 <follow_path+0x1c>
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	3301      	adds	r3, #1
 800c726:	603b      	str	r3, [r7, #0]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c72e:	d0f8      	beq.n	800c722 <follow_path+0x16>
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	2b5c      	cmp	r3, #92	@ 0x5c
 800c736:	d0f4      	beq.n	800c722 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	2200      	movs	r2, #0
 800c73c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	2b1f      	cmp	r3, #31
 800c744:	d80a      	bhi.n	800c75c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2280      	movs	r2, #128	@ 0x80
 800c74a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c74e:	2100      	movs	r1, #0
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fcfa 	bl	800c14a <dir_sdi>
 800c756:	4603      	mov	r3, r0
 800c758:	75fb      	strb	r3, [r7, #23]
 800c75a:	e043      	b.n	800c7e4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c75c:	463b      	mov	r3, r7
 800c75e:	4619      	mov	r1, r3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff ff3f 	bl	800c5e4 <create_name>
 800c766:	4603      	mov	r3, r0
 800c768:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c76a:	7dfb      	ldrb	r3, [r7, #23]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d134      	bne.n	800c7da <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7ff feb0 	bl	800c4d6 <dir_find>
 800c776:	4603      	mov	r3, r0
 800c778:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c780:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c782:	7dfb      	ldrb	r3, [r7, #23]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00a      	beq.n	800c79e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c788:	7dfb      	ldrb	r3, [r7, #23]
 800c78a:	2b04      	cmp	r3, #4
 800c78c:	d127      	bne.n	800c7de <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c78e:	7afb      	ldrb	r3, [r7, #11]
 800c790:	f003 0304 	and.w	r3, r3, #4
 800c794:	2b00      	cmp	r3, #0
 800c796:	d122      	bne.n	800c7de <follow_path+0xd2>
 800c798:	2305      	movs	r3, #5
 800c79a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c79c:	e01f      	b.n	800c7de <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c79e:	7afb      	ldrb	r3, [r7, #11]
 800c7a0:	f003 0304 	and.w	r3, r3, #4
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d11c      	bne.n	800c7e2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	799b      	ldrb	r3, [r3, #6]
 800c7ac:	f003 0310 	and.w	r3, r3, #16
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d102      	bne.n	800c7ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c7b4:	2305      	movs	r3, #5
 800c7b6:	75fb      	strb	r3, [r7, #23]
 800c7b8:	e014      	b.n	800c7e4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	695b      	ldr	r3, [r3, #20]
 800c7c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c8:	4413      	add	r3, r2
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f7ff fe43 	bl	800c458 <ld_clust>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c7d8:	e7c0      	b.n	800c75c <follow_path+0x50>
			if (res != FR_OK) break;
 800c7da:	bf00      	nop
 800c7dc:	e002      	b.n	800c7e4 <follow_path+0xd8>
				break;
 800c7de:	bf00      	nop
 800c7e0:	e000      	b.n	800c7e4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7e2:	bf00      	nop
			}
		}
	}

	return res;
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3718      	adds	r7, #24
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c7ee:	b480      	push	{r7}
 800c7f0:	b087      	sub	sp, #28
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d031      	beq.n	800c868 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	617b      	str	r3, [r7, #20]
 800c80a:	e002      	b.n	800c812 <get_ldnumber+0x24>
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	3301      	adds	r3, #1
 800c810:	617b      	str	r3, [r7, #20]
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	2b20      	cmp	r3, #32
 800c818:	d903      	bls.n	800c822 <get_ldnumber+0x34>
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c820:	d1f4      	bne.n	800c80c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	2b3a      	cmp	r3, #58	@ 0x3a
 800c828:	d11c      	bne.n	800c864 <get_ldnumber+0x76>
			tp = *path;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	60fa      	str	r2, [r7, #12]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	3b30      	subs	r3, #48	@ 0x30
 800c83a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2b09      	cmp	r3, #9
 800c840:	d80e      	bhi.n	800c860 <get_ldnumber+0x72>
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	429a      	cmp	r2, r3
 800c848:	d10a      	bne.n	800c860 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d107      	bne.n	800c860 <get_ldnumber+0x72>
					vol = (int)i;
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	3301      	adds	r3, #1
 800c858:	617b      	str	r3, [r7, #20]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	e002      	b.n	800c86a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c864:	2300      	movs	r3, #0
 800c866:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c868:	693b      	ldr	r3, [r7, #16]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	371c      	adds	r7, #28
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
	...

0800c878 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	70da      	strb	r2, [r3, #3]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f04f 32ff 	mov.w	r2, #4294967295
 800c88e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c890:	6839      	ldr	r1, [r7, #0]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7ff f8dc 	bl	800ba50 <move_window>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d001      	beq.n	800c8a2 <check_fs+0x2a>
 800c89e:	2304      	movs	r3, #4
 800c8a0:	e038      	b.n	800c914 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3330      	adds	r3, #48	@ 0x30
 800c8a6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fe fe20 	bl	800b4f0 <ld_word>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d001      	beq.n	800c8c0 <check_fs+0x48>
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e029      	b.n	800c914 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c8c6:	2be9      	cmp	r3, #233	@ 0xe9
 800c8c8:	d009      	beq.n	800c8de <check_fs+0x66>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c8d0:	2beb      	cmp	r3, #235	@ 0xeb
 800c8d2:	d11e      	bne.n	800c912 <check_fs+0x9a>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c8da:	2b90      	cmp	r3, #144	@ 0x90
 800c8dc:	d119      	bne.n	800c912 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	3330      	adds	r3, #48	@ 0x30
 800c8e2:	3336      	adds	r3, #54	@ 0x36
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fe fe1b 	bl	800b520 <ld_dword>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c8f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c91c <check_fs+0xa4>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d101      	bne.n	800c8fa <check_fs+0x82>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	e00c      	b.n	800c914 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	3330      	adds	r3, #48	@ 0x30
 800c8fe:	3352      	adds	r3, #82	@ 0x52
 800c900:	4618      	mov	r0, r3
 800c902:	f7fe fe0d 	bl	800b520 <ld_dword>
 800c906:	4603      	mov	r3, r0
 800c908:	4a05      	ldr	r2, [pc, #20]	@ (800c920 <check_fs+0xa8>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d101      	bne.n	800c912 <check_fs+0x9a>
 800c90e:	2300      	movs	r3, #0
 800c910:	e000      	b.n	800c914 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c912:	2302      	movs	r3, #2
}
 800c914:	4618      	mov	r0, r3
 800c916:	3708      	adds	r7, #8
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	00544146 	.word	0x00544146
 800c920:	33544146 	.word	0x33544146

0800c924 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b096      	sub	sp, #88	@ 0x58
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	4613      	mov	r3, r2
 800c930:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	2200      	movs	r2, #0
 800c936:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f7ff ff58 	bl	800c7ee <get_ldnumber>
 800c93e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c942:	2b00      	cmp	r3, #0
 800c944:	da01      	bge.n	800c94a <find_volume+0x26>
 800c946:	230b      	movs	r3, #11
 800c948:	e22d      	b.n	800cda6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c94a:	4aa1      	ldr	r2, [pc, #644]	@ (800cbd0 <find_volume+0x2ac>)
 800c94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c952:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <find_volume+0x3a>
 800c95a:	230c      	movs	r3, #12
 800c95c:	e223      	b.n	800cda6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c962:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c964:	79fb      	ldrb	r3, [r7, #7]
 800c966:	f023 0301 	bic.w	r3, r3, #1
 800c96a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d01a      	beq.n	800c9aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c976:	785b      	ldrb	r3, [r3, #1]
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fe fd19 	bl	800b3b0 <disk_status>
 800c97e:	4603      	mov	r3, r0
 800c980:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c984:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c988:	f003 0301 	and.w	r3, r3, #1
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10c      	bne.n	800c9aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d007      	beq.n	800c9a6 <find_volume+0x82>
 800c996:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c99a:	f003 0304 	and.w	r3, r3, #4
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d001      	beq.n	800c9a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c9a2:	230a      	movs	r3, #10
 800c9a4:	e1ff      	b.n	800cda6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e1fd      	b.n	800cda6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ba:	785b      	ldrb	r3, [r3, #1]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fe fd11 	bl	800b3e4 <disk_initialize>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c9c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e1e6      	b.n	800cda6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d007      	beq.n	800c9ee <find_volume+0xca>
 800c9de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9e2:	f003 0304 	and.w	r3, r3, #4
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d001      	beq.n	800c9ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c9ea:	230a      	movs	r3, #10
 800c9ec:	e1db      	b.n	800cda6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c9f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c9f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c9f6:	f7ff ff3f 	bl	800c878 <check_fs>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ca00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d149      	bne.n	800ca9c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca08:	2300      	movs	r3, #0
 800ca0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca0c:	e01e      	b.n	800ca4c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca10:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca16:	011b      	lsls	r3, r3, #4
 800ca18:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ca1c:	4413      	add	r3, r2
 800ca1e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca22:	3304      	adds	r3, #4
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d006      	beq.n	800ca38 <find_volume+0x114>
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fe fd76 	bl	800b520 <ld_dword>
 800ca34:	4602      	mov	r2, r0
 800ca36:	e000      	b.n	800ca3a <find_volume+0x116>
 800ca38:	2200      	movs	r2, #0
 800ca3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	3358      	adds	r3, #88	@ 0x58
 800ca40:	443b      	add	r3, r7
 800ca42:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca48:	3301      	adds	r3, #1
 800ca4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d9dd      	bls.n	800ca0e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ca52:	2300      	movs	r3, #0
 800ca54:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ca56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <find_volume+0x13e>
 800ca5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ca62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	3358      	adds	r3, #88	@ 0x58
 800ca68:	443b      	add	r3, r7
 800ca6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ca6e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d005      	beq.n	800ca82 <find_volume+0x15e>
 800ca76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca7a:	f7ff fefd 	bl	800c878 <check_fs>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	e000      	b.n	800ca84 <find_volume+0x160>
 800ca82:	2303      	movs	r3, #3
 800ca84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ca88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d905      	bls.n	800ca9c <find_volume+0x178>
 800ca90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca92:	3301      	adds	r3, #1
 800ca94:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca98:	2b03      	cmp	r3, #3
 800ca9a:	d9e2      	bls.n	800ca62 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ca9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800caa0:	2b04      	cmp	r3, #4
 800caa2:	d101      	bne.n	800caa8 <find_volume+0x184>
 800caa4:	2301      	movs	r3, #1
 800caa6:	e17e      	b.n	800cda6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800caa8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800caac:	2b01      	cmp	r3, #1
 800caae:	d901      	bls.n	800cab4 <find_volume+0x190>
 800cab0:	230d      	movs	r3, #13
 800cab2:	e178      	b.n	800cda6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab6:	3330      	adds	r3, #48	@ 0x30
 800cab8:	330b      	adds	r3, #11
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fd18 	bl	800b4f0 <ld_word>
 800cac0:	4603      	mov	r3, r0
 800cac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cac6:	d001      	beq.n	800cacc <find_volume+0x1a8>
 800cac8:	230d      	movs	r3, #13
 800caca:	e16c      	b.n	800cda6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cace:	3330      	adds	r3, #48	@ 0x30
 800cad0:	3316      	adds	r3, #22
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fe fd0c 	bl	800b4f0 <ld_word>
 800cad8:	4603      	mov	r3, r0
 800cada:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cadc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d106      	bne.n	800caf0 <find_volume+0x1cc>
 800cae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae4:	3330      	adds	r3, #48	@ 0x30
 800cae6:	3324      	adds	r3, #36	@ 0x24
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fe fd19 	bl	800b520 <ld_dword>
 800caee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800caf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800caf4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800caf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cafe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb02:	789b      	ldrb	r3, [r3, #2]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d005      	beq.n	800cb14 <find_volume+0x1f0>
 800cb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0a:	789b      	ldrb	r3, [r3, #2]
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d001      	beq.n	800cb14 <find_volume+0x1f0>
 800cb10:	230d      	movs	r3, #13
 800cb12:	e148      	b.n	800cda6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb16:	789b      	ldrb	r3, [r3, #2]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb1c:	fb02 f303 	mul.w	r3, r2, r3
 800cb20:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb28:	461a      	mov	r2, r3
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb30:	895b      	ldrh	r3, [r3, #10]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d008      	beq.n	800cb48 <find_volume+0x224>
 800cb36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb38:	895b      	ldrh	r3, [r3, #10]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3e:	895b      	ldrh	r3, [r3, #10]
 800cb40:	3b01      	subs	r3, #1
 800cb42:	4013      	ands	r3, r2
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <find_volume+0x228>
 800cb48:	230d      	movs	r3, #13
 800cb4a:	e12c      	b.n	800cda6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4e:	3330      	adds	r3, #48	@ 0x30
 800cb50:	3311      	adds	r3, #17
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7fe fccc 	bl	800b4f0 <ld_word>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb62:	891b      	ldrh	r3, [r3, #8]
 800cb64:	f003 030f 	and.w	r3, r3, #15
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <find_volume+0x24e>
 800cb6e:	230d      	movs	r3, #13
 800cb70:	e119      	b.n	800cda6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb74:	3330      	adds	r3, #48	@ 0x30
 800cb76:	3313      	adds	r3, #19
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fe fcb9 	bl	800b4f0 <ld_word>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cb82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d106      	bne.n	800cb96 <find_volume+0x272>
 800cb88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8a:	3330      	adds	r3, #48	@ 0x30
 800cb8c:	3320      	adds	r3, #32
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fe fcc6 	bl	800b520 <ld_dword>
 800cb94:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb98:	3330      	adds	r3, #48	@ 0x30
 800cb9a:	330e      	adds	r3, #14
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7fe fca7 	bl	800b4f0 <ld_word>
 800cba2:	4603      	mov	r3, r0
 800cba4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cba6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d101      	bne.n	800cbb0 <find_volume+0x28c>
 800cbac:	230d      	movs	r3, #13
 800cbae:	e0fa      	b.n	800cda6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cbb0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cbb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbb4:	4413      	add	r3, r2
 800cbb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbb8:	8912      	ldrh	r2, [r2, #8]
 800cbba:	0912      	lsrs	r2, r2, #4
 800cbbc:	b292      	uxth	r2, r2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cbc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d204      	bcs.n	800cbd4 <find_volume+0x2b0>
 800cbca:	230d      	movs	r3, #13
 800cbcc:	e0eb      	b.n	800cda6 <find_volume+0x482>
 800cbce:	bf00      	nop
 800cbd0:	20000fc8 	.word	0x20000fc8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cbd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbdc:	8952      	ldrh	r2, [r2, #10]
 800cbde:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbe2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d101      	bne.n	800cbee <find_volume+0x2ca>
 800cbea:	230d      	movs	r3, #13
 800cbec:	e0db      	b.n	800cda6 <find_volume+0x482>
		fmt = FS_FAT32;
 800cbee:	2303      	movs	r3, #3
 800cbf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d802      	bhi.n	800cc04 <find_volume+0x2e0>
 800cbfe:	2302      	movs	r3, #2
 800cc00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d802      	bhi.n	800cc14 <find_volume+0x2f0>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc16:	1c9a      	adds	r2, r3, #2
 800cc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc20:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cc22:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cc24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc26:	441a      	add	r2, r3
 800cc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cc2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc30:	441a      	add	r2, r3
 800cc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc34:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cc36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d11e      	bne.n	800cc7c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc40:	3330      	adds	r3, #48	@ 0x30
 800cc42:	332a      	adds	r3, #42	@ 0x2a
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7fe fc53 	bl	800b4f0 <ld_word>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d001      	beq.n	800cc54 <find_volume+0x330>
 800cc50:	230d      	movs	r3, #13
 800cc52:	e0a8      	b.n	800cda6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc56:	891b      	ldrh	r3, [r3, #8]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d001      	beq.n	800cc60 <find_volume+0x33c>
 800cc5c:	230d      	movs	r3, #13
 800cc5e:	e0a2      	b.n	800cda6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc62:	3330      	adds	r3, #48	@ 0x30
 800cc64:	332c      	adds	r3, #44	@ 0x2c
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fe fc5a 	bl	800b520 <ld_dword>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc70:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc74:	695b      	ldr	r3, [r3, #20]
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc7a:	e01f      	b.n	800ccbc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7e:	891b      	ldrh	r3, [r3, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d101      	bne.n	800cc88 <find_volume+0x364>
 800cc84:	230d      	movs	r3, #13
 800cc86:	e08e      	b.n	800cda6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8a:	6a1a      	ldr	r2, [r3, #32]
 800cc8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc8e:	441a      	add	r2, r3
 800cc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc92:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cc94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d103      	bne.n	800cca4 <find_volume+0x380>
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc9e:	695b      	ldr	r3, [r3, #20]
 800cca0:	005b      	lsls	r3, r3, #1
 800cca2:	e00a      	b.n	800ccba <find_volume+0x396>
 800cca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca6:	695a      	ldr	r2, [r3, #20]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	005b      	lsls	r3, r3, #1
 800ccac:	4413      	add	r3, r2
 800ccae:	085a      	lsrs	r2, r3, #1
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	f003 0301 	and.w	r3, r3, #1
 800ccb8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ccba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbe:	699a      	ldr	r2, [r3, #24]
 800ccc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccc2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ccc6:	0a5b      	lsrs	r3, r3, #9
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d201      	bcs.n	800ccd0 <find_volume+0x3ac>
 800cccc:	230d      	movs	r3, #13
 800ccce:	e06a      	b.n	800cda6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd6:	611a      	str	r2, [r3, #16]
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccda:	691a      	ldr	r2, [r3, #16]
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccde:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce2:	2280      	movs	r2, #128	@ 0x80
 800cce4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cce6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ccea:	2b03      	cmp	r3, #3
 800ccec:	d149      	bne.n	800cd82 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ccee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf0:	3330      	adds	r3, #48	@ 0x30
 800ccf2:	3330      	adds	r3, #48	@ 0x30
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fe fbfb 	bl	800b4f0 <ld_word>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d140      	bne.n	800cd82 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cd00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd02:	3301      	adds	r3, #1
 800cd04:	4619      	mov	r1, r3
 800cd06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd08:	f7fe fea2 	bl	800ba50 <move_window>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d137      	bne.n	800cd82 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cd12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd14:	2200      	movs	r2, #0
 800cd16:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1a:	3330      	adds	r3, #48	@ 0x30
 800cd1c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fe fbe5 	bl	800b4f0 <ld_word>
 800cd26:	4603      	mov	r3, r0
 800cd28:	461a      	mov	r2, r3
 800cd2a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d127      	bne.n	800cd82 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd34:	3330      	adds	r3, #48	@ 0x30
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fe fbf2 	bl	800b520 <ld_dword>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	4a1c      	ldr	r2, [pc, #112]	@ (800cdb0 <find_volume+0x48c>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d11e      	bne.n	800cd82 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd46:	3330      	adds	r3, #48	@ 0x30
 800cd48:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7fe fbe7 	bl	800b520 <ld_dword>
 800cd52:	4603      	mov	r3, r0
 800cd54:	4a17      	ldr	r2, [pc, #92]	@ (800cdb4 <find_volume+0x490>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d113      	bne.n	800cd82 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	3330      	adds	r3, #48	@ 0x30
 800cd5e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fe fbdc 	bl	800b520 <ld_dword>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd70:	3330      	adds	r3, #48	@ 0x30
 800cd72:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fe fbd2 	bl	800b520 <ld_dword>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd80:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cd88:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cd8a:	4b0b      	ldr	r3, [pc, #44]	@ (800cdb8 <find_volume+0x494>)
 800cd8c:	881b      	ldrh	r3, [r3, #0]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	4b09      	ldr	r3, [pc, #36]	@ (800cdb8 <find_volume+0x494>)
 800cd94:	801a      	strh	r2, [r3, #0]
 800cd96:	4b08      	ldr	r3, [pc, #32]	@ (800cdb8 <find_volume+0x494>)
 800cd98:	881a      	ldrh	r2, [r3, #0]
 800cd9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cd9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cda0:	f7fe fdee 	bl	800b980 <clear_lock>
#endif
	return FR_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3758      	adds	r7, #88	@ 0x58
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	41615252 	.word	0x41615252
 800cdb4:	61417272 	.word	0x61417272
 800cdb8:	20000fcc 	.word	0x20000fcc

0800cdbc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cdc6:	2309      	movs	r3, #9
 800cdc8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d01c      	beq.n	800ce0a <validate+0x4e>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d018      	beq.n	800ce0a <validate+0x4e>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d013      	beq.n	800ce0a <validate+0x4e>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	889a      	ldrh	r2, [r3, #4]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	88db      	ldrh	r3, [r3, #6]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d10c      	bne.n	800ce0a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	785b      	ldrb	r3, [r3, #1]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fe fada 	bl	800b3b0 <disk_status>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	f003 0301 	and.w	r3, r3, #1
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d101      	bne.n	800ce0a <validate+0x4e>
			res = FR_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ce0a:	7bfb      	ldrb	r3, [r7, #15]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d102      	bne.n	800ce16 <validate+0x5a>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	e000      	b.n	800ce18 <validate+0x5c>
 800ce16:	2300      	movs	r3, #0
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	6013      	str	r3, [r2, #0]
	return res;
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
	...

0800ce28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b088      	sub	sp, #32
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	60f8      	str	r0, [r7, #12]
 800ce30:	60b9      	str	r1, [r7, #8]
 800ce32:	4613      	mov	r3, r2
 800ce34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ce3a:	f107 0310 	add.w	r3, r7, #16
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7ff fcd5 	bl	800c7ee <get_ldnumber>
 800ce44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	da01      	bge.n	800ce50 <f_mount+0x28>
 800ce4c:	230b      	movs	r3, #11
 800ce4e:	e02b      	b.n	800cea8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ce50:	4a17      	ldr	r2, [pc, #92]	@ (800ceb0 <f_mount+0x88>)
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d005      	beq.n	800ce6c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ce60:	69b8      	ldr	r0, [r7, #24]
 800ce62:	f7fe fd8d 	bl	800b980 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d002      	beq.n	800ce78 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2200      	movs	r2, #0
 800ce76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	490d      	ldr	r1, [pc, #52]	@ (800ceb0 <f_mount+0x88>)
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d002      	beq.n	800ce8e <f_mount+0x66>
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d001      	beq.n	800ce92 <f_mount+0x6a>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e00a      	b.n	800cea8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ce92:	f107 010c 	add.w	r1, r7, #12
 800ce96:	f107 0308 	add.w	r3, r7, #8
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff fd41 	bl	800c924 <find_volume>
 800cea2:	4603      	mov	r3, r0
 800cea4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cea6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3720      	adds	r7, #32
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	20000fc8 	.word	0x20000fc8

0800ceb4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b098      	sub	sp, #96	@ 0x60
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	4613      	mov	r3, r2
 800cec0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d101      	bne.n	800cecc <f_open+0x18>
 800cec8:	2309      	movs	r3, #9
 800ceca:	e1a9      	b.n	800d220 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cecc:	79fb      	ldrb	r3, [r7, #7]
 800cece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ced2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ced4:	79fa      	ldrb	r2, [r7, #7]
 800ced6:	f107 0110 	add.w	r1, r7, #16
 800ceda:	f107 0308 	add.w	r3, r7, #8
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff fd20 	bl	800c924 <find_volume>
 800cee4:	4603      	mov	r3, r0
 800cee6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ceea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f040 818d 	bne.w	800d20e <f_open+0x35a>
		dj.obj.fs = fs;
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	f107 0314 	add.w	r3, r7, #20
 800cefe:	4611      	mov	r1, r2
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7ff fc03 	bl	800c70c <follow_path>
 800cf06:	4603      	mov	r3, r0
 800cf08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cf0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d118      	bne.n	800cf46 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cf14:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cf18:	b25b      	sxtb	r3, r3
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	da03      	bge.n	800cf26 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cf1e:	2306      	movs	r3, #6
 800cf20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cf24:	e00f      	b.n	800cf46 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf26:	79fb      	ldrb	r3, [r7, #7]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	bf8c      	ite	hi
 800cf2c:	2301      	movhi	r3, #1
 800cf2e:	2300      	movls	r3, #0
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	461a      	mov	r2, r3
 800cf34:	f107 0314 	add.w	r3, r7, #20
 800cf38:	4611      	mov	r1, r2
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fe fbd8 	bl	800b6f0 <chk_lock>
 800cf40:	4603      	mov	r3, r0
 800cf42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf46:	79fb      	ldrb	r3, [r7, #7]
 800cf48:	f003 031c 	and.w	r3, r3, #28
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d07f      	beq.n	800d050 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cf50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d017      	beq.n	800cf88 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cf58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	d10e      	bne.n	800cf7e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cf60:	f7fe fc22 	bl	800b7a8 <enq_lock>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d006      	beq.n	800cf78 <f_open+0xc4>
 800cf6a:	f107 0314 	add.w	r3, r7, #20
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff fb06 	bl	800c580 <dir_register>
 800cf74:	4603      	mov	r3, r0
 800cf76:	e000      	b.n	800cf7a <f_open+0xc6>
 800cf78:	2312      	movs	r3, #18
 800cf7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cf7e:	79fb      	ldrb	r3, [r7, #7]
 800cf80:	f043 0308 	orr.w	r3, r3, #8
 800cf84:	71fb      	strb	r3, [r7, #7]
 800cf86:	e010      	b.n	800cfaa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cf88:	7ebb      	ldrb	r3, [r7, #26]
 800cf8a:	f003 0311 	and.w	r3, r3, #17
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d003      	beq.n	800cf9a <f_open+0xe6>
					res = FR_DENIED;
 800cf92:	2307      	movs	r3, #7
 800cf94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cf98:	e007      	b.n	800cfaa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	f003 0304 	and.w	r3, r3, #4
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d002      	beq.n	800cfaa <f_open+0xf6>
 800cfa4:	2308      	movs	r3, #8
 800cfa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cfaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d168      	bne.n	800d084 <f_open+0x1d0>
 800cfb2:	79fb      	ldrb	r3, [r7, #7]
 800cfb4:	f003 0308 	and.w	r3, r3, #8
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d063      	beq.n	800d084 <f_open+0x1d0>
				dw = GET_FATTIME();
 800cfbc:	f7fd ffb6 	bl	800af2c <get_fattime>
 800cfc0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cfc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfc4:	330e      	adds	r3, #14
 800cfc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fe fae7 	bl	800b59c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cfce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfd0:	3316      	adds	r3, #22
 800cfd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fe fae1 	bl	800b59c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cfda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfdc:	330b      	adds	r3, #11
 800cfde:	2220      	movs	r2, #32
 800cfe0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7ff fa35 	bl	800c458 <ld_clust>
 800cfee:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cff4:	2200      	movs	r2, #0
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff fa4d 	bl	800c496 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cffe:	331c      	adds	r3, #28
 800d000:	2100      	movs	r1, #0
 800d002:	4618      	mov	r0, r3
 800d004:	f7fe faca 	bl	800b59c <st_dword>
					fs->wflag = 1;
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	2201      	movs	r2, #1
 800d00c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d010:	2b00      	cmp	r3, #0
 800d012:	d037      	beq.n	800d084 <f_open+0x1d0>
						dw = fs->winsect;
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d018:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d01a:	f107 0314 	add.w	r3, r7, #20
 800d01e:	2200      	movs	r2, #0
 800d020:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d022:	4618      	mov	r0, r3
 800d024:	f7fe ff60 	bl	800bee8 <remove_chain>
 800d028:	4603      	mov	r3, r0
 800d02a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d02e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d032:	2b00      	cmp	r3, #0
 800d034:	d126      	bne.n	800d084 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe fd08 	bl	800ba50 <move_window>
 800d040:	4603      	mov	r3, r0
 800d042:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d04a:	3a01      	subs	r2, #1
 800d04c:	60da      	str	r2, [r3, #12]
 800d04e:	e019      	b.n	800d084 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d050:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d054:	2b00      	cmp	r3, #0
 800d056:	d115      	bne.n	800d084 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d058:	7ebb      	ldrb	r3, [r7, #26]
 800d05a:	f003 0310 	and.w	r3, r3, #16
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d003      	beq.n	800d06a <f_open+0x1b6>
					res = FR_NO_FILE;
 800d062:	2304      	movs	r3, #4
 800d064:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d068:	e00c      	b.n	800d084 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d06a:	79fb      	ldrb	r3, [r7, #7]
 800d06c:	f003 0302 	and.w	r3, r3, #2
 800d070:	2b00      	cmp	r3, #0
 800d072:	d007      	beq.n	800d084 <f_open+0x1d0>
 800d074:	7ebb      	ldrb	r3, [r7, #26]
 800d076:	f003 0301 	and.w	r3, r3, #1
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d002      	beq.n	800d084 <f_open+0x1d0>
						res = FR_DENIED;
 800d07e:	2307      	movs	r3, #7
 800d080:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d084:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d126      	bne.n	800d0da <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d08c:	79fb      	ldrb	r3, [r7, #7]
 800d08e:	f003 0308 	and.w	r3, r3, #8
 800d092:	2b00      	cmp	r3, #0
 800d094:	d003      	beq.n	800d09e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d096:	79fb      	ldrb	r3, [r7, #7]
 800d098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d09c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d0a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	bf8c      	ite	hi
 800d0b2:	2301      	movhi	r3, #1
 800d0b4:	2300      	movls	r3, #0
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	461a      	mov	r2, r3
 800d0ba:	f107 0314 	add.w	r3, r7, #20
 800d0be:	4611      	mov	r1, r2
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fe fb93 	bl	800b7ec <inc_lock>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	691b      	ldr	r3, [r3, #16]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d102      	bne.n	800d0da <f_open+0x226>
 800d0d4:	2302      	movs	r3, #2
 800d0d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d0da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f040 8095 	bne.w	800d20e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7ff f9b4 	bl	800c458 <ld_clust>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d0f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0f8:	331c      	adds	r3, #28
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe fa10 	bl	800b520 <ld_dword>
 800d100:	4602      	mov	r2, r0
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d10c:	693a      	ldr	r2, [r7, #16]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	88da      	ldrh	r2, [r3, #6]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	79fa      	ldrb	r2, [r7, #7]
 800d11e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2200      	movs	r2, #0
 800d12a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	3330      	adds	r3, #48	@ 0x30
 800d136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d13a:	2100      	movs	r1, #0
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fe fa7a 	bl	800b636 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d142:	79fb      	ldrb	r3, [r7, #7]
 800d144:	f003 0320 	and.w	r3, r3, #32
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d060      	beq.n	800d20e <f_open+0x35a>
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d05c      	beq.n	800d20e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	68da      	ldr	r2, [r3, #12]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	895b      	ldrh	r3, [r3, #10]
 800d160:	025b      	lsls	r3, r3, #9
 800d162:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d170:	e016      	b.n	800d1a0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe fd25 	bl	800bbc6 <get_fat>
 800d17c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d17e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d180:	2b01      	cmp	r3, #1
 800d182:	d802      	bhi.n	800d18a <f_open+0x2d6>
 800d184:	2302      	movs	r3, #2
 800d186:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d18a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d190:	d102      	bne.n	800d198 <f_open+0x2e4>
 800d192:	2301      	movs	r3, #1
 800d194:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d198:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d19a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d103      	bne.n	800d1b0 <f_open+0x2fc>
 800d1a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d8e0      	bhi.n	800d172 <f_open+0x2be>
				}
				fp->clust = clst;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d1b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d127      	bne.n	800d20e <f_open+0x35a>
 800d1be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d022      	beq.n	800d20e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7fe fcdb 	bl	800bb88 <clust2sect>
 800d1d2:	6478      	str	r0, [r7, #68]	@ 0x44
 800d1d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d103      	bne.n	800d1e2 <f_open+0x32e>
						res = FR_INT_ERR;
 800d1da:	2302      	movs	r3, #2
 800d1dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d1e0:	e015      	b.n	800d20e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d1e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1e4:	0a5a      	lsrs	r2, r3, #9
 800d1e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1e8:	441a      	add	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	7858      	ldrb	r0, [r3, #1]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6a1a      	ldr	r2, [r3, #32]
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	f7fe f919 	bl	800b434 <disk_read>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d002      	beq.n	800d20e <f_open+0x35a>
 800d208:	2301      	movs	r3, #1
 800d20a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d20e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d212:	2b00      	cmp	r3, #0
 800d214:	d002      	beq.n	800d21c <f_open+0x368>
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d21c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d220:	4618      	mov	r0, r3
 800d222:	3760      	adds	r7, #96	@ 0x60
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b08c      	sub	sp, #48	@ 0x30
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
 800d234:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	2200      	movs	r2, #0
 800d23e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f107 0210 	add.w	r2, r7, #16
 800d246:	4611      	mov	r1, r2
 800d248:	4618      	mov	r0, r3
 800d24a:	f7ff fdb7 	bl	800cdbc <validate>
 800d24e:	4603      	mov	r3, r0
 800d250:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d254:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d107      	bne.n	800d26c <f_write+0x44>
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	7d5b      	ldrb	r3, [r3, #21]
 800d260:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d264:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d002      	beq.n	800d272 <f_write+0x4a>
 800d26c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d270:	e14b      	b.n	800d50a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	7d1b      	ldrb	r3, [r3, #20]
 800d276:	f003 0302 	and.w	r3, r3, #2
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d101      	bne.n	800d282 <f_write+0x5a>
 800d27e:	2307      	movs	r3, #7
 800d280:	e143      	b.n	800d50a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	699a      	ldr	r2, [r3, #24]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	441a      	add	r2, r3
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	699b      	ldr	r3, [r3, #24]
 800d28e:	429a      	cmp	r2, r3
 800d290:	f080 812d 	bcs.w	800d4ee <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	699b      	ldr	r3, [r3, #24]
 800d298:	43db      	mvns	r3, r3
 800d29a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d29c:	e127      	b.n	800d4ee <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	699b      	ldr	r3, [r3, #24]
 800d2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f040 80e3 	bne.w	800d472 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	699b      	ldr	r3, [r3, #24]
 800d2b0:	0a5b      	lsrs	r3, r3, #9
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	8952      	ldrh	r2, [r2, #10]
 800d2b6:	3a01      	subs	r2, #1
 800d2b8:	4013      	ands	r3, r2
 800d2ba:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d143      	bne.n	800d34a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	699b      	ldr	r3, [r3, #24]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10c      	bne.n	800d2e4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d11a      	bne.n	800d30c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2100      	movs	r1, #0
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7fe fe69 	bl	800bfb2 <create_chain>
 800d2e0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d2e2:	e013      	b.n	800d30c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d007      	beq.n	800d2fc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	699b      	ldr	r3, [r3, #24]
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	f7fe fef5 	bl	800c0e2 <clmt_clust>
 800d2f8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d2fa:	e007      	b.n	800d30c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	69db      	ldr	r3, [r3, #28]
 800d302:	4619      	mov	r1, r3
 800d304:	4610      	mov	r0, r2
 800d306:	f7fe fe54 	bl	800bfb2 <create_chain>
 800d30a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 80f2 	beq.w	800d4f8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d316:	2b01      	cmp	r3, #1
 800d318:	d104      	bne.n	800d324 <f_write+0xfc>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2202      	movs	r2, #2
 800d31e:	755a      	strb	r2, [r3, #21]
 800d320:	2302      	movs	r3, #2
 800d322:	e0f2      	b.n	800d50a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32a:	d104      	bne.n	800d336 <f_write+0x10e>
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2201      	movs	r2, #1
 800d330:	755a      	strb	r2, [r3, #21]
 800d332:	2301      	movs	r3, #1
 800d334:	e0e9      	b.n	800d50a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d33a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d102      	bne.n	800d34a <f_write+0x122>
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d348:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	7d1b      	ldrb	r3, [r3, #20]
 800d34e:	b25b      	sxtb	r3, r3
 800d350:	2b00      	cmp	r3, #0
 800d352:	da18      	bge.n	800d386 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	7858      	ldrb	r0, [r3, #1]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6a1a      	ldr	r2, [r3, #32]
 800d362:	2301      	movs	r3, #1
 800d364:	f7fe f886 	bl	800b474 <disk_write>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d004      	beq.n	800d378 <f_write+0x150>
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2201      	movs	r2, #1
 800d372:	755a      	strb	r2, [r3, #21]
 800d374:	2301      	movs	r3, #1
 800d376:	e0c8      	b.n	800d50a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	7d1b      	ldrb	r3, [r3, #20]
 800d37c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d380:	b2da      	uxtb	r2, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d386:	693a      	ldr	r2, [r7, #16]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	69db      	ldr	r3, [r3, #28]
 800d38c:	4619      	mov	r1, r3
 800d38e:	4610      	mov	r0, r2
 800d390:	f7fe fbfa 	bl	800bb88 <clust2sect>
 800d394:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d104      	bne.n	800d3a6 <f_write+0x17e>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2202      	movs	r2, #2
 800d3a0:	755a      	strb	r2, [r3, #21]
 800d3a2:	2302      	movs	r3, #2
 800d3a4:	e0b1      	b.n	800d50a <f_write+0x2e2>
			sect += csect;
 800d3a6:	697a      	ldr	r2, [r7, #20]
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	0a5b      	lsrs	r3, r3, #9
 800d3b2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d3b4:	6a3b      	ldr	r3, [r7, #32]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d03c      	beq.n	800d434 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d3ba:	69ba      	ldr	r2, [r7, #24]
 800d3bc:	6a3b      	ldr	r3, [r7, #32]
 800d3be:	4413      	add	r3, r2
 800d3c0:	693a      	ldr	r2, [r7, #16]
 800d3c2:	8952      	ldrh	r2, [r2, #10]
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d905      	bls.n	800d3d4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	895b      	ldrh	r3, [r3, #10]
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	7858      	ldrb	r0, [r3, #1]
 800d3d8:	6a3b      	ldr	r3, [r7, #32]
 800d3da:	697a      	ldr	r2, [r7, #20]
 800d3dc:	69f9      	ldr	r1, [r7, #28]
 800d3de:	f7fe f849 	bl	800b474 <disk_write>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d004      	beq.n	800d3f2 <f_write+0x1ca>
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	755a      	strb	r2, [r3, #21]
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e08b      	b.n	800d50a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6a1a      	ldr	r2, [r3, #32]
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	6a3a      	ldr	r2, [r7, #32]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d915      	bls.n	800d42c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6a1a      	ldr	r2, [r3, #32]
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	025b      	lsls	r3, r3, #9
 800d410:	69fa      	ldr	r2, [r7, #28]
 800d412:	4413      	add	r3, r2
 800d414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d418:	4619      	mov	r1, r3
 800d41a:	f7fe f8eb 	bl	800b5f4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	7d1b      	ldrb	r3, [r3, #20]
 800d422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d426:	b2da      	uxtb	r2, r3
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d42c:	6a3b      	ldr	r3, [r7, #32]
 800d42e:	025b      	lsls	r3, r3, #9
 800d430:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d432:	e03f      	b.n	800d4b4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6a1b      	ldr	r3, [r3, #32]
 800d438:	697a      	ldr	r2, [r7, #20]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d016      	beq.n	800d46c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	699a      	ldr	r2, [r3, #24]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d446:	429a      	cmp	r2, r3
 800d448:	d210      	bcs.n	800d46c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	7858      	ldrb	r0, [r3, #1]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d454:	2301      	movs	r3, #1
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	f7fd ffec 	bl	800b434 <disk_read>
 800d45c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d004      	beq.n	800d46c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2201      	movs	r2, #1
 800d466:	755a      	strb	r2, [r3, #21]
 800d468:	2301      	movs	r3, #1
 800d46a:	e04e      	b.n	800d50a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	699b      	ldr	r3, [r3, #24]
 800d476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d47a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d47e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	429a      	cmp	r2, r3
 800d486:	d901      	bls.n	800d48c <f_write+0x264>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	699b      	ldr	r3, [r3, #24]
 800d496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d49a:	4413      	add	r3, r2
 800d49c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d49e:	69f9      	ldr	r1, [r7, #28]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe f8a7 	bl	800b5f4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	7d1b      	ldrb	r3, [r3, #20]
 800d4aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d4b4:	69fa      	ldr	r2, [r7, #28]
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b8:	4413      	add	r3, r2
 800d4ba:	61fb      	str	r3, [r7, #28]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	699a      	ldr	r2, [r3, #24]
 800d4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c2:	441a      	add	r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	619a      	str	r2, [r3, #24]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	68da      	ldr	r2, [r3, #12]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	699b      	ldr	r3, [r3, #24]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	bf38      	it	cc
 800d4d4:	461a      	movcc	r2, r3
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	60da      	str	r2, [r3, #12]
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e0:	441a      	add	r2, r3
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	601a      	str	r2, [r3, #0]
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ea:	1ad3      	subs	r3, r2, r3
 800d4ec:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f47f aed4 	bne.w	800d29e <f_write+0x76>
 800d4f6:	e000      	b.n	800d4fa <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d4f8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	7d1b      	ldrb	r3, [r3, #20]
 800d4fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d502:	b2da      	uxtb	r2, r3
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3730      	adds	r7, #48	@ 0x30
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b086      	sub	sp, #24
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f107 0208 	add.w	r2, r7, #8
 800d520:	4611      	mov	r1, r2
 800d522:	4618      	mov	r0, r3
 800d524:	f7ff fc4a 	bl	800cdbc <validate>
 800d528:	4603      	mov	r3, r0
 800d52a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d52c:	7dfb      	ldrb	r3, [r7, #23]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d168      	bne.n	800d604 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	7d1b      	ldrb	r3, [r3, #20]
 800d536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d062      	beq.n	800d604 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	7d1b      	ldrb	r3, [r3, #20]
 800d542:	b25b      	sxtb	r3, r3
 800d544:	2b00      	cmp	r3, #0
 800d546:	da15      	bge.n	800d574 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	7858      	ldrb	r0, [r3, #1]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a1a      	ldr	r2, [r3, #32]
 800d556:	2301      	movs	r3, #1
 800d558:	f7fd ff8c 	bl	800b474 <disk_write>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d001      	beq.n	800d566 <f_sync+0x54>
 800d562:	2301      	movs	r3, #1
 800d564:	e04f      	b.n	800d606 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	7d1b      	ldrb	r3, [r3, #20]
 800d56a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d56e:	b2da      	uxtb	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d574:	f7fd fcda 	bl	800af2c <get_fattime>
 800d578:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d580:	4619      	mov	r1, r3
 800d582:	4610      	mov	r0, r2
 800d584:	f7fe fa64 	bl	800ba50 <move_window>
 800d588:	4603      	mov	r3, r0
 800d58a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d58c:	7dfb      	ldrb	r3, [r7, #23]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d138      	bne.n	800d604 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d596:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	330b      	adds	r3, #11
 800d59c:	781a      	ldrb	r2, [r3, #0]
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	330b      	adds	r3, #11
 800d5a2:	f042 0220 	orr.w	r2, r2, #32
 800d5a6:	b2d2      	uxtb	r2, r2
 800d5a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	68f9      	ldr	r1, [r7, #12]
 800d5b6:	f7fe ff6e 	bl	800c496 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f103 021c 	add.w	r2, r3, #28
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4610      	mov	r0, r2
 800d5c8:	f7fd ffe8 	bl	800b59c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	3316      	adds	r3, #22
 800d5d0:	6939      	ldr	r1, [r7, #16]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fd ffe2 	bl	800b59c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	3312      	adds	r3, #18
 800d5dc:	2100      	movs	r1, #0
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fd ffc1 	bl	800b566 <st_word>
					fs->wflag = 1;
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fe fa5d 	bl	800baac <sync_fs>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	7d1b      	ldrb	r3, [r3, #20]
 800d5fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5fe:	b2da      	uxtb	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d604:	7dfb      	ldrb	r3, [r7, #23]
}
 800d606:	4618      	mov	r0, r3
 800d608:	3718      	adds	r7, #24
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b084      	sub	sp, #16
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff ff7b 	bl	800d512 <f_sync>
 800d61c:	4603      	mov	r3, r0
 800d61e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d118      	bne.n	800d658 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f107 0208 	add.w	r2, r7, #8
 800d62c:	4611      	mov	r1, r2
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff fbc4 	bl	800cdbc <validate>
 800d634:	4603      	mov	r3, r0
 800d636:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d10c      	bne.n	800d658 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe f960 	bl	800b908 <dec_lock>
 800d648:	4603      	mov	r3, r0
 800d64a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d64c:	7bfb      	ldrb	r3, [r7, #15]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d102      	bne.n	800d658 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d658:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
	...

0800d664 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800d664:	b590      	push	{r4, r7, lr}
 800d666:	b09d      	sub	sp, #116	@ 0x74
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	607a      	str	r2, [r7, #4]
 800d66e:	603b      	str	r3, [r7, #0]
 800d670:	460b      	mov	r3, r1
 800d672:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800d674:	2301      	movs	r3, #1
 800d676:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800d678:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d67c:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800d67e:	f107 030c 	add.w	r3, r7, #12
 800d682:	4618      	mov	r0, r3
 800d684:	f7ff f8b3 	bl	800c7ee <get_ldnumber>
 800d688:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d68a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	da02      	bge.n	800d696 <f_mkfs+0x32>
 800d690:	230b      	movs	r3, #11
 800d692:	f000 bc0d 	b.w	800deb0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800d696:	4a94      	ldr	r2, [pc, #592]	@ (800d8e8 <f_mkfs+0x284>)
 800d698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d005      	beq.n	800d6ae <f_mkfs+0x4a>
 800d6a2:	4a91      	ldr	r2, [pc, #580]	@ (800d8e8 <f_mkfs+0x284>)
 800d6a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800d6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800d6ba:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fd fe90 	bl	800b3e4 <disk_initialize>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800d6ca:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d6ce:	f003 0301 	and.w	r3, r3, #1
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d001      	beq.n	800d6da <f_mkfs+0x76>
 800d6d6:	2303      	movs	r3, #3
 800d6d8:	e3ea      	b.n	800deb0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800d6da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d6de:	f003 0304 	and.w	r3, r3, #4
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <f_mkfs+0x86>
 800d6e6:	230a      	movs	r3, #10
 800d6e8:	e3e2      	b.n	800deb0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800d6ea:	f107 0214 	add.w	r2, r7, #20
 800d6ee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d6f2:	2103      	movs	r1, #3
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fd fedd 	bl	800b4b4 <disk_ioctl>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10c      	bne.n	800d71a <f_mkfs+0xb6>
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d009      	beq.n	800d71a <f_mkfs+0xb6>
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d70c:	d805      	bhi.n	800d71a <f_mkfs+0xb6>
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	1e5a      	subs	r2, r3, #1
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	4013      	ands	r3, r2
 800d716:	2b00      	cmp	r3, #0
 800d718:	d001      	beq.n	800d71e <f_mkfs+0xba>
 800d71a:	2301      	movs	r3, #1
 800d71c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800d71e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d722:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d003      	beq.n	800d732 <f_mkfs+0xce>
 800d72a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d309      	bcc.n	800d746 <f_mkfs+0xe2>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d738:	d805      	bhi.n	800d746 <f_mkfs+0xe2>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	1e5a      	subs	r2, r3, #1
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4013      	ands	r3, r2
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <f_mkfs+0xe6>
 800d746:	2313      	movs	r3, #19
 800d748:	e3b2      	b.n	800deb0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800d74a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d752:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800d758:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d75a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d762:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800d764:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d768:	fb02 f303 	mul.w	r3, r2, r3
 800d76c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800d76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d770:	2b00      	cmp	r3, #0
 800d772:	d101      	bne.n	800d778 <f_mkfs+0x114>
 800d774:	230e      	movs	r3, #14
 800d776:	e39b      	b.n	800deb0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d778:	f107 0210 	add.w	r2, r7, #16
 800d77c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d780:	2101      	movs	r1, #1
 800d782:	4618      	mov	r0, r3
 800d784:	f7fd fe96 	bl	800b4b4 <disk_ioctl>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <f_mkfs+0x12e>
 800d78e:	2301      	movs	r3, #1
 800d790:	e38e      	b.n	800deb0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d792:	7afb      	ldrb	r3, [r7, #11]
 800d794:	f003 0308 	and.w	r3, r3, #8
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <f_mkfs+0x13c>
 800d79c:	2300      	movs	r3, #0
 800d79e:	e000      	b.n	800d7a2 <f_mkfs+0x13e>
 800d7a0:	233f      	movs	r3, #63	@ 0x3f
 800d7a2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d901      	bls.n	800d7b0 <f_mkfs+0x14c>
 800d7ac:	230e      	movs	r3, #14
 800d7ae:	e37f      	b.n	800deb0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800d7b0:	693a      	ldr	r2, [r7, #16]
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b4:	1ad3      	subs	r3, r2, r3
 800d7b6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7bc:	d801      	bhi.n	800d7c2 <f_mkfs+0x15e>
 800d7be:	230e      	movs	r3, #14
 800d7c0:	e376      	b.n	800deb0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b80      	cmp	r3, #128	@ 0x80
 800d7c6:	d901      	bls.n	800d7cc <f_mkfs+0x168>
 800d7c8:	2313      	movs	r3, #19
 800d7ca:	e371      	b.n	800deb0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800d7cc:	7afb      	ldrb	r3, [r7, #11]
 800d7ce:	f003 0302 	and.w	r3, r3, #2
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00d      	beq.n	800d7f2 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800d7d6:	7afb      	ldrb	r3, [r7, #11]
 800d7d8:	f003 0307 	and.w	r3, r3, #7
 800d7dc:	2b02      	cmp	r3, #2
 800d7de:	d004      	beq.n	800d7ea <f_mkfs+0x186>
 800d7e0:	7afb      	ldrb	r3, [r7, #11]
 800d7e2:	f003 0301 	and.w	r3, r3, #1
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d103      	bne.n	800d7f2 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800d7ea:	2303      	movs	r3, #3
 800d7ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d7f0:	e009      	b.n	800d806 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800d7f2:	7afb      	ldrb	r3, [r7, #11]
 800d7f4:	f003 0301 	and.w	r3, r3, #1
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d101      	bne.n	800d800 <f_mkfs+0x19c>
 800d7fc:	2313      	movs	r3, #19
 800d7fe:	e357      	b.n	800deb0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800d800:	2302      	movs	r3, #2
 800d802:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800d80a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d80e:	2b03      	cmp	r3, #3
 800d810:	d13c      	bne.n	800d88c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800d812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d814:	2b00      	cmp	r3, #0
 800d816:	d11b      	bne.n	800d850 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	0c5b      	lsrs	r3, r3, #17
 800d81c:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d81e:	2300      	movs	r3, #0
 800d820:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d822:	2301      	movs	r3, #1
 800d824:	653b      	str	r3, [r7, #80]	@ 0x50
 800d826:	e005      	b.n	800d834 <f_mkfs+0x1d0>
 800d828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d82a:	3301      	adds	r3, #1
 800d82c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d82e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d830:	005b      	lsls	r3, r3, #1
 800d832:	653b      	str	r3, [r7, #80]	@ 0x50
 800d834:	4a2d      	ldr	r2, [pc, #180]	@ (800d8ec <f_mkfs+0x288>)
 800d836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d007      	beq.n	800d850 <f_mkfs+0x1ec>
 800d840:	4a2a      	ldr	r2, [pc, #168]	@ (800d8ec <f_mkfs+0x288>)
 800d842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d848:	461a      	mov	r2, r3
 800d84a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d2eb      	bcs.n	800d828 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800d850:	693a      	ldr	r2, [r7, #16]
 800d852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d854:	fbb2 f3f3 	udiv	r3, r2, r3
 800d858:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800d85a:	6a3b      	ldr	r3, [r7, #32]
 800d85c:	3302      	adds	r3, #2
 800d85e:	009a      	lsls	r2, r3, #2
 800d860:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d862:	4413      	add	r3, r2
 800d864:	1e5a      	subs	r2, r3, #1
 800d866:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d868:	fbb2 f3f3 	udiv	r3, r2, r3
 800d86c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800d86e:	2320      	movs	r3, #32
 800d870:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800d872:	2300      	movs	r3, #0
 800d874:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800d876:	6a3b      	ldr	r3, [r7, #32]
 800d878:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d903      	bls.n	800d888 <f_mkfs+0x224>
 800d880:	6a3b      	ldr	r3, [r7, #32]
 800d882:	4a1b      	ldr	r2, [pc, #108]	@ (800d8f0 <f_mkfs+0x28c>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d952      	bls.n	800d92e <f_mkfs+0x2ca>
 800d888:	230e      	movs	r3, #14
 800d88a:	e311      	b.n	800deb0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800d88c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d11b      	bne.n	800d8ca <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	0b1b      	lsrs	r3, r3, #12
 800d896:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800d898:	2300      	movs	r3, #0
 800d89a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d89c:	2301      	movs	r3, #1
 800d89e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d8a0:	e005      	b.n	800d8ae <f_mkfs+0x24a>
 800d8a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8aa:	005b      	lsls	r3, r3, #1
 800d8ac:	653b      	str	r3, [r7, #80]	@ 0x50
 800d8ae:	4a11      	ldr	r2, [pc, #68]	@ (800d8f4 <f_mkfs+0x290>)
 800d8b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d007      	beq.n	800d8ca <f_mkfs+0x266>
 800d8ba:	4a0e      	ldr	r2, [pc, #56]	@ (800d8f4 <f_mkfs+0x290>)
 800d8bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d2eb      	bcs.n	800d8a2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800d8ca:	693a      	ldr	r2, [r7, #16]
 800d8cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8d2:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800d8d4:	6a3b      	ldr	r3, [r7, #32]
 800d8d6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d90c      	bls.n	800d8f8 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800d8de:	6a3b      	ldr	r3, [r7, #32]
 800d8e0:	3302      	adds	r3, #2
 800d8e2:	005b      	lsls	r3, r3, #1
 800d8e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d8e6:	e012      	b.n	800d90e <f_mkfs+0x2aa>
 800d8e8:	20000fc8 	.word	0x20000fc8
 800d8ec:	0800e0f0 	.word	0x0800e0f0
 800d8f0:	0ffffff5 	.word	0x0ffffff5
 800d8f4:	0800e100 	.word	0x0800e100
				} else {
					fmt = FS_FAT12;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800d8fe:	6a3a      	ldr	r2, [r7, #32]
 800d900:	4613      	mov	r3, r2
 800d902:	005b      	lsls	r3, r3, #1
 800d904:	4413      	add	r3, r2
 800d906:	3301      	adds	r3, #1
 800d908:	085b      	lsrs	r3, r3, #1
 800d90a:	3303      	adds	r3, #3
 800d90c:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800d90e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d910:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d912:	4413      	add	r3, r2
 800d914:	1e5a      	subs	r2, r3, #1
 800d916:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d918:	fbb2 f3f3 	udiv	r3, r2, r3
 800d91c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800d91e:	2301      	movs	r3, #1
 800d920:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800d922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d924:	015a      	lsls	r2, r3, #5
 800d926:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d928:	fbb2 f3f3 	udiv	r3, r2, r3
 800d92c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800d92e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d932:	4413      	add	r3, r2
 800d934:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800d936:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d938:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d93a:	fb03 f202 	mul.w	r2, r3, r2
 800d93e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d940:	4413      	add	r3, r2
 800d942:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d944:	4413      	add	r3, r2
 800d946:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800d948:	697a      	ldr	r2, [r7, #20]
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	4413      	add	r3, r2
 800d94e:	1e5a      	subs	r2, r3, #1
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	425b      	negs	r3, r3
 800d954:	401a      	ands	r2, r3
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800d95c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d960:	2b03      	cmp	r3, #3
 800d962:	d108      	bne.n	800d976 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800d964:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d968:	4413      	add	r3, r2
 800d96a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d96c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d96e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d970:	4413      	add	r3, r2
 800d972:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d974:	e006      	b.n	800d984 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800d976:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d97a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d97e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d980:	4413      	add	r3, r2
 800d982:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800d984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d986:	011a      	lsls	r2, r3, #4
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	441a      	add	r2, r3
 800d98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d98e:	1ad2      	subs	r2, r2, r3
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	429a      	cmp	r2, r3
 800d994:	d901      	bls.n	800d99a <f_mkfs+0x336>
 800d996:	230e      	movs	r3, #14
 800d998:	e28a      	b.n	800deb0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800d99a:	693a      	ldr	r2, [r7, #16]
 800d99c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d99e:	1ad2      	subs	r2, r2, r3
 800d9a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d9a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d9a4:	fb01 f303 	mul.w	r3, r1, r3
 800d9a8:	1ad2      	subs	r2, r2, r3
 800d9aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9ac:	1ad2      	subs	r2, r2, r3
 800d9ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800d9b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d9ba:	2b03      	cmp	r3, #3
 800d9bc:	d10f      	bne.n	800d9de <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800d9be:	6a3b      	ldr	r3, [r7, #32]
 800d9c0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d80a      	bhi.n	800d9de <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d105      	bne.n	800d9da <f_mkfs+0x376>
 800d9ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9d0:	085b      	lsrs	r3, r3, #1
 800d9d2:	607b      	str	r3, [r7, #4]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d144      	bne.n	800da64 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800d9da:	230e      	movs	r3, #14
 800d9dc:	e268      	b.n	800deb0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800d9de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d9e2:	2b02      	cmp	r3, #2
 800d9e4:	d133      	bne.n	800da4e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d91e      	bls.n	800da2e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d107      	bne.n	800da06 <f_mkfs+0x3a2>
 800d9f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9f8:	005b      	lsls	r3, r3, #1
 800d9fa:	2b40      	cmp	r3, #64	@ 0x40
 800d9fc:	d803      	bhi.n	800da06 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800d9fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da00:	005b      	lsls	r3, r3, #1
 800da02:	607b      	str	r3, [r7, #4]
 800da04:	e033      	b.n	800da6e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800da06:	7afb      	ldrb	r3, [r7, #11]
 800da08:	f003 0302 	and.w	r3, r3, #2
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d003      	beq.n	800da18 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800da10:	2303      	movs	r3, #3
 800da12:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800da16:	e02a      	b.n	800da6e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d105      	bne.n	800da2a <f_mkfs+0x3c6>
 800da1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	607b      	str	r3, [r7, #4]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b80      	cmp	r3, #128	@ 0x80
 800da28:	d91e      	bls.n	800da68 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800da2a:	230e      	movs	r3, #14
 800da2c:	e240      	b.n	800deb0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800da34:	4293      	cmp	r3, r2
 800da36:	d80a      	bhi.n	800da4e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d105      	bne.n	800da4a <f_mkfs+0x3e6>
 800da3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da40:	005b      	lsls	r3, r3, #1
 800da42:	607b      	str	r3, [r7, #4]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b80      	cmp	r3, #128	@ 0x80
 800da48:	d910      	bls.n	800da6c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800da4a:	230e      	movs	r3, #14
 800da4c:	e230      	b.n	800deb0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800da4e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800da52:	2b01      	cmp	r3, #1
 800da54:	d10c      	bne.n	800da70 <f_mkfs+0x40c>
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d907      	bls.n	800da70 <f_mkfs+0x40c>
 800da60:	230e      	movs	r3, #14
 800da62:	e225      	b.n	800deb0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800da64:	bf00      	nop
 800da66:	e6ce      	b.n	800d806 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800da68:	bf00      	nop
 800da6a:	e6cc      	b.n	800d806 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800da6c:	bf00      	nop
			pau = au;
 800da6e:	e6ca      	b.n	800d806 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800da70:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800da72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800da74:	461a      	mov	r2, r3
 800da76:	2100      	movs	r1, #0
 800da78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da7a:	f7fd fddc 	bl	800b636 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800da7e:	220b      	movs	r2, #11
 800da80:	49b2      	ldr	r1, [pc, #712]	@ (800dd4c <f_mkfs+0x6e8>)
 800da82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da84:	f7fd fdb6 	bl	800b5f4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800da88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da8a:	330b      	adds	r3, #11
 800da8c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800da8e:	4611      	mov	r1, r2
 800da90:	4618      	mov	r0, r3
 800da92:	f7fd fd68 	bl	800b566 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800da96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da98:	330d      	adds	r3, #13
 800da9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da9c:	b2d2      	uxtb	r2, r2
 800da9e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800daa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa2:	330e      	adds	r3, #14
 800daa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800daa6:	b292      	uxth	r2, r2
 800daa8:	4611      	mov	r1, r2
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fd fd5b 	bl	800b566 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800dab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab2:	3310      	adds	r3, #16
 800dab4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dab6:	b2d2      	uxtb	r2, r2
 800dab8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800daba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dabc:	f103 0211 	add.w	r2, r3, #17
 800dac0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dac4:	2b03      	cmp	r3, #3
 800dac6:	d002      	beq.n	800dace <f_mkfs+0x46a>
 800dac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daca:	b29b      	uxth	r3, r3
 800dacc:	e000      	b.n	800dad0 <f_mkfs+0x46c>
 800dace:	2300      	movs	r3, #0
 800dad0:	4619      	mov	r1, r3
 800dad2:	4610      	mov	r0, r2
 800dad4:	f7fd fd47 	bl	800b566 <st_word>
		if (sz_vol < 0x10000) {
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dade:	d208      	bcs.n	800daf2 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800dae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae2:	3313      	adds	r3, #19
 800dae4:	693a      	ldr	r2, [r7, #16]
 800dae6:	b292      	uxth	r2, r2
 800dae8:	4611      	mov	r1, r2
 800daea:	4618      	mov	r0, r3
 800daec:	f7fd fd3b 	bl	800b566 <st_word>
 800daf0:	e006      	b.n	800db00 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800daf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf4:	3320      	adds	r3, #32
 800daf6:	693a      	ldr	r2, [r7, #16]
 800daf8:	4611      	mov	r1, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fd fd4e 	bl	800b59c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800db00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db02:	3315      	adds	r3, #21
 800db04:	22f8      	movs	r2, #248	@ 0xf8
 800db06:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800db08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db0a:	3318      	adds	r3, #24
 800db0c:	213f      	movs	r1, #63	@ 0x3f
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fd fd29 	bl	800b566 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800db14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db16:	331a      	adds	r3, #26
 800db18:	21ff      	movs	r1, #255	@ 0xff
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fd fd23 	bl	800b566 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800db20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db22:	331c      	adds	r3, #28
 800db24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db26:	4618      	mov	r0, r3
 800db28:	f7fd fd38 	bl	800b59c <st_dword>
		if (fmt == FS_FAT32) {
 800db2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800db30:	2b03      	cmp	r3, #3
 800db32:	d131      	bne.n	800db98 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800db34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db36:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800db3a:	f7fd f9f7 	bl	800af2c <get_fattime>
 800db3e:	4603      	mov	r3, r0
 800db40:	4619      	mov	r1, r3
 800db42:	4620      	mov	r0, r4
 800db44:	f7fd fd2a 	bl	800b59c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800db48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4a:	3324      	adds	r3, #36	@ 0x24
 800db4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fd fd24 	bl	800b59c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800db54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db56:	332c      	adds	r3, #44	@ 0x2c
 800db58:	2102      	movs	r1, #2
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fd fd1e 	bl	800b59c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800db60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db62:	3330      	adds	r3, #48	@ 0x30
 800db64:	2101      	movs	r1, #1
 800db66:	4618      	mov	r0, r3
 800db68:	f7fd fcfd 	bl	800b566 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800db6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db6e:	3332      	adds	r3, #50	@ 0x32
 800db70:	2106      	movs	r1, #6
 800db72:	4618      	mov	r0, r3
 800db74:	f7fd fcf7 	bl	800b566 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800db78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7a:	3340      	adds	r3, #64	@ 0x40
 800db7c:	2280      	movs	r2, #128	@ 0x80
 800db7e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800db80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db82:	3342      	adds	r3, #66	@ 0x42
 800db84:	2229      	movs	r2, #41	@ 0x29
 800db86:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800db88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8a:	3347      	adds	r3, #71	@ 0x47
 800db8c:	2213      	movs	r2, #19
 800db8e:	4970      	ldr	r1, [pc, #448]	@ (800dd50 <f_mkfs+0x6ec>)
 800db90:	4618      	mov	r0, r3
 800db92:	f7fd fd2f 	bl	800b5f4 <mem_cpy>
 800db96:	e020      	b.n	800dbda <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800db98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db9a:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800db9e:	f7fd f9c5 	bl	800af2c <get_fattime>
 800dba2:	4603      	mov	r3, r0
 800dba4:	4619      	mov	r1, r3
 800dba6:	4620      	mov	r0, r4
 800dba8:	f7fd fcf8 	bl	800b59c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800dbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbae:	3316      	adds	r3, #22
 800dbb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dbb2:	b292      	uxth	r2, r2
 800dbb4:	4611      	mov	r1, r2
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fd fcd5 	bl	800b566 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800dbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbbe:	3324      	adds	r3, #36	@ 0x24
 800dbc0:	2280      	movs	r2, #128	@ 0x80
 800dbc2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc6:	3326      	adds	r3, #38	@ 0x26
 800dbc8:	2229      	movs	r2, #41	@ 0x29
 800dbca:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbce:	332b      	adds	r3, #43	@ 0x2b
 800dbd0:	2213      	movs	r2, #19
 800dbd2:	4960      	ldr	r1, [pc, #384]	@ (800dd54 <f_mkfs+0x6f0>)
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7fd fd0d 	bl	800b5f4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800dbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbdc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dbe0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fd fcbe 	bl	800b566 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800dbea:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dbee:	2301      	movs	r3, #1
 800dbf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dbf4:	f7fd fc3e 	bl	800b474 <disk_write>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d001      	beq.n	800dc02 <f_mkfs+0x59e>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e156      	b.n	800deb0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800dc02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dc06:	2b03      	cmp	r3, #3
 800dc08:	d140      	bne.n	800dc8c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0c:	1d9a      	adds	r2, r3, #6
 800dc0e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dc12:	2301      	movs	r3, #1
 800dc14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dc16:	f7fd fc2d 	bl	800b474 <disk_write>
			mem_set(buf, 0, ss);
 800dc1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	2100      	movs	r1, #0
 800dc20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc22:	f7fd fd08 	bl	800b636 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800dc26:	494c      	ldr	r1, [pc, #304]	@ (800dd58 <f_mkfs+0x6f4>)
 800dc28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc2a:	f7fd fcb7 	bl	800b59c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc30:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800dc34:	4949      	ldr	r1, [pc, #292]	@ (800dd5c <f_mkfs+0x6f8>)
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fd fcb0 	bl	800b59c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800dc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc3e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800dc42:	6a3b      	ldr	r3, [r7, #32]
 800dc44:	3b01      	subs	r3, #1
 800dc46:	4619      	mov	r1, r3
 800dc48:	4610      	mov	r0, r2
 800dc4a:	f7fd fca7 	bl	800b59c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800dc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc50:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800dc54:	2102      	movs	r1, #2
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fd fca0 	bl	800b59c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dc62:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fd fc7d 	bl	800b566 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6e:	1dda      	adds	r2, r3, #7
 800dc70:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dc74:	2301      	movs	r3, #1
 800dc76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dc78:	f7fd fbfc 	bl	800b474 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800dc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc7e:	1c5a      	adds	r2, r3, #1
 800dc80:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dc84:	2301      	movs	r3, #1
 800dc86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dc88:	f7fd fbf4 	bl	800b474 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800dc8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc8e:	2100      	movs	r1, #0
 800dc90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc92:	f7fd fcd0 	bl	800b636 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800dc96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc98:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc9e:	e04b      	b.n	800dd38 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800dca0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dca4:	2b03      	cmp	r3, #3
 800dca6:	d113      	bne.n	800dcd0 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800dca8:	f06f 0107 	mvn.w	r1, #7
 800dcac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dcae:	f7fd fc75 	bl	800b59c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800dcb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	f04f 31ff 	mov.w	r1, #4294967295
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fd fc6e 	bl	800b59c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800dcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcc2:	3308      	adds	r3, #8
 800dcc4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fd fc67 	bl	800b59c <st_dword>
 800dcce:	e00b      	b.n	800dce8 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800dcd0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d101      	bne.n	800dcdc <f_mkfs+0x678>
 800dcd8:	4b21      	ldr	r3, [pc, #132]	@ (800dd60 <f_mkfs+0x6fc>)
 800dcda:	e001      	b.n	800dce0 <f_mkfs+0x67c>
 800dcdc:	f06f 0307 	mvn.w	r3, #7
 800dce0:	4619      	mov	r1, r3
 800dce2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dce4:	f7fd fc5a 	bl	800b59c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800dce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dcea:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800dcec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	bf28      	it	cs
 800dcf4:	4613      	movcs	r3, r2
 800dcf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800dcf8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dcfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dcfe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dd00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dd02:	f7fd fbb7 	bl	800b474 <disk_write>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <f_mkfs+0x6ac>
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	e0cf      	b.n	800deb0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800dd10:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dd12:	461a      	mov	r2, r3
 800dd14:	2100      	movs	r1, #0
 800dd16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd18:	f7fd fc8d 	bl	800b636 <mem_set>
				sect += n; nsect -= n;
 800dd1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dd1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd20:	4413      	add	r3, r2
 800dd22:	667b      	str	r3, [r7, #100]	@ 0x64
 800dd24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dd26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800dd2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1dc      	bne.n	800dcec <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800dd32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd34:	3301      	adds	r3, #1
 800dd36:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d3af      	bcc.n	800dca0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800dd40:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dd44:	2b03      	cmp	r3, #3
 800dd46:	d10d      	bne.n	800dd64 <f_mkfs+0x700>
 800dd48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd4a:	e00c      	b.n	800dd66 <f_mkfs+0x702>
 800dd4c:	0800e008 	.word	0x0800e008
 800dd50:	0800e014 	.word	0x0800e014
 800dd54:	0800e028 	.word	0x0800e028
 800dd58:	41615252 	.word	0x41615252
 800dd5c:	61417272 	.word	0x61417272
 800dd60:	00fffff8 	.word	0x00fffff8
 800dd64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd66:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800dd68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	bf28      	it	cs
 800dd70:	4613      	movcs	r3, r2
 800dd72:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800dd74:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dd78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd7a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dd7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dd7e:	f7fd fb79 	bl	800b474 <disk_write>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <f_mkfs+0x728>
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e091      	b.n	800deb0 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800dd8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dd8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd90:	4413      	add	r3, r2
 800dd92:	667b      	str	r3, [r7, #100]	@ 0x64
 800dd94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dd96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800dd9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e2      	bne.n	800dd68 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800dda2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d103      	bne.n	800ddb2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800ddaa:	230c      	movs	r3, #12
 800ddac:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800ddb0:	e010      	b.n	800ddd4 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddb8:	d303      	bcc.n	800ddc2 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800ddba:	2306      	movs	r3, #6
 800ddbc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800ddc0:	e008      	b.n	800ddd4 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800ddc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d101      	bne.n	800ddce <f_mkfs+0x76a>
 800ddca:	2304      	movs	r3, #4
 800ddcc:	e000      	b.n	800ddd0 <f_mkfs+0x76c>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ddd4:	7afb      	ldrb	r3, [r7, #11]
 800ddd6:	f003 0308 	and.w	r3, r3, #8
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d15b      	bne.n	800de96 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ddde:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dde0:	461a      	mov	r2, r3
 800dde2:	2100      	movs	r1, #0
 800dde4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dde6:	f7fd fc26 	bl	800b636 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ddea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ddf0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fd fbb6 	bl	800b566 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800de00:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	2200      	movs	r2, #0
 800de06:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800de08:	69bb      	ldr	r3, [r7, #24]
 800de0a:	3301      	adds	r3, #1
 800de0c:	2201      	movs	r2, #1
 800de0e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	3302      	adds	r3, #2
 800de14:	2201      	movs	r2, #1
 800de16:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	3303      	adds	r3, #3
 800de1c:	2200      	movs	r2, #0
 800de1e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	3304      	adds	r3, #4
 800de24:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800de28:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800de2a:	693a      	ldr	r2, [r7, #16]
 800de2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2e:	441a      	add	r2, r3
 800de30:	4b21      	ldr	r3, [pc, #132]	@ (800deb8 <f_mkfs+0x854>)
 800de32:	fba3 1302 	umull	r1, r3, r3, r2
 800de36:	1ad2      	subs	r2, r2, r3
 800de38:	0852      	lsrs	r2, r2, #1
 800de3a:	4413      	add	r3, r2
 800de3c:	0b5b      	lsrs	r3, r3, #13
 800de3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	3305      	adds	r3, #5
 800de44:	22fe      	movs	r2, #254	@ 0xfe
 800de46:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800de48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de4a:	089b      	lsrs	r3, r3, #2
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	3306      	adds	r3, #6
 800de52:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800de56:	b2d2      	uxtb	r2, r2
 800de58:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	3307      	adds	r3, #7
 800de5e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de60:	b2d2      	uxtb	r2, r2
 800de62:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	3308      	adds	r3, #8
 800de68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fd fb96 	bl	800b59c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	330c      	adds	r3, #12
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	4611      	mov	r1, r2
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fd fb8f 	bl	800b59c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800de7e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800de82:	2301      	movs	r3, #1
 800de84:	2200      	movs	r2, #0
 800de86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de88:	f7fd faf4 	bl	800b474 <disk_write>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d001      	beq.n	800de96 <f_mkfs+0x832>
 800de92:	2301      	movs	r3, #1
 800de94:	e00c      	b.n	800deb0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800de96:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800de9a:	2200      	movs	r2, #0
 800de9c:	2100      	movs	r1, #0
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fd fb08 	bl	800b4b4 <disk_ioctl>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <f_mkfs+0x84a>
 800deaa:	2301      	movs	r3, #1
 800deac:	e000      	b.n	800deb0 <f_mkfs+0x84c>

	return FR_OK;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3774      	adds	r7, #116	@ 0x74
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd90      	pop	{r4, r7, pc}
 800deb8:	0515565b 	.word	0x0515565b

0800debc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800debc:	b480      	push	{r7}
 800debe:	b087      	sub	sp, #28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	4613      	mov	r3, r2
 800dec8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800deca:	2301      	movs	r3, #1
 800decc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dece:	2300      	movs	r3, #0
 800ded0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ded2:	4b1f      	ldr	r3, [pc, #124]	@ (800df50 <FATFS_LinkDriverEx+0x94>)
 800ded4:	7a5b      	ldrb	r3, [r3, #9]
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d131      	bne.n	800df40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dedc:	4b1c      	ldr	r3, [pc, #112]	@ (800df50 <FATFS_LinkDriverEx+0x94>)
 800dede:	7a5b      	ldrb	r3, [r3, #9]
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	461a      	mov	r2, r3
 800dee4:	4b1a      	ldr	r3, [pc, #104]	@ (800df50 <FATFS_LinkDriverEx+0x94>)
 800dee6:	2100      	movs	r1, #0
 800dee8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800deea:	4b19      	ldr	r3, [pc, #100]	@ (800df50 <FATFS_LinkDriverEx+0x94>)
 800deec:	7a5b      	ldrb	r3, [r3, #9]
 800deee:	b2db      	uxtb	r3, r3
 800def0:	4a17      	ldr	r2, [pc, #92]	@ (800df50 <FATFS_LinkDriverEx+0x94>)
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4413      	add	r3, r2
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800defa:	4b15      	ldr	r3, [pc, #84]	@ (800df50 <FATFS_LinkDriverEx+0x94>)
 800defc:	7a5b      	ldrb	r3, [r3, #9]
 800defe:	b2db      	uxtb	r3, r3
 800df00:	461a      	mov	r2, r3
 800df02:	4b13      	ldr	r3, [pc, #76]	@ (800df50 <FATFS_LinkDriverEx+0x94>)
 800df04:	4413      	add	r3, r2
 800df06:	79fa      	ldrb	r2, [r7, #7]
 800df08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df0a:	4b11      	ldr	r3, [pc, #68]	@ (800df50 <FATFS_LinkDriverEx+0x94>)
 800df0c:	7a5b      	ldrb	r3, [r3, #9]
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	1c5a      	adds	r2, r3, #1
 800df12:	b2d1      	uxtb	r1, r2
 800df14:	4a0e      	ldr	r2, [pc, #56]	@ (800df50 <FATFS_LinkDriverEx+0x94>)
 800df16:	7251      	strb	r1, [r2, #9]
 800df18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df1a:	7dbb      	ldrb	r3, [r7, #22]
 800df1c:	3330      	adds	r3, #48	@ 0x30
 800df1e:	b2da      	uxtb	r2, r3
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	3301      	adds	r3, #1
 800df28:	223a      	movs	r2, #58	@ 0x3a
 800df2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	3302      	adds	r3, #2
 800df30:	222f      	movs	r2, #47	@ 0x2f
 800df32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	3303      	adds	r3, #3
 800df38:	2200      	movs	r2, #0
 800df3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df3c:	2300      	movs	r3, #0
 800df3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800df40:	7dfb      	ldrb	r3, [r7, #23]
}
 800df42:	4618      	mov	r0, r3
 800df44:	371c      	adds	r7, #28
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	20000ff0 	.word	0x20000ff0

0800df54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800df5e:	2200      	movs	r2, #0
 800df60:	6839      	ldr	r1, [r7, #0]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f7ff ffaa 	bl	800debc <FATFS_LinkDriverEx>
 800df68:	4603      	mov	r3, r0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <memset>:
 800df72:	4402      	add	r2, r0
 800df74:	4603      	mov	r3, r0
 800df76:	4293      	cmp	r3, r2
 800df78:	d100      	bne.n	800df7c <memset+0xa>
 800df7a:	4770      	bx	lr
 800df7c:	f803 1b01 	strb.w	r1, [r3], #1
 800df80:	e7f9      	b.n	800df76 <memset+0x4>
	...

0800df84 <__libc_init_array>:
 800df84:	b570      	push	{r4, r5, r6, lr}
 800df86:	4d0d      	ldr	r5, [pc, #52]	@ (800dfbc <__libc_init_array+0x38>)
 800df88:	4c0d      	ldr	r4, [pc, #52]	@ (800dfc0 <__libc_init_array+0x3c>)
 800df8a:	1b64      	subs	r4, r4, r5
 800df8c:	10a4      	asrs	r4, r4, #2
 800df8e:	2600      	movs	r6, #0
 800df90:	42a6      	cmp	r6, r4
 800df92:	d109      	bne.n	800dfa8 <__libc_init_array+0x24>
 800df94:	4d0b      	ldr	r5, [pc, #44]	@ (800dfc4 <__libc_init_array+0x40>)
 800df96:	4c0c      	ldr	r4, [pc, #48]	@ (800dfc8 <__libc_init_array+0x44>)
 800df98:	f000 f818 	bl	800dfcc <_init>
 800df9c:	1b64      	subs	r4, r4, r5
 800df9e:	10a4      	asrs	r4, r4, #2
 800dfa0:	2600      	movs	r6, #0
 800dfa2:	42a6      	cmp	r6, r4
 800dfa4:	d105      	bne.n	800dfb2 <__libc_init_array+0x2e>
 800dfa6:	bd70      	pop	{r4, r5, r6, pc}
 800dfa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfac:	4798      	blx	r3
 800dfae:	3601      	adds	r6, #1
 800dfb0:	e7ee      	b.n	800df90 <__libc_init_array+0xc>
 800dfb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfb6:	4798      	blx	r3
 800dfb8:	3601      	adds	r6, #1
 800dfba:	e7f2      	b.n	800dfa2 <__libc_init_array+0x1e>
 800dfbc:	0800e118 	.word	0x0800e118
 800dfc0:	0800e118 	.word	0x0800e118
 800dfc4:	0800e118 	.word	0x0800e118
 800dfc8:	0800e11c 	.word	0x0800e11c

0800dfcc <_init>:
 800dfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfce:	bf00      	nop
 800dfd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfd2:	bc08      	pop	{r3}
 800dfd4:	469e      	mov	lr, r3
 800dfd6:	4770      	bx	lr

0800dfd8 <_fini>:
 800dfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfda:	bf00      	nop
 800dfdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfde:	bc08      	pop	{r3}
 800dfe0:	469e      	mov	lr, r3
 800dfe2:	4770      	bx	lr
