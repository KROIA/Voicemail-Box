
microSD_F469.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011794  080001b4  080001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08011948  08011948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a78  08011a78  00013098  2**0
                  CONTENTS
  4 .ARM          00000008  08011a78  08011a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a80  08011a80  00013098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a80  08011a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011a84  08011a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08011a88  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013098  2**0
                  CONTENTS
 10 .bss          000014fc  20000098  20000098  00013098  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20001594  20001594  00013098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002fb0d  00000000  00000000  000130c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006608  00000000  00000000  00042bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002770  00000000  00000000  000491e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e8e  00000000  00000000  0004b950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034094  00000000  00000000  0004d7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000355e0  00000000  00000000  00081872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001171e3  00000000  00000000  000b6e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ce035  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000abbc  00000000  00000000  001ce078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  001d8c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	@ (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	@ (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000098 	.word	0x20000098
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08011930 	.word	0x08011930

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	@ (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	@ (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	2000009c 	.word	0x2000009c
 80001f0:	08011930 	.word	0x08011930

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f001 fcdf 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f8a3 	bl	8000648 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000502:	f000 f913 	bl	800072c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 fd23 	bl	8000f50 <MX_GPIO_Init>
  MX_DMA_Init();
 800050a:	f000 fca9 	bl	8000e60 <MX_DMA_Init>
  MX_CRC_Init();
 800050e:	f000 f939 	bl	8000784 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000512:	f000 f94b 	bl	80007ac <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8000516:	f000 f97b 	bl	8000810 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800051a:	f000 fcc9 	bl	8000eb0 <MX_FMC_Init>
  MX_I2C1_Init();
 800051e:	f000 fa77 	bl	8000a10 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000522:	f000 faa3 	bl	8000a6c <MX_I2C2_Init>
  MX_LTDC_Init();
 8000526:	f000 facf 	bl	8000ac8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800052a:	f000 fb4b 	bl	8000bc4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800052e:	f000 fb75 	bl	8000c1c <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8000532:	f000 fbd1 	bl	8000cd8 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8000536:	f000 fbef 	bl	8000d18 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800053a:	f000 fc3d 	bl	8000db8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800053e:	f000 fc65 	bl	8000e0c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000542:	f00b fce9 	bl	800bf18 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000546:	f010 fd9d 	bl	8011084 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	if(res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800054a:	2200      	movs	r2, #0
 800054c:	4936      	ldr	r1, [pc, #216]	@ (8000628 <main+0x134>)
 800054e:	4837      	ldr	r0, [pc, #220]	@ (800062c <main+0x138>)
 8000550:	f00f fcf2 	bl	800ff38 <f_mount>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf14      	ite	ne
 800055a:	2301      	movne	r3, #1
 800055c:	2300      	moveq	r3, #0
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	4b33      	ldr	r3, [pc, #204]	@ (8000630 <main+0x13c>)
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	4b32      	ldr	r3, [pc, #200]	@ (8000630 <main+0x13c>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d002      	beq.n	8000574 <main+0x80>
	{
		Error_Handler();
 800056e:	f000 fe8d 	bl	800128c <Error_Handler>
 8000572:	e04c      	b.n	800060e <main+0x11a>
	}
	else
	{
		if(res = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000574:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	4b2e      	ldr	r3, [pc, #184]	@ (8000634 <main+0x140>)
 800057c:	2200      	movs	r2, #0
 800057e:	2107      	movs	r1, #7
 8000580:	4829      	ldr	r0, [pc, #164]	@ (8000628 <main+0x134>)
 8000582:	f010 f8f7 	bl	8010774 <f_mkfs>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	bf14      	ite	ne
 800058c:	2301      	movne	r3, #1
 800058e:	2300      	moveq	r3, #0
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <main+0x13c>)
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	4b25      	ldr	r3, [pc, #148]	@ (8000630 <main+0x13c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d002      	beq.n	80005a6 <main+0xb2>
		{
			Error_Handler();
 80005a0:	f000 fe74 	bl	800128c <Error_Handler>
 80005a4:	e033      	b.n	800060e <main+0x11a>
		}
		else
		{
			//Open file for writing (Create)
            		if(res = f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80005a6:	220a      	movs	r2, #10
 80005a8:	4923      	ldr	r1, [pc, #140]	@ (8000638 <main+0x144>)
 80005aa:	4824      	ldr	r0, [pc, #144]	@ (800063c <main+0x148>)
 80005ac:	f00f fd0a 	bl	800ffc4 <f_open>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf14      	ite	ne
 80005b6:	2301      	movne	r3, #1
 80005b8:	2300      	moveq	r3, #0
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <main+0x13c>)
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000630 <main+0x13c>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d002      	beq.n	80005d0 <main+0xdc>
            		{
            			Error_Handler();
 80005ca:	f000 fe5f 	bl	800128c <Error_Handler>
 80005ce:	e01e      	b.n	800060e <main+0x11a>
            		}
            		else
            		{
            			//Write to the text file
            			res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 80005d0:	481b      	ldr	r0, [pc, #108]	@ (8000640 <main+0x14c>)
 80005d2:	f7ff fe0f 	bl	80001f4 <strlen>
 80005d6:	4602      	mov	r2, r0
 80005d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <main+0x150>)
 80005da:	4919      	ldr	r1, [pc, #100]	@ (8000640 <main+0x14c>)
 80005dc:	4817      	ldr	r0, [pc, #92]	@ (800063c <main+0x148>)
 80005de:	f00f feab 	bl	8010338 <f_write>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <main+0x13c>)
 80005e8:	701a      	strb	r2, [r3, #0]
            			if((byteswritten == 0) || (res != FR_OK))
 80005ea:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <main+0x150>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d003      	beq.n	80005fa <main+0x106>
 80005f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <main+0x13c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d002      	beq.n	8000600 <main+0x10c>
            			{
            				Error_Handler();
 80005fa:	f000 fe47 	bl	800128c <Error_Handler>
 80005fe:	e006      	b.n	800060e <main+0x11a>
            			}
            			else
            			{
            				res = f_close(&SDFile);
 8000600:	480e      	ldr	r0, [pc, #56]	@ (800063c <main+0x148>)
 8000602:	f010 f88c 	bl	801071e <f_close>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <main+0x13c>)
 800060c:	701a      	strb	r2, [r3, #0]
            			}
            		}
		}
	}
	res = f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	4806      	ldr	r0, [pc, #24]	@ (800062c <main+0x138>)
 8000614:	f00f fc90 	bl	800ff38 <f_mount>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <main+0x13c>)
 800061e:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000620:	f010 fd56 	bl	80110d0 <MX_USB_HOST_Process>
 8000624:	e7fc      	b.n	8000620 <main+0x12c>
 8000626:	bf00      	nop
 8000628:	200007f0 	.word	0x200007f0
 800062c:	200007f4 	.word	0x200007f4
 8000630:	2000058c 	.word	0x2000058c
 8000634:	20000594 	.word	0x20000594
 8000638:	08011948 	.word	0x08011948
 800063c:	20000a24 	.word	0x20000a24
 8000640:	20000000 	.word	0x20000000
 8000644:	20000590 	.word	0x20000590

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2234      	movs	r2, #52	@ 0x34
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f011 f8dc 	bl	8011814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b2c      	ldr	r3, [pc, #176]	@ (8000724 <SystemClock_Config+0xdc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a2b      	ldr	r2, [pc, #172]	@ (8000724 <SystemClock_Config+0xdc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <SystemClock_Config+0xdc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <SystemClock_Config+0xe0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a25      	ldr	r2, [pc, #148]	@ (8000728 <SystemClock_Config+0xe0>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <SystemClock_Config+0xe0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006bc:	23b4      	movs	r3, #180	@ 0xb4
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80006c4:	2306      	movs	r3, #6
 80006c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80006c8:	2306      	movs	r3, #6
 80006ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4618      	mov	r0, r3
 80006d2:	f006 fe49 	bl	8007368 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006dc:	f000 fdd6 	bl	800128c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e0:	f006 f8a0 	bl	8006824 <HAL_PWREx_EnableOverDrive>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ea:	f000 fdcf 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000704:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2105      	movs	r1, #5
 800070c:	4618      	mov	r0, r3
 800070e:	f006 f99b 	bl	8006a48 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000718:	f000 fdb8 	bl	800128c <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	@ 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b090      	sub	sp, #64	@ 0x40
 8000730:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	223c      	movs	r2, #60	@ 0x3c
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f011 f86b 	bl	8011814 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 800073e:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8000742:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000744:	2390      	movs	r3, #144	@ 0x90
 8000746:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000750:	2306      	movs	r3, #6
 8000752:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800075e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000762:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000764:	2300      	movs	r3, #0
 8000766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f006 fbbe 	bl	8006eec <HAL_RCCEx_PeriphCLKConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000776:	f000 fd89 	bl	800128c <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3740      	adds	r7, #64	@ 0x40
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_CRC_Init+0x20>)
 800078a:	4a07      	ldr	r2, [pc, #28]	@ (80007a8 <MX_CRC_Init+0x24>)
 800078c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_CRC_Init+0x20>)
 8000790:	f001 fcdc 	bl	800214c <HAL_CRC_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800079a:	f000 fd77 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000b4 	.word	0x200000b4
 80007a8:	40023000 	.word	0x40023000

080007ac <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_DMA2D_Init+0x5c>)
 80007b2:	4a16      	ldr	r2, [pc, #88]	@ (800080c <MX_DMA2D_Init+0x60>)
 80007b4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_DMA2D_Init+0x5c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_DMA2D_Init+0x5c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_DMA2D_Init+0x5c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_DMA2D_Init+0x5c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_DMA2D_Init+0x5c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_DMA2D_Init+0x5c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_DMA2D_Init+0x5c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007e0:	4809      	ldr	r0, [pc, #36]	@ (8000808 <MX_DMA2D_Init+0x5c>)
 80007e2:	f002 f86d 	bl	80028c0 <HAL_DMA2D_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007ec:	f000 fd4e 	bl	800128c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80007f0:	2101      	movs	r1, #1
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_DMA2D_Init+0x5c>)
 80007f4:	f002 f9be 	bl	8002b74 <HAL_DMA2D_ConfigLayer>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80007fe:	f000 fd45 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000bc 	.word	0x200000bc
 800080c:	4002b000 	.word	0x4002b000

08000810 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0aa      	sub	sp, #168	@ 0xa8
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000816:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000822:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000826:	2224      	movs	r2, #36	@ 0x24
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f010 fff2 	bl	8011814 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000830:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
 8000840:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000842:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000846:	2234      	movs	r2, #52	@ 0x34
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f010 ffe2 	bl	8011814 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	222c      	movs	r2, #44	@ 0x2c
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f010 ffdc 	bl	8011814 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800085c:	4b6a      	ldr	r3, [pc, #424]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 800085e:	4a6b      	ldr	r2, [pc, #428]	@ (8000a0c <MX_DSIHOST_DSI_Init+0x1fc>)
 8000860:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000862:	4b69      	ldr	r3, [pc, #420]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000868:	4b67      	ldr	r3, [pc, #412]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 800086a:	2204      	movs	r2, #4
 800086c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800086e:	4b66      	ldr	r3, [pc, #408]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000870:	2201      	movs	r2, #1
 8000872:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000874:	237d      	movs	r3, #125	@ 0x7d
 8000876:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000886:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800088a:	4619      	mov	r1, r3
 800088c:	485e      	ldr	r0, [pc, #376]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 800088e:	f002 fa03 	bl	8002c98 <HAL_DSI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000898:	f000 fcf8 	bl	800128c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800089c:	2301      	movs	r3, #1
 800089e:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80008ce:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80008d2:	4619      	mov	r1, r3
 80008d4:	484c      	ldr	r0, [pc, #304]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 80008d6:	f002 fef3 	bl	80036c0 <HAL_DSI_ConfigHostTimeouts>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80008e0:	f000 fcd4 	bl	800128c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80008e4:	231c      	movs	r3, #28
 80008e6:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80008e8:	2321      	movs	r3, #33	@ 0x21
 80008ea:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 80008ec:	230f      	movs	r3, #15
 80008ee:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 80008f0:	2319      	movs	r3, #25
 80008f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 80008f8:	230a      	movs	r3, #10
 80008fa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80008fc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000900:	4619      	mov	r1, r3
 8000902:	4841      	ldr	r0, [pc, #260]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000904:	f002 fe72 	bl	80035ec <HAL_DSI_ConfigPhyTimer>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800090e:	f000 fcbd 	bl	800128c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000912:	2104      	movs	r1, #4
 8000914:	483c      	ldr	r0, [pc, #240]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000916:	f002 fe41 	bl	800359c <HAL_DSI_ConfigFlowControl>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000920:	f000 fcb4 	bl	800128c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000924:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000928:	4837      	ldr	r0, [pc, #220]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 800092a:	f002 ff8f 	bl	800384c <HAL_DSI_SetLowPowerRXFilter>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000934:	f000 fcaa 	bl	800128c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	4833      	ldr	r0, [pc, #204]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 800093c:	f002 fb2c 	bl	8002f98 <HAL_DSI_ConfigErrorMonitor>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000946:	f000 fca1 	bl	800128c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800094a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095a:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800095c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000960:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800096c:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800096e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000972:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000974:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000978:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800097a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800097e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000980:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000984:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000986:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800098a:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800098c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000990:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000996:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800099a:	4619      	mov	r1, r3
 800099c:	481a      	ldr	r0, [pc, #104]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 800099e:	f002 fd9f 	bl	80034e0 <HAL_DSI_ConfigCommand>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 80009a8:	f000 fc70 	bl	800128c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80009b0:	2305      	movs	r3, #5
 80009b2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 80009b4:	23c8      	movs	r3, #200	@ 0xc8
 80009b6:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80009b8:	2310      	movs	r3, #16
 80009ba:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80009c0:	2304      	movs	r3, #4
 80009c2:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 80009d0:	2340      	movs	r3, #64	@ 0x40
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	480a      	ldr	r0, [pc, #40]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009de:	f002 fca7 	bl	8003330 <HAL_DSI_ConfigAdaptedCommandMode>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 80009e8:	f000 fc50 	bl	800128c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <MX_DSIHOST_DSI_Init+0x1f8>)
 80009f0:	f002 fc76 	bl	80032e0 <HAL_DSI_SetGenericVCID>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 80009fa:	f000 fc47 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	37a8      	adds	r7, #168	@ 0xa8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000fc 	.word	0x200000fc
 8000a0c:	40016c00 	.word	0x40016c00

08000a10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <MX_I2C1_Init+0x50>)
 8000a16:	4a13      	ldr	r2, [pc, #76]	@ (8000a64 <MX_I2C1_Init+0x54>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_I2C1_Init+0x50>)
 8000a1c:	4a12      	ldr	r2, [pc, #72]	@ (8000a68 <MX_I2C1_Init+0x58>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <MX_I2C1_Init+0x50>)
 8000a2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <MX_I2C1_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <MX_I2C1_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	@ (8000a60 <MX_I2C1_Init+0x50>)
 8000a4e:	f005 fa3d 	bl	8005ecc <HAL_I2C_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a58:	f000 fc18 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000118 	.word	0x20000118
 8000a64:	40005400 	.word	0x40005400
 8000a68:	000186a0 	.word	0x000186a0

08000a6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a70:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <MX_I2C2_Init+0x50>)
 8000a72:	4a13      	ldr	r2, [pc, #76]	@ (8000ac0 <MX_I2C2_Init+0x54>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_I2C2_Init+0x50>)
 8000a78:	4a12      	ldr	r2, [pc, #72]	@ (8000ac4 <MX_I2C2_Init+0x58>)
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_I2C2_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_I2C2_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_I2C2_Init+0x50>)
 8000a8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a8e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <MX_I2C2_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_I2C2_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <MX_I2C2_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_I2C2_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	@ (8000abc <MX_I2C2_Init+0x50>)
 8000aaa:	f005 fa0f 	bl	8005ecc <HAL_I2C_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ab4:	f000 fbea 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000016c 	.word	0x2000016c
 8000ac0:	40005800 	.word	0x40005800
 8000ac4:	000186a0 	.word	0x000186a0

08000ac8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	@ 0x38
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2234      	movs	r2, #52	@ 0x34
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f010 fe9d 	bl	8011814 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ada:	4b38      	ldr	r3, [pc, #224]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000adc:	4a38      	ldr	r2, [pc, #224]	@ (8000bc0 <MX_LTDC_Init+0xf8>)
 8000ade:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ae0:	4b36      	ldr	r3, [pc, #216]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ae6:	4b35      	ldr	r3, [pc, #212]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000aec:	4b33      	ldr	r3, [pc, #204]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000af2:	4b32      	ldr	r3, [pc, #200]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000af8:	4b30      	ldr	r3, [pc, #192]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000afe:	4b2f      	ldr	r3, [pc, #188]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000b04:	4b2d      	ldr	r3, [pc, #180]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b12:	22c9      	movs	r2, #201	@ 0xc9
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000b16:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b18:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000b1e:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b20:	22ca      	movs	r2, #202	@ 0xca
 8000b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000b24:	4b25      	ldr	r3, [pc, #148]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b26:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b2c:	4b23      	ldr	r3, [pc, #140]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b34:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b44:	481d      	ldr	r0, [pc, #116]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000b46:	f005 fb05 	bl	8006154 <HAL_LTDC_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 fb9c 	bl	800128c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000b58:	23c8      	movs	r3, #200	@ 0xc8
 8000b5a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000b60:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b64:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b66:	2302      	movs	r3, #2
 8000b68:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b6a:	23ff      	movs	r3, #255	@ 0xff
 8000b6c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b72:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b76:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b7c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000b82:	23c8      	movs	r3, #200	@ 0xc8
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000b86:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_LTDC_Init+0xf4>)
 8000ba6:	f005 fc67 	bl	8006478 <HAL_LTDC_ConfigLayer>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000bb0:	f000 fb6c 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3738      	adds	r7, #56	@ 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200001c0 	.word	0x200001c0
 8000bc0:	40016800 	.word	0x40016800

08000bc4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_QUADSPI_Init+0x50>)
 8000bca:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <MX_QUADSPI_Init+0x54>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_QUADSPI_Init+0x50>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_QUADSPI_Init+0x50>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_QUADSPI_Init+0x50>)
 8000bdc:	2210      	movs	r2, #16
 8000bde:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_QUADSPI_Init+0x50>)
 8000be2:	2218      	movs	r2, #24
 8000be4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <MX_QUADSPI_Init+0x50>)
 8000be8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bec:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_QUADSPI_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <MX_QUADSPI_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_QUADSPI_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <MX_QUADSPI_Init+0x50>)
 8000c02:	f005 fe5f 	bl	80068c4 <HAL_QSPI_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c0c:	f000 fb3e 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000268 	.word	0x20000268
 8000c18:	a0001000 	.word	0xa0001000

08000c1c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c22:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd0 <MX_SAI1_Init+0xb4>)
 8000c24:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c26:	4b29      	ldr	r3, [pc, #164]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c2c:	4b27      	ldr	r3, [pc, #156]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000c32:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c34:	2240      	movs	r2, #64	@ 0x40
 8000c36:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c38:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c3e:	4b23      	ldr	r3, [pc, #140]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c44:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c64:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd4 <MX_SAI1_Init+0xb8>)
 8000c66:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_SAI1_Init+0xb0>)
 8000cb8:	f006 fdda 	bl	8007870 <HAL_SAI_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000cc2:	f000 fae3 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200002b4 	.word	0x200002b4
 8000cd0:	40015804 	.word	0x40015804
 8000cd4:	0002ee00 	.word	0x0002ee00

08000cd8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000cde:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <MX_SDIO_SD_Init+0x3c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cfa:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <MX_SDIO_SD_Init+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	2000033c 	.word	0x2000033c
 8000d14:	40012c00 	.word	0x40012c00

08000d18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d36:	4a1f      	ldr	r2, [pc, #124]	@ (8000db4 <MX_TIM1_Init+0x9c>)
 8000d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d60:	4813      	ldr	r0, [pc, #76]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d62:	f008 f8fd 	bl	8008f60 <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d6c:	f000 fa8e 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d7e:	f008 fa9f 	bl	80092c0 <HAL_TIM_ConfigClockSource>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d88:	f000 fa80 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_TIM1_Init+0x98>)
 8000d9a:	f008 fcc7 	bl	800972c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000da4:	f000 fa72 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000480 	.word	0x20000480
 8000db4:	40010000 	.word	0x40010000

08000db8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_USART3_UART_Init+0x4c>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <MX_USART3_UART_Init+0x50>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <MX_USART3_UART_Init+0x4c>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_USART3_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_USART3_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MX_USART3_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_USART3_UART_Init+0x4c>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <MX_USART3_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_USART3_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_USART3_UART_Init+0x4c>)
 8000df0:	f008 fd2c 	bl	800984c <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dfa:	f000 fa47 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200004c8 	.word	0x200004c8
 8000e08:	40004800 	.word	0x40004800

08000e0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_USART6_UART_Init+0x4c>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <MX_USART6_UART_Init+0x50>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <MX_USART6_UART_Init+0x4c>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_USART6_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <MX_USART6_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <MX_USART6_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_USART6_UART_Init+0x4c>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <MX_USART6_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_USART6_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_USART6_UART_Init+0x4c>)
 8000e44:	f008 fd02 	bl	800984c <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e4e:	f000 fa1d 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000510 	.word	0x20000510
 8000e5c:	40011400 	.word	0x40011400

08000e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <MX_DMA_Init+0x4c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <MX_DMA_Init+0x4c>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <MX_DMA_Init+0x4c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	203b      	movs	r0, #59	@ 0x3b
 8000e88:	f001 f936 	bl	80020f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e8c:	203b      	movs	r0, #59	@ 0x3b
 8000e8e:	f001 f94f 	bl	8002130 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2045      	movs	r0, #69	@ 0x45
 8000e98:	f001 f92e 	bl	80020f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e9c:	2045      	movs	r0, #69	@ 0x45
 8000e9e:	f001 f947 	bl	8002130 <HAL_NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000eca:	4a20      	ldr	r2, [pc, #128]	@ (8000f4c <MX_FMC_Init+0x9c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000edc:	2204      	movs	r2, #4
 8000ede:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000ee8:	2240      	movs	r2, #64	@ 0x40
 8000eea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000eec:	4b16      	ldr	r3, [pc, #88]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000eee:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000ef2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000efc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f00:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000f04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000f14:	2307      	movs	r3, #7
 8000f16:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000f20:	2303      	movs	r3, #3
 8000f22:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_FMC_Init+0x98>)
 8000f32:	f007 ffe1 	bl	8008ef8 <HAL_SDRAM_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000f3c:	f000 f9a6 	bl	800128c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000558 	.word	0x20000558
 8000f4c:	a0000140 	.word	0xa0000140

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b090      	sub	sp, #64	@ 0x40
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f6a:	4bae      	ldr	r3, [pc, #696]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4aad      	ldr	r2, [pc, #692]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4bab      	ldr	r3, [pc, #684]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f86:	4ba7      	ldr	r3, [pc, #668]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4aa6      	ldr	r2, [pc, #664]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4ba4      	ldr	r3, [pc, #656]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
 8000fa2:	4ba0      	ldr	r3, [pc, #640]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a9f      	ldr	r2, [pc, #636]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b9d      	ldr	r3, [pc, #628]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	4b99      	ldr	r3, [pc, #612]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a98      	ldr	r2, [pc, #608]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b96      	ldr	r3, [pc, #600]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	4b92      	ldr	r3, [pc, #584]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a91      	ldr	r2, [pc, #580]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b8f      	ldr	r3, [pc, #572]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	4b8b      	ldr	r3, [pc, #556]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a8a      	ldr	r2, [pc, #552]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b88      	ldr	r3, [pc, #544]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b84      	ldr	r3, [pc, #528]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a83      	ldr	r2, [pc, #524]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b81      	ldr	r3, [pc, #516]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b7d      	ldr	r3, [pc, #500]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a7c      	ldr	r2, [pc, #496]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b7a      	ldr	r3, [pc, #488]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0320 	and.w	r3, r3, #32
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b76      	ldr	r3, [pc, #472]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a75      	ldr	r2, [pc, #468]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001050:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b73      	ldr	r3, [pc, #460]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b6f      	ldr	r3, [pc, #444]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a6e      	ldr	r2, [pc, #440]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b6c      	ldr	r3, [pc, #432]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b68      	ldr	r3, [pc, #416]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a67      	ldr	r2, [pc, #412]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001088:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b65      	ldr	r3, [pc, #404]	@ (8001224 <MX_GPIO_Init+0x2d4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	210c      	movs	r1, #12
 800109e:	4862      	ldr	r0, [pc, #392]	@ (8001228 <MX_GPIO_Init+0x2d8>)
 80010a0:	f002 fdc6 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2130      	movs	r1, #48	@ 0x30
 80010a8:	4860      	ldr	r0, [pc, #384]	@ (800122c <MX_GPIO_Init+0x2dc>)
 80010aa:	f002 fdc1 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2108      	movs	r1, #8
 80010b2:	485f      	ldr	r0, [pc, #380]	@ (8001230 <MX_GPIO_Init+0x2e0>)
 80010b4:	f002 fdbc 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2140      	movs	r1, #64	@ 0x40
 80010bc:	485d      	ldr	r0, [pc, #372]	@ (8001234 <MX_GPIO_Init+0x2e4>)
 80010be:	f002 fdb7 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2105      	movs	r1, #5
 80010c6:	485c      	ldr	r0, [pc, #368]	@ (8001238 <MX_GPIO_Init+0x2e8>)
 80010c8:	f002 fdb2 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2180      	movs	r1, #128	@ 0x80
 80010d0:	485a      	ldr	r0, [pc, #360]	@ (800123c <MX_GPIO_Init+0x2ec>)
 80010d2:	f002 fdad 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2108      	movs	r1, #8
 80010da:	4859      	ldr	r0, [pc, #356]	@ (8001240 <MX_GPIO_Init+0x2f0>)
 80010dc:	f002 fda8 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 80010e0:	230c      	movs	r3, #12
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f4:	4619      	mov	r1, r3
 80010f6:	484c      	ldr	r0, [pc, #304]	@ (8001228 <MX_GPIO_Init+0x2d8>)
 80010f8:	f002 fbd6 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 80010fc:	2308      	movs	r3, #8
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800110c:	2306      	movs	r3, #6
 800110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001114:	4619      	mov	r1, r3
 8001116:	4848      	ldr	r0, [pc, #288]	@ (8001238 <MX_GPIO_Init+0x2e8>)
 8001118:	f002 fbc6 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001120:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001124:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112e:	4619      	mov	r1, r3
 8001130:	4841      	ldr	r0, [pc, #260]	@ (8001238 <MX_GPIO_Init+0x2e8>)
 8001132:	f002 fbb9 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001136:	2330      	movs	r3, #48	@ 0x30
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800113a:	2311      	movs	r3, #17
 800113c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800114a:	4619      	mov	r1, r3
 800114c:	4837      	ldr	r0, [pc, #220]	@ (800122c <MX_GPIO_Init+0x2dc>)
 800114e:	f002 fbab 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001152:	2308      	movs	r3, #8
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001156:	2311      	movs	r3, #17
 8001158:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001166:	4619      	mov	r1, r3
 8001168:	4831      	ldr	r0, [pc, #196]	@ (8001230 <MX_GPIO_Init+0x2e0>)
 800116a:	f002 fb9d 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800116e:	2340      	movs	r3, #64	@ 0x40
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001172:	2311      	movs	r3, #17
 8001174:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001182:	4619      	mov	r1, r3
 8001184:	482b      	ldr	r0, [pc, #172]	@ (8001234 <MX_GPIO_Init+0x2e4>)
 8001186:	f002 fb8f 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 800118a:	2305      	movs	r3, #5
 800118c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800119e:	4619      	mov	r1, r3
 80011a0:	4825      	ldr	r0, [pc, #148]	@ (8001238 <MX_GPIO_Init+0x2e8>)
 80011a2:	f002 fb81 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80011a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011b8:	2302      	movs	r3, #2
 80011ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c0:	4619      	mov	r1, r3
 80011c2:	481a      	ldr	r0, [pc, #104]	@ (800122c <MX_GPIO_Init+0x2dc>)
 80011c4:	f002 fb70 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80011c8:	2304      	movs	r3, #4
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011d8:	4619      	mov	r1, r3
 80011da:	4816      	ldr	r0, [pc, #88]	@ (8001234 <MX_GPIO_Init+0x2e4>)
 80011dc:	f002 fb64 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80011e0:	2320      	movs	r3, #32
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011f2:	4619      	mov	r1, r3
 80011f4:	4813      	ldr	r0, [pc, #76]	@ (8001244 <MX_GPIO_Init+0x2f4>)
 80011f6:	f002 fb57 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011fa:	2380      	movs	r3, #128	@ 0x80
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800120a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800120e:	4619      	mov	r1, r3
 8001210:	480a      	ldr	r0, [pc, #40]	@ (800123c <MX_GPIO_Init+0x2ec>)
 8001212:	f002 fb49 	bl	80038a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001216:	2308      	movs	r3, #8
 8001218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	e012      	b.n	8001248 <MX_GPIO_Init+0x2f8>
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40021000 	.word	0x40021000
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40022800 	.word	0x40022800
 8001234:	40021800 	.word	0x40021800
 8001238:	40020400 	.word	0x40020400
 800123c:	40021c00 	.word	0x40021c00
 8001240:	40020000 	.word	0x40020000
 8001244:	40022400 	.word	0x40022400
 8001248:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001252:	4619      	mov	r1, r3
 8001254:	4803      	ldr	r0, [pc, #12]	@ (8001264 <MX_GPIO_Init+0x314>)
 8001256:	f002 fb27 	bl	80038a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125a:	bf00      	nop
 800125c:	3740      	adds	r7, #64	@ 0x40
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020000 	.word	0x40020000

08001268 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d101      	bne.n	800127e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800127a:	f000 fe41 	bl	8001f00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40001000 	.word	0x40001000

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart3, "ERROR: ", 7, 100);
 8001290:	2364      	movs	r3, #100	@ 0x64
 8001292:	2207      	movs	r2, #7
 8001294:	4906      	ldr	r1, [pc, #24]	@ (80012b0 <Error_Handler+0x24>)
 8001296:	4807      	ldr	r0, [pc, #28]	@ (80012b4 <Error_Handler+0x28>)
 8001298:	f008 fb28 	bl	80098ec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &res, 1, 100);
 800129c:	2364      	movs	r3, #100	@ 0x64
 800129e:	2201      	movs	r2, #1
 80012a0:	4905      	ldr	r1, [pc, #20]	@ (80012b8 <Error_Handler+0x2c>)
 80012a2:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <Error_Handler+0x28>)
 80012a4:	f008 fb22 	bl	80098ec <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop

	__disable_irq();
	while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x20>
 80012b0:	08011954 	.word	0x08011954
 80012b4:	200004c8 	.word	0x200004c8
 80012b8:	2000058c 	.word	0x2000058c

080012bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <HAL_MspInit+0x58>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <HAL_MspInit+0x58>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_MspInit+0x58>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <HAL_MspInit+0x58>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <HAL_MspInit+0x58>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_MspInit+0x58>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2100      	movs	r1, #0
 80012fe:	2005      	movs	r0, #5
 8001300:	f000 fefa 	bl	80020f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001304:	2005      	movs	r0, #5
 8001306:	f000 ff13 	bl	8002130 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <HAL_CRC_MspInit+0x3c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10d      	bne.n	8001346 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_CRC_MspInit+0x40>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <HAL_CRC_MspInit+0x40>)
 8001334:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <HAL_CRC_MspInit+0x40>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023000 	.word	0x40023000
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0e      	ldr	r2, [pc, #56]	@ (80013a4 <HAL_DMA2D_MspInit+0x48>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d115      	bne.n	800139a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <HAL_DMA2D_MspInit+0x4c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a0c      	ldr	r2, [pc, #48]	@ (80013a8 <HAL_DMA2D_MspInit+0x4c>)
 8001378:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <HAL_DMA2D_MspInit+0x4c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	205a      	movs	r0, #90	@ 0x5a
 8001390:	f000 feb2 	bl	80020f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001394:	205a      	movs	r0, #90	@ 0x5a
 8001396:	f000 fecb 	bl	8002130 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	4002b000 	.word	0x4002b000
 80013a8:	40023800 	.word	0x40023800

080013ac <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001440 <HAL_DSI_MspInit+0x94>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d133      	bne.n	8001436 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001444 <HAL_DSI_MspInit+0x98>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001444 <HAL_DSI_MspInit+0x98>)
 80013d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80013dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_DSI_MspInit+0x98>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <HAL_DSI_MspInit+0x98>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <HAL_DSI_MspInit+0x98>)
 80013f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_DSI_MspInit+0x98>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8001406:	2304      	movs	r3, #4
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001416:	230d      	movs	r3, #13
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4809      	ldr	r0, [pc, #36]	@ (8001448 <HAL_DSI_MspInit+0x9c>)
 8001422:	f002 fa41 	bl	80038a8 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	205c      	movs	r0, #92	@ 0x5c
 800142c:	f000 fe64 	bl	80020f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001430:	205c      	movs	r0, #92	@ 0x5c
 8001432:	f000 fe7d 	bl	8002130 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	@ 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40016c00 	.word	0x40016c00
 8001444:	40023800 	.word	0x40023800
 8001448:	40022400 	.word	0x40022400

0800144c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	@ 0x30
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a32      	ldr	r2, [pc, #200]	@ (8001534 <HAL_I2C_MspInit+0xe8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12d      	bne.n	80014ca <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a30      	ldr	r2, [pc, #192]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b2e      	ldr	r3, [pc, #184]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800148a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001490:	2312      	movs	r3, #18
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001494:	2301      	movs	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149c:	2304      	movs	r3, #4
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	4825      	ldr	r0, [pc, #148]	@ (800153c <HAL_I2C_MspInit+0xf0>)
 80014a8:	f002 f9fe 	bl	80038a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	4a20      	ldr	r2, [pc, #128]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80014bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014c8:	e030      	b.n	800152c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001540 <HAL_I2C_MspInit+0xf4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d12b      	bne.n	800152c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014dc:	4a16      	ldr	r2, [pc, #88]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 80014de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e4:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80014f0:	2330      	movs	r3, #48	@ 0x30
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f4:	2312      	movs	r3, #18
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001500:	2304      	movs	r3, #4
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	480e      	ldr	r0, [pc, #56]	@ (8001544 <HAL_I2C_MspInit+0xf8>)
 800150c:	f002 f9cc 	bl	80038a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001518:	4a07      	ldr	r2, [pc, #28]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 800151a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800151e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_I2C_MspInit+0xec>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	bf00      	nop
 800152e:	3730      	adds	r7, #48	@ 0x30
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40005400 	.word	0x40005400
 8001538:	40023800 	.word	0x40023800
 800153c:	40020400 	.word	0x40020400
 8001540:	40005800 	.word	0x40005800
 8001544:	40021c00 	.word	0x40021c00

08001548 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0e      	ldr	r2, [pc, #56]	@ (8001590 <HAL_LTDC_MspInit+0x48>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d115      	bne.n	8001586 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <HAL_LTDC_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	4a0c      	ldr	r2, [pc, #48]	@ (8001594 <HAL_LTDC_MspInit+0x4c>)
 8001564:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001568:	6453      	str	r3, [r2, #68]	@ 0x44
 800156a:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <HAL_LTDC_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2058      	movs	r0, #88	@ 0x58
 800157c:	f000 fdbc 	bl	80020f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001580:	2058      	movs	r0, #88	@ 0x58
 8001582:	f000 fdd5 	bl	8002130 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40016800 	.word	0x40016800
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a31      	ldr	r2, [pc, #196]	@ (800167c <HAL_QSPI_MspInit+0xe4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d15b      	bne.n	8001672 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <HAL_QSPI_MspInit+0xe8>)
 80015c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001680 <HAL_QSPI_MspInit+0xe8>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80015ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <HAL_QSPI_MspInit+0xe8>)
 80015cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b29      	ldr	r3, [pc, #164]	@ (8001680 <HAL_QSPI_MspInit+0xe8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a28      	ldr	r2, [pc, #160]	@ (8001680 <HAL_QSPI_MspInit+0xe8>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <HAL_QSPI_MspInit+0xe8>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <HAL_QSPI_MspInit+0xe8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a21      	ldr	r2, [pc, #132]	@ (8001680 <HAL_QSPI_MspInit+0xe8>)
 80015fc:	f043 0320 	orr.w	r3, r3, #32
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <HAL_QSPI_MspInit+0xe8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800160e:	2340      	movs	r3, #64	@ 0x40
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 800161e:	230a      	movs	r3, #10
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4816      	ldr	r0, [pc, #88]	@ (8001684 <HAL_QSPI_MspInit+0xec>)
 800162a:	f002 f93d 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800162e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001640:	2309      	movs	r3, #9
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	480f      	ldr	r0, [pc, #60]	@ (8001688 <HAL_QSPI_MspInit+0xf0>)
 800164c:	f002 f92c 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001650:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001662:	230a      	movs	r3, #10
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4806      	ldr	r0, [pc, #24]	@ (8001688 <HAL_QSPI_MspInit+0xf0>)
 800166e:	f002 f91b 	bl	80038a8 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	a0001000 	.word	0xa0001000
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400
 8001688:	40021400 	.word	0x40021400

0800168c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	@ 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a68      	ldr	r2, [pc, #416]	@ (800184c <HAL_SD_MspInit+0x1c0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	f040 80c9 	bne.w	8001842 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	4b66      	ldr	r3, [pc, #408]	@ (8001850 <HAL_SD_MspInit+0x1c4>)
 80016b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b8:	4a65      	ldr	r2, [pc, #404]	@ (8001850 <HAL_SD_MspInit+0x1c4>)
 80016ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016be:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c0:	4b63      	ldr	r3, [pc, #396]	@ (8001850 <HAL_SD_MspInit+0x1c4>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001850 <HAL_SD_MspInit+0x1c4>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d4:	4a5e      	ldr	r2, [pc, #376]	@ (8001850 <HAL_SD_MspInit+0x1c4>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6313      	str	r3, [r2, #48]	@ 0x30
 80016dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001850 <HAL_SD_MspInit+0x1c4>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	4b58      	ldr	r3, [pc, #352]	@ (8001850 <HAL_SD_MspInit+0x1c4>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f0:	4a57      	ldr	r2, [pc, #348]	@ (8001850 <HAL_SD_MspInit+0x1c4>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f8:	4b55      	ldr	r3, [pc, #340]	@ (8001850 <HAL_SD_MspInit+0x1c4>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8001704:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001708:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001716:	230c      	movs	r3, #12
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	484c      	ldr	r0, [pc, #304]	@ (8001854 <HAL_SD_MspInit+0x1c8>)
 8001722:	f002 f8c1 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001726:	2304      	movs	r3, #4
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001736:	230c      	movs	r3, #12
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4845      	ldr	r0, [pc, #276]	@ (8001858 <HAL_SD_MspInit+0x1cc>)
 8001742:	f002 f8b1 	bl	80038a8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001746:	4b45      	ldr	r3, [pc, #276]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 8001748:	4a45      	ldr	r2, [pc, #276]	@ (8001860 <HAL_SD_MspInit+0x1d4>)
 800174a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800174c:	4b43      	ldr	r3, [pc, #268]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 800174e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001752:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001754:	4b41      	ldr	r3, [pc, #260]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175a:	4b40      	ldr	r3, [pc, #256]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001760:	4b3e      	ldr	r3, [pc, #248]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 8001762:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001766:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001768:	4b3c      	ldr	r3, [pc, #240]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 800176a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800176e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001770:	4b3a      	ldr	r3, [pc, #232]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 8001772:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001776:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001778:	4b38      	ldr	r3, [pc, #224]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 800177a:	2220      	movs	r2, #32
 800177c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001784:	4b35      	ldr	r3, [pc, #212]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 8001786:	2204      	movs	r2, #4
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800178a:	4b34      	ldr	r3, [pc, #208]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 800178c:	2203      	movs	r2, #3
 800178e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001790:	4b32      	ldr	r3, [pc, #200]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 8001792:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001796:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001798:	4b30      	ldr	r3, [pc, #192]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 800179a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800179e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80017a0:	482e      	ldr	r0, [pc, #184]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 80017a2:	f000 fcef 	bl	8002184 <HAL_DMA_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80017ac:	f7ff fd6e 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a2a      	ldr	r2, [pc, #168]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 80017b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017b6:	4a29      	ldr	r2, [pc, #164]	@ (800185c <HAL_SD_MspInit+0x1d0>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80017bc:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 80017be:	4a2a      	ldr	r2, [pc, #168]	@ (8001868 <HAL_SD_MspInit+0x1dc>)
 80017c0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80017c2:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 80017c4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017c8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ca:	4b26      	ldr	r3, [pc, #152]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 80017cc:	2240      	movs	r2, #64	@ 0x40
 80017ce:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017d6:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 80017d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017dc:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 80017e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017e4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 80017e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017ec:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80017ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 80017f0:	2220      	movs	r2, #32
 80017f2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 80017fc:	2204      	movs	r2, #4
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 8001802:	2203      	movs	r2, #3
 8001804:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 8001808:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800180c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800180e:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 8001810:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001814:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001816:	4813      	ldr	r0, [pc, #76]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 8001818:	f000 fcb4 	bl	8002184 <HAL_DMA_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001822:	f7ff fd33 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a0e      	ldr	r2, [pc, #56]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 800182a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <HAL_SD_MspInit+0x1d8>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2031      	movs	r0, #49	@ 0x31
 8001838:	f000 fc5e 	bl	80020f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800183c:	2031      	movs	r0, #49	@ 0x31
 800183e:	f000 fc77 	bl	8002130 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	@ 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40023800 	.word	0x40023800
 8001854:	40020800 	.word	0x40020800
 8001858:	40020c00 	.word	0x40020c00
 800185c:	200003c0 	.word	0x200003c0
 8001860:	40026458 	.word	0x40026458
 8001864:	20000420 	.word	0x20000420
 8001868:	400264a0 	.word	0x400264a0

0800186c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0b      	ldr	r2, [pc, #44]	@ (80018a8 <HAL_TIM_Base_MspInit+0x3c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10d      	bne.n	800189a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_TIM_Base_MspInit+0x40>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	4a09      	ldr	r2, [pc, #36]	@ (80018ac <HAL_TIM_Base_MspInit+0x40>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6453      	str	r3, [r2, #68]	@ 0x44
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <HAL_TIM_Base_MspInit+0x40>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40010000 	.word	0x40010000
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	@ 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a33      	ldr	r2, [pc, #204]	@ (800199c <HAL_UART_MspInit+0xec>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d12d      	bne.n	800192e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	4b32      	ldr	r3, [pc, #200]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	4a31      	ldr	r2, [pc, #196]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a2a      	ldr	r2, [pc, #168]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800190a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001914:	2301      	movs	r3, #1
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800191c:	2307      	movs	r3, #7
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	481f      	ldr	r0, [pc, #124]	@ (80019a4 <HAL_UART_MspInit+0xf4>)
 8001928:	f001 ffbe 	bl	80038a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800192c:	e031      	b.n	8001992 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <HAL_UART_MspInit+0xf8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d12c      	bne.n	8001992 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 800193e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001940:	4a17      	ldr	r2, [pc, #92]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 8001942:	f043 0320 	orr.w	r3, r3, #32
 8001946:	6453      	str	r3, [r2, #68]	@ 0x44
 8001948:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 800194a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	4a10      	ldr	r2, [pc, #64]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 800195e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001962:	6313      	str	r3, [r2, #48]	@ 0x30
 8001964:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <HAL_UART_MspInit+0xf0>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 8001970:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001982:	2308      	movs	r3, #8
 8001984:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4807      	ldr	r0, [pc, #28]	@ (80019ac <HAL_UART_MspInit+0xfc>)
 800198e:	f001 ff8b 	bl	80038a8 <HAL_GPIO_Init>
}
 8001992:	bf00      	nop
 8001994:	3730      	adds	r7, #48	@ 0x30
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40004800 	.word	0x40004800
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40011400 	.word	0x40011400
 80019ac:	40021800 	.word	0x40021800

080019b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80019c4:	4b44      	ldr	r3, [pc, #272]	@ (8001ad8 <HAL_FMC_MspInit+0x128>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f040 8081 	bne.w	8001ad0 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 80019ce:	4b42      	ldr	r3, [pc, #264]	@ (8001ad8 <HAL_FMC_MspInit+0x128>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	4b40      	ldr	r3, [pc, #256]	@ (8001adc <HAL_FMC_MspInit+0x12c>)
 80019da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019dc:	4a3f      	ldr	r2, [pc, #252]	@ (8001adc <HAL_FMC_MspInit+0x12c>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80019e4:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <HAL_FMC_MspInit+0x12c>)
 80019e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 80019f0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80019f4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a02:	230c      	movs	r3, #12
 8001a04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4835      	ldr	r0, [pc, #212]	@ (8001ae0 <HAL_FMC_MspInit+0x130>)
 8001a0c:	f001 ff4c 	bl	80038a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8001a10:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001a14:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a22:	230c      	movs	r3, #12
 8001a24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	482e      	ldr	r0, [pc, #184]	@ (8001ae4 <HAL_FMC_MspInit+0x134>)
 8001a2c:	f001 ff3c 	bl	80038a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001a30:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001a34:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a42:	230c      	movs	r3, #12
 8001a44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4827      	ldr	r0, [pc, #156]	@ (8001ae8 <HAL_FMC_MspInit+0x138>)
 8001a4c:	f001 ff2c 	bl	80038a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001a50:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001a54:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a62:	230c      	movs	r3, #12
 8001a64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4820      	ldr	r0, [pc, #128]	@ (8001aec <HAL_FMC_MspInit+0x13c>)
 8001a6c:	f001 ff1c 	bl	80038a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001a70:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001a74:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a82:	230c      	movs	r3, #12
 8001a84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4819      	ldr	r0, [pc, #100]	@ (8001af0 <HAL_FMC_MspInit+0x140>)
 8001a8c:	f001 ff0c 	bl	80038a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001a90:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8001a94:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aa2:	230c      	movs	r3, #12
 8001aa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4812      	ldr	r0, [pc, #72]	@ (8001af4 <HAL_FMC_MspInit+0x144>)
 8001aac:	f001 fefc 	bl	80038a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480b      	ldr	r0, [pc, #44]	@ (8001af8 <HAL_FMC_MspInit+0x148>)
 8001aca:	f001 feed 	bl	80038a8 <HAL_GPIO_Init>
 8001ace:	e000      	b.n	8001ad2 <HAL_FMC_MspInit+0x122>
    return;
 8001ad0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000794 	.word	0x20000794
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40021800 	.word	0x40021800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40021400 	.word	0x40021400
 8001af4:	40021c00 	.word	0x40021c00
 8001af8:	40020800 	.word	0x40020800

08001afc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b04:	f7ff ff54 	bl	80019b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a26      	ldr	r2, [pc, #152]	@ (8001bb8 <HAL_SAI_MspInit+0xa8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d146      	bne.n	8001bb0 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001b22:	4b26      	ldr	r3, [pc, #152]	@ (8001bbc <HAL_SAI_MspInit+0xac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10d      	bne.n	8001b46 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <HAL_SAI_MspInit+0xb0>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	4a23      	ldr	r2, [pc, #140]	@ (8001bc0 <HAL_SAI_MspInit+0xb0>)
 8001b34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3a:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <HAL_SAI_MspInit+0xb0>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001b46:	4b1d      	ldr	r3, [pc, #116]	@ (8001bbc <HAL_SAI_MspInit+0xac>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bbc <HAL_SAI_MspInit+0xac>)
 8001b4e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001b50:	2330      	movs	r3, #48	@ 0x30
 8001b52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001b60:	2306      	movs	r3, #6
 8001b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4816      	ldr	r0, [pc, #88]	@ (8001bc4 <HAL_SAI_MspInit+0xb4>)
 8001b6c:	f001 fe9c 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001b70:	2340      	movs	r3, #64	@ 0x40
 8001b72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001b80:	2306      	movs	r3, #6
 8001b82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480f      	ldr	r0, [pc, #60]	@ (8001bc8 <HAL_SAI_MspInit+0xb8>)
 8001b8c:	f001 fe8c 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4808      	ldr	r0, [pc, #32]	@ (8001bcc <HAL_SAI_MspInit+0xbc>)
 8001bac:	f001 fe7c 	bl	80038a8 <HAL_GPIO_Init>

    }
}
 8001bb0:	bf00      	nop
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40015804 	.word	0x40015804
 8001bbc:	20000798 	.word	0x20000798
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	40021800 	.word	0x40021800

08001bd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08e      	sub	sp, #56	@ 0x38
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <HAL_InitTick+0xe4>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	4a32      	ldr	r2, [pc, #200]	@ (8001cb4 <HAL_InitTick+0xe4>)
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf0:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <HAL_InitTick+0xe4>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bfc:	f107 0210 	add.w	r2, r7, #16
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f005 f93e 	bl	8006e88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d103      	bne.n	8001c1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c16:	f005 f90f 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8001c1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c1c:	e004      	b.n	8001c28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c1e:	f005 f90b 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8001c22:	4603      	mov	r3, r0
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c2a:	4a23      	ldr	r2, [pc, #140]	@ (8001cb8 <HAL_InitTick+0xe8>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	0c9b      	lsrs	r3, r3, #18
 8001c32:	3b01      	subs	r3, #1
 8001c34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c36:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <HAL_InitTick+0xec>)
 8001c38:	4a21      	ldr	r2, [pc, #132]	@ (8001cc0 <HAL_InitTick+0xf0>)
 8001c3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cbc <HAL_InitTick+0xec>)
 8001c3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c44:	4a1d      	ldr	r2, [pc, #116]	@ (8001cbc <HAL_InitTick+0xec>)
 8001c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <HAL_InitTick+0xec>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c50:	4b1a      	ldr	r3, [pc, #104]	@ (8001cbc <HAL_InitTick+0xec>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <HAL_InitTick+0xec>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c5c:	4817      	ldr	r0, [pc, #92]	@ (8001cbc <HAL_InitTick+0xec>)
 8001c5e:	f007 f97f 	bl	8008f60 <HAL_TIM_Base_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c70:	4812      	ldr	r0, [pc, #72]	@ (8001cbc <HAL_InitTick+0xec>)
 8001c72:	f007 f9c5 	bl	8009000 <HAL_TIM_Base_Start_IT>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d111      	bne.n	8001ca8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c84:	2036      	movs	r0, #54	@ 0x36
 8001c86:	f000 fa53 	bl	8002130 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d808      	bhi.n	8001ca2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	2036      	movs	r0, #54	@ 0x36
 8001c96:	f000 fa2f 	bl	80020f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_InitTick+0xf4>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e002      	b.n	8001ca8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ca8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3738      	adds	r7, #56	@ 0x38
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	431bde83 	.word	0x431bde83
 8001cbc:	2000079c 	.word	0x2000079c
 8001cc0:	40001000 	.word	0x40001000
 8001cc4:	20000020 	.word	0x20000020

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <NMI_Handler+0x4>

08001cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <MemManage_Handler+0x4>

08001ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <UsageFault_Handler+0x4>

08001cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <SDIO_IRQHandler+0x10>)
 8001d3e:	f006 fa33 	bl	80081a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000033c 	.word	0x2000033c

08001d4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <TIM6_DAC_IRQHandler+0x10>)
 8001d52:	f007 f9c5 	bl	80090e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000079c 	.word	0x2000079c

08001d60 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001d64:	4802      	ldr	r0, [pc, #8]	@ (8001d70 <DMA2_Stream3_IRQHandler+0x10>)
 8001d66:	f000 fb35 	bl	80023d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200003c0 	.word	0x200003c0

08001d74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <OTG_FS_IRQHandler+0x10>)
 8001d7a:	f002 fa53 	bl	8004224 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000106c 	.word	0x2000106c

08001d88 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <DMA2_Stream6_IRQHandler+0x10>)
 8001d8e:	f000 fb21 	bl	80023d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000420 	.word	0x20000420

08001d9c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <LTDC_IRQHandler+0x10>)
 8001da2:	f004 faa7 	bl	80062f4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200001c0 	.word	0x200001c0

08001db0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <DMA2D_IRQHandler+0x10>)
 8001db6:	f000 fdcc 	bl	8002952 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200000bc 	.word	0x200000bc

08001dc4 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <DSI_IRQHandler+0x10>)
 8001dca:	f001 f9a2 	bl	8003112 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200000fc 	.word	0x200000fc

08001dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de0:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <_sbrk+0x5c>)
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <_sbrk+0x60>)
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dec:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <_sbrk+0x64>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	@ (8001e40 <_sbrk+0x68>)
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d207      	bcs.n	8001e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e08:	f00f fd1c 	bl	8011844 <__errno>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	220c      	movs	r2, #12
 8001e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e16:	e009      	b.n	8001e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e18:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <_sbrk+0x64>)
 8001e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20050000 	.word	0x20050000
 8001e38:	00000800 	.word	0x00000800
 8001e3c:	200007e4 	.word	0x200007e4
 8001e40:	20001598 	.word	0x20001598

08001e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <SystemInit+0x20>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4e:	4a05      	ldr	r2, [pc, #20]	@ (8001e64 <SystemInit+0x20>)
 8001e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ea0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e6c:	f7ff ffea 	bl	8001e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	@ (8001ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e96:	f00f fcdb 	bl	8011850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9a:	f7fe fb2b 	bl	80004f4 <main>
  bx  lr    
 8001e9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ea0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001eac:	08011a88 	.word	0x08011a88
  ldr r2, =_sbss
 8001eb0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001eb4:	20001594 	.word	0x20001594

08001eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <HAL_Init+0x40>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <HAL_Init+0x40>)
 8001ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	@ (8001efc <HAL_Init+0x40>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f8fc 	bl	80020e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eea:	200f      	movs	r0, #15
 8001eec:	f7ff fe70 	bl	8001bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef0:	f7ff f9e4 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000024 	.word	0x20000024
 8001f24:	200007e8 	.word	0x200007e8

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	@ (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	200007e8 	.word	0x200007e8

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff ffee 	bl	8001f28 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f58:	d005      	beq.n	8001f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_Delay+0x44>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f66:	bf00      	nop
 8001f68:	f7ff ffde 	bl	8001f28 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8f7      	bhi.n	8001f68 <HAL_Delay+0x28>
  {
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000024 	.word	0x20000024

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	@ (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	@ (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	@ (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	@ (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	@ 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	@ 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff4c 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800210a:	f7ff ff61 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 800210e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	6978      	ldr	r0, [r7, #20]
 8002116:	f7ff ffb1 	bl	800207c <NVIC_EncodePriority>
 800211a:	4602      	mov	r2, r0
 800211c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff80 	bl	8002028 <__NVIC_SetPriority>
}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff54 	bl	8001fec <__NVIC_EnableIRQ>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00e      	b.n	800217c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	795b      	ldrb	r3, [r3, #5]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff f8d2 	bl	8001318 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff feca 	bl	8001f28 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e099      	b.n	80022d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c0:	e00f      	b.n	80021e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c2:	f7ff feb1 	bl	8001f28 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d908      	bls.n	80021e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2203      	movs	r2, #3
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e078      	b.n	80022d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e8      	bne.n	80021c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <HAL_DMA_Init+0x158>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	2b04      	cmp	r3, #4
 800223a:	d107      	bne.n	800224c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	4313      	orrs	r3, r2
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f023 0307 	bic.w	r3, r3, #7
 8002262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002272:	2b04      	cmp	r3, #4
 8002274:	d117      	bne.n	80022a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fa9d 	bl	80027c8 <DMA_CheckFifoParam>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2240      	movs	r2, #64	@ 0x40
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022a2:	2301      	movs	r3, #1
 80022a4:	e016      	b.n	80022d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa54 	bl	800275c <DMA_CalcBaseAndBitshift>
 80022b4:	4603      	mov	r3, r0
 80022b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	223f      	movs	r2, #63	@ 0x3f
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	f010803f 	.word	0xf010803f

080022e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_DMA_Start_IT+0x26>
 8002302:	2302      	movs	r3, #2
 8002304:	e040      	b.n	8002388 <HAL_DMA_Start_IT+0xa8>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d12f      	bne.n	800237a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2202      	movs	r2, #2
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f9e6 	bl	8002700 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	223f      	movs	r2, #63	@ 0x3f
 800233a:	409a      	lsls	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0216 	orr.w	r2, r2, #22
 800234e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0208 	orr.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e005      	b.n	8002386 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002382:	2302      	movs	r3, #2
 8002384:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002386:	7dfb      	ldrb	r3, [r7, #23]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d004      	beq.n	80023ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2280      	movs	r2, #128	@ 0x80
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00c      	b.n	80023c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023e0:	4b8e      	ldr	r3, [pc, #568]	@ (800261c <HAL_DMA_IRQHandler+0x248>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a8e      	ldr	r2, [pc, #568]	@ (8002620 <HAL_DMA_IRQHandler+0x24c>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0a9b      	lsrs	r3, r3, #10
 80023ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fe:	2208      	movs	r2, #8
 8002400:	409a      	lsls	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d01a      	beq.n	8002440 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0204 	bic.w	r2, r2, #4
 8002426:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242c:	2208      	movs	r2, #8
 800242e:	409a      	lsls	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002444:	2201      	movs	r2, #1
 8002446:	409a      	lsls	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d012      	beq.n	8002476 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002462:	2201      	movs	r2, #1
 8002464:	409a      	lsls	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246e:	f043 0202 	orr.w	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247a:	2204      	movs	r2, #4
 800247c:	409a      	lsls	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d012      	beq.n	80024ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002498:	2204      	movs	r2, #4
 800249a:	409a      	lsls	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	f043 0204 	orr.w	r2, r3, #4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	2210      	movs	r2, #16
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d043      	beq.n	8002544 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d03c      	beq.n	8002544 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	2210      	movs	r2, #16
 80024d0:	409a      	lsls	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d018      	beq.n	8002516 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d024      	beq.n	8002544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
 8002502:	e01f      	b.n	8002544 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01b      	beq.n	8002544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
 8002514:	e016      	b.n	8002544 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0208 	bic.w	r2, r2, #8
 8002532:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002548:	2220      	movs	r2, #32
 800254a:	409a      	lsls	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 808f 	beq.w	8002674 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8087 	beq.w	8002674 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	2220      	movs	r2, #32
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b05      	cmp	r3, #5
 800257c:	d136      	bne.n	80025ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0216 	bic.w	r2, r2, #22
 800258c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800259c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d103      	bne.n	80025ae <HAL_DMA_IRQHandler+0x1da>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0208 	bic.w	r2, r2, #8
 80025bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c2:	223f      	movs	r2, #63	@ 0x3f
 80025c4:	409a      	lsls	r2, r3
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d07e      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
        }
        return;
 80025ea:	e079      	b.n	80026e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01d      	beq.n	8002636 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10d      	bne.n	8002624 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260c:	2b00      	cmp	r3, #0
 800260e:	d031      	beq.n	8002674 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
 8002618:	e02c      	b.n	8002674 <HAL_DMA_IRQHandler+0x2a0>
 800261a:	bf00      	nop
 800261c:	2000001c 	.word	0x2000001c
 8002620:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d023      	beq.n	8002674 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	4798      	blx	r3
 8002634:	e01e      	b.n	8002674 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10f      	bne.n	8002664 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0210 	bic.w	r2, r2, #16
 8002652:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002678:	2b00      	cmp	r3, #0
 800267a:	d032      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d022      	beq.n	80026ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2205      	movs	r2, #5
 800268c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	3301      	adds	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d307      	bcc.n	80026bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f2      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x2cc>
 80026ba:	e000      	b.n	80026be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
 80026de:	e000      	b.n	80026e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026e0:	bf00      	nop
    }
  }
}
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800271c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b40      	cmp	r3, #64	@ 0x40
 800272c:	d108      	bne.n	8002740 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800273e:	e007      	b.n	8002750 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3b10      	subs	r3, #16
 800276c:	4a14      	ldr	r2, [pc, #80]	@ (80027c0 <DMA_CalcBaseAndBitshift+0x64>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002776:	4a13      	ldr	r2, [pc, #76]	@ (80027c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d909      	bls.n	800279e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	1d1a      	adds	r2, r3, #4
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	659a      	str	r2, [r3, #88]	@ 0x58
 800279c:	e007      	b.n	80027ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80027a6:	f023 0303 	bic.w	r3, r3, #3
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	aaaaaaab 	.word	0xaaaaaaab
 80027c4:	080119bc 	.word	0x080119bc

080027c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11f      	bne.n	8002822 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d856      	bhi.n	8002896 <DMA_CheckFifoParam+0xce>
 80027e8:	a201      	add	r2, pc, #4	@ (adr r2, 80027f0 <DMA_CheckFifoParam+0x28>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002801 	.word	0x08002801
 80027f4:	08002813 	.word	0x08002813
 80027f8:	08002801 	.word	0x08002801
 80027fc:	08002897 	.word	0x08002897
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002804:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d046      	beq.n	800289a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002810:	e043      	b.n	800289a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002816:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800281a:	d140      	bne.n	800289e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002820:	e03d      	b.n	800289e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800282a:	d121      	bne.n	8002870 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d837      	bhi.n	80028a2 <DMA_CheckFifoParam+0xda>
 8002832:	a201      	add	r2, pc, #4	@ (adr r2, 8002838 <DMA_CheckFifoParam+0x70>)
 8002834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002838:	08002849 	.word	0x08002849
 800283c:	0800284f 	.word	0x0800284f
 8002840:	08002849 	.word	0x08002849
 8002844:	08002861 	.word	0x08002861
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e030      	b.n	80028b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002852:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d025      	beq.n	80028a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285e:	e022      	b.n	80028a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002868:	d11f      	bne.n	80028aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800286e:	e01c      	b.n	80028aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d903      	bls.n	800287e <DMA_CheckFifoParam+0xb6>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b03      	cmp	r3, #3
 800287a:	d003      	beq.n	8002884 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800287c:	e018      	b.n	80028b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
      break;
 8002882:	e015      	b.n	80028b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00e      	beq.n	80028ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      break;
 8002894:	e00b      	b.n	80028ae <DMA_CheckFifoParam+0xe6>
      break;
 8002896:	bf00      	nop
 8002898:	e00a      	b.n	80028b0 <DMA_CheckFifoParam+0xe8>
      break;
 800289a:	bf00      	nop
 800289c:	e008      	b.n	80028b0 <DMA_CheckFifoParam+0xe8>
      break;
 800289e:	bf00      	nop
 80028a0:	e006      	b.n	80028b0 <DMA_CheckFifoParam+0xe8>
      break;
 80028a2:	bf00      	nop
 80028a4:	e004      	b.n	80028b0 <DMA_CheckFifoParam+0xe8>
      break;
 80028a6:	bf00      	nop
 80028a8:	e002      	b.n	80028b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80028aa:	bf00      	nop
 80028ac:	e000      	b.n	80028b0 <DMA_CheckFifoParam+0xe8>
      break;
 80028ae:	bf00      	nop
    }
  } 
  
  return status; 
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop

080028c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e03b      	b.n	800294a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fd38 	bl	800135c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002910:	f023 0107 	bic.w	r1, r3, #7
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800292a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d1      	ldr	r1, [r2, #12]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	430b      	orrs	r3, r1
 8002938:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d026      	beq.n	80029c2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d021      	beq.n	80029c2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800298c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2201      	movs	r2, #1
 80029a0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2204      	movs	r2, #4
 80029a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d026      	beq.n	8002a1a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d021      	beq.n	8002a1a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029e4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2220      	movs	r2, #32
 80029ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f2:	f043 0202 	orr.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2204      	movs	r2, #4
 80029fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d026      	beq.n	8002a72 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d021      	beq.n	8002a72 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2208      	movs	r2, #8
 8002a44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4a:	f043 0204 	orr.w	r2, r3, #4
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2204      	movs	r2, #4
 8002a56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00e      	beq.n	8002aa4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a94:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f853 	bl	8002b4a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d024      	beq.n	8002af8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01f      	beq.n	8002af8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2202      	movs	r2, #2
 8002ace:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01f      	beq.n	8002b42 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01a      	beq.n	8002b42 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2210      	movs	r2, #16
 8002b22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f80e 	bl	8002b5e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_DMA2D_ConfigLayer+0x20>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e079      	b.n	8002c88 <HAL_DMA2D_ConfigLayer+0x114>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	3318      	adds	r3, #24
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002bbe:	4b35      	ldr	r3, [pc, #212]	@ (8002c94 <HAL_DMA2D_ConfigLayer+0x120>)
 8002bc0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b0a      	cmp	r3, #10
 8002bc8:	d003      	beq.n	8002bd2 <HAL_DMA2D_ConfigLayer+0x5e>
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b09      	cmp	r3, #9
 8002bd0:	d107      	bne.n	8002be2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e005      	b.n	8002bee <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d120      	bne.n	8002c36 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	ea02 0103 	and.w	r1, r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b0a      	cmp	r3, #10
 8002c1c:	d003      	beq.n	8002c26 <HAL_DMA2D_ConfigLayer+0xb2>
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d127      	bne.n	8002c76 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c34:	e01f      	b.n	8002c76 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	ea02 0103 	and.w	r1, r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b0a      	cmp	r3, #10
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA2D_ConfigLayer+0xf4>
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d106      	bne.n	8002c76 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002c74:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	ff03000f 	.word	0xff03000f

08002c98 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	@ 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e16e      	b.n	8002f8a <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7c5b      	ldrb	r3, [r3, #17]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fe fb78 	bl	80013ac <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002cd6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002ce2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cea:	f7ff f91d 	bl	8001f28 <HAL_GetTick>
 8002cee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002cf0:	e009      	b.n	8002d06 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002cf2:	f7ff f919 	bl	8001f28 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d00:	d901      	bls.n	8002d06 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e141      	b.n	8002f8a <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002d0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0ed      	beq.n	8002cf2 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8002d26:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8002d2a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002d42:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002d4a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f7ff f8de 	bl	8001f40 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d84:	f7ff f8d0 	bl	8001f28 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002d8a:	e009      	b.n	8002da0 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002d8c:	f7ff f8cc 	bl	8001f28 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d9a:	d901      	bls.n	8002da0 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0f4      	b.n	8002f8a <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ed      	beq.n	8002d8c <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002de0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0202 	orr.w	r2, r2, #2
 8002e04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0204 	orr.w	r2, r2, #4
 8002e18:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0203 	bic.w	r2, r2, #3
 8002e2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e46:	f7ff f86f 	bl	8001f28 <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d123      	bne.n	8002ea4 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002e5c:	e00c      	b.n	8002e78 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002e5e:	f7ff f863 	bl	8001f28 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e6c:	d904      	bls.n	8002e78 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e088      	b.n	8002f8a <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002e80:	f003 0314 	and.w	r3, r3, #20
 8002e84:	2b14      	cmp	r3, #20
 8002e86:	d1ea      	bne.n	8002e5e <HAL_DSI_Init+0x1c6>
 8002e88:	e014      	b.n	8002eb4 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002e8a:	f7ff f84d 	bl	8001f28 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e98:	d904      	bls.n	8002ea4 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e072      	b.n	8002f8a <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002eac:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8002eb0:	2b94      	cmp	r3, #148	@ 0x94
 8002eb2:	d1ea      	bne.n	8002e8a <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_DSI_Init+0x22a>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	e000      	b.n	8002ec4 <HAL_DSI_Init+0x22c>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	4a32      	ldr	r2, [pc, #200]	@ (8002f94 <HAL_DSI_Init+0x2fc>)
 8002eca:	fb03 f202 	mul.w	r2, r3, r2
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002efa:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0203 	bic.w	r2, r2, #3
 8002f5e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3728      	adds	r7, #40	@ 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	003d0900 	.word	0x003d0900

08002f98 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7c1b      	ldrb	r3, [r3, #16]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_DSI_ConfigErrorMonitor+0x16>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e0ab      	b.n	8003106 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002fe8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002fec:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 800300a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d009      	beq.n	800302c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0202 	orr.w	r2, r2, #2
 8003046:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 020c 	orr.w	r2, r2, #12
 8003064:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0210 	orr.w	r2, r2, #16
 8003082:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0220 	orr.w	r2, r2, #32
 80030a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030be:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030dc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 80030fa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00f      	beq.n	800314a <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2201      	movs	r2, #1
 8003140:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f8ad 	bl	80032a4 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00f      	beq.n	800317a <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2202      	movs	r2, #2
 8003170:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f89f 	bl	80032b8 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 808c 	beq.w	800329c <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800318c:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4013      	ands	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80031a4:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	4013      	ands	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f043 0202 	orr.w	r2, r3, #2
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f043 0204 	orr.w	r2, r3, #4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f043 0208 	orr.w	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f043 0210 	orr.w	r2, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f043 0220 	orr.w	r2, r3, #32
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f818 	bl	80032cc <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800329c:	bf00      	nop
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	7c1b      	ldrb	r3, [r3, #16]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_DSI_SetGenericVCID+0x16>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e016      	b.n	8003324 <HAL_DSI_SetGenericVCID+0x44>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0203 	bic.w	r2, r2, #3
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7c1b      	ldrb	r3, [r3, #16]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8003342:	2302      	movs	r3, #2
 8003344:	e0c5      	b.n	80034d2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0203 	bic.w	r2, r2, #3
 8003392:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68d9      	ldr	r1, [r3, #12]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0207 	bic.w	r2, r2, #7
 80033b4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6959      	ldr	r1, [r3, #20]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 020f 	bic.w	r2, r2, #15
 80033e2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6919      	ldr	r1, [r3, #16]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 020e 	bic.w	r2, r2, #14
 8003406:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	005a      	lsls	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	0c1b      	lsrs	r3, r3, #16
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003454:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	431a      	orrs	r2, r3
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0202 	orr.w	r2, r2, #2
 80034c6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7c1b      	ldrb	r3, [r3, #16]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_DSI_ConfigCommand+0x16>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e049      	b.n	800358a <HAL_DSI_ConfigCommand+0xaa>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4b24      	ldr	r3, [pc, #144]	@ (8003598 <HAL_DSI_ConfigCommand+0xb8>)
 8003508:	400b      	ands	r3, r1
 800350a:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800351a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003520:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8003526:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800352c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003532:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003538:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800353e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003544:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800354a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003550:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003556:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0202 	bic.w	r2, r2, #2
 800356e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	fef080ff 	.word	0xfef080ff

0800359c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	7c1b      	ldrb	r3, [r3, #16]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_DSI_ConfigFlowControl+0x16>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e016      	b.n	80035e0 <HAL_DSI_ConfigFlowControl+0x44>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 021f 	bic.w	r2, r2, #31
 80035c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7c1b      	ldrb	r3, [r3, #16]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_DSI_ConfigPhyTimer+0x16>
 80035fe:	2302      	movs	r3, #2
 8003600:	e058      	b.n	80036b4 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4293      	cmp	r3, r2
 8003612:	bf38      	it	cc
 8003614:	4613      	movcc	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8003628:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	041a      	lsls	r2, r3, #16
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8003656:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003690:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	021a      	lsls	r2, r3, #8
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7c1b      	ldrb	r3, [r3, #16]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_DSI_ConfigHostTimeouts+0x16>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e0b4      	b.n	8003840 <HAL_DSI_ConfigHostTimeouts+0x180>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80036ea:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6899      	ldr	r1, [r3, #8]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	b292      	uxth	r2, r2
 800370c:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	041a      	lsls	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	0c1b      	lsrs	r3, r3, #16
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6812      	ldr	r2, [r2, #0]
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80037ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	041b      	lsls	r3, r3, #16
 80037f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	0c1b      	lsrs	r3, r3, #16
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	7c1b      	ldrb	r3, [r3, #16]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800385e:	2302      	movs	r3, #2
 8003860:	e01b      	b.n	800389a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8003878:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	065a      	lsls	r2, r3, #25
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	@ 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	e177      	b.n	8003bb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038c4:	2201      	movs	r2, #1
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	429a      	cmp	r2, r3
 80038de:	f040 8166 	bne.w	8003bae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d005      	beq.n	80038fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d130      	bne.n	800395c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003930:	2201      	movs	r2, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 0201 	and.w	r2, r3, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b03      	cmp	r3, #3
 8003966:	d017      	beq.n	8003998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2203      	movs	r2, #3
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d123      	bne.n	80039ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	08da      	lsrs	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3208      	adds	r2, #8
 80039ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	220f      	movs	r2, #15
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	08da      	lsrs	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3208      	adds	r2, #8
 80039e6:	69b9      	ldr	r1, [r7, #24]
 80039e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	2203      	movs	r2, #3
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0203 	and.w	r2, r3, #3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80c0 	beq.w	8003bae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	4b66      	ldr	r3, [pc, #408]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	4a65      	ldr	r2, [pc, #404]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a3e:	4b63      	ldr	r3, [pc, #396]	@ (8003bcc <HAL_GPIO_Init+0x324>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a4a:	4a61      	ldr	r2, [pc, #388]	@ (8003bd0 <HAL_GPIO_Init+0x328>)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	3302      	adds	r3, #2
 8003a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	220f      	movs	r2, #15
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a58      	ldr	r2, [pc, #352]	@ (8003bd4 <HAL_GPIO_Init+0x32c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d037      	beq.n	8003ae6 <HAL_GPIO_Init+0x23e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a57      	ldr	r2, [pc, #348]	@ (8003bd8 <HAL_GPIO_Init+0x330>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d031      	beq.n	8003ae2 <HAL_GPIO_Init+0x23a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a56      	ldr	r2, [pc, #344]	@ (8003bdc <HAL_GPIO_Init+0x334>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02b      	beq.n	8003ade <HAL_GPIO_Init+0x236>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a55      	ldr	r2, [pc, #340]	@ (8003be0 <HAL_GPIO_Init+0x338>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d025      	beq.n	8003ada <HAL_GPIO_Init+0x232>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a54      	ldr	r2, [pc, #336]	@ (8003be4 <HAL_GPIO_Init+0x33c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01f      	beq.n	8003ad6 <HAL_GPIO_Init+0x22e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a53      	ldr	r2, [pc, #332]	@ (8003be8 <HAL_GPIO_Init+0x340>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d019      	beq.n	8003ad2 <HAL_GPIO_Init+0x22a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a52      	ldr	r2, [pc, #328]	@ (8003bec <HAL_GPIO_Init+0x344>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_Init+0x226>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a51      	ldr	r2, [pc, #324]	@ (8003bf0 <HAL_GPIO_Init+0x348>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00d      	beq.n	8003aca <HAL_GPIO_Init+0x222>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a50      	ldr	r2, [pc, #320]	@ (8003bf4 <HAL_GPIO_Init+0x34c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <HAL_GPIO_Init+0x21e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a4f      	ldr	r2, [pc, #316]	@ (8003bf8 <HAL_GPIO_Init+0x350>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_GPIO_Init+0x21a>
 8003abe:	2309      	movs	r3, #9
 8003ac0:	e012      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	e010      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	e00e      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003aca:	2307      	movs	r3, #7
 8003acc:	e00c      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ace:	2306      	movs	r3, #6
 8003ad0:	e00a      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ad2:	2305      	movs	r3, #5
 8003ad4:	e008      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	e006      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ada:	2303      	movs	r3, #3
 8003adc:	e004      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e002      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e000      	b.n	8003ae8 <HAL_GPIO_Init+0x240>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	69fa      	ldr	r2, [r7, #28]
 8003aea:	f002 0203 	and.w	r2, r2, #3
 8003aee:	0092      	lsls	r2, r2, #2
 8003af0:	4093      	lsls	r3, r2
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af8:	4935      	ldr	r1, [pc, #212]	@ (8003bd0 <HAL_GPIO_Init+0x328>)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	089b      	lsrs	r3, r3, #2
 8003afe:	3302      	adds	r3, #2
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b06:	4b3d      	ldr	r3, [pc, #244]	@ (8003bfc <HAL_GPIO_Init+0x354>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b2a:	4a34      	ldr	r2, [pc, #208]	@ (8003bfc <HAL_GPIO_Init+0x354>)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b30:	4b32      	ldr	r3, [pc, #200]	@ (8003bfc <HAL_GPIO_Init+0x354>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b54:	4a29      	ldr	r2, [pc, #164]	@ (8003bfc <HAL_GPIO_Init+0x354>)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b5a:	4b28      	ldr	r3, [pc, #160]	@ (8003bfc <HAL_GPIO_Init+0x354>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003bfc <HAL_GPIO_Init+0x354>)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b84:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <HAL_GPIO_Init+0x354>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ba8:	4a14      	ldr	r2, [pc, #80]	@ (8003bfc <HAL_GPIO_Init+0x354>)
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b0f      	cmp	r3, #15
 8003bb8:	f67f ae84 	bls.w	80038c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	3724      	adds	r7, #36	@ 0x24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40013800 	.word	0x40013800
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	40020400 	.word	0x40020400
 8003bdc:	40020800 	.word	0x40020800
 8003be0:	40020c00 	.word	0x40020c00
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40021400 	.word	0x40021400
 8003bec:	40021800 	.word	0x40021800
 8003bf0:	40021c00 	.word	0x40021c00
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40022400 	.word	0x40022400
 8003bfc:	40013c00 	.word	0x40013c00

08003c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	887b      	ldrh	r3, [r7, #2]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	e001      	b.n	8003c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c40:	787b      	ldrb	r3, [r7, #1]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c46:	887a      	ldrh	r2, [r7, #2]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c4c:	e003      	b.n	8003c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	041a      	lsls	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	619a      	str	r2, [r3, #24]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af02      	add	r7, sp, #8
 8003c68:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e059      	b.n	8003d28 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f00d fa56 	bl	8011140 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2203      	movs	r2, #3
 8003c98:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ca2:	d102      	bne.n	8003caa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f007 f845 	bl	800ad3e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	7c1a      	ldrb	r2, [r3, #16]
 8003cbc:	f88d 2000 	strb.w	r2, [sp]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cc4:	f006 ffc6 	bl	800ac54 <USB_CoreInit>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e026      	b.n	8003d28 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f007 f83d 	bl	800ad60 <USB_SetCurrentMode>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e017      	b.n	8003d28 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	7c1a      	ldrb	r2, [r3, #16]
 8003d00:	f88d 2000 	strb.w	r2, [sp]
 8003d04:	3304      	adds	r3, #4
 8003d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d08:	f007 f9e0 	bl	800b0cc <USB_HostInit>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e004      	b.n	8003d28 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b08b      	sub	sp, #44	@ 0x2c
 8003d34:	af04      	add	r7, sp, #16
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	70fb      	strb	r3, [r7, #3]
 8003d42:	460b      	mov	r3, r1
 8003d44:	70bb      	strb	r3, [r7, #2]
 8003d46:	4613      	mov	r3, r2
 8003d48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003d4a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003d4c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_HCD_HC_Init+0x2c>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e09d      	b.n	8003e98 <HAL_HCD_HC_Init+0x168>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	3319      	adds	r3, #25
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	3314      	adds	r3, #20
 8003d88:	787a      	ldrb	r2, [r7, #1]
 8003d8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3315      	adds	r3, #21
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	3326      	adds	r3, #38	@ 0x26
 8003db0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003db4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	78bb      	ldrb	r3, [r7, #2]
 8003dba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dbe:	b2d8      	uxtb	r0, r3
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3316      	adds	r3, #22
 8003dce:	4602      	mov	r2, r0
 8003dd0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fbc8 	bl	800456c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003ddc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	da0a      	bge.n	8003dfa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3317      	adds	r3, #23
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e009      	b.n	8003e0e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	3317      	adds	r3, #23
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f007 fab2 	bl	800b37c <USB_GetHostSpeed>
 8003e18:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d10b      	bne.n	8003e3a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d107      	bne.n	8003e3a <HAL_HCD_HC_Init+0x10a>
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d104      	bne.n	8003e3a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2bbc      	cmp	r3, #188	@ 0xbc
 8003e34:	d901      	bls.n	8003e3a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003e36:	23bc      	movs	r3, #188	@ 0xbc
 8003e38:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	3318      	adds	r3, #24
 8003e4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003e4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	b298      	uxth	r0, r3
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3328      	adds	r3, #40	@ 0x28
 8003e64:	4602      	mov	r2, r0
 8003e66:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	787c      	ldrb	r4, [r7, #1]
 8003e72:	78ba      	ldrb	r2, [r7, #2]
 8003e74:	78f9      	ldrb	r1, [r7, #3]
 8003e76:	9302      	str	r3, [sp, #8]
 8003e78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4623      	mov	r3, r4
 8003e86:	f007 faa1 	bl	800b3cc <USB_HC_Init>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_HCD_HC_Halt+0x1e>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e00f      	b.n	8003ede <HAL_HCD_HC_Halt+0x3e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f007 fe33 	bl	800bb3a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	70fb      	strb	r3, [r7, #3]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70bb      	strb	r3, [r7, #2]
 8003efe:	4613      	mov	r3, r2
 8003f00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	3317      	adds	r3, #23
 8003f12:	78ba      	ldrb	r2, [r7, #2]
 8003f14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f16:	78fa      	ldrb	r2, [r7, #3]
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3326      	adds	r3, #38	@ 0x26
 8003f26:	787a      	ldrb	r2, [r7, #1]
 8003f28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003f2a:	7c3b      	ldrb	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d114      	bne.n	8003f5a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	332a      	adds	r3, #42	@ 0x2a
 8003f40:	2203      	movs	r2, #3
 8003f42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3319      	adds	r3, #25
 8003f54:	7f3a      	ldrb	r2, [r7, #28]
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e009      	b.n	8003f6e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	332a      	adds	r3, #42	@ 0x2a
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003f6e:	787b      	ldrb	r3, [r7, #1]
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	f200 8102 	bhi.w	800417a <HAL_HCD_HC_SubmitRequest+0x292>
 8003f76:	a201      	add	r2, pc, #4	@ (adr r2, 8003f7c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003f8d 	.word	0x08003f8d
 8003f80:	08004165 	.word	0x08004165
 8003f84:	08004051 	.word	0x08004051
 8003f88:	080040db 	.word	0x080040db
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003f8c:	7c3b      	ldrb	r3, [r7, #16]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	f040 80f5 	bne.w	800417e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003f94:	78bb      	ldrb	r3, [r7, #2]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d12d      	bne.n	8003ff6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003f9a:	8b3b      	ldrh	r3, [r7, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d109      	bne.n	8003fb4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	333d      	adds	r3, #61	@ 0x3d
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	333d      	adds	r3, #61	@ 0x3d
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	332a      	adds	r3, #42	@ 0x2a
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003fde:	e0ce      	b.n	800417e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	332a      	adds	r3, #42	@ 0x2a
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	701a      	strb	r2, [r3, #0]
      break;
 8003ff4:	e0c3      	b.n	800417e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	331a      	adds	r3, #26
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	f040 80b8 	bne.w	800417e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	333c      	adds	r3, #60	@ 0x3c
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10a      	bne.n	800403a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	332a      	adds	r3, #42	@ 0x2a
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]
      break;
 8004038:	e0a1      	b.n	800417e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	332a      	adds	r3, #42	@ 0x2a
 800404a:	2202      	movs	r2, #2
 800404c:	701a      	strb	r2, [r3, #0]
      break;
 800404e:	e096      	b.n	800417e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004050:	78bb      	ldrb	r3, [r7, #2]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d120      	bne.n	8004098 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	333d      	adds	r3, #61	@ 0x3d
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	332a      	adds	r3, #42	@ 0x2a
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004080:	e07e      	b.n	8004180 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	332a      	adds	r3, #42	@ 0x2a
 8004092:	2202      	movs	r2, #2
 8004094:	701a      	strb	r2, [r3, #0]
      break;
 8004096:	e073      	b.n	8004180 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	333c      	adds	r3, #60	@ 0x3c
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	332a      	adds	r3, #42	@ 0x2a
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
      break;
 80040c2:	e05d      	b.n	8004180 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	332a      	adds	r3, #42	@ 0x2a
 80040d4:	2202      	movs	r2, #2
 80040d6:	701a      	strb	r2, [r3, #0]
      break;
 80040d8:	e052      	b.n	8004180 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80040da:	78bb      	ldrb	r3, [r7, #2]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d120      	bne.n	8004122 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	333d      	adds	r3, #61	@ 0x3d
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	332a      	adds	r3, #42	@ 0x2a
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800410a:	e039      	b.n	8004180 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	332a      	adds	r3, #42	@ 0x2a
 800411c:	2202      	movs	r2, #2
 800411e:	701a      	strb	r2, [r3, #0]
      break;
 8004120:	e02e      	b.n	8004180 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	333c      	adds	r3, #60	@ 0x3c
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	332a      	adds	r3, #42	@ 0x2a
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
      break;
 800414c:	e018      	b.n	8004180 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	332a      	adds	r3, #42	@ 0x2a
 800415e:	2202      	movs	r2, #2
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	e00d      	b.n	8004180 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	332a      	adds	r3, #42	@ 0x2a
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
      break;
 8004178:	e002      	b.n	8004180 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800417e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	332c      	adds	r3, #44	@ 0x2c
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	8b39      	ldrh	r1, [r7, #24]
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4403      	add	r3, r0
 80041a4:	3334      	adds	r3, #52	@ 0x34
 80041a6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	334c      	adds	r3, #76	@ 0x4c
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	3338      	adds	r3, #56	@ 0x38
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3315      	adds	r3, #21
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	334d      	adds	r3, #77	@ 0x4d
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	4613      	mov	r3, r2
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	3310      	adds	r3, #16
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	1d19      	adds	r1, r3, #4
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	799b      	ldrb	r3, [r3, #6]
 8004212:	461a      	mov	r2, r3
 8004214:	f007 fa06 	bl	800b624 <USB_HC_StartXfer>
 8004218:	4603      	mov	r3, r0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop

08004224 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4618      	mov	r0, r3
 800423c:	f006 ff06 	bl	800b04c <USB_GetMode>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	f040 80fb 	bne.w	800443e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f006 fec9 	bl	800afe4 <USB_ReadInterrupts>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80f1 	beq.w	800443c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f006 fec0 	bl	800afe4 <USB_ReadInterrupts>
 8004264:	4603      	mov	r3, r0
 8004266:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800426a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800426e:	d104      	bne.n	800427a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004278:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f006 feb0 	bl	800afe4 <USB_ReadInterrupts>
 8004284:	4603      	mov	r3, r0
 8004286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800428a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428e:	d104      	bne.n	800429a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004298:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f006 fea0 	bl	800afe4 <USB_ReadInterrupts>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ae:	d104      	bne.n	80042ba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80042b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f006 fe90 	bl	800afe4 <USB_ReadInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d103      	bne.n	80042d6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2202      	movs	r2, #2
 80042d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f006 fe82 	bl	800afe4 <USB_ReadInterrupts>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042ea:	d120      	bne.n	800432e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80042f4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d113      	bne.n	800432e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004306:	2110      	movs	r1, #16
 8004308:	6938      	ldr	r0, [r7, #16]
 800430a:	f006 fd75 	bl	800adf8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800430e:	6938      	ldr	r0, [r7, #16]
 8004310:	f006 fda4 	bl	800ae5c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	7a5b      	ldrb	r3, [r3, #9]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d105      	bne.n	8004328 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2101      	movs	r1, #1
 8004322:	4618      	mov	r0, r3
 8004324:	f006 ff8a 	bl	800b23c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f00c ff87 	bl	801123c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f006 fe56 	bl	800afe4 <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800433e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004342:	d102      	bne.n	800434a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f001 fd4d 	bl	8005de4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f006 fe48 	bl	800afe4 <USB_ReadInterrupts>
 8004354:	4603      	mov	r3, r0
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b08      	cmp	r3, #8
 800435c:	d106      	bne.n	800436c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f00c ff50 	bl	8011204 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2208      	movs	r2, #8
 800436a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f006 fe37 	bl	800afe4 <USB_ReadInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004380:	d139      	bne.n	80043f6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f007 fbc6 	bl	800bb18 <USB_HC_ReadInterrupt>
 800438c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e025      	b.n	80043e0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d018      	beq.n	80043da <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043be:	d106      	bne.n	80043ce <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f905 	bl	80045d6 <HCD_HC_IN_IRQHandler>
 80043cc:	e005      	b.n	80043da <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	4619      	mov	r1, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 ff67 	bl	80052a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	3301      	adds	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	795b      	ldrb	r3, [r3, #5]
 80043e4:	461a      	mov	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d3d3      	bcc.n	8004394 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80043f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f006 fdf2 	bl	800afe4 <USB_ReadInterrupts>
 8004400:	4603      	mov	r3, r0
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b10      	cmp	r3, #16
 8004408:	d101      	bne.n	800440e <HAL_HCD_IRQHandler+0x1ea>
 800440a:	2301      	movs	r3, #1
 800440c:	e000      	b.n	8004410 <HAL_HCD_IRQHandler+0x1ec>
 800440e:	2300      	movs	r3, #0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d014      	beq.n	800443e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0210 	bic.w	r2, r2, #16
 8004422:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f001 fbfe 	bl	8005c26 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0210 	orr.w	r2, r2, #16
 8004438:	619a      	str	r2, [r3, #24]
 800443a:	e000      	b.n	800443e <HAL_HCD_IRQHandler+0x21a>
      return;
 800443c:	bf00      	nop
    }
  }
}
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_HCD_Start+0x16>
 8004456:	2302      	movs	r3, #2
 8004458:	e013      	b.n	8004482 <HAL_HCD_Start+0x3e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2101      	movs	r1, #1
 8004468:	4618      	mov	r0, r3
 800446a:	f006 ff4e 	bl	800b30a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f006 fc52 	bl	800ad1c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_HCD_Stop+0x16>
 800449c:	2302      	movs	r3, #2
 800449e:	e00d      	b.n	80044bc <HAL_HCD_Stop+0x32>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f007 fca1 	bl	800bdf4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f006 fef0 	bl	800b2b6 <USB_ResetPort>
 80044d6:	4603      	mov	r3, r0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	334c      	adds	r3, #76	@ 0x4c
 80044fc:	781b      	ldrb	r3, [r3, #0]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	460b      	mov	r3, r1
 8004514:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	3338      	adds	r3, #56	@ 0x38
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f006 ff32 	bl	800b3aa <USB_GetCurrentFrame>
 8004546:	4603      	mov	r3, r0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f006 ff0d 	bl	800b37c <USB_GetHostSpeed>
 8004562:	4603      	mov	r3, r0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	331a      	adds	r3, #26
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	331b      	adds	r3, #27
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4613      	mov	r3, r2
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	3325      	adds	r3, #37	@ 0x25
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	3324      	adds	r3, #36	@ 0x24
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	460b      	mov	r3, r1
 80045e0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f006 fd08 	bl	800b00a <USB_ReadChInterrupts>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b04      	cmp	r3, #4
 8004602:	d11a      	bne.n	800463a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004610:	461a      	mov	r2, r3
 8004612:	2304      	movs	r3, #4
 8004614:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	334d      	adds	r3, #77	@ 0x4d
 8004626:	2207      	movs	r2, #7
 8004628:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f007 fa81 	bl	800bb3a <USB_HC_Halt>
 8004638:	e09e      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f006 fce1 	bl	800b00a <USB_ReadChInterrupts>
 8004648:	4603      	mov	r3, r0
 800464a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004652:	d11b      	bne.n	800468c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004660:	461a      	mov	r2, r3
 8004662:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004666:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	334d      	adds	r3, #77	@ 0x4d
 8004678:	2208      	movs	r2, #8
 800467a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f007 fa58 	bl	800bb3a <USB_HC_Halt>
 800468a:	e075      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f006 fcb8 	bl	800b00a <USB_ReadChInterrupts>
 800469a:	4603      	mov	r3, r0
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d11a      	bne.n	80046da <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b0:	461a      	mov	r2, r3
 80046b2:	2308      	movs	r3, #8
 80046b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	334d      	adds	r3, #77	@ 0x4d
 80046c6:	2206      	movs	r2, #6
 80046c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f007 fa31 	bl	800bb3a <USB_HC_Halt>
 80046d8:	e04e      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f006 fc91 	bl	800b00a <USB_ReadChInterrupts>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f2:	d11b      	bne.n	800472c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004700:	461a      	mov	r2, r3
 8004702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004706:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	334d      	adds	r3, #77	@ 0x4d
 8004718:	2209      	movs	r2, #9
 800471a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f007 fa08 	bl	800bb3a <USB_HC_Halt>
 800472a:	e025      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f006 fc68 	bl	800b00a <USB_ReadChInterrupts>
 800473a:	4603      	mov	r3, r0
 800473c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004740:	2b80      	cmp	r3, #128	@ 0x80
 8004742:	d119      	bne.n	8004778 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	4413      	add	r3, r2
 800474c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004750:	461a      	mov	r2, r3
 8004752:	2380      	movs	r3, #128	@ 0x80
 8004754:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	334d      	adds	r3, #77	@ 0x4d
 8004766:	2207      	movs	r2, #7
 8004768:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	78fa      	ldrb	r2, [r7, #3]
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f007 f9e1 	bl	800bb3a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f006 fc42 	bl	800b00a <USB_ReadChInterrupts>
 8004786:	4603      	mov	r3, r0
 8004788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800478c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004790:	d112      	bne.n	80047b8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f007 f9cd 	bl	800bb3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ac:	461a      	mov	r2, r3
 80047ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047b2:	6093      	str	r3, [r2, #8]
 80047b4:	f000 bd75 	b.w	80052a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	4611      	mov	r1, r2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f006 fc22 	bl	800b00a <USB_ReadChInterrupts>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 8128 	bne.w	8004a22 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047de:	461a      	mov	r2, r3
 80047e0:	2320      	movs	r3, #32
 80047e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	331b      	adds	r3, #27
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d119      	bne.n	800482e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	331b      	adds	r3, #27
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4413      	add	r3, r2
 8004816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	440a      	add	r2, r1
 8004824:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800482c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	799b      	ldrb	r3, [r3, #6]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01b      	beq.n	800486e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	3330      	adds	r3, #48	@ 0x30
 8004846:	6819      	ldr	r1, [r3, #0]
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	1ac9      	subs	r1, r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4403      	add	r3, r0
 800486a:	3338      	adds	r3, #56	@ 0x38
 800486c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	334d      	adds	r3, #77	@ 0x4d
 800487e:	2201      	movs	r2, #1
 8004880:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	3344      	adds	r3, #68	@ 0x44
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4413      	add	r3, r2
 800489e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a2:	461a      	mov	r2, r3
 80048a4:	2301      	movs	r3, #1
 80048a6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	3326      	adds	r3, #38	@ 0x26
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3326      	adds	r3, #38	@ 0x26
 80048ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d110      	bne.n	80048f6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f007 f92c 	bl	800bb3a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ee:	461a      	mov	r2, r3
 80048f0:	2310      	movs	r3, #16
 80048f2:	6093      	str	r3, [r2, #8]
 80048f4:	e03d      	b.n	8004972 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	3326      	adds	r3, #38	@ 0x26
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d00a      	beq.n	8004922 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	3326      	adds	r3, #38	@ 0x26
 800491c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800491e:	2b01      	cmp	r3, #1
 8004920:	d127      	bne.n	8004972 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	440a      	add	r2, r1
 8004938:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800493c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004940:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	334c      	adds	r3, #76	@ 0x4c
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	334c      	adds	r3, #76	@ 0x4c
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f00c fc73 	bl	8011258 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	799b      	ldrb	r3, [r3, #6]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d13b      	bne.n	80049f2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	3338      	adds	r3, #56	@ 0x38
 800498a:	6819      	ldr	r1, [r3, #0]
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4403      	add	r3, r0
 800499a:	3328      	adds	r3, #40	@ 0x28
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	440b      	add	r3, r1
 80049a0:	1e59      	subs	r1, r3, #1
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4403      	add	r3, r0
 80049b0:	3328      	adds	r3, #40	@ 0x28
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8470 	beq.w	80052a2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	333c      	adds	r3, #60	@ 0x3c
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	f083 0301 	eor.w	r3, r3, #1
 80049da:	b2d8      	uxtb	r0, r3
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	333c      	adds	r3, #60	@ 0x3c
 80049ea:	4602      	mov	r2, r0
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	f000 bc58 	b.w	80052a2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	333c      	adds	r3, #60	@ 0x3c
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	78fa      	ldrb	r2, [r7, #3]
 8004a06:	f083 0301 	eor.w	r3, r3, #1
 8004a0a:	b2d8      	uxtb	r0, r3
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	333c      	adds	r3, #60	@ 0x3c
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	f000 bc40 	b.w	80052a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f006 faed 	bl	800b00a <USB_ReadChInterrupts>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d131      	bne.n	8004a9e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a46:	461a      	mov	r2, r3
 8004a48:	2320      	movs	r3, #32
 8004a4a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	331a      	adds	r3, #26
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	f040 841f 	bne.w	80052a2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004a64:	78fa      	ldrb	r2, [r7, #3]
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	331b      	adds	r3, #27
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	334d      	adds	r3, #77	@ 0x4d
 8004a88:	2203      	movs	r2, #3
 8004a8a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	78fa      	ldrb	r2, [r7, #3]
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f007 f850 	bl	800bb3a <USB_HC_Halt>
 8004a9a:	f000 bc02 	b.w	80052a2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f006 faaf 	bl	800b00a <USB_ReadChInterrupts>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	f040 8305 	bne.w	80050c2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	334d      	adds	r3, #77	@ 0x4d
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d114      	bne.n	8004b0a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ae0:	78fa      	ldrb	r2, [r7, #3]
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	334d      	adds	r3, #77	@ 0x4d
 8004af0:	2202      	movs	r2, #2
 8004af2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	334c      	adds	r3, #76	@ 0x4c
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	e2cc      	b.n	80050a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004b0a:	78fa      	ldrb	r2, [r7, #3]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	334d      	adds	r3, #77	@ 0x4d
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b06      	cmp	r3, #6
 8004b1e:	d114      	bne.n	8004b4a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	334d      	adds	r3, #77	@ 0x4d
 8004b30:	2202      	movs	r2, #2
 8004b32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	334c      	adds	r3, #76	@ 0x4c
 8004b44:	2205      	movs	r2, #5
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e2ac      	b.n	80050a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	334d      	adds	r3, #77	@ 0x4d
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b07      	cmp	r3, #7
 8004b5e:	d00b      	beq.n	8004b78 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	334d      	adds	r3, #77	@ 0x4d
 8004b70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004b72:	2b09      	cmp	r3, #9
 8004b74:	f040 80a6 	bne.w	8004cc4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	334d      	adds	r3, #77	@ 0x4d
 8004b88:	2202      	movs	r2, #2
 8004b8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	3344      	adds	r3, #68	@ 0x44
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	1c59      	adds	r1, r3, #1
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4403      	add	r3, r0
 8004bac:	3344      	adds	r3, #68	@ 0x44
 8004bae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	3344      	adds	r3, #68	@ 0x44
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d943      	bls.n	8004c4e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3344      	adds	r3, #68	@ 0x44
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	331a      	adds	r3, #26
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d123      	bne.n	8004c38 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	331b      	adds	r3, #27
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	331c      	adds	r3, #28
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c36:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	334c      	adds	r3, #76	@ 0x4c
 8004c48:	2204      	movs	r2, #4
 8004c4a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c4c:	e229      	b.n	80050a2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	334c      	adds	r3, #76	@ 0x4c
 8004c5e:	2202      	movs	r2, #2
 8004c60:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3326      	adds	r3, #38	@ 0x26
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00b      	beq.n	8004c90 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	3326      	adds	r3, #38	@ 0x26
 8004c88:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	f040 8209 	bne.w	80050a2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ca6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cc2:	e1ee      	b.n	80050a2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	334d      	adds	r3, #77	@ 0x4d
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	f040 80c8 	bne.w	8004e6c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	334d      	adds	r3, #77	@ 0x4d
 8004cec:	2202      	movs	r2, #2
 8004cee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004cf0:	78fa      	ldrb	r2, [r7, #3]
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	331b      	adds	r3, #27
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	f040 81ce 	bne.w	80050a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004d08:	78fa      	ldrb	r2, [r7, #3]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	3326      	adds	r3, #38	@ 0x26
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d16b      	bne.n	8004df6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3348      	adds	r3, #72	@ 0x48
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	1c59      	adds	r1, r3, #1
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4403      	add	r3, r0
 8004d3e:	3348      	adds	r3, #72	@ 0x48
 8004d40:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	3348      	adds	r3, #72	@ 0x48
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d943      	bls.n	8004de0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3348      	adds	r3, #72	@ 0x48
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	331b      	adds	r3, #27
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3344      	adds	r3, #68	@ 0x44
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d809      	bhi.n	8004daa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	331c      	adds	r3, #28
 8004da6:	2201      	movs	r2, #1
 8004da8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	334c      	adds	r3, #76	@ 0x4c
 8004dda:	2204      	movs	r2, #4
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e014      	b.n	8004e0a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	334c      	adds	r3, #76	@ 0x4c
 8004df0:	2202      	movs	r2, #2
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	e009      	b.n	8004e0a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	334c      	adds	r3, #76	@ 0x4c
 8004e06:	2202      	movs	r2, #2
 8004e08:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	3326      	adds	r3, #38	@ 0x26
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00b      	beq.n	8004e38 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	011b      	lsls	r3, r3, #4
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	3326      	adds	r3, #38	@ 0x26
 8004e30:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	f040 8136 	bne.w	80050a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e4e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e56:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e64:	461a      	mov	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e11b      	b.n	80050a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	011b      	lsls	r3, r3, #4
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	334d      	adds	r3, #77	@ 0x4d
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	f040 8081 	bne.w	8004f86 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	334d      	adds	r3, #77	@ 0x4d
 8004e94:	2202      	movs	r2, #2
 8004e96:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	331b      	adds	r3, #27
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	f040 80fa 	bne.w	80050a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	334c      	adds	r3, #76	@ 0x4c
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	78fa      	ldrb	r2, [r7, #3]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004efe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f02:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f1e:	f023 0320 	bic.w	r3, r3, #32
 8004f22:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	3326      	adds	r3, #38	@ 0x26
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00b      	beq.n	8004f52 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3326      	adds	r3, #38	@ 0x26
 8004f4a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	f040 80a9 	bne.w	80050a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f68:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f70:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	e08e      	b.n	80050a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004f86:	78fa      	ldrb	r2, [r7, #3]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	334d      	adds	r3, #77	@ 0x4d
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d143      	bne.n	8005024 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f9c:	78fa      	ldrb	r2, [r7, #3]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	334d      	adds	r3, #77	@ 0x4d
 8004fac:	2202      	movs	r2, #2
 8004fae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	334c      	adds	r3, #76	@ 0x4c
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	3326      	adds	r3, #38	@ 0x26
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3326      	adds	r3, #38	@ 0x26
 8004fea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d159      	bne.n	80050a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ff0:	78fb      	ldrb	r3, [r7, #3]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005006:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800500e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800501c:	461a      	mov	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e03f      	b.n	80050a4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	334d      	adds	r3, #77	@ 0x4d
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b08      	cmp	r3, #8
 8005038:	d126      	bne.n	8005088 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800503a:	78fa      	ldrb	r2, [r7, #3]
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	334d      	adds	r3, #77	@ 0x4d
 800504a:	2202      	movs	r2, #2
 800504c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	3344      	adds	r3, #68	@ 0x44
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	1c59      	adds	r1, r3, #1
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4403      	add	r3, r0
 800506e:	3344      	adds	r3, #68	@ 0x44
 8005070:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	334c      	adds	r3, #76	@ 0x4c
 8005082:	2204      	movs	r2, #4
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	e00d      	b.n	80050a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005088:	78fa      	ldrb	r2, [r7, #3]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4613      	mov	r3, r2
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	334d      	adds	r3, #77	@ 0x4d
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b02      	cmp	r3, #2
 800509c:	f000 8100 	beq.w	80052a0 <HCD_HC_IN_IRQHandler+0xcca>
 80050a0:	e000      	b.n	80050a4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80050a2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80050a4:	78fa      	ldrb	r2, [r7, #3]
 80050a6:	6879      	ldr	r1, [r7, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	1a9b      	subs	r3, r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	334c      	adds	r3, #76	@ 0x4c
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f00c f8cc 	bl	8011258 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050c0:	e0ef      	b.n	80052a2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	4611      	mov	r1, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f005 ff9d 	bl	800b00a <USB_ReadChInterrupts>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d6:	2b40      	cmp	r3, #64	@ 0x40
 80050d8:	d12f      	bne.n	800513a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050e6:	461a      	mov	r2, r3
 80050e8:	2340      	movs	r3, #64	@ 0x40
 80050ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	4613      	mov	r3, r2
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	334d      	adds	r3, #77	@ 0x4d
 80050fc:	2205      	movs	r2, #5
 80050fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	331a      	adds	r3, #26
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	3344      	adds	r3, #68	@ 0x44
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	4611      	mov	r1, r2
 8005132:	4618      	mov	r0, r3
 8005134:	f006 fd01 	bl	800bb3a <USB_HC_Halt>
 8005138:	e0b3      	b.n	80052a2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f005 ff61 	bl	800b00a <USB_ReadChInterrupts>
 8005148:	4603      	mov	r3, r0
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	2b10      	cmp	r3, #16
 8005150:	f040 80a7 	bne.w	80052a2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	3326      	adds	r3, #38	@ 0x26
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d11b      	bne.n	80051a2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	3344      	adds	r3, #68	@ 0x44
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	334d      	adds	r3, #77	@ 0x4d
 800518e:	2204      	movs	r2, #4
 8005190:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f006 fccd 	bl	800bb3a <USB_HC_Halt>
 80051a0:	e03f      	b.n	8005222 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80051a2:	78fa      	ldrb	r2, [r7, #3]
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	3326      	adds	r3, #38	@ 0x26
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80051b8:	78fa      	ldrb	r2, [r7, #3]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	3326      	adds	r3, #38	@ 0x26
 80051c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d129      	bne.n	8005222 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	3344      	adds	r3, #68	@ 0x44
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	799b      	ldrb	r3, [r3, #6]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HCD_HC_IN_IRQHandler+0xc2a>
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	331b      	adds	r3, #27
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d110      	bne.n	8005222 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	334d      	adds	r3, #77	@ 0x4d
 8005210:	2204      	movs	r2, #4
 8005212:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f006 fc8c 	bl	800bb3a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005222:	78fa      	ldrb	r2, [r7, #3]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	331b      	adds	r3, #27
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d129      	bne.n	800528c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	331b      	adds	r3, #27
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	440a      	add	r2, r1
 8005262:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800526a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800526c:	78fb      	ldrb	r3, [r7, #3]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4413      	add	r3, r2
 8005274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	78fa      	ldrb	r2, [r7, #3]
 800527c:	0151      	lsls	r1, r2, #5
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	440a      	add	r2, r1
 8005282:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005286:	f043 0320 	orr.w	r3, r3, #32
 800528a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800528c:	78fb      	ldrb	r3, [r7, #3]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4413      	add	r3, r2
 8005294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005298:	461a      	mov	r2, r3
 800529a:	2310      	movs	r3, #16
 800529c:	6093      	str	r3, [r2, #8]
 800529e:	e000      	b.n	80052a2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80052a0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f005 fe9f 	bl	800b00a <USB_ReadChInterrupts>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d11b      	bne.n	800530e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e2:	461a      	mov	r2, r3
 80052e4:	2304      	movs	r3, #4
 80052e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80052e8:	78fa      	ldrb	r2, [r7, #3]
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	334d      	adds	r3, #77	@ 0x4d
 80052f8:	2207      	movs	r2, #7
 80052fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	4611      	mov	r1, r2
 8005304:	4618      	mov	r0, r3
 8005306:	f006 fc18 	bl	800bb3a <USB_HC_Halt>
 800530a:	f000 bc89 	b.w	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	4611      	mov	r1, r2
 8005316:	4618      	mov	r0, r3
 8005318:	f005 fe77 	bl	800b00a <USB_ReadChInterrupts>
 800531c:	4603      	mov	r3, r0
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b20      	cmp	r3, #32
 8005324:	f040 8082 	bne.w	800542c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005334:	461a      	mov	r2, r3
 8005336:	2320      	movs	r3, #32
 8005338:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	3319      	adds	r3, #25
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d124      	bne.n	800539a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	3319      	adds	r3, #25
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005364:	78fa      	ldrb	r2, [r7, #3]
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	334c      	adds	r3, #76	@ 0x4c
 8005374:	2202      	movs	r2, #2
 8005376:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005378:	78fa      	ldrb	r2, [r7, #3]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	334d      	adds	r3, #77	@ 0x4d
 8005388:	2203      	movs	r2, #3
 800538a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	4611      	mov	r1, r2
 8005394:	4618      	mov	r0, r3
 8005396:	f006 fbd0 	bl	800bb3a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	331a      	adds	r3, #26
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	f040 8437 	bne.w	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	331b      	adds	r3, #27
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f040 842b 	bne.w	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80053ca:	78fa      	ldrb	r2, [r7, #3]
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	1a9b      	subs	r3, r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	3326      	adds	r3, #38	@ 0x26
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d009      	beq.n	80053f4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	331b      	adds	r3, #27
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80053f4:	78fa      	ldrb	r2, [r7, #3]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	1a9b      	subs	r3, r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	334d      	adds	r3, #77	@ 0x4d
 8005404:	2203      	movs	r2, #3
 8005406:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f006 fb92 	bl	800bb3a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	3344      	adds	r3, #68	@ 0x44
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e3f9      	b.n	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	4611      	mov	r1, r2
 8005434:	4618      	mov	r0, r3
 8005436:	f005 fde8 	bl	800b00a <USB_ReadChInterrupts>
 800543a:	4603      	mov	r3, r0
 800543c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005444:	d111      	bne.n	800546a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005452:	461a      	mov	r2, r3
 8005454:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005458:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	4611      	mov	r1, r2
 8005462:	4618      	mov	r0, r3
 8005464:	f006 fb69 	bl	800bb3a <USB_HC_Halt>
 8005468:	e3da      	b.n	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	78fa      	ldrb	r2, [r7, #3]
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f005 fdc9 	bl	800b00a <USB_ReadChInterrupts>
 8005478:	4603      	mov	r3, r0
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b01      	cmp	r3, #1
 8005480:	d168      	bne.n	8005554 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005482:	78fa      	ldrb	r2, [r7, #3]
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	3344      	adds	r3, #68	@ 0x44
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	78fa      	ldrb	r2, [r7, #3]
 800549c:	4611      	mov	r1, r2
 800549e:	4618      	mov	r0, r3
 80054a0:	f005 fdb3 	bl	800b00a <USB_ReadChInterrupts>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054aa:	2b40      	cmp	r3, #64	@ 0x40
 80054ac:	d112      	bne.n	80054d4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	3319      	adds	r3, #25
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ce:	461a      	mov	r2, r3
 80054d0:	2340      	movs	r3, #64	@ 0x40
 80054d2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	331b      	adds	r3, #27
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d019      	beq.n	800551e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	331b      	adds	r3, #27
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4413      	add	r3, r2
 8005506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	440a      	add	r2, r1
 8005514:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800551c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800552a:	461a      	mov	r2, r3
 800552c:	2301      	movs	r3, #1
 800552e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	334d      	adds	r3, #77	@ 0x4d
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f006 faf4 	bl	800bb3a <USB_HC_Halt>
 8005552:	e365      	b.n	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	4611      	mov	r1, r2
 800555c:	4618      	mov	r0, r3
 800555e:	f005 fd54 	bl	800b00a <USB_ReadChInterrupts>
 8005562:	4603      	mov	r3, r0
 8005564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005568:	2b40      	cmp	r3, #64	@ 0x40
 800556a:	d139      	bne.n	80055e0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	334d      	adds	r3, #77	@ 0x4d
 800557c:	2205      	movs	r2, #5
 800557e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	331a      	adds	r3, #26
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	3319      	adds	r3, #25
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3344      	adds	r3, #68	@ 0x44
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	78fa      	ldrb	r2, [r7, #3]
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f006 fab7 	bl	800bb3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d8:	461a      	mov	r2, r3
 80055da:	2340      	movs	r3, #64	@ 0x40
 80055dc:	6093      	str	r3, [r2, #8]
 80055de:	e31f      	b.n	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	78fa      	ldrb	r2, [r7, #3]
 80055e6:	4611      	mov	r1, r2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f005 fd0e 	bl	800b00a <USB_ReadChInterrupts>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d11a      	bne.n	800562e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005604:	461a      	mov	r2, r3
 8005606:	2308      	movs	r3, #8
 8005608:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	334d      	adds	r3, #77	@ 0x4d
 800561a:	2206      	movs	r2, #6
 800561c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	4611      	mov	r1, r2
 8005626:	4618      	mov	r0, r3
 8005628:	f006 fa87 	bl	800bb3a <USB_HC_Halt>
 800562c:	e2f8      	b.n	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	78fa      	ldrb	r2, [r7, #3]
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f005 fce7 	bl	800b00a <USB_ReadChInterrupts>
 800563c:	4603      	mov	r3, r0
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b10      	cmp	r3, #16
 8005644:	d144      	bne.n	80056d0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005646:	78fa      	ldrb	r2, [r7, #3]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	3344      	adds	r3, #68	@ 0x44
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	334d      	adds	r3, #77	@ 0x4d
 800566a:	2204      	movs	r2, #4
 800566c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	3319      	adds	r3, #25
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d114      	bne.n	80056ae <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005684:	78fa      	ldrb	r2, [r7, #3]
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	3318      	adds	r3, #24
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	3319      	adds	r3, #25
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	78fa      	ldrb	r2, [r7, #3]
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f006 fa3f 	bl	800bb3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c8:	461a      	mov	r2, r3
 80056ca:	2310      	movs	r3, #16
 80056cc:	6093      	str	r3, [r2, #8]
 80056ce:	e2a7      	b.n	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	4611      	mov	r1, r2
 80056d8:	4618      	mov	r0, r3
 80056da:	f005 fc96 	bl	800b00a <USB_ReadChInterrupts>
 80056de:	4603      	mov	r3, r0
 80056e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e4:	2b80      	cmp	r3, #128	@ 0x80
 80056e6:	f040 8083 	bne.w	80057f0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	799b      	ldrb	r3, [r3, #6]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d111      	bne.n	8005716 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80056f2:	78fa      	ldrb	r2, [r7, #3]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	334d      	adds	r3, #77	@ 0x4d
 8005702:	2207      	movs	r2, #7
 8005704:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	78fa      	ldrb	r2, [r7, #3]
 800570c:	4611      	mov	r1, r2
 800570e:	4618      	mov	r0, r3
 8005710:	f006 fa13 	bl	800bb3a <USB_HC_Halt>
 8005714:	e062      	b.n	80057dc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	1a9b      	subs	r3, r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	3344      	adds	r3, #68	@ 0x44
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	1c59      	adds	r1, r3, #1
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4403      	add	r3, r0
 8005736:	3344      	adds	r3, #68	@ 0x44
 8005738:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800573a:	78fa      	ldrb	r2, [r7, #3]
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	3344      	adds	r3, #68	@ 0x44
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d922      	bls.n	8005796 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005750:	78fa      	ldrb	r2, [r7, #3]
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3344      	adds	r3, #68	@ 0x44
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	4613      	mov	r3, r2
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	334c      	adds	r3, #76	@ 0x4c
 8005774:	2204      	movs	r2, #4
 8005776:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005778:	78fa      	ldrb	r2, [r7, #3]
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	440b      	add	r3, r1
 8005786:	334c      	adds	r3, #76	@ 0x4c
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f00b fd62 	bl	8011258 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005794:	e022      	b.n	80057dc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005796:	78fa      	ldrb	r2, [r7, #3]
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	440b      	add	r3, r1
 80057a4:	334c      	adds	r3, #76	@ 0x4c
 80057a6:	2202      	movs	r2, #2
 80057a8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057c0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057c8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d6:	461a      	mov	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057e8:	461a      	mov	r2, r3
 80057ea:	2380      	movs	r3, #128	@ 0x80
 80057ec:	6093      	str	r3, [r2, #8]
 80057ee:	e217      	b.n	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	78fa      	ldrb	r2, [r7, #3]
 80057f6:	4611      	mov	r1, r2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f005 fc06 	bl	800b00a <USB_ReadChInterrupts>
 80057fe:	4603      	mov	r3, r0
 8005800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005808:	d11b      	bne.n	8005842 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800580a:	78fa      	ldrb	r2, [r7, #3]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	334d      	adds	r3, #77	@ 0x4d
 800581a:	2209      	movs	r2, #9
 800581c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	78fa      	ldrb	r2, [r7, #3]
 8005824:	4611      	mov	r1, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f006 f987 	bl	800bb3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	4413      	add	r3, r2
 8005834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005838:	461a      	mov	r2, r3
 800583a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800583e:	6093      	str	r3, [r2, #8]
 8005840:	e1ee      	b.n	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	78fa      	ldrb	r2, [r7, #3]
 8005848:	4611      	mov	r1, r2
 800584a:	4618      	mov	r0, r3
 800584c:	f005 fbdd 	bl	800b00a <USB_ReadChInterrupts>
 8005850:	4603      	mov	r3, r0
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b02      	cmp	r3, #2
 8005858:	f040 81df 	bne.w	8005c1a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	4413      	add	r3, r2
 8005864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005868:	461a      	mov	r2, r3
 800586a:	2302      	movs	r3, #2
 800586c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800586e:	78fa      	ldrb	r2, [r7, #3]
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	440b      	add	r3, r1
 800587c:	334d      	adds	r3, #77	@ 0x4d
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b01      	cmp	r3, #1
 8005882:	f040 8093 	bne.w	80059ac <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005886:	78fa      	ldrb	r2, [r7, #3]
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	334d      	adds	r3, #77	@ 0x4d
 8005896:	2202      	movs	r2, #2
 8005898:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	334c      	adds	r3, #76	@ 0x4c
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80058ae:	78fa      	ldrb	r2, [r7, #3]
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	1a9b      	subs	r3, r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	3326      	adds	r3, #38	@ 0x26
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d00b      	beq.n	80058dc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	3326      	adds	r3, #38	@ 0x26
 80058d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	f040 8190 	bne.w	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	799b      	ldrb	r3, [r3, #6]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d115      	bne.n	8005910 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	333d      	adds	r3, #61	@ 0x3d
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	f083 0301 	eor.w	r3, r3, #1
 80058fc:	b2d8      	uxtb	r0, r3
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	333d      	adds	r3, #61	@ 0x3d
 800590c:	4602      	mov	r2, r0
 800590e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	799b      	ldrb	r3, [r3, #6]
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 8171 	bne.w	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
 800591a:	78fa      	ldrb	r2, [r7, #3]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	3334      	adds	r3, #52	@ 0x34
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8165 	beq.w	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	3334      	adds	r3, #52	@ 0x34
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	78fa      	ldrb	r2, [r7, #3]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4403      	add	r3, r0
 8005952:	3328      	adds	r3, #40	@ 0x28
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	440b      	add	r3, r1
 8005958:	1e59      	subs	r1, r3, #1
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4403      	add	r3, r0
 8005968:	3328      	adds	r3, #40	@ 0x28
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005970:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 813f 	beq.w	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	333d      	adds	r3, #61	@ 0x3d
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	78fa      	ldrb	r2, [r7, #3]
 8005992:	f083 0301 	eor.w	r3, r3, #1
 8005996:	b2d8      	uxtb	r0, r3
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	333d      	adds	r3, #61	@ 0x3d
 80059a6:	4602      	mov	r2, r0
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e127      	b.n	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	334d      	adds	r3, #77	@ 0x4d
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d120      	bne.n	8005a04 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80059c2:	78fa      	ldrb	r2, [r7, #3]
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	440b      	add	r3, r1
 80059d0:	334d      	adds	r3, #77	@ 0x4d
 80059d2:	2202      	movs	r2, #2
 80059d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80059d6:	78fa      	ldrb	r2, [r7, #3]
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	331b      	adds	r3, #27
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	f040 8107 	bne.w	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059ee:	78fa      	ldrb	r2, [r7, #3]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	334c      	adds	r3, #76	@ 0x4c
 80059fe:	2202      	movs	r2, #2
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e0fb      	b.n	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	334d      	adds	r3, #77	@ 0x4d
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d13a      	bne.n	8005a90 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a1a:	78fa      	ldrb	r2, [r7, #3]
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	334d      	adds	r3, #77	@ 0x4d
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	334c      	adds	r3, #76	@ 0x4c
 8005a3e:	2202      	movs	r2, #2
 8005a40:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005a42:	78fa      	ldrb	r2, [r7, #3]
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	1a9b      	subs	r3, r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	331b      	adds	r3, #27
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	f040 80d1 	bne.w	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	331b      	adds	r3, #27
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	78fa      	ldrb	r2, [r7, #3]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a8c:	6053      	str	r3, [r2, #4]
 8005a8e:	e0b5      	b.n	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	334d      	adds	r3, #77	@ 0x4d
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	d114      	bne.n	8005ad0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005aa6:	78fa      	ldrb	r2, [r7, #3]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	334d      	adds	r3, #77	@ 0x4d
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005aba:	78fa      	ldrb	r2, [r7, #3]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	334c      	adds	r3, #76	@ 0x4c
 8005aca:	2202      	movs	r2, #2
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e095      	b.n	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	011b      	lsls	r3, r3, #4
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	334d      	adds	r3, #77	@ 0x4d
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d114      	bne.n	8005b10 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	334d      	adds	r3, #77	@ 0x4d
 8005af6:	2202      	movs	r2, #2
 8005af8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	334c      	adds	r3, #76	@ 0x4c
 8005b0a:	2205      	movs	r2, #5
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e075      	b.n	8005bfc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005b10:	78fa      	ldrb	r2, [r7, #3]
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	011b      	lsls	r3, r3, #4
 8005b18:	1a9b      	subs	r3, r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	334d      	adds	r3, #77	@ 0x4d
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b07      	cmp	r3, #7
 8005b24:	d00a      	beq.n	8005b3c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	011b      	lsls	r3, r3, #4
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	334d      	adds	r3, #77	@ 0x4d
 8005b36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005b38:	2b09      	cmp	r3, #9
 8005b3a:	d170      	bne.n	8005c1e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b3c:	78fa      	ldrb	r2, [r7, #3]
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	334d      	adds	r3, #77	@ 0x4d
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005b50:	78fa      	ldrb	r2, [r7, #3]
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	4613      	mov	r3, r2
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	1a9b      	subs	r3, r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	3344      	adds	r3, #68	@ 0x44
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	1c59      	adds	r1, r3, #1
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4613      	mov	r3, r2
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4403      	add	r3, r0
 8005b70:	3344      	adds	r3, #68	@ 0x44
 8005b72:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b74:	78fa      	ldrb	r2, [r7, #3]
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	3344      	adds	r3, #68	@ 0x44
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d914      	bls.n	8005bb4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005b8a:	78fa      	ldrb	r2, [r7, #3]
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	3344      	adds	r3, #68	@ 0x44
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005b9e:	78fa      	ldrb	r2, [r7, #3]
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	334c      	adds	r3, #76	@ 0x4c
 8005bae:	2204      	movs	r2, #4
 8005bb0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bb2:	e022      	b.n	8005bfa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005bb4:	78fa      	ldrb	r2, [r7, #3]
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	334c      	adds	r3, #76	@ 0x4c
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bde:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005be6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bfa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	334c      	adds	r3, #76	@ 0x4c
 8005c0c:	781a      	ldrb	r2, [r3, #0]
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f00b fb20 	bl	8011258 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c18:	e002      	b.n	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005c1a:	bf00      	nop
 8005c1c:	e000      	b.n	8005c20 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005c1e:	bf00      	nop
  }
}
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b08a      	sub	sp, #40	@ 0x28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	0c5b      	lsrs	r3, r3, #17
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	091b      	lsrs	r3, r3, #4
 8005c56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c5a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d004      	beq.n	8005c6c <HCD_RXQLVL_IRQHandler+0x46>
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b05      	cmp	r3, #5
 8005c66:	f000 80b6 	beq.w	8005dd6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005c6a:	e0b7      	b.n	8005ddc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80b3 	beq.w	8005dda <HCD_RXQLVL_IRQHandler+0x1b4>
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	1a9b      	subs	r3, r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	332c      	adds	r3, #44	@ 0x2c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 80a7 	beq.w	8005dda <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4613      	mov	r3, r2
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	1a9b      	subs	r3, r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	3338      	adds	r3, #56	@ 0x38
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	18d1      	adds	r1, r2, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4403      	add	r3, r0
 8005cb0:	3334      	adds	r3, #52	@ 0x34
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4299      	cmp	r1, r3
 8005cb6:	f200 8083 	bhi.w	8005dc0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	332c      	adds	r3, #44	@ 0x2c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	b292      	uxth	r2, r2
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f005 f92d 	bl	800af34 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	1a9b      	subs	r3, r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	332c      	adds	r3, #44	@ 0x2c
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	18d1      	adds	r1, r2, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4403      	add	r3, r0
 8005cfe:	332c      	adds	r3, #44	@ 0x2c
 8005d00:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4613      	mov	r3, r2
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3338      	adds	r3, #56	@ 0x38
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	18d1      	adds	r1, r2, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4403      	add	r3, r0
 8005d26:	3338      	adds	r3, #56	@ 0x38
 8005d28:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	0cdb      	lsrs	r3, r3, #19
 8005d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d3e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	4613      	mov	r3, r2
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	1a9b      	subs	r3, r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	3328      	adds	r3, #40	@ 0x28
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d13f      	bne.n	8005dda <HCD_RXQLVL_IRQHandler+0x1b4>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d03c      	beq.n	8005dda <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d76:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d7e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4613      	mov	r3, r2
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	440b      	add	r3, r1
 8005da0:	333c      	adds	r3, #60	@ 0x3c
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f083 0301 	eor.w	r3, r3, #1
 8005da8:	b2d8      	uxtb	r0, r3
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4613      	mov	r3, r2
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	333c      	adds	r3, #60	@ 0x3c
 8005dba:	4602      	mov	r2, r0
 8005dbc:	701a      	strb	r2, [r3, #0]
      break;
 8005dbe:	e00c      	b.n	8005dda <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	334c      	adds	r3, #76	@ 0x4c
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	701a      	strb	r2, [r3, #0]
      break;
 8005dd4:	e001      	b.n	8005dda <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005dd6:	bf00      	nop
 8005dd8:	e000      	b.n	8005ddc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005dda:	bf00      	nop
  }
}
 8005ddc:	bf00      	nop
 8005dde:	3728      	adds	r7, #40	@ 0x28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005e10:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d10b      	bne.n	8005e34 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d102      	bne.n	8005e2c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f00b f9fa 	bl	8011220 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f043 0302 	orr.w	r3, r3, #2
 8005e32:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d132      	bne.n	8005ea4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f043 0308 	orr.w	r3, r3, #8
 8005e44:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d126      	bne.n	8005e9e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7a5b      	ldrb	r3, [r3, #9]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d113      	bne.n	8005e80 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005e5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e62:	d106      	bne.n	8005e72 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2102      	movs	r1, #2
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f005 f9e6 	bl	800b23c <USB_InitFSLSPClkSel>
 8005e70:	e011      	b.n	8005e96 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2101      	movs	r1, #1
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f005 f9df 	bl	800b23c <USB_InitFSLSPClkSel>
 8005e7e:	e00a      	b.n	8005e96 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	79db      	ldrb	r3, [r3, #7]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d106      	bne.n	8005e96 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005e94:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f00b f9ec 	bl	8011274 <HAL_HCD_PortEnabled_Callback>
 8005e9c:	e002      	b.n	8005ea4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f00b f9f6 	bl	8011290 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	d103      	bne.n	8005eb6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f043 0320 	orr.w	r3, r3, #32
 8005eb4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	6013      	str	r3, [r2, #0]
}
 8005ec2:	bf00      	nop
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e12b      	b.n	8006136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fb faaa 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2224      	movs	r2, #36	@ 0x24
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f30:	f000 ff82 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8005f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4a81      	ldr	r2, [pc, #516]	@ (8006140 <HAL_I2C_Init+0x274>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d807      	bhi.n	8005f50 <HAL_I2C_Init+0x84>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a80      	ldr	r2, [pc, #512]	@ (8006144 <HAL_I2C_Init+0x278>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	bf94      	ite	ls
 8005f48:	2301      	movls	r3, #1
 8005f4a:	2300      	movhi	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	e006      	b.n	8005f5e <HAL_I2C_Init+0x92>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a7d      	ldr	r2, [pc, #500]	@ (8006148 <HAL_I2C_Init+0x27c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	bf94      	ite	ls
 8005f58:	2301      	movls	r3, #1
 8005f5a:	2300      	movhi	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0e7      	b.n	8006136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a78      	ldr	r2, [pc, #480]	@ (800614c <HAL_I2C_Init+0x280>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	0c9b      	lsrs	r3, r3, #18
 8005f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4a6a      	ldr	r2, [pc, #424]	@ (8006140 <HAL_I2C_Init+0x274>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d802      	bhi.n	8005fa0 <HAL_I2C_Init+0xd4>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	e009      	b.n	8005fb4 <HAL_I2C_Init+0xe8>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	4a69      	ldr	r2, [pc, #420]	@ (8006150 <HAL_I2C_Init+0x284>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	099b      	lsrs	r3, r3, #6
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005fc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	495c      	ldr	r1, [pc, #368]	@ (8006140 <HAL_I2C_Init+0x274>)
 8005fd0:	428b      	cmp	r3, r1
 8005fd2:	d819      	bhi.n	8006008 <HAL_I2C_Init+0x13c>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	1e59      	subs	r1, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fe2:	1c59      	adds	r1, r3, #1
 8005fe4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005fe8:	400b      	ands	r3, r1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_I2C_Init+0x138>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1e59      	subs	r1, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006002:	e051      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006004:	2304      	movs	r3, #4
 8006006:	e04f      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d111      	bne.n	8006034 <HAL_I2C_Init+0x168>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1e58      	subs	r0, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6859      	ldr	r1, [r3, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	440b      	add	r3, r1
 800601e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006022:	3301      	adds	r3, #1
 8006024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006028:	2b00      	cmp	r3, #0
 800602a:	bf0c      	ite	eq
 800602c:	2301      	moveq	r3, #1
 800602e:	2300      	movne	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	e012      	b.n	800605a <HAL_I2C_Init+0x18e>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	1e58      	subs	r0, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6859      	ldr	r1, [r3, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	0099      	lsls	r1, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	fbb0 f3f3 	udiv	r3, r0, r3
 800604a:	3301      	adds	r3, #1
 800604c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006050:	2b00      	cmp	r3, #0
 8006052:	bf0c      	ite	eq
 8006054:	2301      	moveq	r3, #1
 8006056:	2300      	movne	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_I2C_Init+0x196>
 800605e:	2301      	movs	r3, #1
 8006060:	e022      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10e      	bne.n	8006088 <HAL_I2C_Init+0x1bc>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1e58      	subs	r0, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	460b      	mov	r3, r1
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	440b      	add	r3, r1
 8006078:	fbb0 f3f3 	udiv	r3, r0, r3
 800607c:	3301      	adds	r3, #1
 800607e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006086:	e00f      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	1e58      	subs	r0, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6859      	ldr	r1, [r3, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	0099      	lsls	r1, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	fbb0 f3f3 	udiv	r3, r0, r3
 800609e:	3301      	adds	r3, #1
 80060a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	6809      	ldr	r1, [r1, #0]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69da      	ldr	r2, [r3, #28]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80060d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6911      	ldr	r1, [r2, #16]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	68d2      	ldr	r2, [r2, #12]
 80060e2:	4311      	orrs	r1, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	000186a0 	.word	0x000186a0
 8006144:	001e847f 	.word	0x001e847f
 8006148:	003d08ff 	.word	0x003d08ff
 800614c:	431bde83 	.word	0x431bde83
 8006150:	10624dd3 	.word	0x10624dd3

08006154 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e0bf      	b.n	80062e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fb f9e4 	bl	8001548 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006196:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6999      	ldr	r1, [r3, #24]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80061ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6899      	ldr	r1, [r3, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b4a      	ldr	r3, [pc, #296]	@ (80062f0 <HAL_LTDC_Init+0x19c>)
 80061c8:	400b      	ands	r3, r1
 80061ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	041b      	lsls	r3, r3, #16
 80061d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6899      	ldr	r1, [r3, #8]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	430a      	orrs	r2, r1
 80061e8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68d9      	ldr	r1, [r3, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	4b3e      	ldr	r3, [pc, #248]	@ (80062f0 <HAL_LTDC_Init+0x19c>)
 80061f6:	400b      	ands	r3, r1
 80061f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	041b      	lsls	r3, r3, #16
 8006200:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68d9      	ldr	r1, [r3, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1a      	ldr	r2, [r3, #32]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6919      	ldr	r1, [r3, #16]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4b33      	ldr	r3, [pc, #204]	@ (80062f0 <HAL_LTDC_Init+0x19c>)
 8006224:	400b      	ands	r3, r1
 8006226:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622c:	041b      	lsls	r3, r3, #16
 800622e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6919      	ldr	r1, [r3, #16]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6959      	ldr	r1, [r3, #20]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b27      	ldr	r3, [pc, #156]	@ (80062f0 <HAL_LTDC_Init+0x19c>)
 8006252:	400b      	ands	r3, r1
 8006254:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6959      	ldr	r1, [r3, #20]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	431a      	orrs	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006284:	041b      	lsls	r3, r3, #16
 8006286:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006296:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0206 	orr.w	r2, r2, #6
 80062c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	f000f800 	.word	0xf000f800

080062f4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006302:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800630a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d023      	beq.n	800635e <HAL_LTDC_IRQHandler+0x6a>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01e      	beq.n	800635e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0204 	bic.w	r2, r2, #4
 800632e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2204      	movs	r2, #4
 8006336:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800633e:	f043 0201 	orr.w	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2204      	movs	r2, #4
 800634c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f86f 	bl	800643c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d023      	beq.n	80063b0 <HAL_LTDC_IRQHandler+0xbc>
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01e      	beq.n	80063b0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0202 	bic.w	r2, r2, #2
 8006380:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2202      	movs	r2, #2
 8006388:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006390:	f043 0202 	orr.w	r2, r3, #2
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2204      	movs	r2, #4
 800639e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f846 	bl	800643c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01b      	beq.n	80063f2 <HAL_LTDC_IRQHandler+0xfe>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d016      	beq.n	80063f2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0201 	bic.w	r2, r2, #1
 80063d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2201      	movs	r2, #1
 80063da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f82f 	bl	8006450 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01b      	beq.n	8006434 <HAL_LTDC_IRQHandler+0x140>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d016      	beq.n	8006434 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0208 	bic.w	r2, r2, #8
 8006414:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2208      	movs	r2, #8
 800641c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f818 	bl	8006464 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006434:	bf00      	nop
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006478:	b5b0      	push	{r4, r5, r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_LTDC_ConfigLayer+0x1a>
 800648e:	2302      	movs	r3, #2
 8006490:	e02c      	b.n	80064ec <HAL_LTDC_ConfigLayer+0x74>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2134      	movs	r1, #52	@ 0x34
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4614      	mov	r4, r2
 80064b6:	461d      	mov	r5, r3
 80064b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f811 	bl	80064f4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2201      	movs	r2, #1
 80064d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bdb0      	pop	{r4, r5, r7, pc}

080064f4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b089      	sub	sp, #36	@ 0x24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	0c1b      	lsrs	r3, r3, #16
 800650c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006510:	4413      	add	r3, r2
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	01db      	lsls	r3, r3, #7
 8006520:	4413      	add	r3, r2
 8006522:	3384      	adds	r3, #132	@ 0x84
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	4611      	mov	r1, r2
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	01d2      	lsls	r2, r2, #7
 8006530:	440a      	add	r2, r1
 8006532:	3284      	adds	r2, #132	@ 0x84
 8006534:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006538:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800654a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800654c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	01db      	lsls	r3, r3, #7
 8006558:	440b      	add	r3, r1
 800655a:	3384      	adds	r3, #132	@ 0x84
 800655c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006562:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006572:	4413      	add	r3, r2
 8006574:	041b      	lsls	r3, r3, #16
 8006576:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	01db      	lsls	r3, r3, #7
 8006582:	4413      	add	r3, r2
 8006584:	3384      	adds	r3, #132	@ 0x84
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	4611      	mov	r1, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	01d2      	lsls	r2, r2, #7
 8006592:	440a      	add	r2, r1
 8006594:	3284      	adds	r2, #132	@ 0x84
 8006596:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800659a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065aa:	4413      	add	r3, r2
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4619      	mov	r1, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	01db      	lsls	r3, r3, #7
 80065b8:	440b      	add	r3, r1
 80065ba:	3384      	adds	r3, #132	@ 0x84
 80065bc:	4619      	mov	r1, r3
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	461a      	mov	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	01db      	lsls	r3, r3, #7
 80065ce:	4413      	add	r3, r2
 80065d0:	3384      	adds	r3, #132	@ 0x84
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	4611      	mov	r1, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	01d2      	lsls	r2, r2, #7
 80065de:	440a      	add	r2, r1
 80065e0:	3284      	adds	r2, #132	@ 0x84
 80065e2:	f023 0307 	bic.w	r3, r3, #7
 80065e6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	01db      	lsls	r3, r3, #7
 80065f2:	4413      	add	r3, r2
 80065f4:	3384      	adds	r3, #132	@ 0x84
 80065f6:	461a      	mov	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	061b      	lsls	r3, r3, #24
 8006618:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	01db      	lsls	r3, r3, #7
 8006624:	4413      	add	r3, r2
 8006626:	3384      	adds	r3, #132	@ 0x84
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	01db      	lsls	r3, r3, #7
 8006634:	4413      	add	r3, r2
 8006636:	3384      	adds	r3, #132	@ 0x84
 8006638:	461a      	mov	r2, r3
 800663a:	2300      	movs	r3, #0
 800663c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006644:	461a      	mov	r2, r3
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	431a      	orrs	r2, r3
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	431a      	orrs	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4619      	mov	r1, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	01db      	lsls	r3, r3, #7
 8006658:	440b      	add	r3, r1
 800665a:	3384      	adds	r3, #132	@ 0x84
 800665c:	4619      	mov	r1, r3
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	01db      	lsls	r3, r3, #7
 800666e:	4413      	add	r3, r2
 8006670:	3384      	adds	r3, #132	@ 0x84
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	4611      	mov	r1, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	01d2      	lsls	r2, r2, #7
 800667e:	440a      	add	r2, r1
 8006680:	3284      	adds	r2, #132	@ 0x84
 8006682:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006686:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	01db      	lsls	r3, r3, #7
 8006692:	4413      	add	r3, r2
 8006694:	3384      	adds	r3, #132	@ 0x84
 8006696:	461a      	mov	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	01db      	lsls	r3, r3, #7
 80066a8:	4413      	add	r3, r2
 80066aa:	3384      	adds	r3, #132	@ 0x84
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	4611      	mov	r1, r2
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	01d2      	lsls	r2, r2, #7
 80066b8:	440a      	add	r2, r1
 80066ba:	3284      	adds	r2, #132	@ 0x84
 80066bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80066c0:	f023 0307 	bic.w	r3, r3, #7
 80066c4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	69da      	ldr	r2, [r3, #28]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	6809      	ldr	r1, [r1, #0]
 80066d2:	4608      	mov	r0, r1
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	01c9      	lsls	r1, r1, #7
 80066d8:	4401      	add	r1, r0
 80066da:	3184      	adds	r1, #132	@ 0x84
 80066dc:	4313      	orrs	r3, r2
 80066de:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	01db      	lsls	r3, r3, #7
 80066ea:	4413      	add	r3, r2
 80066ec:	3384      	adds	r3, #132	@ 0x84
 80066ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	01db      	lsls	r3, r3, #7
 80066fa:	4413      	add	r3, r2
 80066fc:	3384      	adds	r3, #132	@ 0x84
 80066fe:	461a      	mov	r2, r3
 8006700:	2300      	movs	r3, #0
 8006702:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	01db      	lsls	r3, r3, #7
 800670e:	4413      	add	r3, r2
 8006710:	3384      	adds	r3, #132	@ 0x84
 8006712:	461a      	mov	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d102      	bne.n	8006728 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006722:	2304      	movs	r3, #4
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	e01b      	b.n	8006760 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d102      	bne.n	8006736 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006730:	2303      	movs	r3, #3
 8006732:	61fb      	str	r3, [r7, #28]
 8006734:	e014      	b.n	8006760 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b04      	cmp	r3, #4
 800673c:	d00b      	beq.n	8006756 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006742:	2b02      	cmp	r3, #2
 8006744:	d007      	beq.n	8006756 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800674a:	2b03      	cmp	r3, #3
 800674c:	d003      	beq.n	8006756 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006752:	2b07      	cmp	r3, #7
 8006754:	d102      	bne.n	800675c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006756:	2302      	movs	r3, #2
 8006758:	61fb      	str	r3, [r7, #28]
 800675a:	e001      	b.n	8006760 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800675c:	2301      	movs	r3, #1
 800675e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	01db      	lsls	r3, r3, #7
 800676a:	4413      	add	r3, r2
 800676c:	3384      	adds	r3, #132	@ 0x84
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	6812      	ldr	r2, [r2, #0]
 8006774:	4611      	mov	r1, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	01d2      	lsls	r2, r2, #7
 800677a:	440a      	add	r2, r1
 800677c:	3284      	adds	r2, #132	@ 0x84
 800677e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006782:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6859      	ldr	r1, [r3, #4]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	1acb      	subs	r3, r1, r3
 800679a:	69f9      	ldr	r1, [r7, #28]
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80067a2:	68f9      	ldr	r1, [r7, #12]
 80067a4:	6809      	ldr	r1, [r1, #0]
 80067a6:	4608      	mov	r0, r1
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	01c9      	lsls	r1, r1, #7
 80067ac:	4401      	add	r1, r0
 80067ae:	3184      	adds	r1, #132	@ 0x84
 80067b0:	4313      	orrs	r3, r2
 80067b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	01db      	lsls	r3, r3, #7
 80067be:	4413      	add	r3, r2
 80067c0:	3384      	adds	r3, #132	@ 0x84
 80067c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	4611      	mov	r1, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	01d2      	lsls	r2, r2, #7
 80067ce:	440a      	add	r2, r1
 80067d0:	3284      	adds	r2, #132	@ 0x84
 80067d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	01db      	lsls	r3, r3, #7
 80067e6:	4413      	add	r3, r2
 80067e8:	3384      	adds	r3, #132	@ 0x84
 80067ea:	461a      	mov	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	01db      	lsls	r3, r3, #7
 80067fc:	4413      	add	r3, r2
 80067fe:	3384      	adds	r3, #132	@ 0x84
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	6812      	ldr	r2, [r2, #0]
 8006806:	4611      	mov	r1, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	01d2      	lsls	r2, r2, #7
 800680c:	440a      	add	r2, r1
 800680e:	3284      	adds	r2, #132	@ 0x84
 8006810:	f043 0301 	orr.w	r3, r3, #1
 8006814:	6013      	str	r3, [r2, #0]
}
 8006816:	bf00      	nop
 8006818:	3724      	adds	r7, #36	@ 0x24
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800682e:	2300      	movs	r3, #0
 8006830:	603b      	str	r3, [r7, #0]
 8006832:	4b20      	ldr	r3, [pc, #128]	@ (80068b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	4a1f      	ldr	r2, [pc, #124]	@ (80068b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800683c:	6413      	str	r3, [r2, #64]	@ 0x40
 800683e:	4b1d      	ldr	r3, [pc, #116]	@ (80068b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800684a:	4b1b      	ldr	r3, [pc, #108]	@ (80068b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800684c:	2201      	movs	r2, #1
 800684e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006850:	f7fb fb6a 	bl	8001f28 <HAL_GetTick>
 8006854:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006856:	e009      	b.n	800686c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006858:	f7fb fb66 	bl	8001f28 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006866:	d901      	bls.n	800686c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e01f      	b.n	80068ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800686c:	4b13      	ldr	r3, [pc, #76]	@ (80068bc <HAL_PWREx_EnableOverDrive+0x98>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006878:	d1ee      	bne.n	8006858 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800687a:	4b11      	ldr	r3, [pc, #68]	@ (80068c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800687c:	2201      	movs	r2, #1
 800687e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006880:	f7fb fb52 	bl	8001f28 <HAL_GetTick>
 8006884:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006886:	e009      	b.n	800689c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006888:	f7fb fb4e 	bl	8001f28 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006896:	d901      	bls.n	800689c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e007      	b.n	80068ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800689c:	4b07      	ldr	r3, [pc, #28]	@ (80068bc <HAL_PWREx_EnableOverDrive+0x98>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068a8:	d1ee      	bne.n	8006888 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40023800 	.word	0x40023800
 80068b8:	420e0040 	.word	0x420e0040
 80068bc:	40007000 	.word	0x40007000
 80068c0:	420e0044 	.word	0x420e0044

080068c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80068cc:	f7fb fb2c 	bl	8001f28 <HAL_GetTick>
 80068d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e069      	b.n	80069b0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10b      	bne.n	8006900 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fa fe51 	bl	8001598 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80068f6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f85e 	bl	80069bc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	3b01      	subs	r3, #1
 8006910:	021a      	lsls	r2, r3, #8
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	2120      	movs	r1, #32
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f856 	bl	80069d8 <QSPI_WaitFlagStateUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d137      	bne.n	80069a6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006940:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6852      	ldr	r2, [r2, #4]
 8006948:	0611      	lsls	r1, r2, #24
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68d2      	ldr	r2, [r2, #12]
 800694e:	4311      	orrs	r1, r2
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	69d2      	ldr	r2, [r2, #28]
 8006954:	4311      	orrs	r1, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6a12      	ldr	r2, [r2, #32]
 800695a:	4311      	orrs	r1, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	430b      	orrs	r3, r1
 8006962:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	4b13      	ldr	r3, [pc, #76]	@ (80069b8 <HAL_QSPI_Init+0xf4>)
 800696c:	4013      	ands	r3, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6912      	ldr	r2, [r2, #16]
 8006972:	0411      	lsls	r1, r2, #16
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6952      	ldr	r2, [r2, #20]
 8006978:	4311      	orrs	r1, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6992      	ldr	r2, [r2, #24]
 800697e:	4311      	orrs	r1, r2
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	430b      	orrs	r3, r1
 8006986:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80069ae:	7afb      	ldrb	r3, [r7, #11]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	ffe0f8fe 	.word	0xffe0f8fe

080069bc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80069e8:	e01a      	b.n	8006a20 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069f0:	d016      	beq.n	8006a20 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f2:	f7fb fa99 	bl	8001f28 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d302      	bcc.n	8006a08 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10b      	bne.n	8006a20 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a14:	f043 0201 	orr.w	r2, r3, #1
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e00e      	b.n	8006a3e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689a      	ldr	r2, [r3, #8]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bf14      	ite	ne
 8006a2e:	2301      	movne	r3, #1
 8006a30:	2300      	moveq	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	461a      	mov	r2, r3
 8006a36:	79fb      	ldrb	r3, [r7, #7]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d1d6      	bne.n	80069ea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0cc      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a5c:	4b68      	ldr	r3, [pc, #416]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d90c      	bls.n	8006a84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6a:	4b65      	ldr	r3, [pc, #404]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a72:	4b63      	ldr	r3, [pc, #396]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0b8      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d020      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a9c:	4b59      	ldr	r3, [pc, #356]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4a58      	ldr	r2, [pc, #352]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006aa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ab4:	4b53      	ldr	r3, [pc, #332]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	4a52      	ldr	r2, [pc, #328]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006abe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ac0:	4b50      	ldr	r3, [pc, #320]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	494d      	ldr	r1, [pc, #308]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d044      	beq.n	8006b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d107      	bne.n	8006af6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae6:	4b47      	ldr	r3, [pc, #284]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d119      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e07f      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d003      	beq.n	8006b06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d107      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b06:	4b3f      	ldr	r3, [pc, #252]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e06f      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b16:	4b3b      	ldr	r3, [pc, #236]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e067      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b26:	4b37      	ldr	r3, [pc, #220]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f023 0203 	bic.w	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	4934      	ldr	r1, [pc, #208]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b38:	f7fb f9f6 	bl	8001f28 <HAL_GetTick>
 8006b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b3e:	e00a      	b.n	8006b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b40:	f7fb f9f2 	bl	8001f28 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e04f      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b56:	4b2b      	ldr	r3, [pc, #172]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 020c 	and.w	r2, r3, #12
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d1eb      	bne.n	8006b40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b68:	4b25      	ldr	r3, [pc, #148]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d20c      	bcs.n	8006b90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b76:	4b22      	ldr	r3, [pc, #136]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b7e:	4b20      	ldr	r3, [pc, #128]	@ (8006c00 <HAL_RCC_ClockConfig+0x1b8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d001      	beq.n	8006b90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e032      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b9c:	4b19      	ldr	r3, [pc, #100]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4916      	ldr	r1, [pc, #88]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bba:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	490e      	ldr	r1, [pc, #56]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bce:	f000 f821 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c04 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	f003 030f 	and.w	r3, r3, #15
 8006bde:	490a      	ldr	r1, [pc, #40]	@ (8006c08 <HAL_RCC_ClockConfig+0x1c0>)
 8006be0:	5ccb      	ldrb	r3, [r1, r3]
 8006be2:	fa22 f303 	lsr.w	r3, r2, r3
 8006be6:	4a09      	ldr	r2, [pc, #36]	@ (8006c0c <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006bea:	4b09      	ldr	r3, [pc, #36]	@ (8006c10 <HAL_RCC_ClockConfig+0x1c8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fa ffee 	bl	8001bd0 <HAL_InitTick>

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40023c00 	.word	0x40023c00
 8006c04:	40023800 	.word	0x40023800
 8006c08:	080119a4 	.word	0x080119a4
 8006c0c:	2000001c 	.word	0x2000001c
 8006c10:	20000020 	.word	0x20000020

08006c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c18:	b094      	sub	sp, #80	@ 0x50
 8006c1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c2c:	4b79      	ldr	r3, [pc, #484]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 030c 	and.w	r3, r3, #12
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d00d      	beq.n	8006c54 <HAL_RCC_GetSysClockFreq+0x40>
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	f200 80e1 	bhi.w	8006e00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0x34>
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d003      	beq.n	8006c4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c46:	e0db      	b.n	8006e00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c48:	4b73      	ldr	r3, [pc, #460]	@ (8006e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c4c:	e0db      	b.n	8006e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c4e:	4b73      	ldr	r3, [pc, #460]	@ (8006e1c <HAL_RCC_GetSysClockFreq+0x208>)
 8006c50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c52:	e0d8      	b.n	8006e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c54:	4b6f      	ldr	r3, [pc, #444]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d063      	beq.n	8006d32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	099b      	lsrs	r3, r3, #6
 8006c70:	2200      	movs	r2, #0
 8006c72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c7e:	2300      	movs	r3, #0
 8006c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c86:	4622      	mov	r2, r4
 8006c88:	462b      	mov	r3, r5
 8006c8a:	f04f 0000 	mov.w	r0, #0
 8006c8e:	f04f 0100 	mov.w	r1, #0
 8006c92:	0159      	lsls	r1, r3, #5
 8006c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c98:	0150      	lsls	r0, r2, #5
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	1a51      	subs	r1, r2, r1
 8006ca2:	6139      	str	r1, [r7, #16]
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cb8:	4659      	mov	r1, fp
 8006cba:	018b      	lsls	r3, r1, #6
 8006cbc:	4651      	mov	r1, sl
 8006cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cc2:	4651      	mov	r1, sl
 8006cc4:	018a      	lsls	r2, r1, #6
 8006cc6:	4651      	mov	r1, sl
 8006cc8:	ebb2 0801 	subs.w	r8, r2, r1
 8006ccc:	4659      	mov	r1, fp
 8006cce:	eb63 0901 	sbc.w	r9, r3, r1
 8006cd2:	f04f 0200 	mov.w	r2, #0
 8006cd6:	f04f 0300 	mov.w	r3, #0
 8006cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ce6:	4690      	mov	r8, r2
 8006ce8:	4699      	mov	r9, r3
 8006cea:	4623      	mov	r3, r4
 8006cec:	eb18 0303 	adds.w	r3, r8, r3
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	462b      	mov	r3, r5
 8006cf4:	eb49 0303 	adc.w	r3, r9, r3
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d06:	4629      	mov	r1, r5
 8006d08:	024b      	lsls	r3, r1, #9
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d10:	4621      	mov	r1, r4
 8006d12:	024a      	lsls	r2, r1, #9
 8006d14:	4610      	mov	r0, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d24:	f7f9 fa6e 	bl	8000204 <__aeabi_uldivmod>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d30:	e058      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d32:	4b38      	ldr	r3, [pc, #224]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	099b      	lsrs	r3, r3, #6
 8006d38:	2200      	movs	r2, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d42:	623b      	str	r3, [r7, #32]
 8006d44:	2300      	movs	r3, #0
 8006d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	464b      	mov	r3, r9
 8006d50:	f04f 0000 	mov.w	r0, #0
 8006d54:	f04f 0100 	mov.w	r1, #0
 8006d58:	0159      	lsls	r1, r3, #5
 8006d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d5e:	0150      	lsls	r0, r2, #5
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4641      	mov	r1, r8
 8006d66:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	f04f 0300 	mov.w	r3, #0
 8006d78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d84:	ebb2 040a 	subs.w	r4, r2, sl
 8006d88:	eb63 050b 	sbc.w	r5, r3, fp
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	00eb      	lsls	r3, r5, #3
 8006d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d9a:	00e2      	lsls	r2, r4, #3
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	461d      	mov	r5, r3
 8006da0:	4643      	mov	r3, r8
 8006da2:	18e3      	adds	r3, r4, r3
 8006da4:	603b      	str	r3, [r7, #0]
 8006da6:	464b      	mov	r3, r9
 8006da8:	eb45 0303 	adc.w	r3, r5, r3
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	f04f 0200 	mov.w	r2, #0
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dba:	4629      	mov	r1, r5
 8006dbc:	028b      	lsls	r3, r1, #10
 8006dbe:	4621      	mov	r1, r4
 8006dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	028a      	lsls	r2, r1, #10
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dce:	2200      	movs	r2, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	61fa      	str	r2, [r7, #28]
 8006dd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dd8:	f7f9 fa14 	bl	8000204 <__aeabi_uldivmod>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4613      	mov	r3, r2
 8006de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006de4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	3301      	adds	r3, #1
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006df4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006df6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006dfe:	e002      	b.n	8006e06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e00:	4b05      	ldr	r3, [pc, #20]	@ (8006e18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3750      	adds	r7, #80	@ 0x50
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e12:	bf00      	nop
 8006e14:	40023800 	.word	0x40023800
 8006e18:	00f42400 	.word	0x00f42400
 8006e1c:	007a1200 	.word	0x007a1200

08006e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e24:	4b03      	ldr	r3, [pc, #12]	@ (8006e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e26:	681b      	ldr	r3, [r3, #0]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	2000001c 	.word	0x2000001c

08006e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e3c:	f7ff fff0 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8006e40:	4602      	mov	r2, r0
 8006e42:	4b05      	ldr	r3, [pc, #20]	@ (8006e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	0a9b      	lsrs	r3, r3, #10
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	4903      	ldr	r1, [pc, #12]	@ (8006e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e4e:	5ccb      	ldrb	r3, [r1, r3]
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	080119b4 	.word	0x080119b4

08006e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e64:	f7ff ffdc 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	4b05      	ldr	r3, [pc, #20]	@ (8006e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	0b5b      	lsrs	r3, r3, #13
 8006e70:	f003 0307 	and.w	r3, r3, #7
 8006e74:	4903      	ldr	r1, [pc, #12]	@ (8006e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e76:	5ccb      	ldrb	r3, [r1, r3]
 8006e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	40023800 	.word	0x40023800
 8006e84:	080119b4 	.word	0x080119b4

08006e88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	220f      	movs	r2, #15
 8006e96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e98:	4b12      	ldr	r3, [pc, #72]	@ (8006ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 0203 	and.w	r2, r3, #3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ebc:	4b09      	ldr	r3, [pc, #36]	@ (8006ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	08db      	lsrs	r3, r3, #3
 8006ec2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006eca:	4b07      	ldr	r3, [pc, #28]	@ (8006ee8 <HAL_RCC_GetClockConfig+0x60>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 020f 	and.w	r2, r3, #15
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	601a      	str	r2, [r3, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	40023c00 	.word	0x40023c00

08006eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f14:	4b66      	ldr	r3, [pc, #408]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f1a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f22:	4963      	ldr	r1, [pc, #396]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006f36:	4b5e      	ldr	r3, [pc, #376]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f3c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f44:	495a      	ldr	r1, [pc, #360]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10b      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d105      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d075      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f70:	4b50      	ldr	r3, [pc, #320]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f76:	f7fa ffd7 	bl	8001f28 <HAL_GetTick>
 8006f7a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f7c:	e008      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f7e:	f7fa ffd3 	bl	8001f28 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e1dc      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f90:	4b47      	ldr	r3, [pc, #284]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1f0      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d009      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	019a      	lsls	r2, r3, #6
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	071b      	lsls	r3, r3, #28
 8006fb4:	493e      	ldr	r1, [pc, #248]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01f      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fc8:	4b39      	ldr	r3, [pc, #228]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fce:	0f1b      	lsrs	r3, r3, #28
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	019a      	lsls	r2, r3, #6
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	061b      	lsls	r3, r3, #24
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	071b      	lsls	r3, r3, #28
 8006fe8:	4931      	ldr	r1, [pc, #196]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ff6:	f023 021f 	bic.w	r2, r3, #31
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	492b      	ldr	r1, [pc, #172]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007002:	4313      	orrs	r3, r2
 8007004:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00d      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	019a      	lsls	r2, r3, #6
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	061b      	lsls	r3, r3, #24
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	071b      	lsls	r3, r3, #28
 8007028:	4921      	ldr	r1, [pc, #132]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007030:	4b20      	ldr	r3, [pc, #128]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007032:	2201      	movs	r2, #1
 8007034:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007036:	f7fa ff77 	bl	8001f28 <HAL_GetTick>
 800703a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800703c:	e008      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800703e:	f7fa ff73 	bl	8001f28 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e17c      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007050:	4b17      	ldr	r3, [pc, #92]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f0      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d112      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10c      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 80ce 	beq.w	800721e <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007086:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800708a:	f040 80c8 	bne.w	800721e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800708e:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007094:	f7fa ff48 	bl	8001f28 <HAL_GetTick>
 8007098:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800709a:	e00f      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800709c:	f7fa ff44 	bl	8001f28 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d908      	bls.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e14d      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80070ae:	bf00      	nop
 80070b0:	40023800 	.word	0x40023800
 80070b4:	42470068 	.word	0x42470068
 80070b8:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070bc:	4ba5      	ldr	r3, [pc, #660]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070c8:	d0e8      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d02e      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80070d6:	4b9f      	ldr	r3, [pc, #636]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	3301      	adds	r3, #1
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070e8:	4b9a      	ldr	r3, [pc, #616]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80070ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ee:	0f1b      	lsrs	r3, r3, #28
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	019a      	lsls	r2, r3, #6
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	085b      	lsrs	r3, r3, #1
 8007100:	3b01      	subs	r3, #1
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	431a      	orrs	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	061b      	lsls	r3, r3, #24
 800710c:	431a      	orrs	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	071b      	lsls	r3, r3, #28
 8007112:	4990      	ldr	r1, [pc, #576]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007114:	4313      	orrs	r3, r2
 8007116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800711a:	4b8e      	ldr	r3, [pc, #568]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800711c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007120:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007128:	3b01      	subs	r3, #1
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	4989      	ldr	r1, [pc, #548]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d02c      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007140:	4b84      	ldr	r3, [pc, #528]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007146:	0c1b      	lsrs	r3, r3, #16
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	3301      	adds	r3, #1
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007152:	4b80      	ldr	r3, [pc, #512]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007158:	0e1b      	lsrs	r3, r3, #24
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	019a      	lsls	r2, r3, #6
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	085b      	lsrs	r3, r3, #1
 800716a:	3b01      	subs	r3, #1
 800716c:	041b      	lsls	r3, r3, #16
 800716e:	431a      	orrs	r2, r3
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	061b      	lsls	r3, r3, #24
 8007174:	431a      	orrs	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	071b      	lsls	r3, r3, #28
 800717c:	4975      	ldr	r1, [pc, #468]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007184:	4b73      	ldr	r3, [pc, #460]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007186:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800718a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007192:	4970      	ldr	r1, [pc, #448]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007194:	4313      	orrs	r3, r2
 8007196:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d024      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80071aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071ae:	d11f      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071b0:	4b68      	ldr	r3, [pc, #416]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b6:	0e1b      	lsrs	r3, r3, #24
 80071b8:	f003 030f 	and.w	r3, r3, #15
 80071bc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071be:	4b65      	ldr	r3, [pc, #404]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c4:	0f1b      	lsrs	r3, r3, #28
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	019a      	lsls	r2, r3, #6
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	3b01      	subs	r3, #1
 80071da:	041b      	lsls	r3, r3, #16
 80071dc:	431a      	orrs	r2, r3
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	061b      	lsls	r3, r3, #24
 80071e2:	431a      	orrs	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	071b      	lsls	r3, r3, #28
 80071e8:	495a      	ldr	r1, [pc, #360]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071f0:	4b59      	ldr	r3, [pc, #356]	@ (8007358 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071f6:	f7fa fe97 	bl	8001f28 <HAL_GetTick>
 80071fa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071fc:	e008      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071fe:	f7fa fe93 	bl	8001f28 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e09c      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007210:	4b50      	ldr	r3, [pc, #320]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800721c:	d1ef      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 8083 	beq.w	8007332 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800722c:	2300      	movs	r3, #0
 800722e:	60bb      	str	r3, [r7, #8]
 8007230:	4b48      	ldr	r3, [pc, #288]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007234:	4a47      	ldr	r2, [pc, #284]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800723a:	6413      	str	r3, [r2, #64]	@ 0x40
 800723c:	4b45      	ldr	r3, [pc, #276]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800723e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007248:	4b44      	ldr	r3, [pc, #272]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a43      	ldr	r2, [pc, #268]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800724e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007252:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007254:	f7fa fe68 	bl	8001f28 <HAL_GetTick>
 8007258:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800725a:	e008      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800725c:	f7fa fe64 	bl	8001f28 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e06d      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800726e:	4b3b      	ldr	r3, [pc, #236]	@ (800735c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0f0      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800727a:	4b36      	ldr	r3, [pc, #216]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007282:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d02f      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	429a      	cmp	r2, r3
 8007296:	d028      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007298:	4b2e      	ldr	r3, [pc, #184]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800729a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072a0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007360 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80072ae:	4a29      	ldr	r2, [pc, #164]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072b4:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d114      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072c0:	f7fa fe32 	bl	8001f28 <HAL_GetTick>
 80072c4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072c6:	e00a      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c8:	f7fa fe2e 	bl	8001f28 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d901      	bls.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e035      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072de:	4b1d      	ldr	r3, [pc, #116]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0ee      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072f6:	d10d      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80072f8:	4b16      	ldr	r3, [pc, #88]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007304:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800730c:	4911      	ldr	r1, [pc, #68]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800730e:	4313      	orrs	r3, r2
 8007310:	608b      	str	r3, [r1, #8]
 8007312:	e005      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007314:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	4a0e      	ldr	r2, [pc, #56]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800731a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800731e:	6093      	str	r3, [r2, #8]
 8007320:	4b0c      	ldr	r3, [pc, #48]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007322:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800732c:	4909      	ldr	r1, [pc, #36]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800732e:	4313      	orrs	r3, r2
 8007330:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007344:	4b07      	ldr	r3, [pc, #28]	@ (8007364 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8007346:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3720      	adds	r7, #32
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	40023800 	.word	0x40023800
 8007358:	42470070 	.word	0x42470070
 800735c:	40007000 	.word	0x40007000
 8007360:	42470e40 	.word	0x42470e40
 8007364:	424711e0 	.word	0x424711e0

08007368 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e273      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d075      	beq.n	8007472 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007386:	4b88      	ldr	r3, [pc, #544]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 030c 	and.w	r3, r3, #12
 800738e:	2b04      	cmp	r3, #4
 8007390:	d00c      	beq.n	80073ac <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007392:	4b85      	ldr	r3, [pc, #532]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f003 030c 	and.w	r3, r3, #12
        || \
 800739a:	2b08      	cmp	r3, #8
 800739c:	d112      	bne.n	80073c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800739e:	4b82      	ldr	r3, [pc, #520]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073aa:	d10b      	bne.n	80073c4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073ac:	4b7e      	ldr	r3, [pc, #504]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d05b      	beq.n	8007470 <HAL_RCC_OscConfig+0x108>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d157      	bne.n	8007470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e24e      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073cc:	d106      	bne.n	80073dc <HAL_RCC_OscConfig+0x74>
 80073ce:	4b76      	ldr	r3, [pc, #472]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a75      	ldr	r2, [pc, #468]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80073d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	e01d      	b.n	8007418 <HAL_RCC_OscConfig+0xb0>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073e4:	d10c      	bne.n	8007400 <HAL_RCC_OscConfig+0x98>
 80073e6:	4b70      	ldr	r3, [pc, #448]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a6f      	ldr	r2, [pc, #444]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80073ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	4b6d      	ldr	r3, [pc, #436]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a6c      	ldr	r2, [pc, #432]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80073f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	e00b      	b.n	8007418 <HAL_RCC_OscConfig+0xb0>
 8007400:	4b69      	ldr	r3, [pc, #420]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a68      	ldr	r2, [pc, #416]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 8007406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	4b66      	ldr	r3, [pc, #408]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a65      	ldr	r2, [pc, #404]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 8007412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d013      	beq.n	8007448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fa fd82 	bl	8001f28 <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007428:	f7fa fd7e 	bl	8001f28 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b64      	cmp	r3, #100	@ 0x64
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e213      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800743a:	4b5b      	ldr	r3, [pc, #364]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0f0      	beq.n	8007428 <HAL_RCC_OscConfig+0xc0>
 8007446:	e014      	b.n	8007472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007448:	f7fa fd6e 	bl	8001f28 <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007450:	f7fa fd6a 	bl	8001f28 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b64      	cmp	r3, #100	@ 0x64
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e1ff      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007462:	4b51      	ldr	r3, [pc, #324]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f0      	bne.n	8007450 <HAL_RCC_OscConfig+0xe8>
 800746e:	e000      	b.n	8007472 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d063      	beq.n	8007546 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800747e:	4b4a      	ldr	r3, [pc, #296]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f003 030c 	and.w	r3, r3, #12
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00b      	beq.n	80074a2 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800748a:	4b47      	ldr	r3, [pc, #284]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 030c 	and.w	r3, r3, #12
        || \
 8007492:	2b08      	cmp	r3, #8
 8007494:	d11c      	bne.n	80074d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007496:	4b44      	ldr	r3, [pc, #272]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d116      	bne.n	80074d0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074a2:	4b41      	ldr	r3, [pc, #260]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <HAL_RCC_OscConfig+0x152>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d001      	beq.n	80074ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e1d3      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ba:	4b3b      	ldr	r3, [pc, #236]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	4937      	ldr	r1, [pc, #220]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074ce:	e03a      	b.n	8007546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d020      	beq.n	800751a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074d8:	4b34      	ldr	r3, [pc, #208]	@ (80075ac <HAL_RCC_OscConfig+0x244>)
 80074da:	2201      	movs	r2, #1
 80074dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074de:	f7fa fd23 	bl	8001f28 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e4:	e008      	b.n	80074f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074e6:	f7fa fd1f 	bl	8001f28 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d901      	bls.n	80074f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e1b4      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074f8:	4b2b      	ldr	r3, [pc, #172]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0f0      	beq.n	80074e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007504:	4b28      	ldr	r3, [pc, #160]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	00db      	lsls	r3, r3, #3
 8007512:	4925      	ldr	r1, [pc, #148]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 8007514:	4313      	orrs	r3, r2
 8007516:	600b      	str	r3, [r1, #0]
 8007518:	e015      	b.n	8007546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800751a:	4b24      	ldr	r3, [pc, #144]	@ (80075ac <HAL_RCC_OscConfig+0x244>)
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007520:	f7fa fd02 	bl	8001f28 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007528:	f7fa fcfe 	bl	8001f28 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e193      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800753a:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f0      	bne.n	8007528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0308 	and.w	r3, r3, #8
 800754e:	2b00      	cmp	r3, #0
 8007550:	d036      	beq.n	80075c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d016      	beq.n	8007588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800755a:	4b15      	ldr	r3, [pc, #84]	@ (80075b0 <HAL_RCC_OscConfig+0x248>)
 800755c:	2201      	movs	r2, #1
 800755e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007560:	f7fa fce2 	bl	8001f28 <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007566:	e008      	b.n	800757a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007568:	f7fa fcde 	bl	8001f28 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d901      	bls.n	800757a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e173      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800757a:	4b0b      	ldr	r3, [pc, #44]	@ (80075a8 <HAL_RCC_OscConfig+0x240>)
 800757c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0f0      	beq.n	8007568 <HAL_RCC_OscConfig+0x200>
 8007586:	e01b      	b.n	80075c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007588:	4b09      	ldr	r3, [pc, #36]	@ (80075b0 <HAL_RCC_OscConfig+0x248>)
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758e:	f7fa fccb 	bl	8001f28 <HAL_GetTick>
 8007592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007594:	e00e      	b.n	80075b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007596:	f7fa fcc7 	bl	8001f28 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d907      	bls.n	80075b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e15c      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
 80075a8:	40023800 	.word	0x40023800
 80075ac:	42470000 	.word	0x42470000
 80075b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075b4:	4b8a      	ldr	r3, [pc, #552]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 80075b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1ea      	bne.n	8007596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 8097 	beq.w	80076fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075ce:	2300      	movs	r3, #0
 80075d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075d2:	4b83      	ldr	r3, [pc, #524]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10f      	bne.n	80075fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075de:	2300      	movs	r3, #0
 80075e0:	60bb      	str	r3, [r7, #8]
 80075e2:	4b7f      	ldr	r3, [pc, #508]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 80075e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e6:	4a7e      	ldr	r2, [pc, #504]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 80075e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80075ee:	4b7c      	ldr	r3, [pc, #496]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 80075f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075f6:	60bb      	str	r3, [r7, #8]
 80075f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075fa:	2301      	movs	r3, #1
 80075fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075fe:	4b79      	ldr	r3, [pc, #484]	@ (80077e4 <HAL_RCC_OscConfig+0x47c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007606:	2b00      	cmp	r3, #0
 8007608:	d118      	bne.n	800763c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800760a:	4b76      	ldr	r3, [pc, #472]	@ (80077e4 <HAL_RCC_OscConfig+0x47c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a75      	ldr	r2, [pc, #468]	@ (80077e4 <HAL_RCC_OscConfig+0x47c>)
 8007610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007616:	f7fa fc87 	bl	8001f28 <HAL_GetTick>
 800761a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800761c:	e008      	b.n	8007630 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800761e:	f7fa fc83 	bl	8001f28 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e118      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007630:	4b6c      	ldr	r3, [pc, #432]	@ (80077e4 <HAL_RCC_OscConfig+0x47c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0f0      	beq.n	800761e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d106      	bne.n	8007652 <HAL_RCC_OscConfig+0x2ea>
 8007644:	4b66      	ldr	r3, [pc, #408]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 8007646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007648:	4a65      	ldr	r2, [pc, #404]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 800764a:	f043 0301 	orr.w	r3, r3, #1
 800764e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007650:	e01c      	b.n	800768c <HAL_RCC_OscConfig+0x324>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	2b05      	cmp	r3, #5
 8007658:	d10c      	bne.n	8007674 <HAL_RCC_OscConfig+0x30c>
 800765a:	4b61      	ldr	r3, [pc, #388]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 800765c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765e:	4a60      	ldr	r2, [pc, #384]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 8007660:	f043 0304 	orr.w	r3, r3, #4
 8007664:	6713      	str	r3, [r2, #112]	@ 0x70
 8007666:	4b5e      	ldr	r3, [pc, #376]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 8007668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766a:	4a5d      	ldr	r2, [pc, #372]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 800766c:	f043 0301 	orr.w	r3, r3, #1
 8007670:	6713      	str	r3, [r2, #112]	@ 0x70
 8007672:	e00b      	b.n	800768c <HAL_RCC_OscConfig+0x324>
 8007674:	4b5a      	ldr	r3, [pc, #360]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 8007676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007678:	4a59      	ldr	r2, [pc, #356]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 800767a:	f023 0301 	bic.w	r3, r3, #1
 800767e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007680:	4b57      	ldr	r3, [pc, #348]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 8007682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007684:	4a56      	ldr	r2, [pc, #344]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 8007686:	f023 0304 	bic.w	r3, r3, #4
 800768a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d015      	beq.n	80076c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007694:	f7fa fc48 	bl	8001f28 <HAL_GetTick>
 8007698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800769a:	e00a      	b.n	80076b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800769c:	f7fa fc44 	bl	8001f28 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e0d7      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076b2:	4b4b      	ldr	r3, [pc, #300]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 80076b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0ee      	beq.n	800769c <HAL_RCC_OscConfig+0x334>
 80076be:	e014      	b.n	80076ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c0:	f7fa fc32 	bl	8001f28 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076c6:	e00a      	b.n	80076de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076c8:	f7fa fc2e 	bl	8001f28 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e0c1      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076de:	4b40      	ldr	r3, [pc, #256]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 80076e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1ee      	bne.n	80076c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d105      	bne.n	80076fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076f0:	4b3b      	ldr	r3, [pc, #236]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 80076f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f4:	4a3a      	ldr	r2, [pc, #232]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 80076f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 80ad 	beq.w	8007860 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007706:	4b36      	ldr	r3, [pc, #216]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 030c 	and.w	r3, r3, #12
 800770e:	2b08      	cmp	r3, #8
 8007710:	d060      	beq.n	80077d4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d145      	bne.n	80077a6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800771a:	4b33      	ldr	r3, [pc, #204]	@ (80077e8 <HAL_RCC_OscConfig+0x480>)
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007720:	f7fa fc02 	bl	8001f28 <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007726:	e008      	b.n	800773a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007728:	f7fa fbfe 	bl	8001f28 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b02      	cmp	r3, #2
 8007734:	d901      	bls.n	800773a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e093      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800773a:	4b29      	ldr	r3, [pc, #164]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f0      	bne.n	8007728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69da      	ldr	r2, [r3, #28]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007754:	019b      	lsls	r3, r3, #6
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	3b01      	subs	r3, #1
 8007760:	041b      	lsls	r3, r3, #16
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007768:	061b      	lsls	r3, r3, #24
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007770:	071b      	lsls	r3, r3, #28
 8007772:	491b      	ldr	r1, [pc, #108]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 8007774:	4313      	orrs	r3, r2
 8007776:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007778:	4b1b      	ldr	r3, [pc, #108]	@ (80077e8 <HAL_RCC_OscConfig+0x480>)
 800777a:	2201      	movs	r2, #1
 800777c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777e:	f7fa fbd3 	bl	8001f28 <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007786:	f7fa fbcf 	bl	8001f28 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e064      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007798:	4b11      	ldr	r3, [pc, #68]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <HAL_RCC_OscConfig+0x41e>
 80077a4:	e05c      	b.n	8007860 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077a6:	4b10      	ldr	r3, [pc, #64]	@ (80077e8 <HAL_RCC_OscConfig+0x480>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ac:	f7fa fbbc 	bl	8001f28 <HAL_GetTick>
 80077b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077b4:	f7fa fbb8 	bl	8001f28 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e04d      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077c6:	4b06      	ldr	r3, [pc, #24]	@ (80077e0 <HAL_RCC_OscConfig+0x478>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1f0      	bne.n	80077b4 <HAL_RCC_OscConfig+0x44c>
 80077d2:	e045      	b.n	8007860 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d107      	bne.n	80077ec <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e040      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
 80077e0:	40023800 	.word	0x40023800
 80077e4:	40007000 	.word	0x40007000
 80077e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077ec:	4b1f      	ldr	r3, [pc, #124]	@ (800786c <HAL_RCC_OscConfig+0x504>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d030      	beq.n	800785c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007804:	429a      	cmp	r2, r3
 8007806:	d129      	bne.n	800785c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007812:	429a      	cmp	r2, r3
 8007814:	d122      	bne.n	800785c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800781c:	4013      	ands	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007824:	4293      	cmp	r3, r2
 8007826:	d119      	bne.n	800785c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	3b01      	subs	r3, #1
 8007836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007838:	429a      	cmp	r2, r3
 800783a:	d10f      	bne.n	800785c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007848:	429a      	cmp	r2, r3
 800784a:	d107      	bne.n	800785c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007856:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007858:	429a      	cmp	r2, r3
 800785a:	d001      	beq.n	8007860 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e000      	b.n	8007862 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	40023800 	.word	0x40023800

08007870 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e10c      	b.n	8007aac <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fa f932 	bl	8001b10 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f903 	bl	8007ac0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f938 	bl	8007b30 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a1b      	ldr	r3, [r3, #32]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d030      	beq.n	800792a <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f957 	bl	8007b7c <SAI_GetInputClock>
 80078ce:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	025b      	lsls	r3, r3, #9
 80078e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e6:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a72      	ldr	r2, [pc, #456]	@ (8007ab4 <HAL_SAI_Init+0x244>)
 80078ec:	fba2 2303 	umull	r2, r3, r2, r3
 80078f0:	08da      	lsrs	r2, r3, #3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80078f6:	68f9      	ldr	r1, [r7, #12]
 80078f8:	4b6e      	ldr	r3, [pc, #440]	@ (8007ab4 <HAL_SAI_Init+0x244>)
 80078fa:	fba3 2301 	umull	r2, r3, r3, r1
 80078fe:	08da      	lsrs	r2, r3, #3
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	1aca      	subs	r2, r1, r3
 800790a:	2a08      	cmp	r2, #8
 800790c:	d904      	bls.n	8007918 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800791c:	2b04      	cmp	r3, #4
 800791e:	d104      	bne.n	800792a <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007924:	085a      	lsrs	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d003      	beq.n	800793a <HAL_SAI_Init+0xca>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d109      	bne.n	800794e <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_SAI_Init+0xd6>
 8007942:	2300      	movs	r3, #0
 8007944:	e001      	b.n	800794a <HAL_SAI_Init+0xda>
 8007946:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	e008      	b.n	8007960 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	2b01      	cmp	r3, #1
 8007954:	d102      	bne.n	800795c <HAL_SAI_Init+0xec>
 8007956:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800795a:	e000      	b.n	800795e <HAL_SAI_Init+0xee>
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b03      	cmp	r3, #3
 8007966:	d811      	bhi.n	800798c <HAL_SAI_Init+0x11c>
 8007968:	2b02      	cmp	r3, #2
 800796a:	d20b      	bcs.n	8007984 <HAL_SAI_Init+0x114>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_SAI_Init+0x106>
 8007970:	2b01      	cmp	r3, #1
 8007972:	d003      	beq.n	800797c <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007974:	e00a      	b.n	800798c <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	613b      	str	r3, [r7, #16]
    break;
 800797a:	e008      	b.n	800798e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800797c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007980:	613b      	str	r3, [r7, #16]
    break;
 8007982:	e004      	b.n	800798e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007984:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007988:	613b      	str	r3, [r7, #16]
    break;
 800798a:	e000      	b.n	800798e <HAL_SAI_Init+0x11e>
      break;
 800798c:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	4b47      	ldr	r3, [pc, #284]	@ (8007ab8 <HAL_SAI_Init+0x248>)
 800799a:	400b      	ands	r3, r1
 800799c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079b2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b8:	431a      	orrs	r2, r3
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 80079c6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80079d2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d8:	051b      	lsls	r3, r3, #20
 80079da:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80079f2:	f023 030f 	bic.w	r3, r3, #15
 80079f6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6899      	ldr	r1, [r3, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	4b26      	ldr	r3, [pc, #152]	@ (8007abc <HAL_SAI_Init+0x24c>)
 8007a22:	400b      	ands	r3, r1
 8007a24:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6899      	ldr	r1, [r3, #8]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a30:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a36:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8007a3c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8007a42:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007a4c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68d9      	ldr	r1, [r3, #12]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007a64:	400b      	ands	r3, r1
 8007a66:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68d9      	ldr	r1, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a76:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007a7e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a84:	3b01      	subs	r3, #1
 8007a86:	021b      	lsls	r3, r3, #8
 8007a88:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	cccccccd 	.word	0xcccccccd
 8007ab8:	ff05c010 	.word	0xff05c010
 8007abc:	fff88000 	.word	0xfff88000

08007ac0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007ac8:	4b17      	ldr	r3, [pc, #92]	@ (8007b28 <SAI_Disable+0x68>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a17      	ldr	r2, [pc, #92]	@ (8007b2c <SAI_Disable+0x6c>)
 8007ace:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad2:	0b1b      	lsrs	r3, r3, #12
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007aea:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	1e5a      	subs	r2, r3, #1
 8007af0:	60fa      	str	r2, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007afc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	72fb      	strb	r3, [r7, #11]
      break;
 8007b0a:	e006      	b.n	8007b1a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e8      	bne.n	8007aec <SAI_Disable+0x2c>

  return status;
 8007b1a:	7afb      	ldrb	r3, [r7, #11]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	2000001c 	.word	0x2000001c
 8007b2c:	95cbec1b 	.word	0x95cbec1b

08007b30 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d00c      	beq.n	8007b5a <SAI_BlockSynchroConfig+0x2a>
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d80d      	bhi.n	8007b60 <SAI_BlockSynchroConfig+0x30>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <SAI_BlockSynchroConfig+0x1e>
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d003      	beq.n	8007b54 <SAI_BlockSynchroConfig+0x24>
 8007b4c:	e008      	b.n	8007b60 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
      break;
 8007b52:	e008      	b.n	8007b66 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007b54:	2310      	movs	r3, #16
 8007b56:	60fb      	str	r3, [r7, #12]
      break;
 8007b58:	e005      	b.n	8007b66 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007b5a:	2320      	movs	r3, #32
 8007b5c:	60fb      	str	r3, [r7, #12]
      break;
 8007b5e:	e002      	b.n	8007b66 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	60fb      	str	r3, [r7, #12]
      break;
 8007b64:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007b66:	4a04      	ldr	r2, [pc, #16]	@ (8007b78 <SAI_BlockSynchroConfig+0x48>)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8007b6c:	bf00      	nop
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	40015800 	.word	0x40015800

08007b7c <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a46      	ldr	r2, [pc, #280]	@ (8007cb0 <SAI_GetInputClock+0x134>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d10b      	bne.n	8007bb2 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8007b9a:	4b46      	ldr	r3, [pc, #280]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ba0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	4942      	ldr	r1, [pc, #264]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007bb0:	e00b      	b.n	8007bca <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8007bb2:	4b40      	ldr	r3, [pc, #256]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bb8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	493c      	ldr	r1, [pc, #240]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007bca:	4b3a      	ldr	r3, [pc, #232]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d108      	bne.n	8007be8 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007bd6:	4b37      	ldr	r3, [pc, #220]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bde:	4a36      	ldr	r2, [pc, #216]	@ (8007cb8 <SAI_GetInputClock+0x13c>)
 8007be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be4:	613b      	str	r3, [r7, #16]
 8007be6:	e007      	b.n	8007bf8 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007be8:	4b32      	ldr	r3, [pc, #200]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bf0:	4a32      	ldr	r2, [pc, #200]	@ (8007cbc <SAI_GetInputClock+0x140>)
 8007bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf6:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d121      	bne.n	8007c44 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8007c00:	4b2c      	ldr	r3, [pc, #176]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c06:	0e1b      	lsrs	r3, r3, #24
 8007c08:	f003 030f 	and.w	r3, r3, #15
 8007c0c:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8007c0e:	4b29      	ldr	r3, [pc, #164]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c14:	099b      	lsrs	r3, r3, #6
 8007c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	fb03 f202 	mul.w	r2, r3, r2
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c26:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8007c28:	4b22      	ldr	r3, [pc, #136]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c2e:	0a1b      	lsrs	r3, r3, #8
 8007c30:	f003 031f 	and.w	r3, r3, #31
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	e02d      	b.n	8007ca0 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c4c:	d120      	bne.n	8007c90 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8007c4e:	4b19      	ldr	r3, [pc, #100]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c54:	0e1b      	lsrs	r3, r3, #24
 8007c56:	f003 030f 	and.w	r3, r3, #15
 8007c5a:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8007c5c:	4b15      	ldr	r3, [pc, #84]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c62:	099b      	lsrs	r3, r3, #6
 8007c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	fb03 f202 	mul.w	r2, r3, r2
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c74:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8007c76:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c7c:	f003 031f 	and.w	r3, r3, #31
 8007c80:	3301      	adds	r3, #1
 8007c82:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	e007      	b.n	8007ca0 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8007c90:	4b08      	ldr	r3, [pc, #32]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	4a07      	ldr	r2, [pc, #28]	@ (8007cb4 <SAI_GetInputClock+0x138>)
 8007c96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c9a:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8007c9c:	4b08      	ldr	r3, [pc, #32]	@ (8007cc0 <SAI_GetInputClock+0x144>)
 8007c9e:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8007ca0:	697b      	ldr	r3, [r7, #20]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	371c      	adds	r7, #28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	40015804 	.word	0x40015804
 8007cb4:	40023800 	.word	0x40023800
 8007cb8:	00f42400 	.word	0x00f42400
 8007cbc:	007a1200 	.word	0x007a1200
 8007cc0:	00bb8000 	.word	0x00bb8000

08007cc4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e022      	b.n	8007d1c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d105      	bne.n	8007cee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7f9 fccf 	bl	800168c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f814 	bl	8007d24 <HAL_SD_InitCard>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e00a      	b.n	8007d1c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d24:	b5b0      	push	{r4, r5, r7, lr}
 8007d26:	b08e      	sub	sp, #56	@ 0x38
 8007d28:	af04      	add	r7, sp, #16
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007d34:	2300      	movs	r3, #0
 8007d36:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007d40:	2376      	movs	r3, #118	@ 0x76
 8007d42:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681d      	ldr	r5, [r3, #0]
 8007d48:	466c      	mov	r4, sp
 8007d4a:	f107 0314 	add.w	r3, r7, #20
 8007d4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d56:	f107 0308 	add.w	r3, r7, #8
 8007d5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f002 fa47 	bl	800a1f0 <SDIO_Init>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007d68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e04f      	b.n	8007e14 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007d74:	4b29      	ldr	r3, [pc, #164]	@ (8007e1c <HAL_SD_InitCard+0xf8>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f002 fa7f 	bl	800a282 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007d84:	4b25      	ldr	r3, [pc, #148]	@ (8007e1c <HAL_SD_InitCard+0xf8>)
 8007d86:	2201      	movs	r2, #1
 8007d88:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007d8a:	2002      	movs	r0, #2
 8007d8c:	f7fa f8d8 	bl	8001f40 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 ff55 	bl	8008c40 <SD_PowerON>
 8007d96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	431a      	orrs	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e02e      	b.n	8007e14 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fe74 	bl	8008aa4 <SD_InitCard>
 8007dbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00b      	beq.n	8007ddc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e01b      	b.n	8007e14 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007de4:	4618      	mov	r0, r3
 8007de6:	f002 fade 	bl	800a3a6 <SDMMC_CmdBlockLength>
 8007dea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00f      	beq.n	8007e12 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a0a      	ldr	r2, [pc, #40]	@ (8007e20 <HAL_SD_InitCard+0xfc>)
 8007df8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3728      	adds	r7, #40	@ 0x28
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e1c:	422580a0 	.word	0x422580a0
 8007e20:	004005ff 	.word	0x004005ff

08007e24 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08c      	sub	sp, #48	@ 0x30
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d107      	bne.n	8007e4c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e40:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e0be      	b.n	8007fca <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	f040 80b7 	bne.w	8007fc8 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	441a      	add	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d907      	bls.n	8007e7e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e72:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e0a5      	b.n	8007fca <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2203      	movs	r2, #3
 8007e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	4a4c      	ldr	r2, [pc, #304]	@ (8007fd4 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8007ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eaa:	4a4b      	ldr	r2, [pc, #300]	@ (8007fd8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007eac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eba:	2200      	movs	r2, #0
 8007ebc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3380      	adds	r3, #128	@ 0x80
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	025b      	lsls	r3, r3, #9
 8007eec:	089b      	lsrs	r3, r3, #2
 8007eee:	f7fa f9f7 	bl	80022e0 <HAL_DMA_Start_IT>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d017      	beq.n	8007f28 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007f06:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a33      	ldr	r2, [pc, #204]	@ (8007fdc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007f0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f14:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e050      	b.n	8007fca <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007f28:	4b2d      	ldr	r3, [pc, #180]	@ (8007fe0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d002      	beq.n	8007f3c <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8007f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f38:	025b      	lsls	r3, r3, #9
 8007f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f40:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	025b      	lsls	r3, r3, #9
 8007f46:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007f48:	2390      	movs	r3, #144	@ 0x90
 8007f4a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007f54:	2301      	movs	r3, #1
 8007f56:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f107 0210 	add.w	r2, r7, #16
 8007f60:	4611      	mov	r1, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f002 f9f3 	bl	800a34e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d90a      	bls.n	8007f84 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2282      	movs	r2, #130	@ 0x82
 8007f72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f002 fa57 	bl	800a42e <SDMMC_CmdReadMultiBlock>
 8007f80:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007f82:	e009      	b.n	8007f98 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2281      	movs	r2, #129	@ 0x81
 8007f88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f90:	4618      	mov	r0, r3
 8007f92:	f002 fa2a 	bl	800a3ea <SDMMC_CmdReadSingleBlock>
 8007f96:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d012      	beq.n	8007fc4 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8007fdc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007fa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fac:	431a      	orrs	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e002      	b.n	8007fca <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e000      	b.n	8007fca <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007fc8:	2302      	movs	r3, #2
  }
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3730      	adds	r7, #48	@ 0x30
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	080088b3 	.word	0x080088b3
 8007fd8:	08008925 	.word	0x08008925
 8007fdc:	004005ff 	.word	0x004005ff
 8007fe0:	4225858c 	.word	0x4225858c

08007fe4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b08c      	sub	sp, #48	@ 0x30
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d107      	bne.n	800800c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008000:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e0c1      	b.n	8008190 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b01      	cmp	r3, #1
 8008016:	f040 80ba 	bne.w	800818e <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008020:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	441a      	add	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800802a:	429a      	cmp	r2, r3
 800802c:	d907      	bls.n	800803e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008032:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e0a8      	b.n	8008190 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2203      	movs	r2, #3
 8008042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f042 021a 	orr.w	r2, r2, #26
 800805c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008062:	4a4d      	ldr	r2, [pc, #308]	@ (8008198 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8008064:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800806a:	4a4c      	ldr	r2, [pc, #304]	@ (800819c <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800806c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008072:	2200      	movs	r2, #0
 8008074:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807a:	2b01      	cmp	r3, #1
 800807c:	d002      	beq.n	8008084 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800807e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008080:	025b      	lsls	r3, r3, #9
 8008082:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d90a      	bls.n	80080a0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	22a0      	movs	r2, #160	@ 0xa0
 800808e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008096:	4618      	mov	r0, r3
 8008098:	f002 fa0d 	bl	800a4b6 <SDMMC_CmdWriteMultiBlock>
 800809c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800809e:	e009      	b.n	80080b4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2290      	movs	r2, #144	@ 0x90
 80080a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080ac:	4618      	mov	r0, r3
 80080ae:	f002 f9e0 	bl	800a472 <SDMMC_CmdWriteSingleBlock>
 80080b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80080b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d012      	beq.n	80080e0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a38      	ldr	r2, [pc, #224]	@ (80081a0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80080c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c8:	431a      	orrs	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e057      	b.n	8008190 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80080e0:	4b30      	ldr	r3, [pc, #192]	@ (80081a4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80080e2:	2201      	movs	r2, #1
 80080e4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ea:	2240      	movs	r2, #64	@ 0x40
 80080ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080fe:	689a      	ldr	r2, [r3, #8]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3380      	adds	r3, #128	@ 0x80
 8008116:	461a      	mov	r2, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	025b      	lsls	r3, r3, #9
 800811c:	089b      	lsrs	r3, r3, #2
 800811e:	f7fa f8df 	bl	80022e0 <HAL_DMA_Start_IT>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01a      	beq.n	800815e <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 021a 	bic.w	r2, r2, #26
 8008136:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a18      	ldr	r2, [pc, #96]	@ (80081a0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800813e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008144:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e018      	b.n	8008190 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800815e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008162:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	025b      	lsls	r3, r3, #9
 8008168:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800816a:	2390      	movs	r3, #144	@ 0x90
 800816c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800816e:	2300      	movs	r3, #0
 8008170:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008172:	2300      	movs	r3, #0
 8008174:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008176:	2301      	movs	r3, #1
 8008178:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f107 0210 	add.w	r2, r7, #16
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f002 f8e2 	bl	800a34e <SDIO_ConfigData>

      return HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	e000      	b.n	8008190 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800818e:	2302      	movs	r3, #2
  }
}
 8008190:	4618      	mov	r0, r3
 8008192:	3730      	adds	r7, #48	@ 0x30
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	08008889 	.word	0x08008889
 800819c:	08008925 	.word	0x08008925
 80081a0:	004005ff 	.word	0x004005ff
 80081a4:	4225858c 	.word	0x4225858c

080081a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d008      	beq.n	80081d6 <HAL_SD_IRQHandler+0x2e>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fdec 	bl	8008dac <SD_Read_IT>
 80081d4:	e155      	b.n	8008482 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 808f 	beq.w	8008304 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80081ee:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 80081fe:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8008202:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0201 	bic.w	r2, r2, #1
 8008212:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d039      	beq.n	8008292 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <HAL_SD_IRQHandler+0x8a>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d011      	beq.n	8008256 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f002 f960 	bl	800a4fc <SDMMC_CmdStopTransfer>
 800823c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d008      	beq.n	8008256 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f91f 	bl	8008494 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800825e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f003 0301 	and.w	r3, r3, #1
 8008274:	2b00      	cmp	r3, #0
 8008276:	d104      	bne.n	8008282 <HAL_SD_IRQHandler+0xda>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f003 fee0 	bl	800c048 <HAL_SD_RxCpltCallback>
 8008288:	e0fb      	b.n	8008482 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f003 fed2 	bl	800c034 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008290:	e0f7      	b.n	8008482 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80f2 	beq.w	8008482 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d011      	beq.n	80082cc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f002 f925 	bl	800a4fc <SDMMC_CmdStopTransfer>
 80082b2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d008      	beq.n	80082cc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	431a      	orrs	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f8e4 	bl	8008494 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f040 80d5 	bne.w	8008482 <HAL_SD_IRQHandler+0x2da>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f003 0302 	and.w	r3, r3, #2
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f040 80cf 	bne.w	8008482 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0208 	bic.w	r2, r2, #8
 80082f2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f003 fe99 	bl	800c034 <HAL_SD_TxCpltCallback>
}
 8008302:	e0be      	b.n	8008482 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800830a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d008      	beq.n	8008324 <HAL_SD_IRQHandler+0x17c>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d003      	beq.n	8008324 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fd96 	bl	8008e4e <SD_Write_IT>
 8008322:	e0ae      	b.n	8008482 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800832a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 80a7 	beq.w	8008482 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d005      	beq.n	800834e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008346:	f043 0202 	orr.w	r2, r3, #2
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008360:	f043 0208 	orr.w	r2, r3, #8
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800836e:	f003 0320 	and.w	r3, r3, #32
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837a:	f043 0220 	orr.w	r2, r3, #32
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008388:	f003 0310 	and.w	r3, r3, #16
 800838c:	2b00      	cmp	r3, #0
 800838e:	d005      	beq.n	800839c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008394:	f043 0210 	orr.w	r2, r3, #16
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80083a4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80083b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f002 f89e 	bl	800a4fc <SDMMC_CmdStopTransfer>
 80083c0:	4602      	mov	r2, r0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c6:	431a      	orrs	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f003 0308 	and.w	r3, r3, #8
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f855 	bl	8008494 <HAL_SD_ErrorCallback>
}
 80083ea:	e04a      	b.n	8008482 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d045      	beq.n	8008482 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <HAL_SD_IRQHandler+0x262>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d011      	beq.n	800842e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840e:	4a1f      	ldr	r2, [pc, #124]	@ (800848c <HAL_SD_IRQHandler+0x2e4>)
 8008410:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008416:	4618      	mov	r0, r3
 8008418:	f7f9 ffba 	bl	8002390 <HAL_DMA_Abort_IT>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d02f      	beq.n	8008482 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008426:	4618      	mov	r0, r3
 8008428:	f000 face 	bl	80089c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800842c:	e029      	b.n	8008482 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <HAL_SD_IRQHandler+0x29a>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d011      	beq.n	8008466 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008446:	4a12      	ldr	r2, [pc, #72]	@ (8008490 <HAL_SD_IRQHandler+0x2e8>)
 8008448:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844e:	4618      	mov	r0, r3
 8008450:	f7f9 ff9e 	bl	8002390 <HAL_DMA_Abort_IT>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d013      	beq.n	8008482 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fae9 	bl	8008a36 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008464:	e00d      	b.n	8008482 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f003 fdd0 	bl	800c020 <HAL_SD_AbortCallback>
}
 8008480:	e7ff      	b.n	8008482 <HAL_SD_IRQHandler+0x2da>
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	080089c9 	.word	0x080089c9
 8008490:	08008a37 	.word	0x08008a37

08008494 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084b6:	0f9b      	lsrs	r3, r3, #30
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084c2:	0e9b      	lsrs	r3, r3, #26
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	f003 030f 	and.w	r3, r3, #15
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084d4:	0e1b      	lsrs	r3, r3, #24
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084e6:	0c1b      	lsrs	r3, r3, #16
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084f2:	0a1b      	lsrs	r3, r3, #8
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008508:	0d1b      	lsrs	r3, r3, #20
 800850a:	b29a      	uxth	r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008514:	0c1b      	lsrs	r3, r3, #16
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	b2da      	uxtb	r2, r3
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008526:	0bdb      	lsrs	r3, r3, #15
 8008528:	b2db      	uxtb	r3, r3
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	b2da      	uxtb	r2, r3
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008538:	0b9b      	lsrs	r3, r3, #14
 800853a:	b2db      	uxtb	r3, r3
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	b2da      	uxtb	r2, r3
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800854a:	0b5b      	lsrs	r3, r3, #13
 800854c:	b2db      	uxtb	r3, r3
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	b2da      	uxtb	r2, r3
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800855c:	0b1b      	lsrs	r3, r3, #12
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	b2da      	uxtb	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2200      	movs	r2, #0
 800856e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008574:	2b00      	cmp	r3, #0
 8008576:	d163      	bne.n	8008640 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800857c:	009a      	lsls	r2, r3, #2
 800857e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008582:	4013      	ands	r3, r2
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008588:	0f92      	lsrs	r2, r2, #30
 800858a:	431a      	orrs	r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008594:	0edb      	lsrs	r3, r3, #27
 8008596:	b2db      	uxtb	r3, r3
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	b2da      	uxtb	r2, r3
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085a6:	0e1b      	lsrs	r3, r3, #24
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	f003 0307 	and.w	r3, r3, #7
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085b8:	0d5b      	lsrs	r3, r3, #21
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085ca:	0c9b      	lsrs	r3, r3, #18
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085dc:	0bdb      	lsrs	r3, r3, #15
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	7e1b      	ldrb	r3, [r3, #24]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	3302      	adds	r3, #2
 8008600:	2201      	movs	r2, #1
 8008602:	fa02 f303 	lsl.w	r3, r2, r3
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800860a:	fb03 f202 	mul.w	r2, r3, r2
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	7a1b      	ldrb	r3, [r3, #8]
 8008616:	b2db      	uxtb	r3, r3
 8008618:	f003 030f 	and.w	r3, r3, #15
 800861c:	2201      	movs	r2, #1
 800861e:	409a      	lsls	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800862c:	0a52      	lsrs	r2, r2, #9
 800862e:	fb03 f202 	mul.w	r2, r3, r2
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800863c:	661a      	str	r2, [r3, #96]	@ 0x60
 800863e:	e031      	b.n	80086a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008644:	2b01      	cmp	r3, #1
 8008646:	d11d      	bne.n	8008684 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800864c:	041b      	lsls	r3, r3, #16
 800864e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008656:	0c1b      	lsrs	r3, r3, #16
 8008658:	431a      	orrs	r2, r3
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	3301      	adds	r3, #1
 8008664:	029a      	lsls	r2, r3, #10
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008678:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	661a      	str	r2, [r3, #96]	@ 0x60
 8008682:	e00f      	b.n	80086a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a58      	ldr	r2, [pc, #352]	@ (80087ec <HAL_SD_GetCardCSD+0x344>)
 800868a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e09d      	b.n	80087e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086a8:	0b9b      	lsrs	r3, r3, #14
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086ba:	09db      	lsrs	r3, r3, #7
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086dc:	0fdb      	lsrs	r3, r3, #31
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e8:	0f5b      	lsrs	r3, r3, #29
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	f003 0303 	and.w	r3, r3, #3
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086fa:	0e9b      	lsrs	r3, r3, #26
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f003 0307 	and.w	r3, r3, #7
 8008702:	b2da      	uxtb	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800870c:	0d9b      	lsrs	r3, r3, #22
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 030f 	and.w	r3, r3, #15
 8008714:	b2da      	uxtb	r2, r3
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871e:	0d5b      	lsrs	r3, r3, #21
 8008720:	b2db      	uxtb	r3, r3
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	b2da      	uxtb	r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873a:	0c1b      	lsrs	r3, r3, #16
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	b2da      	uxtb	r2, r3
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800874e:	0bdb      	lsrs	r3, r3, #15
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	b2da      	uxtb	r2, r3
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008762:	0b9b      	lsrs	r3, r3, #14
 8008764:	b2db      	uxtb	r3, r3
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	b2da      	uxtb	r2, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008776:	0b5b      	lsrs	r3, r3, #13
 8008778:	b2db      	uxtb	r3, r3
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	b2da      	uxtb	r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800878a:	0b1b      	lsrs	r3, r3, #12
 800878c:	b2db      	uxtb	r3, r3
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	b2da      	uxtb	r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800879e:	0a9b      	lsrs	r3, r3, #10
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b2:	0a1b      	lsrs	r3, r3, #8
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	f003 0303 	and.w	r3, r3, #3
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087c6:	085b      	lsrs	r3, r3, #1
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	004005ff 	.word	0x004005ff

080087f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008854:	f107 030c 	add.w	r3, r7, #12
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa7e 	bl	8008d5c <SD_SendStatus>
 8008860:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	0a5b      	lsrs	r3, r3, #9
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800887e:	693b      	ldr	r3, [r7, #16]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3718      	adds	r7, #24
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008894:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088a4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c4:	2b82      	cmp	r3, #130	@ 0x82
 80088c6:	d111      	bne.n	80088ec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 fe15 	bl	800a4fc <SDMMC_CmdStopTransfer>
 80088d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d008      	beq.n	80088ec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	431a      	orrs	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f7ff fdd4 	bl	8008494 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0208 	bic.w	r2, r2, #8
 80088fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008904:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f003 fb97 	bl	800c048 <HAL_SD_RxCpltCallback>
#endif
}
 800891a:	bf00      	nop
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008930:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7f9 fed8 	bl	80026e8 <HAL_DMA_GetError>
 8008938:	4603      	mov	r3, r0
 800893a:	2b02      	cmp	r3, #2
 800893c:	d03e      	beq.n	80089bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008944:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800894a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800894c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d002      	beq.n	800895a <SD_DMAError+0x36>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d12d      	bne.n	80089b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a19      	ldr	r2, [pc, #100]	@ (80089c4 <SD_DMAError+0xa0>)
 8008960:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008970:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008976:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800897e:	6978      	ldr	r0, [r7, #20]
 8008980:	f7ff ff62 	bl	8008848 <HAL_SD_GetCardState>
 8008984:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b06      	cmp	r3, #6
 800898a:	d002      	beq.n	8008992 <SD_DMAError+0x6e>
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b05      	cmp	r3, #5
 8008990:	d10a      	bne.n	80089a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4618      	mov	r0, r3
 8008998:	f001 fdb0 	bl	800a4fc <SDMMC_CmdStopTransfer>
 800899c:	4602      	mov	r2, r0
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a2:	431a      	orrs	r2, r3
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2200      	movs	r2, #0
 80089b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80089b6:	6978      	ldr	r0, [r7, #20]
 80089b8:	f7ff fd6c 	bl	8008494 <HAL_SD_ErrorCallback>
#endif
  }
}
 80089bc:	bf00      	nop
 80089be:	3718      	adds	r7, #24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	004005ff 	.word	0x004005ff

080089c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f240 523a 	movw	r2, #1338	@ 0x53a
 80089de:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff ff31 	bl	8008848 <HAL_SD_GetCardState>
 80089e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b06      	cmp	r3, #6
 80089fa:	d002      	beq.n	8008a02 <SD_DMATxAbort+0x3a>
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b05      	cmp	r3, #5
 8008a00:	d10a      	bne.n	8008a18 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fd78 	bl	800a4fc <SDMMC_CmdStopTransfer>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a12:	431a      	orrs	r2, r3
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d103      	bne.n	8008a28 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f003 fafd 	bl	800c020 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008a26:	e002      	b.n	8008a2e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff fd33 	bl	8008494 <HAL_SD_ErrorCallback>
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a42:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008a4c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7ff fefa 	bl	8008848 <HAL_SD_GetCardState>
 8008a54:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2b06      	cmp	r3, #6
 8008a68:	d002      	beq.n	8008a70 <SD_DMARxAbort+0x3a>
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b05      	cmp	r3, #5
 8008a6e:	d10a      	bne.n	8008a86 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f001 fd41 	bl	800a4fc <SDMMC_CmdStopTransfer>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a80:	431a      	orrs	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d103      	bne.n	8008a96 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f003 fac6 	bl	800c020 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008a94:	e002      	b.n	8008a9c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f7ff fcfc 	bl	8008494 <HAL_SD_ErrorCallback>
}
 8008a9c:	bf00      	nop
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008aa4:	b5b0      	push	{r4, r5, r7, lr}
 8008aa6:	b094      	sub	sp, #80	@ 0x50
 8008aa8:	af04      	add	r7, sp, #16
 8008aaa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008aac:	2301      	movs	r3, #1
 8008aae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f001 fbf2 	bl	800a29e <SDIO_GetPowerState>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ac0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008ac4:	e0b8      	b.n	8008c38 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d02f      	beq.n	8008b2e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f001 fdd9 	bl	800a68a <SDMMC_CmdSendCID>
 8008ad8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <SD_InitCard+0x40>
    {
      return errorstate;
 8008ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae2:	e0a9      	b.n	8008c38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2100      	movs	r1, #0
 8008aea:	4618      	mov	r0, r3
 8008aec:	f001 fc1c 	bl	800a328 <SDIO_GetResponse>
 8008af0:	4602      	mov	r2, r0
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2104      	movs	r1, #4
 8008afc:	4618      	mov	r0, r3
 8008afe:	f001 fc13 	bl	800a328 <SDIO_GetResponse>
 8008b02:	4602      	mov	r2, r0
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2108      	movs	r1, #8
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 fc0a 	bl	800a328 <SDIO_GetResponse>
 8008b14:	4602      	mov	r2, r0
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	210c      	movs	r1, #12
 8008b20:	4618      	mov	r0, r3
 8008b22:	f001 fc01 	bl	800a328 <SDIO_GetResponse>
 8008b26:	4602      	mov	r2, r0
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d00d      	beq.n	8008b52 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f107 020e 	add.w	r2, r7, #14
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 fddf 	bl	800a704 <SDMMC_CmdSetRelAdd>
 8008b46:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <SD_InitCard+0xae>
    {
      return errorstate;
 8008b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b50:	e072      	b.n	8008c38 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d036      	beq.n	8008bc8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008b5a:	89fb      	ldrh	r3, [r7, #14]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b6a:	041b      	lsls	r3, r3, #16
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	f001 fda9 	bl	800a6c6 <SDMMC_CmdSendCSD>
 8008b74:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b7e:	e05b      	b.n	8008c38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2100      	movs	r1, #0
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 fbce 	bl	800a328 <SDIO_GetResponse>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2104      	movs	r1, #4
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f001 fbc5 	bl	800a328 <SDIO_GetResponse>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2108      	movs	r1, #8
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 fbbc 	bl	800a328 <SDIO_GetResponse>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	210c      	movs	r1, #12
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f001 fbb3 	bl	800a328 <SDIO_GetResponse>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2104      	movs	r1, #4
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f001 fbaa 	bl	800a328 <SDIO_GetResponse>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	0d1a      	lsrs	r2, r3, #20
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008bdc:	f107 0310 	add.w	r3, r7, #16
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff fc60 	bl	80084a8 <HAL_SD_GetCardCSD>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008bf2:	e021      	b.n	8008c38 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6819      	ldr	r1, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bfc:	041b      	lsls	r3, r3, #16
 8008bfe:	2200      	movs	r2, #0
 8008c00:	461c      	mov	r4, r3
 8008c02:	4615      	mov	r5, r2
 8008c04:	4622      	mov	r2, r4
 8008c06:	462b      	mov	r3, r5
 8008c08:	4608      	mov	r0, r1
 8008c0a:	f001 fc99 	bl	800a540 <SDMMC_CmdSelDesel>
 8008c0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <SD_InitCard+0x176>
  {
    return errorstate;
 8008c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c18:	e00e      	b.n	8008c38 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681d      	ldr	r5, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	466c      	mov	r4, sp
 8008c22:	f103 0210 	add.w	r2, r3, #16
 8008c26:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c30:	4628      	mov	r0, r5
 8008c32:	f001 fadd 	bl	800a1f0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3740      	adds	r7, #64	@ 0x40
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bdb0      	pop	{r4, r5, r7, pc}

08008c40 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	2300      	movs	r3, #0
 8008c52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 fc94 	bl	800a586 <SDMMC_CmdGoIdleState>
 8008c5e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	e072      	b.n	8008d50 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f001 fca7 	bl	800a5c2 <SDMMC_CmdOperCond>
 8008c74:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00d      	beq.n	8008c98 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 fc7d 	bl	800a586 <SDMMC_CmdGoIdleState>
 8008c8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d004      	beq.n	8008c9e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	e05b      	b.n	8008d50 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d137      	bne.n	8008d16 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2100      	movs	r1, #0
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 fca7 	bl	800a600 <SDMMC_CmdAppCommand>
 8008cb2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d02d      	beq.n	8008d16 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008cbe:	e047      	b.n	8008d50 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 fc9a 	bl	800a600 <SDMMC_CmdAppCommand>
 8008ccc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <SD_PowerON+0x98>
    {
      return errorstate;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	e03b      	b.n	8008d50 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	491e      	ldr	r1, [pc, #120]	@ (8008d58 <SD_PowerON+0x118>)
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 fcb0 	bl	800a644 <SDMMC_CmdAppOperCommand>
 8008ce4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008cf0:	e02e      	b.n	8008d50 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f001 fb15 	bl	800a328 <SDIO_GetResponse>
 8008cfe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	0fdb      	lsrs	r3, r3, #31
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d101      	bne.n	8008d0c <SD_PowerON+0xcc>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e000      	b.n	8008d0e <SD_PowerON+0xce>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	613b      	str	r3, [r7, #16]

    count++;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d802      	bhi.n	8008d26 <SD_PowerON+0xe6>
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0cc      	beq.n	8008cc0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d902      	bls.n	8008d36 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008d30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008d34:	e00c      	b.n	8008d50 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	645a      	str	r2, [r3, #68]	@ 0x44
 8008d46:	e002      	b.n	8008d4e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	c1100000 	.word	0xc1100000

08008d5c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008d70:	e018      	b.n	8008da4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d7a:	041b      	lsls	r3, r3, #16
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	f001 fce1 	bl	800a746 <SDMMC_CmdSendStatus>
 8008d84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	e009      	b.n	8008da4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2100      	movs	r1, #0
 8008d96:	4618      	mov	r0, r3
 8008d98:	f001 fac6 	bl	800a328 <SDIO_GetResponse>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d03f      	beq.n	8008e46 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]
 8008dca:	e033      	b.n	8008e34 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f001 fa38 	bl	800a246 <SDIO_ReadFIFO>
 8008dd6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3301      	adds	r3, #1
 8008de4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	0a1b      	lsrs	r3, r3, #8
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	0c1b      	lsrs	r3, r3, #16
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	0e1b      	lsrs	r3, r3, #24
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3301      	adds	r3, #1
 8008e26:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	3301      	adds	r3, #1
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2b07      	cmp	r3, #7
 8008e38:	d9c8      	bls.n	8008dcc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008e46:	bf00      	nop
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b086      	sub	sp, #24
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e60:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d043      	beq.n	8008ef0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008e68:	2300      	movs	r3, #0
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	e037      	b.n	8008ede <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3301      	adds	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	021a      	lsls	r2, r3, #8
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	041a      	lsls	r2, r3, #16
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	061a      	lsls	r2, r3, #24
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f107 0208 	add.w	r2, r7, #8
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f001 f9c4 	bl	800a260 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	3301      	adds	r3, #1
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b07      	cmp	r3, #7
 8008ee2:	d9c4      	bls.n	8008e6e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	3718      	adds	r7, #24
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e025      	b.n	8008f58 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d106      	bne.n	8008f26 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f7f8 fdeb 	bl	8001afc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f001 f893 	bl	800a064 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	461a      	mov	r2, r3
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	f001 f8e8 	bl	800a11e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e041      	b.n	8008ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d106      	bne.n	8008f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7f8 fc70 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	f000 fa7e 	bl	80094a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
	...

08009000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b01      	cmp	r3, #1
 8009012:	d001      	beq.n	8009018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e04e      	b.n	80090b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 0201 	orr.w	r2, r2, #1
 800902e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a23      	ldr	r2, [pc, #140]	@ (80090c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d022      	beq.n	8009080 <HAL_TIM_Base_Start_IT+0x80>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009042:	d01d      	beq.n	8009080 <HAL_TIM_Base_Start_IT+0x80>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a1f      	ldr	r2, [pc, #124]	@ (80090c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d018      	beq.n	8009080 <HAL_TIM_Base_Start_IT+0x80>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a1e      	ldr	r2, [pc, #120]	@ (80090cc <HAL_TIM_Base_Start_IT+0xcc>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d013      	beq.n	8009080 <HAL_TIM_Base_Start_IT+0x80>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a1c      	ldr	r2, [pc, #112]	@ (80090d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d00e      	beq.n	8009080 <HAL_TIM_Base_Start_IT+0x80>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a1b      	ldr	r2, [pc, #108]	@ (80090d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d009      	beq.n	8009080 <HAL_TIM_Base_Start_IT+0x80>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a19      	ldr	r2, [pc, #100]	@ (80090d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d004      	beq.n	8009080 <HAL_TIM_Base_Start_IT+0x80>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a18      	ldr	r2, [pc, #96]	@ (80090dc <HAL_TIM_Base_Start_IT+0xdc>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d111      	bne.n	80090a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b06      	cmp	r3, #6
 8009090:	d010      	beq.n	80090b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f042 0201 	orr.w	r2, r2, #1
 80090a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a2:	e007      	b.n	80090b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0201 	orr.w	r2, r2, #1
 80090b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	40010000 	.word	0x40010000
 80090c8:	40000400 	.word	0x40000400
 80090cc:	40000800 	.word	0x40000800
 80090d0:	40000c00 	.word	0x40000c00
 80090d4:	40010400 	.word	0x40010400
 80090d8:	40014000 	.word	0x40014000
 80090dc:	40001800 	.word	0x40001800

080090e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d020      	beq.n	8009144 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01b      	beq.n	8009144 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f06f 0202 	mvn.w	r2, #2
 8009114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f999 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 8009130:	e005      	b.n	800913e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f98b 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f99c 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	d020      	beq.n	8009190 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01b      	beq.n	8009190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f06f 0204 	mvn.w	r2, #4
 8009160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2202      	movs	r2, #2
 8009166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f973 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 800917c:	e005      	b.n	800918a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f965 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f976 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d020      	beq.n	80091dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f003 0308 	and.w	r3, r3, #8
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01b      	beq.n	80091dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f06f 0208 	mvn.w	r2, #8
 80091ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2204      	movs	r2, #4
 80091b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f94d 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 80091c8:	e005      	b.n	80091d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f93f 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f950 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f003 0310 	and.w	r3, r3, #16
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d020      	beq.n	8009228 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01b      	beq.n	8009228 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0210 	mvn.w	r2, #16
 80091f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2208      	movs	r2, #8
 80091fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f927 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 8009214:	e005      	b.n	8009222 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f919 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f92a 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00c      	beq.n	800924c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d007      	beq.n	800924c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f06f 0201 	mvn.w	r2, #1
 8009244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7f8 f80e 	bl	8001268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00c      	beq.n	8009270 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925c:	2b00      	cmp	r3, #0
 800925e:	d007      	beq.n	8009270 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fae4 	bl	8009838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00c      	beq.n	8009294 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009280:	2b00      	cmp	r3, #0
 8009282:	d007      	beq.n	8009294 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800928c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f8fb 	bl	800948a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00c      	beq.n	80092b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d007      	beq.n	80092b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f06f 0220 	mvn.w	r2, #32
 80092b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fab6 	bl	8009824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_TIM_ConfigClockSource+0x1c>
 80092d8:	2302      	movs	r3, #2
 80092da:	e0b4      	b.n	8009446 <HAL_TIM_ConfigClockSource+0x186>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80092fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009314:	d03e      	beq.n	8009394 <HAL_TIM_ConfigClockSource+0xd4>
 8009316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800931a:	f200 8087 	bhi.w	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800931e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009322:	f000 8086 	beq.w	8009432 <HAL_TIM_ConfigClockSource+0x172>
 8009326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800932a:	d87f      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800932c:	2b70      	cmp	r3, #112	@ 0x70
 800932e:	d01a      	beq.n	8009366 <HAL_TIM_ConfigClockSource+0xa6>
 8009330:	2b70      	cmp	r3, #112	@ 0x70
 8009332:	d87b      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 8009334:	2b60      	cmp	r3, #96	@ 0x60
 8009336:	d050      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x11a>
 8009338:	2b60      	cmp	r3, #96	@ 0x60
 800933a:	d877      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800933c:	2b50      	cmp	r3, #80	@ 0x50
 800933e:	d03c      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0xfa>
 8009340:	2b50      	cmp	r3, #80	@ 0x50
 8009342:	d873      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 8009344:	2b40      	cmp	r3, #64	@ 0x40
 8009346:	d058      	beq.n	80093fa <HAL_TIM_ConfigClockSource+0x13a>
 8009348:	2b40      	cmp	r3, #64	@ 0x40
 800934a:	d86f      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800934c:	2b30      	cmp	r3, #48	@ 0x30
 800934e:	d064      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009350:	2b30      	cmp	r3, #48	@ 0x30
 8009352:	d86b      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 8009354:	2b20      	cmp	r3, #32
 8009356:	d060      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009358:	2b20      	cmp	r3, #32
 800935a:	d867      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800935c:	2b00      	cmp	r3, #0
 800935e:	d05c      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009360:	2b10      	cmp	r3, #16
 8009362:	d05a      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009364:	e062      	b.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009376:	f000 f9b9 	bl	80096ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	609a      	str	r2, [r3, #8]
      break;
 8009392:	e04f      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80093a4:	f000 f9a2 	bl	80096ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093b6:	609a      	str	r2, [r3, #8]
      break;
 80093b8:	e03c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c6:	461a      	mov	r2, r3
 80093c8:	f000 f916 	bl	80095f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2150      	movs	r1, #80	@ 0x50
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f96f 	bl	80096b6 <TIM_ITRx_SetConfig>
      break;
 80093d8:	e02c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093e6:	461a      	mov	r2, r3
 80093e8:	f000 f935 	bl	8009656 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2160      	movs	r1, #96	@ 0x60
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 f95f 	bl	80096b6 <TIM_ITRx_SetConfig>
      break;
 80093f8:	e01c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009406:	461a      	mov	r2, r3
 8009408:	f000 f8f6 	bl	80095f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2140      	movs	r1, #64	@ 0x40
 8009412:	4618      	mov	r0, r3
 8009414:	f000 f94f 	bl	80096b6 <TIM_ITRx_SetConfig>
      break;
 8009418:	e00c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f000 f946 	bl	80096b6 <TIM_ITRx_SetConfig>
      break;
 800942a:	e003      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	73fb      	strb	r3, [r7, #15]
      break;
 8009430:	e000      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009444:	7bfb      	ldrb	r3, [r7, #15]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009456:	bf00      	nop
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
	...

080094a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a46      	ldr	r2, [pc, #280]	@ (80095cc <TIM_Base_SetConfig+0x12c>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d013      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094be:	d00f      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a43      	ldr	r2, [pc, #268]	@ (80095d0 <TIM_Base_SetConfig+0x130>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00b      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a42      	ldr	r2, [pc, #264]	@ (80095d4 <TIM_Base_SetConfig+0x134>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d007      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a41      	ldr	r2, [pc, #260]	@ (80095d8 <TIM_Base_SetConfig+0x138>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d003      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a40      	ldr	r2, [pc, #256]	@ (80095dc <TIM_Base_SetConfig+0x13c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d108      	bne.n	80094f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a35      	ldr	r2, [pc, #212]	@ (80095cc <TIM_Base_SetConfig+0x12c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d02b      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009500:	d027      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a32      	ldr	r2, [pc, #200]	@ (80095d0 <TIM_Base_SetConfig+0x130>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d023      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a31      	ldr	r2, [pc, #196]	@ (80095d4 <TIM_Base_SetConfig+0x134>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d01f      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a30      	ldr	r2, [pc, #192]	@ (80095d8 <TIM_Base_SetConfig+0x138>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d01b      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a2f      	ldr	r2, [pc, #188]	@ (80095dc <TIM_Base_SetConfig+0x13c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d017      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a2e      	ldr	r2, [pc, #184]	@ (80095e0 <TIM_Base_SetConfig+0x140>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d013      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a2d      	ldr	r2, [pc, #180]	@ (80095e4 <TIM_Base_SetConfig+0x144>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d00f      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a2c      	ldr	r2, [pc, #176]	@ (80095e8 <TIM_Base_SetConfig+0x148>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d00b      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a2b      	ldr	r2, [pc, #172]	@ (80095ec <TIM_Base_SetConfig+0x14c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d007      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a2a      	ldr	r2, [pc, #168]	@ (80095f0 <TIM_Base_SetConfig+0x150>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d003      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a29      	ldr	r2, [pc, #164]	@ (80095f4 <TIM_Base_SetConfig+0x154>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d108      	bne.n	8009564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	4313      	orrs	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a10      	ldr	r2, [pc, #64]	@ (80095cc <TIM_Base_SetConfig+0x12c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_Base_SetConfig+0xf8>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a12      	ldr	r2, [pc, #72]	@ (80095dc <TIM_Base_SetConfig+0x13c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d103      	bne.n	80095a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d105      	bne.n	80095be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	f023 0201 	bic.w	r2, r3, #1
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	611a      	str	r2, [r3, #16]
  }
}
 80095be:	bf00      	nop
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	40010000 	.word	0x40010000
 80095d0:	40000400 	.word	0x40000400
 80095d4:	40000800 	.word	0x40000800
 80095d8:	40000c00 	.word	0x40000c00
 80095dc:	40010400 	.word	0x40010400
 80095e0:	40014000 	.word	0x40014000
 80095e4:	40014400 	.word	0x40014400
 80095e8:	40014800 	.word	0x40014800
 80095ec:	40001800 	.word	0x40001800
 80095f0:	40001c00 	.word	0x40001c00
 80095f4:	40002000 	.word	0x40002000

080095f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	f023 0201 	bic.w	r2, r3, #1
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	4313      	orrs	r3, r2
 800962c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f023 030a 	bic.w	r3, r3, #10
 8009634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4313      	orrs	r3, r2
 800963c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	621a      	str	r2, [r3, #32]
}
 800964a:	bf00      	nop
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009656:	b480      	push	{r7}
 8009658:	b087      	sub	sp, #28
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6a1b      	ldr	r3, [r3, #32]
 800966c:	f023 0210 	bic.w	r2, r3, #16
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	031b      	lsls	r3, r3, #12
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	4313      	orrs	r3, r2
 800968a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009692:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	011b      	lsls	r3, r3, #4
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	621a      	str	r2, [r3, #32]
}
 80096aa:	bf00      	nop
 80096ac:	371c      	adds	r7, #28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b085      	sub	sp, #20
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	f043 0307 	orr.w	r3, r3, #7
 80096d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	609a      	str	r2, [r3, #8]
}
 80096e0:	bf00      	nop
 80096e2:	3714      	adds	r7, #20
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009706:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	021a      	lsls	r2, r3, #8
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	431a      	orrs	r2, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4313      	orrs	r3, r2
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	609a      	str	r2, [r3, #8]
}
 8009720:	bf00      	nop
 8009722:	371c      	adds	r7, #28
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009740:	2302      	movs	r3, #2
 8009742:	e05a      	b.n	80097fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800976a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	4313      	orrs	r3, r2
 8009774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a21      	ldr	r2, [pc, #132]	@ (8009808 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d022      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009790:	d01d      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a1d      	ldr	r2, [pc, #116]	@ (800980c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d018      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a1b      	ldr	r2, [pc, #108]	@ (8009810 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d013      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a1a      	ldr	r2, [pc, #104]	@ (8009814 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d00e      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a18      	ldr	r2, [pc, #96]	@ (8009818 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d009      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a17      	ldr	r2, [pc, #92]	@ (800981c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d004      	beq.n	80097ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a15      	ldr	r2, [pc, #84]	@ (8009820 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d10c      	bne.n	80097e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	4313      	orrs	r3, r2
 80097de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	40010000 	.word	0x40010000
 800980c:	40000400 	.word	0x40000400
 8009810:	40000800 	.word	0x40000800
 8009814:	40000c00 	.word	0x40000c00
 8009818:	40010400 	.word	0x40010400
 800981c:	40014000 	.word	0x40014000
 8009820:	40001800 	.word	0x40001800

08009824 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e042      	b.n	80098e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7f8 f81c 	bl	80018b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2224      	movs	r2, #36	@ 0x24
 800987c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68da      	ldr	r2, [r3, #12]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800988e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f973 	bl	8009b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	691a      	ldr	r2, [r3, #16]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	695a      	ldr	r2, [r3, #20]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80098b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2220      	movs	r2, #32
 80098d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08a      	sub	sp, #40	@ 0x28
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	603b      	str	r3, [r7, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b20      	cmp	r3, #32
 800990a:	d175      	bne.n	80099f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <HAL_UART_Transmit+0x2c>
 8009912:	88fb      	ldrh	r3, [r7, #6]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e06e      	b.n	80099fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2221      	movs	r2, #33	@ 0x21
 8009926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800992a:	f7f8 fafd 	bl	8001f28 <HAL_GetTick>
 800992e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	88fa      	ldrh	r2, [r7, #6]
 8009934:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	88fa      	ldrh	r2, [r7, #6]
 800993a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009944:	d108      	bne.n	8009958 <HAL_UART_Transmit+0x6c>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d104      	bne.n	8009958 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800994e:	2300      	movs	r3, #0
 8009950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	61bb      	str	r3, [r7, #24]
 8009956:	e003      	b.n	8009960 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800995c:	2300      	movs	r3, #0
 800995e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009960:	e02e      	b.n	80099c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2200      	movs	r2, #0
 800996a:	2180      	movs	r1, #128	@ 0x80
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 f848 	bl	8009a02 <UART_WaitOnFlagUntilTimeout>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2220      	movs	r2, #32
 800997c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e03a      	b.n	80099fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10b      	bne.n	80099a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009998:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	3302      	adds	r3, #2
 800999e:	61bb      	str	r3, [r7, #24]
 80099a0:	e007      	b.n	80099b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	781a      	ldrb	r2, [r3, #0]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	3301      	adds	r3, #1
 80099b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	3b01      	subs	r3, #1
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1cb      	bne.n	8009962 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2200      	movs	r2, #0
 80099d2:	2140      	movs	r1, #64	@ 0x40
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 f814 	bl	8009a02 <UART_WaitOnFlagUntilTimeout>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e006      	b.n	80099fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	e000      	b.n	80099fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80099f8:	2302      	movs	r3, #2
  }
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3720      	adds	r7, #32
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b086      	sub	sp, #24
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	603b      	str	r3, [r7, #0]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a12:	e03b      	b.n	8009a8c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a1a:	d037      	beq.n	8009a8c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1c:	f7f8 fa84 	bl	8001f28 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	6a3a      	ldr	r2, [r7, #32]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d302      	bcc.n	8009a32 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e03a      	b.n	8009aac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	f003 0304 	and.w	r3, r3, #4
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d023      	beq.n	8009a8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2b80      	cmp	r3, #128	@ 0x80
 8009a48:	d020      	beq.n	8009a8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b40      	cmp	r3, #64	@ 0x40
 8009a4e:	d01d      	beq.n	8009a8c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 0308 	and.w	r3, r3, #8
 8009a5a:	2b08      	cmp	r3, #8
 8009a5c:	d116      	bne.n	8009a8c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009a5e:	2300      	movs	r3, #0
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	617b      	str	r3, [r7, #20]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	617b      	str	r3, [r7, #20]
 8009a72:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 f81d 	bl	8009ab4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2208      	movs	r2, #8
 8009a7e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e00f      	b.n	8009aac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	4013      	ands	r3, r2
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	bf0c      	ite	eq
 8009a9c:	2301      	moveq	r3, #1
 8009a9e:	2300      	movne	r3, #0
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d0b4      	beq.n	8009a14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b095      	sub	sp, #84	@ 0x54
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	330c      	adds	r3, #12
 8009ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac6:	e853 3f00 	ldrex	r3, [r3]
 8009aca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	330c      	adds	r3, #12
 8009ada:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009adc:	643a      	str	r2, [r7, #64]	@ 0x40
 8009ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ae2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ae4:	e841 2300 	strex	r3, r2, [r1]
 8009ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e5      	bne.n	8009abc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3314      	adds	r3, #20
 8009af6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	f023 0301 	bic.w	r3, r3, #1
 8009b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3314      	adds	r3, #20
 8009b0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e5      	bne.n	8009af0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d119      	bne.n	8009b60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	330c      	adds	r3, #12
 8009b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	e853 3f00 	ldrex	r3, [r3]
 8009b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f023 0310 	bic.w	r3, r3, #16
 8009b42:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	330c      	adds	r3, #12
 8009b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b4c:	61ba      	str	r2, [r7, #24]
 8009b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b50:	6979      	ldr	r1, [r7, #20]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	e841 2300 	strex	r3, r2, [r1]
 8009b58:	613b      	str	r3, [r7, #16]
   return(result);
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e5      	bne.n	8009b2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009b6e:	bf00      	nop
 8009b70:	3754      	adds	r7, #84	@ 0x54
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
	...

08009b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b80:	b0c0      	sub	sp, #256	@ 0x100
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b98:	68d9      	ldr	r1, [r3, #12]
 8009b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	ea40 0301 	orr.w	r3, r0, r1
 8009ba4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	431a      	orrs	r2, r3
 8009bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009bd4:	f021 010c 	bic.w	r1, r1, #12
 8009bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009be2:	430b      	orrs	r3, r1
 8009be4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf6:	6999      	ldr	r1, [r3, #24]
 8009bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	ea40 0301 	orr.w	r3, r0, r1
 8009c02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	4b8f      	ldr	r3, [pc, #572]	@ (8009e48 <UART_SetConfig+0x2cc>)
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d005      	beq.n	8009c1c <UART_SetConfig+0xa0>
 8009c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	4b8d      	ldr	r3, [pc, #564]	@ (8009e4c <UART_SetConfig+0x2d0>)
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d104      	bne.n	8009c26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c1c:	f7fd f920 	bl	8006e60 <HAL_RCC_GetPCLK2Freq>
 8009c20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009c24:	e003      	b.n	8009c2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c26:	f7fd f907 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8009c2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c38:	f040 810c 	bne.w	8009e54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c40:	2200      	movs	r2, #0
 8009c42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c4e:	4622      	mov	r2, r4
 8009c50:	462b      	mov	r3, r5
 8009c52:	1891      	adds	r1, r2, r2
 8009c54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c56:	415b      	adcs	r3, r3
 8009c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c5e:	4621      	mov	r1, r4
 8009c60:	eb12 0801 	adds.w	r8, r2, r1
 8009c64:	4629      	mov	r1, r5
 8009c66:	eb43 0901 	adc.w	r9, r3, r1
 8009c6a:	f04f 0200 	mov.w	r2, #0
 8009c6e:	f04f 0300 	mov.w	r3, #0
 8009c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c7e:	4690      	mov	r8, r2
 8009c80:	4699      	mov	r9, r3
 8009c82:	4623      	mov	r3, r4
 8009c84:	eb18 0303 	adds.w	r3, r8, r3
 8009c88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c8c:	462b      	mov	r3, r5
 8009c8e:	eb49 0303 	adc.w	r3, r9, r3
 8009c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ca2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ca6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009caa:	460b      	mov	r3, r1
 8009cac:	18db      	adds	r3, r3, r3
 8009cae:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	eb42 0303 	adc.w	r3, r2, r3
 8009cb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009cbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009cc0:	f7f6 faa0 	bl	8000204 <__aeabi_uldivmod>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4b61      	ldr	r3, [pc, #388]	@ (8009e50 <UART_SetConfig+0x2d4>)
 8009cca:	fba3 2302 	umull	r2, r3, r3, r2
 8009cce:	095b      	lsrs	r3, r3, #5
 8009cd0:	011c      	lsls	r4, r3, #4
 8009cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009cdc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009ce0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	1891      	adds	r1, r2, r2
 8009cea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009cec:	415b      	adcs	r3, r3
 8009cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009cf4:	4641      	mov	r1, r8
 8009cf6:	eb12 0a01 	adds.w	sl, r2, r1
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	eb43 0b01 	adc.w	fp, r3, r1
 8009d00:	f04f 0200 	mov.w	r2, #0
 8009d04:	f04f 0300 	mov.w	r3, #0
 8009d08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d14:	4692      	mov	sl, r2
 8009d16:	469b      	mov	fp, r3
 8009d18:	4643      	mov	r3, r8
 8009d1a:	eb1a 0303 	adds.w	r3, sl, r3
 8009d1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d22:	464b      	mov	r3, r9
 8009d24:	eb4b 0303 	adc.w	r3, fp, r3
 8009d28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d40:	460b      	mov	r3, r1
 8009d42:	18db      	adds	r3, r3, r3
 8009d44:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d46:	4613      	mov	r3, r2
 8009d48:	eb42 0303 	adc.w	r3, r2, r3
 8009d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d56:	f7f6 fa55 	bl	8000204 <__aeabi_uldivmod>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4611      	mov	r1, r2
 8009d60:	4b3b      	ldr	r3, [pc, #236]	@ (8009e50 <UART_SetConfig+0x2d4>)
 8009d62:	fba3 2301 	umull	r2, r3, r3, r1
 8009d66:	095b      	lsrs	r3, r3, #5
 8009d68:	2264      	movs	r2, #100	@ 0x64
 8009d6a:	fb02 f303 	mul.w	r3, r2, r3
 8009d6e:	1acb      	subs	r3, r1, r3
 8009d70:	00db      	lsls	r3, r3, #3
 8009d72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009d76:	4b36      	ldr	r3, [pc, #216]	@ (8009e50 <UART_SetConfig+0x2d4>)
 8009d78:	fba3 2302 	umull	r2, r3, r3, r2
 8009d7c:	095b      	lsrs	r3, r3, #5
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009d84:	441c      	add	r4, r3
 8009d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009d94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009d98:	4642      	mov	r2, r8
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	1891      	adds	r1, r2, r2
 8009d9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009da0:	415b      	adcs	r3, r3
 8009da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009da4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009da8:	4641      	mov	r1, r8
 8009daa:	1851      	adds	r1, r2, r1
 8009dac:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dae:	4649      	mov	r1, r9
 8009db0:	414b      	adcs	r3, r1
 8009db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db4:	f04f 0200 	mov.w	r2, #0
 8009db8:	f04f 0300 	mov.w	r3, #0
 8009dbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009dc0:	4659      	mov	r1, fp
 8009dc2:	00cb      	lsls	r3, r1, #3
 8009dc4:	4651      	mov	r1, sl
 8009dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dca:	4651      	mov	r1, sl
 8009dcc:	00ca      	lsls	r2, r1, #3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	189b      	adds	r3, r3, r2
 8009dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ddc:	464b      	mov	r3, r9
 8009dde:	460a      	mov	r2, r1
 8009de0:	eb42 0303 	adc.w	r3, r2, r3
 8009de4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009df4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009df8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	18db      	adds	r3, r3, r3
 8009e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e02:	4613      	mov	r3, r2
 8009e04:	eb42 0303 	adc.w	r3, r2, r3
 8009e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009e12:	f7f6 f9f7 	bl	8000204 <__aeabi_uldivmod>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e50 <UART_SetConfig+0x2d4>)
 8009e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e20:	095b      	lsrs	r3, r3, #5
 8009e22:	2164      	movs	r1, #100	@ 0x64
 8009e24:	fb01 f303 	mul.w	r3, r1, r3
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	00db      	lsls	r3, r3, #3
 8009e2c:	3332      	adds	r3, #50	@ 0x32
 8009e2e:	4a08      	ldr	r2, [pc, #32]	@ (8009e50 <UART_SetConfig+0x2d4>)
 8009e30:	fba2 2303 	umull	r2, r3, r2, r3
 8009e34:	095b      	lsrs	r3, r3, #5
 8009e36:	f003 0207 	and.w	r2, r3, #7
 8009e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4422      	add	r2, r4
 8009e42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e44:	e106      	b.n	800a054 <UART_SetConfig+0x4d8>
 8009e46:	bf00      	nop
 8009e48:	40011000 	.word	0x40011000
 8009e4c:	40011400 	.word	0x40011400
 8009e50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009e62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009e66:	4642      	mov	r2, r8
 8009e68:	464b      	mov	r3, r9
 8009e6a:	1891      	adds	r1, r2, r2
 8009e6c:	6239      	str	r1, [r7, #32]
 8009e6e:	415b      	adcs	r3, r3
 8009e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e76:	4641      	mov	r1, r8
 8009e78:	1854      	adds	r4, r2, r1
 8009e7a:	4649      	mov	r1, r9
 8009e7c:	eb43 0501 	adc.w	r5, r3, r1
 8009e80:	f04f 0200 	mov.w	r2, #0
 8009e84:	f04f 0300 	mov.w	r3, #0
 8009e88:	00eb      	lsls	r3, r5, #3
 8009e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e8e:	00e2      	lsls	r2, r4, #3
 8009e90:	4614      	mov	r4, r2
 8009e92:	461d      	mov	r5, r3
 8009e94:	4643      	mov	r3, r8
 8009e96:	18e3      	adds	r3, r4, r3
 8009e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e9c:	464b      	mov	r3, r9
 8009e9e:	eb45 0303 	adc.w	r3, r5, r3
 8009ea2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009eb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009eb6:	f04f 0200 	mov.w	r2, #0
 8009eba:	f04f 0300 	mov.w	r3, #0
 8009ebe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	008b      	lsls	r3, r1, #2
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ecc:	4621      	mov	r1, r4
 8009ece:	008a      	lsls	r2, r1, #2
 8009ed0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009ed4:	f7f6 f996 	bl	8000204 <__aeabi_uldivmod>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4b60      	ldr	r3, [pc, #384]	@ (800a060 <UART_SetConfig+0x4e4>)
 8009ede:	fba3 2302 	umull	r2, r3, r3, r2
 8009ee2:	095b      	lsrs	r3, r3, #5
 8009ee4:	011c      	lsls	r4, r3, #4
 8009ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009eea:	2200      	movs	r2, #0
 8009eec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ef0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ef4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	1891      	adds	r1, r2, r2
 8009efe:	61b9      	str	r1, [r7, #24]
 8009f00:	415b      	adcs	r3, r3
 8009f02:	61fb      	str	r3, [r7, #28]
 8009f04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f08:	4641      	mov	r1, r8
 8009f0a:	1851      	adds	r1, r2, r1
 8009f0c:	6139      	str	r1, [r7, #16]
 8009f0e:	4649      	mov	r1, r9
 8009f10:	414b      	adcs	r3, r1
 8009f12:	617b      	str	r3, [r7, #20]
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f20:	4659      	mov	r1, fp
 8009f22:	00cb      	lsls	r3, r1, #3
 8009f24:	4651      	mov	r1, sl
 8009f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f2a:	4651      	mov	r1, sl
 8009f2c:	00ca      	lsls	r2, r1, #3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	4619      	mov	r1, r3
 8009f32:	4603      	mov	r3, r0
 8009f34:	4642      	mov	r2, r8
 8009f36:	189b      	adds	r3, r3, r2
 8009f38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	460a      	mov	r2, r1
 8009f40:	eb42 0303 	adc.w	r3, r2, r3
 8009f44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	f04f 0300 	mov.w	r3, #0
 8009f5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009f60:	4649      	mov	r1, r9
 8009f62:	008b      	lsls	r3, r1, #2
 8009f64:	4641      	mov	r1, r8
 8009f66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f6a:	4641      	mov	r1, r8
 8009f6c:	008a      	lsls	r2, r1, #2
 8009f6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009f72:	f7f6 f947 	bl	8000204 <__aeabi_uldivmod>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	4b38      	ldr	r3, [pc, #224]	@ (800a060 <UART_SetConfig+0x4e4>)
 8009f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8009f82:	095b      	lsrs	r3, r3, #5
 8009f84:	2264      	movs	r2, #100	@ 0x64
 8009f86:	fb02 f303 	mul.w	r3, r2, r3
 8009f8a:	1acb      	subs	r3, r1, r3
 8009f8c:	011b      	lsls	r3, r3, #4
 8009f8e:	3332      	adds	r3, #50	@ 0x32
 8009f90:	4a33      	ldr	r2, [pc, #204]	@ (800a060 <UART_SetConfig+0x4e4>)
 8009f92:	fba2 2303 	umull	r2, r3, r2, r3
 8009f96:	095b      	lsrs	r3, r3, #5
 8009f98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f9c:	441c      	add	r4, r3
 8009f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fa6:	677a      	str	r2, [r7, #116]	@ 0x74
 8009fa8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009fac:	4642      	mov	r2, r8
 8009fae:	464b      	mov	r3, r9
 8009fb0:	1891      	adds	r1, r2, r2
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	415b      	adcs	r3, r3
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fbc:	4641      	mov	r1, r8
 8009fbe:	1851      	adds	r1, r2, r1
 8009fc0:	6039      	str	r1, [r7, #0]
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	414b      	adcs	r3, r1
 8009fc6:	607b      	str	r3, [r7, #4]
 8009fc8:	f04f 0200 	mov.w	r2, #0
 8009fcc:	f04f 0300 	mov.w	r3, #0
 8009fd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009fd4:	4659      	mov	r1, fp
 8009fd6:	00cb      	lsls	r3, r1, #3
 8009fd8:	4651      	mov	r1, sl
 8009fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fde:	4651      	mov	r1, sl
 8009fe0:	00ca      	lsls	r2, r1, #3
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	4642      	mov	r2, r8
 8009fea:	189b      	adds	r3, r3, r2
 8009fec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009fee:	464b      	mov	r3, r9
 8009ff0:	460a      	mov	r2, r1
 8009ff2:	eb42 0303 	adc.w	r3, r2, r3
 8009ff6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	663b      	str	r3, [r7, #96]	@ 0x60
 800a002:	667a      	str	r2, [r7, #100]	@ 0x64
 800a004:	f04f 0200 	mov.w	r2, #0
 800a008:	f04f 0300 	mov.w	r3, #0
 800a00c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a010:	4649      	mov	r1, r9
 800a012:	008b      	lsls	r3, r1, #2
 800a014:	4641      	mov	r1, r8
 800a016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a01a:	4641      	mov	r1, r8
 800a01c:	008a      	lsls	r2, r1, #2
 800a01e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a022:	f7f6 f8ef 	bl	8000204 <__aeabi_uldivmod>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	4b0d      	ldr	r3, [pc, #52]	@ (800a060 <UART_SetConfig+0x4e4>)
 800a02c:	fba3 1302 	umull	r1, r3, r3, r2
 800a030:	095b      	lsrs	r3, r3, #5
 800a032:	2164      	movs	r1, #100	@ 0x64
 800a034:	fb01 f303 	mul.w	r3, r1, r3
 800a038:	1ad3      	subs	r3, r2, r3
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	3332      	adds	r3, #50	@ 0x32
 800a03e:	4a08      	ldr	r2, [pc, #32]	@ (800a060 <UART_SetConfig+0x4e4>)
 800a040:	fba2 2303 	umull	r2, r3, r2, r3
 800a044:	095b      	lsrs	r3, r3, #5
 800a046:	f003 020f 	and.w	r2, r3, #15
 800a04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4422      	add	r2, r4
 800a052:	609a      	str	r2, [r3, #8]
}
 800a054:	bf00      	nop
 800a056:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a05a:	46bd      	mov	sp, r7
 800a05c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a060:	51eb851f 	.word	0x51eb851f

0800a064 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d123      	bne.n	800a0be <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a07e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	6851      	ldr	r1, [r2, #4]
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	6892      	ldr	r2, [r2, #8]
 800a08a:	4311      	orrs	r1, r2
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	68d2      	ldr	r2, [r2, #12]
 800a090:	4311      	orrs	r1, r2
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	6912      	ldr	r2, [r2, #16]
 800a096:	4311      	orrs	r1, r2
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	6952      	ldr	r2, [r2, #20]
 800a09c:	4311      	orrs	r1, r2
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	6992      	ldr	r2, [r2, #24]
 800a0a2:	4311      	orrs	r1, r2
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	69d2      	ldr	r2, [r2, #28]
 800a0a8:	4311      	orrs	r1, r2
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	6a12      	ldr	r2, [r2, #32]
 800a0ae:	4311      	orrs	r1, r2
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	e028      	b.n	800a110 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	69d9      	ldr	r1, [r3, #28]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	4319      	orrs	r1, r3
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	431a      	orrs	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a0e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0e8:	683a      	ldr	r2, [r7, #0]
 800a0ea:	6851      	ldr	r1, [r2, #4]
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	6892      	ldr	r2, [r2, #8]
 800a0f0:	4311      	orrs	r1, r2
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	68d2      	ldr	r2, [r2, #12]
 800a0f6:	4311      	orrs	r1, r2
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	6912      	ldr	r2, [r2, #16]
 800a0fc:	4311      	orrs	r1, r2
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	6952      	ldr	r2, [r2, #20]
 800a102:	4311      	orrs	r1, r2
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	6992      	ldr	r2, [r2, #24]
 800a108:	430a      	orrs	r2, r1
 800a10a:	431a      	orrs	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	370c      	adds	r7, #12
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a11e:	b480      	push	{r7}
 800a120:	b085      	sub	sp, #20
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d128      	bne.n	800a182 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	1e59      	subs	r1, r3, #1
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	3b01      	subs	r3, #1
 800a144:	011b      	lsls	r3, r3, #4
 800a146:	4319      	orrs	r1, r3
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	021b      	lsls	r3, r3, #8
 800a150:	4319      	orrs	r1, r3
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	3b01      	subs	r3, #1
 800a158:	031b      	lsls	r3, r3, #12
 800a15a:	4319      	orrs	r1, r3
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	3b01      	subs	r3, #1
 800a162:	041b      	lsls	r3, r3, #16
 800a164:	4319      	orrs	r1, r3
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	051b      	lsls	r3, r3, #20
 800a16e:	4319      	orrs	r1, r3
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	3b01      	subs	r3, #1
 800a176:	061b      	lsls	r3, r3, #24
 800a178:	430b      	orrs	r3, r1
 800a17a:	431a      	orrs	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	609a      	str	r2, [r3, #8]
 800a180:	e02f      	b.n	800a1e2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a18a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	68d2      	ldr	r2, [r2, #12]
 800a192:	3a01      	subs	r2, #1
 800a194:	0311      	lsls	r1, r2, #12
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	6952      	ldr	r2, [r2, #20]
 800a19a:	3a01      	subs	r2, #1
 800a19c:	0512      	lsls	r2, r2, #20
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	431a      	orrs	r2, r3
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	1e59      	subs	r1, r3, #1
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	4319      	orrs	r1, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	4319      	orrs	r1, r3
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	041b      	lsls	r3, r3, #16
 800a1d0:	4319      	orrs	r1, r3
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	061b      	lsls	r3, r3, #24
 800a1da:	430b      	orrs	r3, r1
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	b480      	push	{r7}
 800a1f4:	b085      	sub	sp, #20
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	f107 001c 	add.w	r0, r7, #28
 800a1fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a206:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a208:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a20a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a20e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a212:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a216:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a21a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	4313      	orrs	r3, r2
 800a220:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a22a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	431a      	orrs	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	b004      	add	sp, #16
 800a244:	4770      	bx	lr

0800a246 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a246:	b480      	push	{r7}
 800a248:	b083      	sub	sp, #12
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a282:	b480      	push	{r7}
 800a284:	b083      	sub	sp, #12
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2203      	movs	r2, #3
 800a28e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b083      	sub	sp, #12
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0303 	and.w	r3, r3, #3
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2d8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a2de:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a2e4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a2f4:	f023 030f 	bic.w	r3, r3, #15
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	b2db      	uxtb	r3, r3
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	3314      	adds	r3, #20
 800a336:	461a      	mov	r2, r3
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	4413      	add	r3, r2
 800a33c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
}  
 800a342:	4618      	mov	r0, r3
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a34e:	b480      	push	{r7}
 800a350:	b085      	sub	sp, #20
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a374:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a37a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a380:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	4313      	orrs	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a398:	2300      	movs	r3, #0

}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b088      	sub	sp, #32
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3b8:	2340      	movs	r3, #64	@ 0x40
 800a3ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3c6:	f107 0308 	add.w	r3, r7, #8
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f7ff ff74 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a3d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3d6:	2110      	movs	r1, #16
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f9d7 	bl	800a78c <SDMMC_GetCmdResp1>
 800a3de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3e0:	69fb      	ldr	r3, [r7, #28]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3720      	adds	r7, #32
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b088      	sub	sp, #32
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a3f8:	2311      	movs	r3, #17
 800a3fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3fc:	2340      	movs	r3, #64	@ 0x40
 800a3fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a400:	2300      	movs	r3, #0
 800a402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a408:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a40a:	f107 0308 	add.w	r3, r7, #8
 800a40e:	4619      	mov	r1, r3
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7ff ff52 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a41a:	2111      	movs	r1, #17
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f9b5 	bl	800a78c <SDMMC_GetCmdResp1>
 800a422:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a424:	69fb      	ldr	r3, [r7, #28]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3720      	adds	r7, #32
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b088      	sub	sp, #32
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a43c:	2312      	movs	r3, #18
 800a43e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a440:	2340      	movs	r3, #64	@ 0x40
 800a442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a444:	2300      	movs	r3, #0
 800a446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a448:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a44c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a44e:	f107 0308 	add.w	r3, r7, #8
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff ff30 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a45a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a45e:	2112      	movs	r1, #18
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f993 	bl	800a78c <SDMMC_GetCmdResp1>
 800a466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a468:	69fb      	ldr	r3, [r7, #28]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3720      	adds	r7, #32
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b088      	sub	sp, #32
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a480:	2318      	movs	r3, #24
 800a482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a484:	2340      	movs	r3, #64	@ 0x40
 800a486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a48c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a490:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a492:	f107 0308 	add.w	r3, r7, #8
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7ff ff0e 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a49e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4a2:	2118      	movs	r1, #24
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f971 	bl	800a78c <SDMMC_GetCmdResp1>
 800a4aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4ac:	69fb      	ldr	r3, [r7, #28]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3720      	adds	r7, #32
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b088      	sub	sp, #32
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a4c4:	2319      	movs	r3, #25
 800a4c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4c8:	2340      	movs	r3, #64	@ 0x40
 800a4ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4d6:	f107 0308 	add.w	r3, r7, #8
 800a4da:	4619      	mov	r1, r3
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7ff feec 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a4e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4e6:	2119      	movs	r1, #25
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f94f 	bl	800a78c <SDMMC_GetCmdResp1>
 800a4ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4f0:	69fb      	ldr	r3, [r7, #28]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3720      	adds	r7, #32
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
	...

0800a4fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a504:	2300      	movs	r3, #0
 800a506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a508:	230c      	movs	r3, #12
 800a50a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a50c:	2340      	movs	r3, #64	@ 0x40
 800a50e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a510:	2300      	movs	r3, #0
 800a512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a518:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a51a:	f107 0308 	add.w	r3, r7, #8
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff feca 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a526:	4a05      	ldr	r2, [pc, #20]	@ (800a53c <SDMMC_CmdStopTransfer+0x40>)
 800a528:	210c      	movs	r1, #12
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f92e 	bl	800a78c <SDMMC_GetCmdResp1>
 800a530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a532:	69fb      	ldr	r3, [r7, #28]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3720      	adds	r7, #32
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	05f5e100 	.word	0x05f5e100

0800a540 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08a      	sub	sp, #40	@ 0x28
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a550:	2307      	movs	r3, #7
 800a552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a554:	2340      	movs	r3, #64	@ 0x40
 800a556:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a558:	2300      	movs	r3, #0
 800a55a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a55c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a560:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a562:	f107 0310 	add.w	r3, r7, #16
 800a566:	4619      	mov	r1, r3
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7ff fea6 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a56e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a572:	2107      	movs	r1, #7
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f000 f909 	bl	800a78c <SDMMC_GetCmdResp1>
 800a57a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3728      	adds	r7, #40	@ 0x28
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b088      	sub	sp, #32
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a58e:	2300      	movs	r3, #0
 800a590:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a596:	2300      	movs	r3, #0
 800a598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a59a:	2300      	movs	r3, #0
 800a59c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a59e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5a4:	f107 0308 	add.w	r3, r7, #8
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff fe85 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fb23 	bl	800abfc <SDMMC_GetCmdError>
 800a5b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5b8:	69fb      	ldr	r3, [r7, #28]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3720      	adds	r7, #32
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b088      	sub	sp, #32
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a5ca:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a5ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5d4:	2340      	movs	r3, #64	@ 0x40
 800a5d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5e2:	f107 0308 	add.w	r3, r7, #8
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff fe66 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fab6 	bl	800ab60 <SDMMC_GetCmdResp7>
 800a5f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5f6:	69fb      	ldr	r3, [r7, #28]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3720      	adds	r7, #32
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b088      	sub	sp, #32
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a60e:	2337      	movs	r3, #55	@ 0x37
 800a610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a612:	2340      	movs	r3, #64	@ 0x40
 800a614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a616:	2300      	movs	r3, #0
 800a618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a61a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a61e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a620:	f107 0308 	add.w	r3, r7, #8
 800a624:	4619      	mov	r1, r3
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff fe47 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a62c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a630:	2137      	movs	r1, #55	@ 0x37
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f8aa 	bl	800a78c <SDMMC_GetCmdResp1>
 800a638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a63a:	69fb      	ldr	r3, [r7, #28]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3720      	adds	r7, #32
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b088      	sub	sp, #32
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a65a:	2329      	movs	r3, #41	@ 0x29
 800a65c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a65e:	2340      	movs	r3, #64	@ 0x40
 800a660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a662:	2300      	movs	r3, #0
 800a664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a66a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a66c:	f107 0308 	add.w	r3, r7, #8
 800a670:	4619      	mov	r1, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7ff fe21 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f9bd 	bl	800a9f8 <SDMMC_GetCmdResp3>
 800a67e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a680:	69fb      	ldr	r3, [r7, #28]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3720      	adds	r7, #32
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b088      	sub	sp, #32
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a696:	2302      	movs	r3, #2
 800a698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a69a:	23c0      	movs	r3, #192	@ 0xc0
 800a69c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff fe03 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f957 	bl	800a968 <SDMMC_GetCmdResp2>
 800a6ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6bc:	69fb      	ldr	r3, [r7, #28]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b088      	sub	sp, #32
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a6d4:	2309      	movs	r3, #9
 800a6d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a6d8:	23c0      	movs	r3, #192	@ 0xc0
 800a6da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6e6:	f107 0308 	add.w	r3, r7, #8
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff fde4 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f938 	bl	800a968 <SDMMC_GetCmdResp2>
 800a6f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6fa:	69fb      	ldr	r3, [r7, #28]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3720      	adds	r7, #32
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a70e:	2300      	movs	r3, #0
 800a710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a712:	2303      	movs	r3, #3
 800a714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a716:	2340      	movs	r3, #64	@ 0x40
 800a718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a71a:	2300      	movs	r3, #0
 800a71c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a71e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a722:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a724:	f107 0308 	add.w	r3, r7, #8
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7ff fdc5 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a730:	683a      	ldr	r2, [r7, #0]
 800a732:	2103      	movs	r1, #3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f99d 	bl	800aa74 <SDMMC_GetCmdResp6>
 800a73a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a73c:	69fb      	ldr	r3, [r7, #28]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3720      	adds	r7, #32
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b088      	sub	sp, #32
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a754:	230d      	movs	r3, #13
 800a756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a758:	2340      	movs	r3, #64	@ 0x40
 800a75a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a75c:	2300      	movs	r3, #0
 800a75e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a764:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a766:	f107 0308 	add.w	r3, r7, #8
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7ff fda4 	bl	800a2ba <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a772:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a776:	210d      	movs	r1, #13
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 f807 	bl	800a78c <SDMMC_GetCmdResp1>
 800a77e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a780:	69fb      	ldr	r3, [r7, #28]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3720      	adds	r7, #32
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
	...

0800a78c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	460b      	mov	r3, r1
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a79a:	4b70      	ldr	r3, [pc, #448]	@ (800a95c <SDMMC_GetCmdResp1+0x1d0>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a70      	ldr	r2, [pc, #448]	@ (800a960 <SDMMC_GetCmdResp1+0x1d4>)
 800a7a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a4:	0a5a      	lsrs	r2, r3, #9
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	fb02 f303 	mul.w	r3, r2, r3
 800a7ac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	1e5a      	subs	r2, r3, #1
 800a7b2:	61fa      	str	r2, [r7, #28]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7bc:	e0c9      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7c2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d0ef      	beq.n	800a7ae <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1ea      	bne.n	800a7ae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7dc:	f003 0304 	and.w	r3, r3, #4
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d004      	beq.n	800a7ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2204      	movs	r2, #4
 800a7e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7ea:	2304      	movs	r3, #4
 800a7ec:	e0b1      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d004      	beq.n	800a804 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a800:	2301      	movs	r3, #1
 800a802:	e0a6      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	22c5      	movs	r2, #197	@ 0xc5
 800a808:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f7ff fd7f 	bl	800a30e <SDIO_GetCommandResponse>
 800a810:	4603      	mov	r3, r0
 800a812:	461a      	mov	r2, r3
 800a814:	7afb      	ldrb	r3, [r7, #11]
 800a816:	4293      	cmp	r3, r2
 800a818:	d001      	beq.n	800a81e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e099      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a81e:	2100      	movs	r1, #0
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f7ff fd81 	bl	800a328 <SDIO_GetResponse>
 800a826:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	4b4e      	ldr	r3, [pc, #312]	@ (800a964 <SDMMC_GetCmdResp1+0x1d8>)
 800a82c:	4013      	ands	r3, r2
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a832:	2300      	movs	r3, #0
 800a834:	e08d      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	da02      	bge.n	800a842 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a83c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a840:	e087      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a84c:	2340      	movs	r3, #64	@ 0x40
 800a84e:	e080      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a85a:	2380      	movs	r3, #128	@ 0x80
 800a85c:	e079      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a86c:	e071      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a878:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a87c:	e069      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a88c:	e061      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a898:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a89c:	e059      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8ac:	e051      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a8bc:	e049      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d002      	beq.n	800a8ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a8c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a8cc:	e041      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a8d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8dc:	e039      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a8e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a8ec:	e031      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a8f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a8fc:	e029      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a908:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a90c:	e021      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a918:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a91c:	e019      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a928:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a92c:	e011      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a938:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a93c:	e009      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f003 0308 	and.w	r3, r3, #8
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a948:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a94c:	e001      	b.n	800a952 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a94e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a952:	4618      	mov	r0, r3
 800a954:	3720      	adds	r7, #32
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	2000001c 	.word	0x2000001c
 800a960:	10624dd3 	.word	0x10624dd3
 800a964:	fdffe008 	.word	0xfdffe008

0800a968 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a970:	4b1f      	ldr	r3, [pc, #124]	@ (800a9f0 <SDMMC_GetCmdResp2+0x88>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a1f      	ldr	r2, [pc, #124]	@ (800a9f4 <SDMMC_GetCmdResp2+0x8c>)
 800a976:	fba2 2303 	umull	r2, r3, r2, r3
 800a97a:	0a5b      	lsrs	r3, r3, #9
 800a97c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a980:	fb02 f303 	mul.w	r3, r2, r3
 800a984:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	1e5a      	subs	r2, r3, #1
 800a98a:	60fa      	str	r2, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d102      	bne.n	800a996 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a990:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a994:	e026      	b.n	800a9e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a99a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d0ef      	beq.n	800a986 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1ea      	bne.n	800a986 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9b4:	f003 0304 	and.w	r3, r3, #4
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d004      	beq.n	800a9c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2204      	movs	r2, #4
 800a9c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9c2:	2304      	movs	r3, #4
 800a9c4:	e00e      	b.n	800a9e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d004      	beq.n	800a9dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e003      	b.n	800a9e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	22c5      	movs	r2, #197	@ 0xc5
 800a9e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	2000001c 	.word	0x2000001c
 800a9f4:	10624dd3 	.word	0x10624dd3

0800a9f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa00:	4b1a      	ldr	r3, [pc, #104]	@ (800aa6c <SDMMC_GetCmdResp3+0x74>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a1a      	ldr	r2, [pc, #104]	@ (800aa70 <SDMMC_GetCmdResp3+0x78>)
 800aa06:	fba2 2303 	umull	r2, r3, r2, r3
 800aa0a:	0a5b      	lsrs	r3, r3, #9
 800aa0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa10:	fb02 f303 	mul.w	r3, r2, r3
 800aa14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	1e5a      	subs	r2, r3, #1
 800aa1a:	60fa      	str	r2, [r7, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa24:	e01b      	b.n	800aa5e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d0ef      	beq.n	800aa16 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1ea      	bne.n	800aa16 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa44:	f003 0304 	and.w	r3, r3, #4
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d004      	beq.n	800aa56 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2204      	movs	r2, #4
 800aa50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa52:	2304      	movs	r3, #4
 800aa54:	e003      	b.n	800aa5e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	22c5      	movs	r2, #197	@ 0xc5
 800aa5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	2000001c 	.word	0x2000001c
 800aa70:	10624dd3 	.word	0x10624dd3

0800aa74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b088      	sub	sp, #32
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa82:	4b35      	ldr	r3, [pc, #212]	@ (800ab58 <SDMMC_GetCmdResp6+0xe4>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a35      	ldr	r2, [pc, #212]	@ (800ab5c <SDMMC_GetCmdResp6+0xe8>)
 800aa88:	fba2 2303 	umull	r2, r3, r2, r3
 800aa8c:	0a5b      	lsrs	r3, r3, #9
 800aa8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
 800aa96:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	1e5a      	subs	r2, r3, #1
 800aa9c:	61fa      	str	r2, [r7, #28]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d102      	bne.n	800aaa8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aaa2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aaa6:	e052      	b.n	800ab4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d0ef      	beq.n	800aa98 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1ea      	bne.n	800aa98 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aac6:	f003 0304 	and.w	r3, r3, #4
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d004      	beq.n	800aad8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2204      	movs	r2, #4
 800aad2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aad4:	2304      	movs	r3, #4
 800aad6:	e03a      	b.n	800ab4e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aadc:	f003 0301 	and.w	r3, r3, #1
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d004      	beq.n	800aaee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2201      	movs	r2, #1
 800aae8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e02f      	b.n	800ab4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f7ff fc0d 	bl	800a30e <SDIO_GetCommandResponse>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	7afb      	ldrb	r3, [r7, #11]
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d001      	beq.n	800ab02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e025      	b.n	800ab4e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	22c5      	movs	r2, #197	@ 0xc5
 800ab06:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ab08:	2100      	movs	r1, #0
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f7ff fc0c 	bl	800a328 <SDIO_GetResponse>
 800ab10:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d106      	bne.n	800ab2a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	0c1b      	lsrs	r3, r3, #16
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	e011      	b.n	800ab4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab38:	e009      	b.n	800ab4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab48:	e001      	b.n	800ab4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3720      	adds	r7, #32
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	2000001c 	.word	0x2000001c
 800ab5c:	10624dd3 	.word	0x10624dd3

0800ab60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab68:	4b22      	ldr	r3, [pc, #136]	@ (800abf4 <SDMMC_GetCmdResp7+0x94>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a22      	ldr	r2, [pc, #136]	@ (800abf8 <SDMMC_GetCmdResp7+0x98>)
 800ab6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab72:	0a5b      	lsrs	r3, r3, #9
 800ab74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab78:	fb02 f303 	mul.w	r3, r2, r3
 800ab7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	1e5a      	subs	r2, r3, #1
 800ab82:	60fa      	str	r2, [r7, #12]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d102      	bne.n	800ab8e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab8c:	e02c      	b.n	800abe8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0ef      	beq.n	800ab7e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1ea      	bne.n	800ab7e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abac:	f003 0304 	and.w	r3, r3, #4
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d004      	beq.n	800abbe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2204      	movs	r2, #4
 800abb8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abba:	2304      	movs	r3, #4
 800abbc:	e014      	b.n	800abe8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d004      	beq.n	800abd4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e009      	b.n	800abe8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2240      	movs	r2, #64	@ 0x40
 800abe4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800abe6:	2300      	movs	r3, #0
  
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	2000001c 	.word	0x2000001c
 800abf8:	10624dd3 	.word	0x10624dd3

0800abfc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac04:	4b11      	ldr	r3, [pc, #68]	@ (800ac4c <SDMMC_GetCmdError+0x50>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a11      	ldr	r2, [pc, #68]	@ (800ac50 <SDMMC_GetCmdError+0x54>)
 800ac0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac0e:	0a5b      	lsrs	r3, r3, #9
 800ac10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac14:	fb02 f303 	mul.w	r3, r2, r3
 800ac18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	1e5a      	subs	r2, r3, #1
 800ac1e:	60fa      	str	r2, [r7, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d102      	bne.n	800ac2a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac28:	e009      	b.n	800ac3e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0f1      	beq.n	800ac1a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	22c5      	movs	r2, #197	@ 0xc5
 800ac3a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	2000001c 	.word	0x2000001c
 800ac50:	10624dd3 	.word	0x10624dd3

0800ac54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac54:	b084      	sub	sp, #16
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	f107 001c 	add.w	r0, r7, #28
 800ac62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d123      	bne.n	800acb6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800ac82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ac96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d105      	bne.n	800acaa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f9dc 	bl	800b068 <USB_CoreReset>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73fb      	strb	r3, [r7, #15]
 800acb4:	e01b      	b.n	800acee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f9d0 	bl	800b068 <USB_CoreReset>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800accc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d106      	bne.n	800ace2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	639a      	str	r2, [r3, #56]	@ 0x38
 800ace0:	e005      	b.n	800acee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800acee:	7fbb      	ldrb	r3, [r7, #30]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d10b      	bne.n	800ad0c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f043 0206 	orr.w	r2, r3, #6
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	f043 0220 	orr.w	r2, r3, #32
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad18:	b004      	add	sp, #16
 800ad1a:	4770      	bx	lr

0800ad1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f043 0201 	orr.w	r2, r3, #1
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad3e:	b480      	push	{r7}
 800ad40:	b083      	sub	sp, #12
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f023 0201 	bic.w	r2, r3, #1
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d115      	bne.n	800adae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ad8e:	200a      	movs	r0, #10
 800ad90:	f7f7 f8d6 	bl	8001f40 <HAL_Delay>
      ms += 10U;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	330a      	adds	r3, #10
 800ad98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f956 	bl	800b04c <USB_GetMode>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d01e      	beq.n	800ade4 <USB_SetCurrentMode+0x84>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2bc7      	cmp	r3, #199	@ 0xc7
 800adaa:	d9f0      	bls.n	800ad8e <USB_SetCurrentMode+0x2e>
 800adac:	e01a      	b.n	800ade4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800adae:	78fb      	ldrb	r3, [r7, #3]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d115      	bne.n	800ade0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800adc0:	200a      	movs	r0, #10
 800adc2:	f7f7 f8bd 	bl	8001f40 <HAL_Delay>
      ms += 10U;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	330a      	adds	r3, #10
 800adca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f93d 	bl	800b04c <USB_GetMode>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d005      	beq.n	800ade4 <USB_SetCurrentMode+0x84>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2bc7      	cmp	r3, #199	@ 0xc7
 800addc:	d9f0      	bls.n	800adc0 <USB_SetCurrentMode+0x60>
 800adde:	e001      	b.n	800ade4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e005      	b.n	800adf0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2bc8      	cmp	r3, #200	@ 0xc8
 800ade8:	d101      	bne.n	800adee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	e000      	b.n	800adf0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae12:	d901      	bls.n	800ae18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ae14:	2303      	movs	r3, #3
 800ae16:	e01b      	b.n	800ae50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	daf2      	bge.n	800ae06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ae20:	2300      	movs	r3, #0
 800ae22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	019b      	lsls	r3, r3, #6
 800ae28:	f043 0220 	orr.w	r2, r3, #32
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	3301      	adds	r3, #1
 800ae34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae3c:	d901      	bls.n	800ae42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e006      	b.n	800ae50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	f003 0320 	and.w	r3, r3, #32
 800ae4a:	2b20      	cmp	r3, #32
 800ae4c:	d0f0      	beq.n	800ae30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae74:	d901      	bls.n	800ae7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ae76:	2303      	movs	r3, #3
 800ae78:	e018      	b.n	800aeac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	daf2      	bge.n	800ae68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2210      	movs	r2, #16
 800ae8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae98:	d901      	bls.n	800ae9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e006      	b.n	800aeac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	f003 0310 	and.w	r3, r3, #16
 800aea6:	2b10      	cmp	r3, #16
 800aea8:	d0f0      	beq.n	800ae8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b089      	sub	sp, #36	@ 0x24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	4611      	mov	r1, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	460b      	mov	r3, r1
 800aec8:	71fb      	strb	r3, [r7, #7]
 800aeca:	4613      	mov	r3, r2
 800aecc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aed6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d123      	bne.n	800af26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aede:	88bb      	ldrh	r3, [r7, #4]
 800aee0:	3303      	adds	r3, #3
 800aee2:	089b      	lsrs	r3, r3, #2
 800aee4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aee6:	2300      	movs	r3, #0
 800aee8:	61bb      	str	r3, [r7, #24]
 800aeea:	e018      	b.n	800af1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aeec:	79fb      	ldrb	r3, [r7, #7]
 800aeee:	031a      	lsls	r2, r3, #12
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aef8:	461a      	mov	r2, r3
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	3301      	adds	r3, #1
 800af04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	3301      	adds	r3, #1
 800af0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	3301      	adds	r3, #1
 800af10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	3301      	adds	r3, #1
 800af16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	3301      	adds	r3, #1
 800af1c:	61bb      	str	r3, [r7, #24]
 800af1e:	69ba      	ldr	r2, [r7, #24]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	429a      	cmp	r2, r3
 800af24:	d3e2      	bcc.n	800aeec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3724      	adds	r7, #36	@ 0x24
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af34:	b480      	push	{r7}
 800af36:	b08b      	sub	sp, #44	@ 0x2c
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	4613      	mov	r3, r2
 800af40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800af4a:	88fb      	ldrh	r3, [r7, #6]
 800af4c:	089b      	lsrs	r3, r3, #2
 800af4e:	b29b      	uxth	r3, r3
 800af50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800af52:	88fb      	ldrh	r3, [r7, #6]
 800af54:	f003 0303 	and.w	r3, r3, #3
 800af58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af5a:	2300      	movs	r3, #0
 800af5c:	623b      	str	r3, [r7, #32]
 800af5e:	e014      	b.n	800af8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6a:	601a      	str	r2, [r3, #0]
    pDest++;
 800af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6e:	3301      	adds	r3, #1
 800af70:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af74:	3301      	adds	r3, #1
 800af76:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7a:	3301      	adds	r3, #1
 800af7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800af7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af80:	3301      	adds	r3, #1
 800af82:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	3301      	adds	r3, #1
 800af88:	623b      	str	r3, [r7, #32]
 800af8a:	6a3a      	ldr	r2, [r7, #32]
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d3e6      	bcc.n	800af60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800af92:	8bfb      	ldrh	r3, [r7, #30]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d01e      	beq.n	800afd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800af98:	2300      	movs	r3, #0
 800af9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afa2:	461a      	mov	r2, r3
 800afa4:	f107 0310 	add.w	r3, r7, #16
 800afa8:	6812      	ldr	r2, [r2, #0]
 800afaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	6a3b      	ldr	r3, [r7, #32]
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	fa22 f303 	lsr.w	r3, r2, r3
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afbc:	701a      	strb	r2, [r3, #0]
      i++;
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	3301      	adds	r3, #1
 800afc2:	623b      	str	r3, [r7, #32]
      pDest++;
 800afc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc6:	3301      	adds	r3, #1
 800afc8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800afca:	8bfb      	ldrh	r3, [r7, #30]
 800afcc:	3b01      	subs	r3, #1
 800afce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800afd0:	8bfb      	ldrh	r3, [r7, #30]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1ea      	bne.n	800afac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800afd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800afd8:	4618      	mov	r0, r3
 800afda:	372c      	adds	r7, #44	@ 0x2c
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	4013      	ands	r3, r2
 800affa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800affc:	68fb      	ldr	r3, [r7, #12]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b085      	sub	sp, #20
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	460b      	mov	r3, r1
 800b014:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800b01a:	78fb      	ldrb	r3, [r7, #3]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4413      	add	r3, r2
 800b022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	4413      	add	r3, r2
 800b032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	4013      	ands	r3, r2
 800b03c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b03e:	68bb      	ldr	r3, [r7, #8]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	f003 0301 	and.w	r3, r3, #1
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b070:	2300      	movs	r3, #0
 800b072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3301      	adds	r3, #1
 800b078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b080:	d901      	bls.n	800b086 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e01b      	b.n	800b0be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	daf2      	bge.n	800b074 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b08e:	2300      	movs	r3, #0
 800b090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	f043 0201 	orr.w	r2, r3, #1
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0aa:	d901      	bls.n	800b0b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0ac:	2303      	movs	r3, #3
 800b0ae:	e006      	b.n	800b0be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d0f0      	beq.n	800b09e <USB_CoreReset+0x36>

  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
	...

0800b0cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b086      	sub	sp, #24
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b0da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0f6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b106:	2b00      	cmp	r3, #0
 800b108:	d119      	bne.n	800b13e <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b10a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d10a      	bne.n	800b128 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b120:	f043 0304 	orr.w	r3, r3, #4
 800b124:	6013      	str	r3, [r2, #0]
 800b126:	e014      	b.n	800b152 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b136:	f023 0304 	bic.w	r3, r3, #4
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	e009      	b.n	800b152 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b14c:	f023 0304 	bic.w	r3, r3, #4
 800b150:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b152:	2110      	movs	r1, #16
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff fe4f 	bl	800adf8 <USB_FlushTxFifo>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff fe79 	bl	800ae5c <USB_FlushRxFifo>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b174:	2300      	movs	r3, #0
 800b176:	613b      	str	r3, [r7, #16]
 800b178:	e015      	b.n	800b1a6 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	4413      	add	r3, r2
 800b182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b186:	461a      	mov	r2, r3
 800b188:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b18c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	015a      	lsls	r2, r3, #5
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	4413      	add	r3, r2
 800b196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b19a:	461a      	mov	r2, r3
 800b19c:	2300      	movs	r3, #0
 800b19e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	613b      	str	r3, [r7, #16]
 800b1a6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d3e3      	bcc.n	800b17a <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1be:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a18      	ldr	r2, [pc, #96]	@ (800b224 <USB_HostInit+0x158>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d10b      	bne.n	800b1e0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1ce:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a15      	ldr	r2, [pc, #84]	@ (800b228 <USB_HostInit+0x15c>)
 800b1d4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a14      	ldr	r2, [pc, #80]	@ (800b22c <USB_HostInit+0x160>)
 800b1da:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800b1de:	e009      	b.n	800b1f4 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2280      	movs	r2, #128	@ 0x80
 800b1e4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a11      	ldr	r2, [pc, #68]	@ (800b230 <USB_HostInit+0x164>)
 800b1ea:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a11      	ldr	r2, [pc, #68]	@ (800b234 <USB_HostInit+0x168>)
 800b1f0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d105      	bne.n	800b208 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	f043 0210 	orr.w	r2, r3, #16
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	699a      	ldr	r2, [r3, #24]
 800b20c:	4b0a      	ldr	r3, [pc, #40]	@ (800b238 <USB_HostInit+0x16c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b214:	7dfb      	ldrb	r3, [r7, #23]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b220:	b004      	add	sp, #16
 800b222:	4770      	bx	lr
 800b224:	40040000 	.word	0x40040000
 800b228:	01000200 	.word	0x01000200
 800b22c:	00e00300 	.word	0x00e00300
 800b230:	00600080 	.word	0x00600080
 800b234:	004000e0 	.word	0x004000e0
 800b238:	a3200008 	.word	0xa3200008

0800b23c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b25a:	f023 0303 	bic.w	r3, r3, #3
 800b25e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	f003 0303 	and.w	r3, r3, #3
 800b26e:	68f9      	ldr	r1, [r7, #12]
 800b270:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b274:	4313      	orrs	r3, r2
 800b276:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b278:	78fb      	ldrb	r3, [r7, #3]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d107      	bne.n	800b28e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b284:	461a      	mov	r2, r3
 800b286:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b28a:	6053      	str	r3, [r2, #4]
 800b28c:	e00c      	b.n	800b2a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b28e:	78fb      	ldrb	r3, [r7, #3]
 800b290:	2b02      	cmp	r3, #2
 800b292:	d107      	bne.n	800b2a4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b29a:	461a      	mov	r2, r3
 800b29c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b2a0:	6053      	str	r3, [r2, #4]
 800b2a2:	e001      	b.n	800b2a8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e000      	b.n	800b2aa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b2d6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b2e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b2e6:	2064      	movs	r0, #100	@ 0x64
 800b2e8:	f7f6 fe2a 	bl	8001f40 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b2f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2f8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b2fa:	200a      	movs	r0, #10
 800b2fc:	f7f6 fe20 	bl	8001f40 <HAL_Delay>

  return HAL_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b085      	sub	sp, #20
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	460b      	mov	r3, r1
 800b314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b32e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d109      	bne.n	800b34e <USB_DriveVbus+0x44>
 800b33a:	78fb      	ldrb	r3, [r7, #3]
 800b33c:	2b01      	cmp	r3, #1
 800b33e:	d106      	bne.n	800b34e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b348:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b34c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b358:	d109      	bne.n	800b36e <USB_DriveVbus+0x64>
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d106      	bne.n	800b36e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b36c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3714      	adds	r7, #20
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b388:	2300      	movs	r3, #0
 800b38a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	0c5b      	lsrs	r3, r3, #17
 800b39a:	f003 0303 	and.w	r3, r3, #3
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b085      	sub	sp, #20
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	b29b      	uxth	r3, r3
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	461a      	mov	r2, r3
 800b3da:	4603      	mov	r3, r0
 800b3dc:	70fb      	strb	r3, [r7, #3]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	70bb      	strb	r3, [r7, #2]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b3ee:	78fb      	ldrb	r3, [r7, #3]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b400:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b402:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b406:	2b03      	cmp	r3, #3
 800b408:	d87c      	bhi.n	800b504 <USB_HC_Init+0x138>
 800b40a:	a201      	add	r2, pc, #4	@ (adr r2, 800b410 <USB_HC_Init+0x44>)
 800b40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b410:	0800b421 	.word	0x0800b421
 800b414:	0800b4c7 	.word	0x0800b4c7
 800b418:	0800b421 	.word	0x0800b421
 800b41c:	0800b489 	.word	0x0800b489
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	015a      	lsls	r2, r3, #5
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	4413      	add	r3, r2
 800b428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b42c:	461a      	mov	r2, r3
 800b42e:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b432:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b434:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	da10      	bge.n	800b45e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b43c:	78fb      	ldrb	r3, [r7, #3]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	4413      	add	r3, r2
 800b444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	78fa      	ldrb	r2, [r7, #3]
 800b44c:	0151      	lsls	r1, r2, #5
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	440a      	add	r2, r1
 800b452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b45a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b45c:	e055      	b.n	800b50a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a6f      	ldr	r2, [pc, #444]	@ (800b620 <USB_HC_Init+0x254>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d151      	bne.n	800b50a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b466:	78fb      	ldrb	r3, [r7, #3]
 800b468:	015a      	lsls	r2, r3, #5
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	4413      	add	r3, r2
 800b46e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	78fa      	ldrb	r2, [r7, #3]
 800b476:	0151      	lsls	r1, r2, #5
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	440a      	add	r2, r1
 800b47c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b480:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b484:	60d3      	str	r3, [r2, #12]
      break;
 800b486:	e040      	b.n	800b50a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b488:	78fb      	ldrb	r3, [r7, #3]
 800b48a:	015a      	lsls	r2, r3, #5
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	4413      	add	r3, r2
 800b490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b494:	461a      	mov	r2, r3
 800b496:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b49a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b49c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	da34      	bge.n	800b50e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b4a4:	78fb      	ldrb	r3, [r7, #3]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	78fa      	ldrb	r2, [r7, #3]
 800b4b4:	0151      	lsls	r1, r2, #5
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	440a      	add	r2, r1
 800b4ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b4c2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b4c4:	e023      	b.n	800b50e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b4c6:	78fb      	ldrb	r3, [r7, #3]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f240 2325 	movw	r3, #549	@ 0x225
 800b4d8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b4da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	da17      	bge.n	800b512 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b4e2:	78fb      	ldrb	r3, [r7, #3]
 800b4e4:	015a      	lsls	r2, r3, #5
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	78fa      	ldrb	r2, [r7, #3]
 800b4f2:	0151      	lsls	r1, r2, #5
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	440a      	add	r2, r1
 800b4f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4fc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b500:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b502:	e006      	b.n	800b512 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	77fb      	strb	r3, [r7, #31]
      break;
 800b508:	e004      	b.n	800b514 <USB_HC_Init+0x148>
      break;
 800b50a:	bf00      	nop
 800b50c:	e002      	b.n	800b514 <USB_HC_Init+0x148>
      break;
 800b50e:	bf00      	nop
 800b510:	e000      	b.n	800b514 <USB_HC_Init+0x148>
      break;
 800b512:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b514:	78fb      	ldrb	r3, [r7, #3]
 800b516:	015a      	lsls	r2, r3, #5
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	4413      	add	r3, r2
 800b51c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b520:	461a      	mov	r2, r3
 800b522:	2300      	movs	r3, #0
 800b524:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b526:	78fb      	ldrb	r3, [r7, #3]
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	78fa      	ldrb	r2, [r7, #3]
 800b536:	0151      	lsls	r1, r2, #5
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	440a      	add	r2, r1
 800b53c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b540:	f043 0302 	orr.w	r3, r3, #2
 800b544:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b54c:	699a      	ldr	r2, [r3, #24]
 800b54e:	78fb      	ldrb	r3, [r7, #3]
 800b550:	f003 030f 	and.w	r3, r3, #15
 800b554:	2101      	movs	r1, #1
 800b556:	fa01 f303 	lsl.w	r3, r1, r3
 800b55a:	6939      	ldr	r1, [r7, #16]
 800b55c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b560:	4313      	orrs	r3, r2
 800b562:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b570:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b574:	2b00      	cmp	r3, #0
 800b576:	da03      	bge.n	800b580 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b57c:	61bb      	str	r3, [r7, #24]
 800b57e:	e001      	b.n	800b584 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b580:	2300      	movs	r3, #0
 800b582:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff fef9 	bl	800b37c <USB_GetHostSpeed>
 800b58a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b58c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b590:	2b02      	cmp	r3, #2
 800b592:	d106      	bne.n	800b5a2 <USB_HC_Init+0x1d6>
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d003      	beq.n	800b5a2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b59a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b59e:	617b      	str	r3, [r7, #20]
 800b5a0:	e001      	b.n	800b5a6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b5a6:	787b      	ldrb	r3, [r7, #1]
 800b5a8:	059b      	lsls	r3, r3, #22
 800b5aa:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b5ae:	78bb      	ldrb	r3, [r7, #2]
 800b5b0:	02db      	lsls	r3, r3, #11
 800b5b2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b5b6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b5b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b5bc:	049b      	lsls	r3, r3, #18
 800b5be:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b5c2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b5c4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b5c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b5ca:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	431a      	orrs	r2, r3
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b5d4:	78fa      	ldrb	r2, [r7, #3]
 800b5d6:	0151      	lsls	r1, r2, #5
 800b5d8:	693a      	ldr	r2, [r7, #16]
 800b5da:	440a      	add	r2, r1
 800b5dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b5e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b5e4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b5e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d003      	beq.n	800b5f6 <USB_HC_Init+0x22a>
 800b5ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d10f      	bne.n	800b616 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b5f6:	78fb      	ldrb	r3, [r7, #3]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	78fa      	ldrb	r2, [r7, #3]
 800b606:	0151      	lsls	r1, r2, #5
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	440a      	add	r2, r1
 800b60c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b610:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b614:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b616:	7ffb      	ldrb	r3, [r7, #31]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3720      	adds	r7, #32
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	40040000 	.word	0x40040000

0800b624 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08c      	sub	sp, #48	@ 0x30
 800b628:	af02      	add	r7, sp, #8
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	4613      	mov	r3, r2
 800b630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	785b      	ldrb	r3, [r3, #1]
 800b63a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b63c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b640:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	4a5d      	ldr	r2, [pc, #372]	@ (800b7bc <USB_HC_StartXfer+0x198>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d12f      	bne.n	800b6aa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b64a:	79fb      	ldrb	r3, [r7, #7]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d11c      	bne.n	800b68a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	7c9b      	ldrb	r3, [r3, #18]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d003      	beq.n	800b660 <USB_HC_StartXfer+0x3c>
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	7c9b      	ldrb	r3, [r3, #18]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d124      	bne.n	800b6aa <USB_HC_StartXfer+0x86>
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	799b      	ldrb	r3, [r3, #6]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d120      	bne.n	800b6aa <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	015a      	lsls	r2, r3, #5
 800b66c:	6a3b      	ldr	r3, [r7, #32]
 800b66e:	4413      	add	r3, r2
 800b670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	69fa      	ldr	r2, [r7, #28]
 800b678:	0151      	lsls	r1, r2, #5
 800b67a:	6a3a      	ldr	r2, [r7, #32]
 800b67c:	440a      	add	r2, r1
 800b67e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b686:	60d3      	str	r3, [r2, #12]
 800b688:	e00f      	b.n	800b6aa <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	791b      	ldrb	r3, [r3, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10b      	bne.n	800b6aa <USB_HC_StartXfer+0x86>
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	795b      	ldrb	r3, [r3, #5]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d107      	bne.n	800b6aa <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	785b      	ldrb	r3, [r3, #1]
 800b69e:	4619      	mov	r1, r3
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f000 fb6b 	bl	800bd7c <USB_DoPing>
        return HAL_OK;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	e232      	b.n	800bb10 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	799b      	ldrb	r3, [r3, #6]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d158      	bne.n	800b764 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	78db      	ldrb	r3, [r3, #3]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d007      	beq.n	800b6ce <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b6be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	8a92      	ldrh	r2, [r2, #20]
 800b6c4:	fb03 f202 	mul.w	r2, r3, r2
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	61da      	str	r2, [r3, #28]
 800b6cc:	e07c      	b.n	800b7c8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	7c9b      	ldrb	r3, [r3, #18]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d130      	bne.n	800b738 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	2bbc      	cmp	r3, #188	@ 0xbc
 800b6dc:	d918      	bls.n	800b710 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	8a9b      	ldrh	r3, [r3, #20]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	69da      	ldr	r2, [r3, #28]
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d003      	beq.n	800b700 <USB_HC_StartXfer+0xdc>
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d103      	bne.n	800b708 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2202      	movs	r2, #2
 800b704:	60da      	str	r2, [r3, #12]
 800b706:	e05f      	b.n	800b7c8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	2201      	movs	r2, #1
 800b70c:	60da      	str	r2, [r3, #12]
 800b70e:	e05b      	b.n	800b7c8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	6a1a      	ldr	r2, [r3, #32]
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d007      	beq.n	800b730 <USB_HC_StartXfer+0x10c>
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	2b02      	cmp	r3, #2
 800b726:	d003      	beq.n	800b730 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	2204      	movs	r2, #4
 800b72c:	60da      	str	r2, [r3, #12]
 800b72e:	e04b      	b.n	800b7c8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	2203      	movs	r2, #3
 800b734:	60da      	str	r2, [r3, #12]
 800b736:	e047      	b.n	800b7c8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b738:	79fb      	ldrb	r3, [r7, #7]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d10d      	bne.n	800b75a <USB_HC_StartXfer+0x136>
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	6a1b      	ldr	r3, [r3, #32]
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	8a92      	ldrh	r2, [r2, #20]
 800b746:	4293      	cmp	r3, r2
 800b748:	d907      	bls.n	800b75a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b74a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	8a92      	ldrh	r2, [r2, #20]
 800b750:	fb03 f202 	mul.w	r2, r3, r2
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	61da      	str	r2, [r3, #28]
 800b758:	e036      	b.n	800b7c8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	6a1a      	ldr	r2, [r3, #32]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	61da      	str	r2, [r3, #28]
 800b762:	e031      	b.n	800b7c8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	6a1b      	ldr	r3, [r3, #32]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d018      	beq.n	800b79e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	6a1b      	ldr	r3, [r3, #32]
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	8a92      	ldrh	r2, [r2, #20]
 800b774:	4413      	add	r3, r2
 800b776:	3b01      	subs	r3, #1
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	8a92      	ldrh	r2, [r2, #20]
 800b77c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b780:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b782:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b784:	8b7b      	ldrh	r3, [r7, #26]
 800b786:	429a      	cmp	r2, r3
 800b788:	d90b      	bls.n	800b7a2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b78a:	8b7b      	ldrh	r3, [r7, #26]
 800b78c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b78e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	8a92      	ldrh	r2, [r2, #20]
 800b794:	fb03 f202 	mul.w	r2, r3, r2
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	61da      	str	r2, [r3, #28]
 800b79c:	e001      	b.n	800b7a2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	78db      	ldrb	r3, [r3, #3]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00a      	beq.n	800b7c0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b7aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b7ac:	68ba      	ldr	r2, [r7, #8]
 800b7ae:	8a92      	ldrh	r2, [r2, #20]
 800b7b0:	fb03 f202 	mul.w	r2, r3, r2
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	61da      	str	r2, [r3, #28]
 800b7b8:	e006      	b.n	800b7c8 <USB_HC_StartXfer+0x1a4>
 800b7ba:	bf00      	nop
 800b7bc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	6a1a      	ldr	r2, [r3, #32]
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	69db      	ldr	r3, [r3, #28]
 800b7cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b7d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b7d2:	04d9      	lsls	r1, r3, #19
 800b7d4:	4ba3      	ldr	r3, [pc, #652]	@ (800ba64 <USB_HC_StartXfer+0x440>)
 800b7d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b7d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	7d9b      	ldrb	r3, [r3, #22]
 800b7de:	075b      	lsls	r3, r3, #29
 800b7e0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b7e4:	69f9      	ldr	r1, [r7, #28]
 800b7e6:	0148      	lsls	r0, r1, #5
 800b7e8:	6a39      	ldr	r1, [r7, #32]
 800b7ea:	4401      	add	r1, r0
 800b7ec:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b7f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b7f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b7f4:	79fb      	ldrb	r3, [r7, #7]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d009      	beq.n	800b80e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	6999      	ldr	r1, [r3, #24]
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	015a      	lsls	r2, r3, #5
 800b802:	6a3b      	ldr	r3, [r7, #32]
 800b804:	4413      	add	r3, r2
 800b806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b80a:	460a      	mov	r2, r1
 800b80c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b80e:	6a3b      	ldr	r3, [r7, #32]
 800b810:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	bf0c      	ite	eq
 800b81e:	2301      	moveq	r3, #1
 800b820:	2300      	movne	r3, #0
 800b822:	b2db      	uxtb	r3, r3
 800b824:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	015a      	lsls	r2, r3, #5
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	4413      	add	r3, r2
 800b82e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	69fa      	ldr	r2, [r7, #28]
 800b836:	0151      	lsls	r1, r2, #5
 800b838:	6a3a      	ldr	r2, [r7, #32]
 800b83a:	440a      	add	r2, r1
 800b83c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b840:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b844:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	015a      	lsls	r2, r3, #5
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	4413      	add	r3, r2
 800b84e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	7e7b      	ldrb	r3, [r7, #25]
 800b856:	075b      	lsls	r3, r3, #29
 800b858:	69f9      	ldr	r1, [r7, #28]
 800b85a:	0148      	lsls	r0, r1, #5
 800b85c:	6a39      	ldr	r1, [r7, #32]
 800b85e:	4401      	add	r1, r0
 800b860:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b864:	4313      	orrs	r3, r2
 800b866:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	799b      	ldrb	r3, [r3, #6]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	f040 80c3 	bne.w	800b9f8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	7c5b      	ldrb	r3, [r3, #17]
 800b876:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b87c:	4313      	orrs	r3, r2
 800b87e:	69fa      	ldr	r2, [r7, #28]
 800b880:	0151      	lsls	r1, r2, #5
 800b882:	6a3a      	ldr	r2, [r7, #32]
 800b884:	440a      	add	r2, r1
 800b886:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b88a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b88e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	4413      	add	r3, r2
 800b898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	69fa      	ldr	r2, [r7, #28]
 800b8a0:	0151      	lsls	r1, r2, #5
 800b8a2:	6a3a      	ldr	r2, [r7, #32]
 800b8a4:	440a      	add	r2, r1
 800b8a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b8ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	79db      	ldrb	r3, [r3, #7]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d123      	bne.n	800b900 <USB_HC_StartXfer+0x2dc>
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	78db      	ldrb	r3, [r3, #3]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d11f      	bne.n	800b900 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	69fa      	ldr	r2, [r7, #28]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	6a3a      	ldr	r2, [r7, #32]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b8de:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	6a3b      	ldr	r3, [r7, #32]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	69fa      	ldr	r2, [r7, #28]
 800b8f0:	0151      	lsls	r1, r2, #5
 800b8f2:	6a3a      	ldr	r2, [r7, #32]
 800b8f4:	440a      	add	r2, r1
 800b8f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8fe:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	7c9b      	ldrb	r3, [r3, #18]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d003      	beq.n	800b910 <USB_HC_StartXfer+0x2ec>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	7c9b      	ldrb	r3, [r3, #18]
 800b90c:	2b03      	cmp	r3, #3
 800b90e:	d117      	bne.n	800b940 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b914:	2b01      	cmp	r3, #1
 800b916:	d113      	bne.n	800b940 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	78db      	ldrb	r3, [r3, #3]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d10f      	bne.n	800b940 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	4413      	add	r3, r2
 800b928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	69fa      	ldr	r2, [r7, #28]
 800b930:	0151      	lsls	r1, r2, #5
 800b932:	6a3a      	ldr	r2, [r7, #32]
 800b934:	440a      	add	r2, r1
 800b936:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b93a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b93e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	7c9b      	ldrb	r3, [r3, #18]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d162      	bne.n	800ba0e <USB_HC_StartXfer+0x3ea>
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	78db      	ldrb	r3, [r3, #3]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d15e      	bne.n	800ba0e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	3b01      	subs	r3, #1
 800b956:	2b03      	cmp	r3, #3
 800b958:	d858      	bhi.n	800ba0c <USB_HC_StartXfer+0x3e8>
 800b95a:	a201      	add	r2, pc, #4	@ (adr r2, 800b960 <USB_HC_StartXfer+0x33c>)
 800b95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b960:	0800b971 	.word	0x0800b971
 800b964:	0800b993 	.word	0x0800b993
 800b968:	0800b9b5 	.word	0x0800b9b5
 800b96c:	0800b9d7 	.word	0x0800b9d7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	015a      	lsls	r2, r3, #5
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	4413      	add	r3, r2
 800b978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	69fa      	ldr	r2, [r7, #28]
 800b980:	0151      	lsls	r1, r2, #5
 800b982:	6a3a      	ldr	r2, [r7, #32]
 800b984:	440a      	add	r2, r1
 800b986:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b98a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b98e:	6053      	str	r3, [r2, #4]
          break;
 800b990:	e03d      	b.n	800ba0e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	015a      	lsls	r2, r3, #5
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	4413      	add	r3, r2
 800b99a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	69fa      	ldr	r2, [r7, #28]
 800b9a2:	0151      	lsls	r1, r2, #5
 800b9a4:	6a3a      	ldr	r2, [r7, #32]
 800b9a6:	440a      	add	r2, r1
 800b9a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9ac:	f043 030e 	orr.w	r3, r3, #14
 800b9b0:	6053      	str	r3, [r2, #4]
          break;
 800b9b2:	e02c      	b.n	800ba0e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	015a      	lsls	r2, r3, #5
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	69fa      	ldr	r2, [r7, #28]
 800b9c4:	0151      	lsls	r1, r2, #5
 800b9c6:	6a3a      	ldr	r2, [r7, #32]
 800b9c8:	440a      	add	r2, r1
 800b9ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b9d2:	6053      	str	r3, [r2, #4]
          break;
 800b9d4:	e01b      	b.n	800ba0e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	015a      	lsls	r2, r3, #5
 800b9da:	6a3b      	ldr	r3, [r7, #32]
 800b9dc:	4413      	add	r3, r2
 800b9de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	69fa      	ldr	r2, [r7, #28]
 800b9e6:	0151      	lsls	r1, r2, #5
 800b9e8:	6a3a      	ldr	r2, [r7, #32]
 800b9ea:	440a      	add	r2, r1
 800b9ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b9f4:	6053      	str	r3, [r2, #4]
          break;
 800b9f6:	e00a      	b.n	800ba0e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	015a      	lsls	r2, r3, #5
 800b9fc:	6a3b      	ldr	r3, [r7, #32]
 800b9fe:	4413      	add	r3, r2
 800ba00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba04:	461a      	mov	r2, r3
 800ba06:	2300      	movs	r3, #0
 800ba08:	6053      	str	r3, [r2, #4]
 800ba0a:	e000      	b.n	800ba0e <USB_HC_StartXfer+0x3ea>
          break;
 800ba0c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	015a      	lsls	r2, r3, #5
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	4413      	add	r3, r2
 800ba16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ba24:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	78db      	ldrb	r3, [r3, #3]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d004      	beq.n	800ba38 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba34:	613b      	str	r3, [r7, #16]
 800ba36:	e003      	b.n	800ba40 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ba3e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba46:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	6a3b      	ldr	r3, [r7, #32]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba54:	461a      	mov	r2, r3
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ba5a:	79fb      	ldrb	r3, [r7, #7]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d003      	beq.n	800ba68 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	e055      	b.n	800bb10 <USB_HC_StartXfer+0x4ec>
 800ba64:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	78db      	ldrb	r3, [r3, #3]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d14e      	bne.n	800bb0e <USB_HC_StartXfer+0x4ea>
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d04a      	beq.n	800bb0e <USB_HC_StartXfer+0x4ea>
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	79db      	ldrb	r3, [r3, #7]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d146      	bne.n	800bb0e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	7c9b      	ldrb	r3, [r3, #18]
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d831      	bhi.n	800baec <USB_HC_StartXfer+0x4c8>
 800ba88:	a201      	add	r2, pc, #4	@ (adr r2, 800ba90 <USB_HC_StartXfer+0x46c>)
 800ba8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8e:	bf00      	nop
 800ba90:	0800baa1 	.word	0x0800baa1
 800ba94:	0800bac5 	.word	0x0800bac5
 800ba98:	0800baa1 	.word	0x0800baa1
 800ba9c:	0800bac5 	.word	0x0800bac5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	6a1b      	ldr	r3, [r3, #32]
 800baa4:	3303      	adds	r3, #3
 800baa6:	089b      	lsrs	r3, r3, #2
 800baa8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800baaa:	8afa      	ldrh	r2, [r7, #22]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d91c      	bls.n	800baf0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	f043 0220 	orr.w	r2, r3, #32
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	619a      	str	r2, [r3, #24]
        }
        break;
 800bac2:	e015      	b.n	800baf0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	6a1b      	ldr	r3, [r3, #32]
 800bac8:	3303      	adds	r3, #3
 800baca:	089b      	lsrs	r3, r3, #2
 800bacc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bace:	8afa      	ldrh	r2, [r7, #22]
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	429a      	cmp	r2, r3
 800badc:	d90a      	bls.n	800baf4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	699b      	ldr	r3, [r3, #24]
 800bae2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	619a      	str	r2, [r3, #24]
        }
        break;
 800baea:	e003      	b.n	800baf4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800baec:	bf00      	nop
 800baee:	e002      	b.n	800baf6 <USB_HC_StartXfer+0x4d2>
        break;
 800baf0:	bf00      	nop
 800baf2:	e000      	b.n	800baf6 <USB_HC_StartXfer+0x4d2>
        break;
 800baf4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	6999      	ldr	r1, [r3, #24]
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	785a      	ldrb	r2, [r3, #1]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	6a1b      	ldr	r3, [r3, #32]
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	2000      	movs	r0, #0
 800bb06:	9000      	str	r0, [sp, #0]
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f7ff f9d5 	bl	800aeb8 <USB_WritePacket>
  }

  return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3728      	adds	r7, #40	@ 0x28
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bb2a:	695b      	ldr	r3, [r3, #20]
 800bb2c:	b29b      	uxth	r3, r3
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b089      	sub	sp, #36	@ 0x24
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	460b      	mov	r3, r1
 800bb44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800bb4a:	78fb      	ldrb	r3, [r7, #3]
 800bb4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	0c9b      	lsrs	r3, r3, #18
 800bb62:	f003 0303 	and.w	r3, r3, #3
 800bb66:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	0fdb      	lsrs	r3, r3, #31
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	015a      	lsls	r2, r3, #5
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	4413      	add	r3, r2
 800bb86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	0fdb      	lsrs	r3, r3, #31
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	2b20      	cmp	r3, #32
 800bb9e:	d10d      	bne.n	800bbbc <USB_HC_Halt+0x82>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10a      	bne.n	800bbbc <USB_HC_Halt+0x82>
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d005      	beq.n	800bbb8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d002      	beq.n	800bbb8 <USB_HC_Halt+0x7e>
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d101      	bne.n	800bbbc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	e0d8      	b.n	800bd6e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d002      	beq.n	800bbc8 <USB_HC_Halt+0x8e>
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	d173      	bne.n	800bcb0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	015a      	lsls	r2, r3, #5
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	4413      	add	r3, r2
 800bbd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	69ba      	ldr	r2, [r7, #24]
 800bbd8:	0151      	lsls	r1, r2, #5
 800bbda:	69fa      	ldr	r2, [r7, #28]
 800bbdc:	440a      	add	r2, r1
 800bbde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbe2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bbe6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	f003 0320 	and.w	r3, r3, #32
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d14a      	bne.n	800bc8a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d133      	bne.n	800bc68 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	015a      	lsls	r2, r3, #5
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	4413      	add	r3, r2
 800bc08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	69ba      	ldr	r2, [r7, #24]
 800bc10:	0151      	lsls	r1, r2, #5
 800bc12:	69fa      	ldr	r2, [r7, #28]
 800bc14:	440a      	add	r2, r1
 800bc16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc1e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	015a      	lsls	r2, r3, #5
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	4413      	add	r3, r2
 800bc28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	69ba      	ldr	r2, [r7, #24]
 800bc30:	0151      	lsls	r1, r2, #5
 800bc32:	69fa      	ldr	r2, [r7, #28]
 800bc34:	440a      	add	r2, r1
 800bc36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bc3e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	3301      	adds	r3, #1
 800bc44:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc4c:	d82e      	bhi.n	800bcac <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	015a      	lsls	r2, r3, #5
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	4413      	add	r3, r2
 800bc56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc64:	d0ec      	beq.n	800bc40 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bc66:	e081      	b.n	800bd6c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	015a      	lsls	r2, r3, #5
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	69ba      	ldr	r2, [r7, #24]
 800bc78:	0151      	lsls	r1, r2, #5
 800bc7a:	69fa      	ldr	r2, [r7, #28]
 800bc7c:	440a      	add	r2, r1
 800bc7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bc86:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bc88:	e070      	b.n	800bd6c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	015a      	lsls	r2, r3, #5
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	4413      	add	r3, r2
 800bc92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	69ba      	ldr	r2, [r7, #24]
 800bc9a:	0151      	lsls	r1, r2, #5
 800bc9c:	69fa      	ldr	r2, [r7, #28]
 800bc9e:	440a      	add	r2, r1
 800bca0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bca4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bca8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bcaa:	e05f      	b.n	800bd6c <USB_HC_Halt+0x232>
            break;
 800bcac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bcae:	e05d      	b.n	800bd6c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	015a      	lsls	r2, r3, #5
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	0151      	lsls	r1, r2, #5
 800bcc2:	69fa      	ldr	r2, [r7, #28]
 800bcc4:	440a      	add	r2, r1
 800bcc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bcca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bcce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d133      	bne.n	800bd48 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	69ba      	ldr	r2, [r7, #24]
 800bcf0:	0151      	lsls	r1, r2, #5
 800bcf2:	69fa      	ldr	r2, [r7, #28]
 800bcf4:	440a      	add	r2, r1
 800bcf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bcfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bcfe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	015a      	lsls	r2, r3, #5
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	4413      	add	r3, r2
 800bd08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	69ba      	ldr	r2, [r7, #24]
 800bd10:	0151      	lsls	r1, r2, #5
 800bd12:	69fa      	ldr	r2, [r7, #28]
 800bd14:	440a      	add	r2, r1
 800bd16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bd1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bd1e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	3301      	adds	r3, #1
 800bd24:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd2c:	d81d      	bhi.n	800bd6a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	015a      	lsls	r2, r3, #5
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	4413      	add	r3, r2
 800bd36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd44:	d0ec      	beq.n	800bd20 <USB_HC_Halt+0x1e6>
 800bd46:	e011      	b.n	800bd6c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	015a      	lsls	r2, r3, #5
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	4413      	add	r3, r2
 800bd50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	69ba      	ldr	r2, [r7, #24]
 800bd58:	0151      	lsls	r1, r2, #5
 800bd5a:	69fa      	ldr	r2, [r7, #28]
 800bd5c:	440a      	add	r2, r1
 800bd5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bd62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bd66:	6013      	str	r3, [r2, #0]
 800bd68:	e000      	b.n	800bd6c <USB_HC_Halt+0x232>
          break;
 800bd6a:	bf00      	nop
    }
  }

  return HAL_OK;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3724      	adds	r7, #36	@ 0x24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr
	...

0800bd7c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bd8c:	78fb      	ldrb	r3, [r7, #3]
 800bd8e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bd90:	2301      	movs	r3, #1
 800bd92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	04da      	lsls	r2, r3, #19
 800bd98:	4b15      	ldr	r3, [pc, #84]	@ (800bdf0 <USB_DoPing+0x74>)
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	693a      	ldr	r2, [r7, #16]
 800bd9e:	0151      	lsls	r1, r2, #5
 800bda0:	697a      	ldr	r2, [r7, #20]
 800bda2:	440a      	add	r2, r1
 800bda4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bda8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bdac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bdc4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bdcc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	015a      	lsls	r2, r3, #5
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bdda:	461a      	mov	r2, r3
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	1ff80000 	.word	0x1ff80000

0800bdf4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800be04:	2300      	movs	r3, #0
 800be06:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f7fe ff98 	bl	800ad3e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be0e:	2110      	movs	r1, #16
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7fe fff1 	bl	800adf8 <USB_FlushTxFifo>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7ff f81b 	bl	800ae5c <USB_FlushRxFifo>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800be30:	2300      	movs	r3, #0
 800be32:	61bb      	str	r3, [r7, #24]
 800be34:	e01f      	b.n	800be76 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	015a      	lsls	r2, r3, #5
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	4413      	add	r3, r2
 800be3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800be5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	015a      	lsls	r2, r3, #5
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	4413      	add	r3, r2
 800be66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be6a:	461a      	mov	r2, r3
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	3301      	adds	r3, #1
 800be74:	61bb      	str	r3, [r7, #24]
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	2b0f      	cmp	r3, #15
 800be7a:	d9dc      	bls.n	800be36 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800be7c:	2300      	movs	r3, #0
 800be7e:	61bb      	str	r3, [r7, #24]
 800be80:	e034      	b.n	800beec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	015a      	lsls	r2, r3, #5
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	4413      	add	r3, r2
 800be8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bea0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bea8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	015a      	lsls	r2, r3, #5
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800beb6:	461a      	mov	r2, r3
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3301      	adds	r3, #1
 800bec0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bec8:	d80c      	bhi.n	800bee4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	015a      	lsls	r2, r3, #5
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	4413      	add	r3, r2
 800bed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bedc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bee0:	d0ec      	beq.n	800bebc <USB_StopHost+0xc8>
 800bee2:	e000      	b.n	800bee6 <USB_StopHost+0xf2>
        break;
 800bee4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	3301      	adds	r3, #1
 800beea:	61bb      	str	r3, [r7, #24]
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	2b0f      	cmp	r3, #15
 800bef0:	d9c7      	bls.n	800be82 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bef8:	461a      	mov	r2, r3
 800befa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800befe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf06:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f7fe ff07 	bl	800ad1c <USB_EnableGlobalInt>

  return ret;
 800bf0e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3720      	adds	r7, #32
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bf1c:	4904      	ldr	r1, [pc, #16]	@ (800bf30 <MX_FATFS_Init+0x18>)
 800bf1e:	4805      	ldr	r0, [pc, #20]	@ (800bf34 <MX_FATFS_Init+0x1c>)
 800bf20:	f005 f8a0 	bl	8011064 <FATFS_LinkDriver>
 800bf24:	4603      	mov	r3, r0
 800bf26:	461a      	mov	r2, r3
 800bf28:	4b03      	ldr	r3, [pc, #12]	@ (800bf38 <MX_FATFS_Init+0x20>)
 800bf2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bf2c:	bf00      	nop
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	200007f0 	.word	0x200007f0
 800bf34:	080119c4 	.word	0x080119c4
 800bf38:	200007ec 	.word	0x200007ec

0800bf3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bf40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bf56:	f000 f888 	bl	800c06a <BSP_SD_IsDetected>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d001      	beq.n	800bf64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	e005      	b.n	800bf70 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bf64:	4804      	ldr	r0, [pc, #16]	@ (800bf78 <BSP_SD_Init+0x2c>)
 800bf66:	f7fb fead 	bl	8007cc4 <HAL_SD_Init>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800bf6e:	79fb      	ldrb	r3, [r7, #7]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	2000033c 	.word	0x2000033c

0800bf7c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	68f9      	ldr	r1, [r7, #12]
 800bf92:	4806      	ldr	r0, [pc, #24]	@ (800bfac <BSP_SD_ReadBlocks_DMA+0x30>)
 800bf94:	f7fb ff46 	bl	8007e24 <HAL_SD_ReadBlocks_DMA>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d001      	beq.n	800bfa2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bfa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3718      	adds	r7, #24
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	2000033c 	.word	0x2000033c

0800bfb0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	68f9      	ldr	r1, [r7, #12]
 800bfc6:	4806      	ldr	r0, [pc, #24]	@ (800bfe0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bfc8:	f7fc f80c 	bl	8007fe4 <HAL_SD_WriteBlocks_DMA>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d001      	beq.n	800bfd6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bfd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	2000033c 	.word	0x2000033c

0800bfe4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bfe8:	4805      	ldr	r0, [pc, #20]	@ (800c000 <BSP_SD_GetCardState+0x1c>)
 800bfea:	f7fc fc2d 	bl	8008848 <HAL_SD_GetCardState>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b04      	cmp	r3, #4
 800bff2:	bf14      	ite	ne
 800bff4:	2301      	movne	r3, #1
 800bff6:	2300      	moveq	r3, #0
 800bff8:	b2db      	uxtb	r3, r3
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	2000033c 	.word	0x2000033c

0800c004 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c00c:	6879      	ldr	r1, [r7, #4]
 800c00e:	4803      	ldr	r0, [pc, #12]	@ (800c01c <BSP_SD_GetCardInfo+0x18>)
 800c010:	f7fc fbee 	bl	80087f0 <HAL_SD_GetCardInfo>
}
 800c014:	bf00      	nop
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	2000033c 	.word	0x2000033c

0800c020 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c028:	f000 f818 	bl	800c05c <BSP_SD_AbortCallback>
}
 800c02c:	bf00      	nop
 800c02e:	3708      	adds	r7, #8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c03c:	f000 f9a8 	bl	800c390 <BSP_SD_WriteCpltCallback>
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c050:	f000 f9aa 	bl	800c3a8 <BSP_SD_ReadCpltCallback>
}
 800c054:	bf00      	nop
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c05c:	b480      	push	{r7}
 800c05e:	af00      	add	r7, sp, #0

}
 800c060:	bf00      	nop
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b082      	sub	sp, #8
 800c06e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c070:	2301      	movs	r3, #1
 800c072:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c074:	f000 f80c 	bl	800c090 <BSP_PlatformIsDetected>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d101      	bne.n	800c082 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c07e:	2300      	movs	r3, #0
 800c080:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c082:	79fb      	ldrb	r3, [r7, #7]
 800c084:	b2db      	uxtb	r3, r3
}
 800c086:	4618      	mov	r0, r3
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
	...

0800c090 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c096:	2301      	movs	r3, #1
 800c098:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c09a:	2104      	movs	r1, #4
 800c09c:	4806      	ldr	r0, [pc, #24]	@ (800c0b8 <BSP_PlatformIsDetected+0x28>)
 800c09e:	f7f7 fdaf 	bl	8003c00 <HAL_GPIO_ReadPin>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d001      	beq.n	800c0ac <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c0ac:	79fb      	ldrb	r3, [r7, #7]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	40021800 	.word	0x40021800

0800c0bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c0c4:	f7f5 ff30 	bl	8001f28 <HAL_GetTick>
 800c0c8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c0ca:	e006      	b.n	800c0da <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c0cc:	f7ff ff8a 	bl	800bfe4 <BSP_SD_GetCardState>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d101      	bne.n	800c0da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	e009      	b.n	800c0ee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c0da:	f7f5 ff25 	bl	8001f28 <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d8f0      	bhi.n	800c0cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c0ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
	...

0800c0f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	4603      	mov	r3, r0
 800c100:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c102:	4b0b      	ldr	r3, [pc, #44]	@ (800c130 <SD_CheckStatus+0x38>)
 800c104:	2201      	movs	r2, #1
 800c106:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c108:	f7ff ff6c 	bl	800bfe4 <BSP_SD_GetCardState>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d107      	bne.n	800c122 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c112:	4b07      	ldr	r3, [pc, #28]	@ (800c130 <SD_CheckStatus+0x38>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	b2db      	uxtb	r3, r3
 800c118:	f023 0301 	bic.w	r3, r3, #1
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	4b04      	ldr	r3, [pc, #16]	@ (800c130 <SD_CheckStatus+0x38>)
 800c120:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c122:	4b03      	ldr	r3, [pc, #12]	@ (800c130 <SD_CheckStatus+0x38>)
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	b2db      	uxtb	r3, r3
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	20000025 	.word	0x20000025

0800c134 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	4603      	mov	r3, r0
 800c13c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c13e:	f7ff ff05 	bl	800bf4c <BSP_SD_Init>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d107      	bne.n	800c158 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff ffd4 	bl	800c0f8 <SD_CheckStatus>
 800c150:	4603      	mov	r3, r0
 800c152:	461a      	mov	r2, r3
 800c154:	4b04      	ldr	r3, [pc, #16]	@ (800c168 <SD_initialize+0x34>)
 800c156:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c158:	4b03      	ldr	r3, [pc, #12]	@ (800c168 <SD_initialize+0x34>)
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	b2db      	uxtb	r3, r3
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20000025 	.word	0x20000025

0800c16c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c176:	79fb      	ldrb	r3, [r7, #7]
 800c178:	4618      	mov	r0, r3
 800c17a:	f7ff ffbd 	bl	800c0f8 <SD_CheckStatus>
 800c17e:	4603      	mov	r3, r0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b086      	sub	sp, #24
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60b9      	str	r1, [r7, #8]
 800c190:	607a      	str	r2, [r7, #4]
 800c192:	603b      	str	r3, [r7, #0]
 800c194:	4603      	mov	r3, r0
 800c196:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c198:	2301      	movs	r3, #1
 800c19a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c19c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c1a0:	f7ff ff8c 	bl	800c0bc <SD_CheckStatusWithTimeout>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	da01      	bge.n	800c1ae <SD_read+0x26>
  {
    return res;
 800c1aa:	7dfb      	ldrb	r3, [r7, #23]
 800c1ac:	e03b      	b.n	800c226 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	6879      	ldr	r1, [r7, #4]
 800c1b2:	68b8      	ldr	r0, [r7, #8]
 800c1b4:	f7ff fee2 	bl	800bf7c <BSP_SD_ReadBlocks_DMA>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d132      	bne.n	800c224 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c1be:	4b1c      	ldr	r3, [pc, #112]	@ (800c230 <SD_read+0xa8>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c1c4:	f7f5 feb0 	bl	8001f28 <HAL_GetTick>
 800c1c8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c1ca:	bf00      	nop
 800c1cc:	4b18      	ldr	r3, [pc, #96]	@ (800c230 <SD_read+0xa8>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d108      	bne.n	800c1e6 <SD_read+0x5e>
 800c1d4:	f7f5 fea8 	bl	8001f28 <HAL_GetTick>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	1ad3      	subs	r3, r2, r3
 800c1de:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d9f2      	bls.n	800c1cc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c1e6:	4b12      	ldr	r3, [pc, #72]	@ (800c230 <SD_read+0xa8>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d102      	bne.n	800c1f4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	75fb      	strb	r3, [r7, #23]
 800c1f2:	e017      	b.n	800c224 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c1f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c230 <SD_read+0xa8>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c1fa:	f7f5 fe95 	bl	8001f28 <HAL_GetTick>
 800c1fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c200:	e007      	b.n	800c212 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c202:	f7ff feef 	bl	800bfe4 <BSP_SD_GetCardState>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d102      	bne.n	800c212 <SD_read+0x8a>
          {
            res = RES_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c210:	e008      	b.n	800c224 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c212:	f7f5 fe89 	bl	8001f28 <HAL_GetTick>
 800c216:	4602      	mov	r2, r0
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	1ad3      	subs	r3, r2, r3
 800c21c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c220:	4293      	cmp	r3, r2
 800c222:	d9ee      	bls.n	800c202 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c224:	7dfb      	ldrb	r3, [r7, #23]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	20000c58 	.word	0x20000c58

0800c234 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b086      	sub	sp, #24
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60b9      	str	r1, [r7, #8]
 800c23c:	607a      	str	r2, [r7, #4]
 800c23e:	603b      	str	r3, [r7, #0]
 800c240:	4603      	mov	r3, r0
 800c242:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c248:	4b24      	ldr	r3, [pc, #144]	@ (800c2dc <SD_write+0xa8>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c24e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800c252:	f7ff ff33 	bl	800c0bc <SD_CheckStatusWithTimeout>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	da01      	bge.n	800c260 <SD_write+0x2c>
  {
    return res;
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
 800c25e:	e038      	b.n	800c2d2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	68b8      	ldr	r0, [r7, #8]
 800c266:	f7ff fea3 	bl	800bfb0 <BSP_SD_WriteBlocks_DMA>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d12f      	bne.n	800c2d0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c270:	f7f5 fe5a 	bl	8001f28 <HAL_GetTick>
 800c274:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c276:	bf00      	nop
 800c278:	4b18      	ldr	r3, [pc, #96]	@ (800c2dc <SD_write+0xa8>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d108      	bne.n	800c292 <SD_write+0x5e>
 800c280:	f7f5 fe52 	bl	8001f28 <HAL_GetTick>
 800c284:	4602      	mov	r2, r0
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	1ad3      	subs	r3, r2, r3
 800c28a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c28e:	4293      	cmp	r3, r2
 800c290:	d9f2      	bls.n	800c278 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c292:	4b12      	ldr	r3, [pc, #72]	@ (800c2dc <SD_write+0xa8>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d102      	bne.n	800c2a0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	75fb      	strb	r3, [r7, #23]
 800c29e:	e017      	b.n	800c2d0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c2a0:	4b0e      	ldr	r3, [pc, #56]	@ (800c2dc <SD_write+0xa8>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c2a6:	f7f5 fe3f 	bl	8001f28 <HAL_GetTick>
 800c2aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c2ac:	e007      	b.n	800c2be <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c2ae:	f7ff fe99 	bl	800bfe4 <BSP_SD_GetCardState>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d102      	bne.n	800c2be <SD_write+0x8a>
          {
            res = RES_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	75fb      	strb	r3, [r7, #23]
            break;
 800c2bc:	e008      	b.n	800c2d0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c2be:	f7f5 fe33 	bl	8001f28 <HAL_GetTick>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d9ee      	bls.n	800c2ae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	20000c54 	.word	0x20000c54

0800c2e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b08c      	sub	sp, #48	@ 0x30
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	603a      	str	r2, [r7, #0]
 800c2ea:	71fb      	strb	r3, [r7, #7]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c2f6:	4b25      	ldr	r3, [pc, #148]	@ (800c38c <SD_ioctl+0xac>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	f003 0301 	and.w	r3, r3, #1
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <SD_ioctl+0x28>
 800c304:	2303      	movs	r3, #3
 800c306:	e03c      	b.n	800c382 <SD_ioctl+0xa2>

  switch (cmd)
 800c308:	79bb      	ldrb	r3, [r7, #6]
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d834      	bhi.n	800c378 <SD_ioctl+0x98>
 800c30e:	a201      	add	r2, pc, #4	@ (adr r2, 800c314 <SD_ioctl+0x34>)
 800c310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c314:	0800c325 	.word	0x0800c325
 800c318:	0800c32d 	.word	0x0800c32d
 800c31c:	0800c345 	.word	0x0800c345
 800c320:	0800c35f 	.word	0x0800c35f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c32a:	e028      	b.n	800c37e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c32c:	f107 030c 	add.w	r3, r7, #12
 800c330:	4618      	mov	r0, r3
 800c332:	f7ff fe67 	bl	800c004 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c342:	e01c      	b.n	800c37e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c344:	f107 030c 	add.w	r3, r7, #12
 800c348:	4618      	mov	r0, r3
 800c34a:	f7ff fe5b 	bl	800c004 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c350:	b29a      	uxth	r2, r3
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c35c:	e00f      	b.n	800c37e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c35e:	f107 030c 	add.w	r3, r7, #12
 800c362:	4618      	mov	r0, r3
 800c364:	f7ff fe4e 	bl	800c004 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36a:	0a5a      	lsrs	r2, r3, #9
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c376:	e002      	b.n	800c37e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c378:	2304      	movs	r3, #4
 800c37a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c37e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c382:	4618      	mov	r0, r3
 800c384:	3730      	adds	r7, #48	@ 0x30
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20000025 	.word	0x20000025

0800c390 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c390:	b480      	push	{r7}
 800c392:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c394:	4b03      	ldr	r3, [pc, #12]	@ (800c3a4 <BSP_SD_WriteCpltCallback+0x14>)
 800c396:	2201      	movs	r2, #1
 800c398:	601a      	str	r2, [r3, #0]
}
 800c39a:	bf00      	nop
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr
 800c3a4:	20000c54 	.word	0x20000c54

0800c3a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c3ac:	4b03      	ldr	r3, [pc, #12]	@ (800c3bc <BSP_SD_ReadCpltCallback+0x14>)
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	601a      	str	r2, [r3, #0]
}
 800c3b2:	bf00      	nop
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	20000c58 	.word	0x20000c58

0800c3c0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c3c0:	b590      	push	{r4, r7, lr}
 800c3c2:	b089      	sub	sp, #36	@ 0x24
 800c3c4:	af04      	add	r7, sp, #16
 800c3c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	2102      	movs	r1, #2
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fc85 	bl	800ccde <USBH_FindInterface>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c3d8:	7bfb      	ldrb	r3, [r7, #15]
 800c3da:	2bff      	cmp	r3, #255	@ 0xff
 800c3dc:	d002      	beq.n	800c3e4 <USBH_CDC_InterfaceInit+0x24>
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d901      	bls.n	800c3e8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	e13d      	b.n	800c664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 fc5a 	bl	800cca6 <USBH_SelectInterface>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c3f6:	7bbb      	ldrb	r3, [r7, #14]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d001      	beq.n	800c400 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	e131      	b.n	800c664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800c406:	2050      	movs	r0, #80	@ 0x50
 800c408:	f005 f946 	bl	8011698 <malloc>
 800c40c:	4603      	mov	r3, r0
 800c40e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c416:	69db      	ldr	r3, [r3, #28]
 800c418:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c420:	2302      	movs	r3, #2
 800c422:	e11f      	b.n	800c664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c424:	2250      	movs	r2, #80	@ 0x50
 800c426:	2100      	movs	r1, #0
 800c428:	68b8      	ldr	r0, [r7, #8]
 800c42a:	f005 f9f3 	bl	8011814 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	211a      	movs	r1, #26
 800c434:	fb01 f303 	mul.w	r3, r1, r3
 800c438:	4413      	add	r3, r2
 800c43a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	b25b      	sxtb	r3, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	da15      	bge.n	800c472 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c446:	7bfb      	ldrb	r3, [r7, #15]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	211a      	movs	r1, #26
 800c44c:	fb01 f303 	mul.w	r3, r1, r3
 800c450:	4413      	add	r3, r2
 800c452:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c456:	781a      	ldrb	r2, [r3, #0]
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c45c:	7bfb      	ldrb	r3, [r7, #15]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	211a      	movs	r1, #26
 800c462:	fb01 f303 	mul.w	r3, r1, r3
 800c466:	4413      	add	r3, r2
 800c468:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c46c:	881a      	ldrh	r2, [r3, #0]
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	785b      	ldrb	r3, [r3, #1]
 800c476:	4619      	mov	r1, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f001 ffbe 	bl	800e3fa <USBH_AllocPipe>
 800c47e:	4603      	mov	r3, r0
 800c480:	461a      	mov	r2, r3
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	7819      	ldrb	r1, [r3, #0]
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	7858      	ldrb	r0, [r3, #1]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	8952      	ldrh	r2, [r2, #10]
 800c49e:	9202      	str	r2, [sp, #8]
 800c4a0:	2203      	movs	r2, #3
 800c4a2:	9201      	str	r2, [sp, #4]
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	4623      	mov	r3, r4
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f001 ff76 	bl	800e39c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f005 f867 	bl	801158c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c4be:	2300      	movs	r3, #0
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	210a      	movs	r1, #10
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 fc0a 	bl	800ccde <USBH_FindInterface>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	2bff      	cmp	r3, #255	@ 0xff
 800c4d2:	d002      	beq.n	800c4da <USBH_CDC_InterfaceInit+0x11a>
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d901      	bls.n	800c4de <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c4da:	2302      	movs	r3, #2
 800c4dc:	e0c2      	b.n	800c664 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c4de:	7bfb      	ldrb	r3, [r7, #15]
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	211a      	movs	r1, #26
 800c4e4:	fb01 f303 	mul.w	r3, r1, r3
 800c4e8:	4413      	add	r3, r2
 800c4ea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	b25b      	sxtb	r3, r3
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	da16      	bge.n	800c524 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	211a      	movs	r1, #26
 800c4fc:	fb01 f303 	mul.w	r3, r1, r3
 800c500:	4413      	add	r3, r2
 800c502:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c506:	781a      	ldrb	r2, [r3, #0]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c50c:	7bfb      	ldrb	r3, [r7, #15]
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	211a      	movs	r1, #26
 800c512:	fb01 f303 	mul.w	r3, r1, r3
 800c516:	4413      	add	r3, r2
 800c518:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c51c:	881a      	ldrh	r2, [r3, #0]
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	835a      	strh	r2, [r3, #26]
 800c522:	e015      	b.n	800c550 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c524:	7bfb      	ldrb	r3, [r7, #15]
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	211a      	movs	r1, #26
 800c52a:	fb01 f303 	mul.w	r3, r1, r3
 800c52e:	4413      	add	r3, r2
 800c530:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c534:	781a      	ldrb	r2, [r3, #0]
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	211a      	movs	r1, #26
 800c540:	fb01 f303 	mul.w	r3, r1, r3
 800c544:	4413      	add	r3, r2
 800c546:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c54a:	881a      	ldrh	r2, [r3, #0]
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c550:	7bfb      	ldrb	r3, [r7, #15]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	211a      	movs	r1, #26
 800c556:	fb01 f303 	mul.w	r3, r1, r3
 800c55a:	4413      	add	r3, r2
 800c55c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	b25b      	sxtb	r3, r3
 800c564:	2b00      	cmp	r3, #0
 800c566:	da16      	bge.n	800c596 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	211a      	movs	r1, #26
 800c56e:	fb01 f303 	mul.w	r3, r1, r3
 800c572:	4413      	add	r3, r2
 800c574:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c578:	781a      	ldrb	r2, [r3, #0]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c57e:	7bfb      	ldrb	r3, [r7, #15]
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	211a      	movs	r1, #26
 800c584:	fb01 f303 	mul.w	r3, r1, r3
 800c588:	4413      	add	r3, r2
 800c58a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c58e:	881a      	ldrh	r2, [r3, #0]
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	835a      	strh	r2, [r3, #26]
 800c594:	e015      	b.n	800c5c2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	211a      	movs	r1, #26
 800c59c:	fb01 f303 	mul.w	r3, r1, r3
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c5a6:	781a      	ldrb	r2, [r3, #0]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	211a      	movs	r1, #26
 800c5b2:	fb01 f303 	mul.w	r3, r1, r3
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c5bc:	881a      	ldrh	r2, [r3, #0]
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	7b9b      	ldrb	r3, [r3, #14]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f001 ff16 	bl	800e3fa <USBH_AllocPipe>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	7bdb      	ldrb	r3, [r3, #15]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f001 ff0c 	bl	800e3fa <USBH_AllocPipe>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	7b59      	ldrb	r1, [r3, #13]
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	7b98      	ldrb	r0, [r3, #14]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c5fe:	68ba      	ldr	r2, [r7, #8]
 800c600:	8b12      	ldrh	r2, [r2, #24]
 800c602:	9202      	str	r2, [sp, #8]
 800c604:	2202      	movs	r2, #2
 800c606:	9201      	str	r2, [sp, #4]
 800c608:	9300      	str	r3, [sp, #0]
 800c60a:	4623      	mov	r3, r4
 800c60c:	4602      	mov	r2, r0
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f001 fec4 	bl	800e39c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	7b19      	ldrb	r1, [r3, #12]
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	7bd8      	ldrb	r0, [r3, #15]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	8b52      	ldrh	r2, [r2, #26]
 800c62c:	9202      	str	r2, [sp, #8]
 800c62e:	2202      	movs	r2, #2
 800c630:	9201      	str	r2, [sp, #4]
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	4623      	mov	r3, r4
 800c636:	4602      	mov	r2, r0
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f001 feaf 	bl	800e39c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2200      	movs	r2, #0
 800c642:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	7b5b      	ldrb	r3, [r3, #13]
 800c64a:	2200      	movs	r2, #0
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f004 ff9c 	bl	801158c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	7b1b      	ldrb	r3, [r3, #12]
 800c658:	2200      	movs	r2, #0
 800c65a:	4619      	mov	r1, r3
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f004 ff95 	bl	801158c <USBH_LL_SetToggle>

  return USBH_OK;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd90      	pop	{r4, r7, pc}

0800c66c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c67a:	69db      	ldr	r3, [r3, #28]
 800c67c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00e      	beq.n	800c6a4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f001 fea4 	bl	800e3da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f001 fecf 	bl	800e43c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	7b1b      	ldrb	r3, [r3, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00e      	beq.n	800c6ca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	7b1b      	ldrb	r3, [r3, #12]
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f001 fe91 	bl	800e3da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	7b1b      	ldrb	r3, [r3, #12]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f001 febc 	bl	800e43c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	7b5b      	ldrb	r3, [r3, #13]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00e      	beq.n	800c6f0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	7b5b      	ldrb	r3, [r3, #13]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f001 fe7e 	bl	800e3da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	7b5b      	ldrb	r3, [r3, #13]
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f001 fea9 	bl	800e43c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c6f6:	69db      	ldr	r3, [r3, #28]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00b      	beq.n	800c714 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c702:	69db      	ldr	r3, [r3, #28]
 800c704:	4618      	mov	r0, r3
 800c706:	f004 ffcf 	bl	80116a8 <free>
    phost->pActiveClass->pData = 0U;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c710:	2200      	movs	r2, #0
 800c712:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c72c:	69db      	ldr	r3, [r3, #28]
 800c72e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	3340      	adds	r3, #64	@ 0x40
 800c734:	4619      	mov	r1, r3
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f8b1 	bl	800c89e <GetLineCoding>
 800c73c:	4603      	mov	r3, r0
 800c73e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c740:	7afb      	ldrb	r3, [r7, #11]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d105      	bne.n	800c752 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c74c:	2102      	movs	r1, #2
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c752:	7afb      	ldrb	r3, [r7, #11]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c764:	2301      	movs	r3, #1
 800c766:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d877      	bhi.n	800c870 <USBH_CDC_Process+0x114>
 800c780:	a201      	add	r2, pc, #4	@ (adr r2, 800c788 <USBH_CDC_Process+0x2c>)
 800c782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c786:	bf00      	nop
 800c788:	0800c79d 	.word	0x0800c79d
 800c78c:	0800c7a3 	.word	0x0800c7a3
 800c790:	0800c7d3 	.word	0x0800c7d3
 800c794:	0800c847 	.word	0x0800c847
 800c798:	0800c855 	.word	0x0800c855
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	73fb      	strb	r3, [r7, #15]
      break;
 800c7a0:	e06d      	b.n	800c87e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f897 	bl	800c8dc <SetLineCoding>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c7b2:	7bbb      	ldrb	r3, [r7, #14]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d104      	bne.n	800c7c2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c7c0:	e058      	b.n	800c874 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c7c2:	7bbb      	ldrb	r3, [r7, #14]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d055      	beq.n	800c874 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2204      	movs	r2, #4
 800c7cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c7d0:	e050      	b.n	800c874 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	3340      	adds	r3, #64	@ 0x40
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f860 	bl	800c89e <GetLineCoding>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c7e2:	7bbb      	ldrb	r3, [r7, #14]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d126      	bne.n	800c836 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7fa:	791b      	ldrb	r3, [r3, #4]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d13b      	bne.n	800c878 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c80a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d133      	bne.n	800c878 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c81a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d12b      	bne.n	800c878 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c828:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d124      	bne.n	800c878 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f958 	bl	800cae4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c834:	e020      	b.n	800c878 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c836:	7bbb      	ldrb	r3, [r7, #14]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d01d      	beq.n	800c878 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2204      	movs	r2, #4
 800c840:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c844:	e018      	b.n	800c878 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f867 	bl	800c91a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f8da 	bl	800ca06 <CDC_ProcessReception>
      break;
 800c852:	e014      	b.n	800c87e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c854:	2100      	movs	r1, #0
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f001 f81a 	bl	800d890 <USBH_ClrFeature>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c860:	7bbb      	ldrb	r3, [r7, #14]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10a      	bne.n	800c87c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800c86e:	e005      	b.n	800c87c <USBH_CDC_Process+0x120>

    default:
      break;
 800c870:	bf00      	nop
 800c872:	e004      	b.n	800c87e <USBH_CDC_Process+0x122>
      break;
 800c874:	bf00      	nop
 800c876:	e002      	b.n	800c87e <USBH_CDC_Process+0x122>
      break;
 800c878:	bf00      	nop
 800c87a:	e000      	b.n	800c87e <USBH_CDC_Process+0x122>
      break;
 800c87c:	bf00      	nop

  }

  return status;
 800c87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3710      	adds	r7, #16
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	370c      	adds	r7, #12
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr

0800c89e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b082      	sub	sp, #8
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
 800c8a6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	22a1      	movs	r2, #161	@ 0xa1
 800c8ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2221      	movs	r2, #33	@ 0x21
 800c8b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2207      	movs	r2, #7
 800c8c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	2207      	movs	r2, #7
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f001 fb14 	bl	800defa <USBH_CtlReq>
 800c8d2:	4603      	mov	r3, r0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2221      	movs	r2, #33	@ 0x21
 800c8ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2220      	movs	r2, #32
 800c8f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2207      	movs	r2, #7
 800c902:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2207      	movs	r2, #7
 800c908:	4619      	mov	r1, r3
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f001 faf5 	bl	800defa <USBH_CtlReq>
 800c910:	4603      	mov	r3, r0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b086      	sub	sp, #24
 800c91e:	af02      	add	r7, sp, #8
 800c920:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c928:	69db      	ldr	r3, [r3, #28]
 800c92a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c92c:	2300      	movs	r3, #0
 800c92e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800c936:	2b01      	cmp	r3, #1
 800c938:	d002      	beq.n	800c940 <CDC_ProcessTransmission+0x26>
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d023      	beq.n	800c986 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c93e:	e05e      	b.n	800c9fe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	8b12      	ldrh	r2, [r2, #24]
 800c948:	4293      	cmp	r3, r2
 800c94a:	d90b      	bls.n	800c964 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	69d9      	ldr	r1, [r3, #28]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	8b1a      	ldrh	r2, [r3, #24]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	7b5b      	ldrb	r3, [r3, #13]
 800c958:	2001      	movs	r0, #1
 800c95a:	9000      	str	r0, [sp, #0]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f001 fcda 	bl	800e316 <USBH_BulkSendData>
 800c962:	e00b      	b.n	800c97c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	7b5b      	ldrb	r3, [r3, #13]
 800c972:	2001      	movs	r0, #1
 800c974:	9000      	str	r0, [sp, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 fccd 	bl	800e316 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c984:	e03b      	b.n	800c9fe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	7b5b      	ldrb	r3, [r3, #13]
 800c98a:	4619      	mov	r1, r3
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f004 fdd3 	bl	8011538 <USBH_LL_GetURBState>
 800c992:	4603      	mov	r3, r0
 800c994:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c996:	7afb      	ldrb	r3, [r7, #11]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d128      	bne.n	800c9ee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	8b12      	ldrh	r2, [r2, #24]
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d90e      	bls.n	800c9c6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	8b12      	ldrh	r2, [r2, #24]
 800c9b0:	1a9a      	subs	r2, r3, r2
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	8b12      	ldrh	r2, [r2, #24]
 800c9be:	441a      	add	r2, r3
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	61da      	str	r2, [r3, #28]
 800c9c4:	e002      	b.n	800c9cc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d004      	beq.n	800c9de <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c9dc:	e00e      	b.n	800c9fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f868 	bl	800cabc <USBH_CDC_TransmitCallback>
      break;
 800c9ec:	e006      	b.n	800c9fc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800c9ee:	7afb      	ldrb	r3, [r7, #11]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d103      	bne.n	800c9fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c9fc:	bf00      	nop
  }
}
 800c9fe:	bf00      	nop
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b086      	sub	sp, #24
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca14:	69db      	ldr	r3, [r3, #28]
 800ca16:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800ca22:	2b03      	cmp	r3, #3
 800ca24:	d002      	beq.n	800ca2c <CDC_ProcessReception+0x26>
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	d00e      	beq.n	800ca48 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ca2a:	e043      	b.n	800cab4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	6a19      	ldr	r1, [r3, #32]
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	8b5a      	ldrh	r2, [r3, #26]
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	7b1b      	ldrb	r3, [r3, #12]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f001 fc91 	bl	800e360 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	2204      	movs	r2, #4
 800ca42:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ca46:	e035      	b.n	800cab4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	7b1b      	ldrb	r3, [r3, #12]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f004 fd72 	bl	8011538 <USBH_LL_GetURBState>
 800ca54:	4603      	mov	r3, r0
 800ca56:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ca58:	7cfb      	ldrb	r3, [r7, #19]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d129      	bne.n	800cab2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	7b1b      	ldrb	r3, [r3, #12]
 800ca62:	4619      	mov	r1, r3
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f004 fcd5 	bl	8011414 <USBH_LL_GetLastXferSize>
 800ca6a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d016      	beq.n	800caa4 <CDC_ProcessReception+0x9e>
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	8b5b      	ldrh	r3, [r3, #26]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d110      	bne.n	800caa4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	1ad2      	subs	r2, r2, r3
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	6a1a      	ldr	r2, [r3, #32]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	441a      	add	r2, r3
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2203      	movs	r2, #3
 800ca9e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800caa2:	e006      	b.n	800cab2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f80f 	bl	800cad0 <USBH_CDC_ReceiveCallback>
      break;
 800cab2:	bf00      	nop
  }
}
 800cab4:	bf00      	nop
 800cab6:	3718      	adds	r7, #24
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cad8:	bf00      	nop
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800caec:	bf00      	nop
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	4613      	mov	r3, r2
 800cb04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d101      	bne.n	800cb10 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	e029      	b.n	800cb64 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	79fa      	ldrb	r2, [r7, #7]
 800cb14:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f000 f81f 	bl	800cb6c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d003      	beq.n	800cb5c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f004 fba5 	bl	80112ac <USBH_LL_Init>

  return USBH_OK;
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cb74:	2300      	movs	r3, #0
 800cb76:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	e009      	b.n	800cb92 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	33e0      	adds	r3, #224	@ 0xe0
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4413      	add	r3, r2
 800cb88:	2200      	movs	r2, #0
 800cb8a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	60fb      	str	r3, [r7, #12]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2b0f      	cmp	r3, #15
 800cb96:	d9f2      	bls.n	800cb7e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cb98:	2300      	movs	r3, #0
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	e009      	b.n	800cbb2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	4413      	add	r3, r2
 800cba4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	60fb      	str	r3, [r7, #12]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbb8:	d3f1      	bcc.n	800cb9e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2240      	movs	r2, #64	@ 0x40
 800cbde:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	331c      	adds	r3, #28
 800cc0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cc0e:	2100      	movs	r1, #0
 800cc10:	4618      	mov	r0, r3
 800cc12:	f004 fdff 	bl	8011814 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cc1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc20:	2100      	movs	r1, #0
 800cc22:	4618      	mov	r0, r3
 800cc24:	f004 fdf6 	bl	8011814 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cc2e:	2212      	movs	r2, #18
 800cc30:	2100      	movs	r1, #0
 800cc32:	4618      	mov	r0, r3
 800cc34:	f004 fdee 	bl	8011814 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cc3e:	223e      	movs	r2, #62	@ 0x3e
 800cc40:	2100      	movs	r1, #0
 800cc42:	4618      	mov	r0, r3
 800cc44:	f004 fde6 	bl	8011814 <memset>

  return USBH_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cc52:	b480      	push	{r7}
 800cc54:	b085      	sub	sp, #20
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d016      	beq.n	800cc94 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10e      	bne.n	800cc8e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cc76:	1c59      	adds	r1, r3, #1
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	33de      	adds	r3, #222	@ 0xde
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	73fb      	strb	r3, [r7, #15]
 800cc8c:	e004      	b.n	800cc98 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cc8e:	2302      	movs	r3, #2
 800cc90:	73fb      	strb	r3, [r7, #15]
 800cc92:	e001      	b.n	800cc98 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cc94:	2302      	movs	r3, #2
 800cc96:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b085      	sub	sp, #20
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	460b      	mov	r3, r1
 800ccb0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800ccbc:	78fa      	ldrb	r2, [r7, #3]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d204      	bcs.n	800cccc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	78fa      	ldrb	r2, [r7, #3]
 800ccc6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800ccca:	e001      	b.n	800ccd0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cccc:	2302      	movs	r3, #2
 800ccce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3714      	adds	r7, #20
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b087      	sub	sp, #28
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	4608      	mov	r0, r1
 800cce8:	4611      	mov	r1, r2
 800ccea:	461a      	mov	r2, r3
 800ccec:	4603      	mov	r3, r0
 800ccee:	70fb      	strb	r3, [r7, #3]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	70bb      	strb	r3, [r7, #2]
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800cd06:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cd08:	e025      	b.n	800cd56 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cd0a:	7dfb      	ldrb	r3, [r7, #23]
 800cd0c:	221a      	movs	r2, #26
 800cd0e:	fb02 f303 	mul.w	r3, r2, r3
 800cd12:	3308      	adds	r3, #8
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	4413      	add	r3, r2
 800cd18:	3302      	adds	r3, #2
 800cd1a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	795b      	ldrb	r3, [r3, #5]
 800cd20:	78fa      	ldrb	r2, [r7, #3]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d002      	beq.n	800cd2c <USBH_FindInterface+0x4e>
 800cd26:	78fb      	ldrb	r3, [r7, #3]
 800cd28:	2bff      	cmp	r3, #255	@ 0xff
 800cd2a:	d111      	bne.n	800cd50 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cd30:	78ba      	ldrb	r2, [r7, #2]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d002      	beq.n	800cd3c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd36:	78bb      	ldrb	r3, [r7, #2]
 800cd38:	2bff      	cmp	r3, #255	@ 0xff
 800cd3a:	d109      	bne.n	800cd50 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cd40:	787a      	ldrb	r2, [r7, #1]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d002      	beq.n	800cd4c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd46:	787b      	ldrb	r3, [r7, #1]
 800cd48:	2bff      	cmp	r3, #255	@ 0xff
 800cd4a:	d101      	bne.n	800cd50 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cd4c:	7dfb      	ldrb	r3, [r7, #23]
 800cd4e:	e006      	b.n	800cd5e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cd50:	7dfb      	ldrb	r3, [r7, #23]
 800cd52:	3301      	adds	r3, #1
 800cd54:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cd56:	7dfb      	ldrb	r3, [r7, #23]
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d9d6      	bls.n	800cd0a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cd5c:	23ff      	movs	r3, #255	@ 0xff
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	371c      	adds	r7, #28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b082      	sub	sp, #8
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f004 fad6 	bl	8011324 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cd78:	2101      	movs	r1, #1
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f004 fbef 	bl	801155e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3708      	adds	r7, #8
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
	...

0800cd8c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b088      	sub	sp, #32
 800cd90:	af04      	add	r7, sp, #16
 800cd92:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cd94:	2302      	movs	r3, #2
 800cd96:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d102      	bne.n	800cdae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2203      	movs	r2, #3
 800cdac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b0b      	cmp	r3, #11
 800cdb6:	f200 81bb 	bhi.w	800d130 <USBH_Process+0x3a4>
 800cdba:	a201      	add	r2, pc, #4	@ (adr r2, 800cdc0 <USBH_Process+0x34>)
 800cdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc0:	0800cdf1 	.word	0x0800cdf1
 800cdc4:	0800ce23 	.word	0x0800ce23
 800cdc8:	0800ce8b 	.word	0x0800ce8b
 800cdcc:	0800d0cb 	.word	0x0800d0cb
 800cdd0:	0800d131 	.word	0x0800d131
 800cdd4:	0800cf2b 	.word	0x0800cf2b
 800cdd8:	0800d071 	.word	0x0800d071
 800cddc:	0800cf61 	.word	0x0800cf61
 800cde0:	0800cf81 	.word	0x0800cf81
 800cde4:	0800cf9f 	.word	0x0800cf9f
 800cde8:	0800cfe3 	.word	0x0800cfe3
 800cdec:	0800d0b3 	.word	0x0800d0b3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f000 819b 	beq.w	800d134 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2201      	movs	r2, #1
 800ce02:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ce04:	20c8      	movs	r0, #200	@ 0xc8
 800ce06:	f004 fbf4 	bl	80115f2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f004 fae7 	bl	80113de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ce20:	e188      	b.n	800d134 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d107      	bne.n	800ce3c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2202      	movs	r2, #2
 800ce38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce3a:	e18a      	b.n	800d152 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ce42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce46:	d914      	bls.n	800ce72 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ce4e:	3301      	adds	r3, #1
 800ce50:	b2da      	uxtb	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	d903      	bls.n	800ce6a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	220d      	movs	r2, #13
 800ce66:	701a      	strb	r2, [r3, #0]
      break;
 800ce68:	e173      	b.n	800d152 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	701a      	strb	r2, [r3, #0]
      break;
 800ce70:	e16f      	b.n	800d152 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ce78:	f103 020a 	add.w	r2, r3, #10
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ce82:	200a      	movs	r0, #10
 800ce84:	f004 fbb5 	bl	80115f2 <USBH_Delay>
      break;
 800ce88:	e163      	b.n	800d152 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d005      	beq.n	800cea0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ce9a:	2104      	movs	r1, #4
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cea0:	2064      	movs	r0, #100	@ 0x64
 800cea2:	f004 fba6 	bl	80115f2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f004 fa72 	bl	8011390 <USBH_LL_GetSpeed>
 800ceac:	4603      	mov	r3, r0
 800ceae:	461a      	mov	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2205      	movs	r2, #5
 800ceba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cebc:	2100      	movs	r1, #0
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f001 fa9b 	bl	800e3fa <USBH_AllocPipe>
 800cec4:	4603      	mov	r3, r0
 800cec6:	461a      	mov	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cecc:	2180      	movs	r1, #128	@ 0x80
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f001 fa93 	bl	800e3fa <USBH_AllocPipe>
 800ced4:	4603      	mov	r3, r0
 800ced6:	461a      	mov	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	7919      	ldrb	r1, [r3, #4]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cef0:	9202      	str	r2, [sp, #8]
 800cef2:	2200      	movs	r2, #0
 800cef4:	9201      	str	r2, [sp, #4]
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	4603      	mov	r3, r0
 800cefa:	2280      	movs	r2, #128	@ 0x80
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f001 fa4d 	bl	800e39c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	7959      	ldrb	r1, [r3, #5]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cf16:	9202      	str	r2, [sp, #8]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	9201      	str	r2, [sp, #4]
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2200      	movs	r2, #0
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f001 fa3a 	bl	800e39c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cf28:	e113      	b.n	800d152 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 f916 	bl	800d15c <USBH_HandleEnum>
 800cf30:	4603      	mov	r3, r0
 800cf32:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cf34:	7bbb      	ldrb	r3, [r7, #14]
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f040 80fd 	bne.w	800d138 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d103      	bne.n	800cf58 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2208      	movs	r2, #8
 800cf54:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cf56:	e0ef      	b.n	800d138 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2207      	movs	r2, #7
 800cf5c:	701a      	strb	r2, [r3, #0]
      break;
 800cf5e:	e0eb      	b.n	800d138 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f000 80e8 	beq.w	800d13c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cf72:	2101      	movs	r1, #1
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2208      	movs	r2, #8
 800cf7c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cf7e:	e0dd      	b.n	800d13c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fc3a 	bl	800d802 <USBH_SetCfg>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f040 80d5 	bne.w	800d140 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2209      	movs	r2, #9
 800cf9a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cf9c:	e0d0      	b.n	800d140 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800cfa4:	f003 0320 	and.w	r3, r3, #32
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d016      	beq.n	800cfda <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cfac:	2101      	movs	r1, #1
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 fc4a 	bl	800d848 <USBH_SetFeature>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cfb8:	7bbb      	ldrb	r3, [r7, #14]
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d103      	bne.n	800cfc8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	220a      	movs	r2, #10
 800cfc4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cfc6:	e0bd      	b.n	800d144 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800cfc8:	7bbb      	ldrb	r3, [r7, #14]
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	2b03      	cmp	r3, #3
 800cfce:	f040 80b9 	bne.w	800d144 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	220a      	movs	r2, #10
 800cfd6:	701a      	strb	r2, [r3, #0]
      break;
 800cfd8:	e0b4      	b.n	800d144 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	220a      	movs	r2, #10
 800cfde:	701a      	strb	r2, [r3, #0]
      break;
 800cfe0:	e0b0      	b.n	800d144 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f000 80ad 	beq.w	800d148 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cff6:	2300      	movs	r3, #0
 800cff8:	73fb      	strb	r3, [r7, #15]
 800cffa:	e016      	b.n	800d02a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cffc:	7bfa      	ldrb	r2, [r7, #15]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	32de      	adds	r2, #222	@ 0xde
 800d002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d006:	791a      	ldrb	r2, [r3, #4]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800d00e:	429a      	cmp	r2, r3
 800d010:	d108      	bne.n	800d024 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d012:	7bfa      	ldrb	r2, [r7, #15]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	32de      	adds	r2, #222	@ 0xde
 800d018:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800d022:	e005      	b.n	800d030 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d024:	7bfb      	ldrb	r3, [r7, #15]
 800d026:	3301      	adds	r3, #1
 800d028:	73fb      	strb	r3, [r7, #15]
 800d02a:	7bfb      	ldrb	r3, [r7, #15]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d0e5      	beq.n	800cffc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d036:	2b00      	cmp	r3, #0
 800d038:	d016      	beq.n	800d068 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	4798      	blx	r3
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d109      	bne.n	800d060 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2206      	movs	r2, #6
 800d050:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d058:	2103      	movs	r1, #3
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d05e:	e073      	b.n	800d148 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	220d      	movs	r2, #13
 800d064:	701a      	strb	r2, [r3, #0]
      break;
 800d066:	e06f      	b.n	800d148 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	220d      	movs	r2, #13
 800d06c:	701a      	strb	r2, [r3, #0]
      break;
 800d06e:	e06b      	b.n	800d148 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d076:	2b00      	cmp	r3, #0
 800d078:	d017      	beq.n	800d0aa <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d080:	691b      	ldr	r3, [r3, #16]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	4798      	blx	r3
 800d086:	4603      	mov	r3, r0
 800d088:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d08a:	7bbb      	ldrb	r3, [r7, #14]
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d103      	bne.n	800d09a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	220b      	movs	r2, #11
 800d096:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d098:	e058      	b.n	800d14c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800d09a:	7bbb      	ldrb	r3, [r7, #14]
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d154      	bne.n	800d14c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	220d      	movs	r2, #13
 800d0a6:	701a      	strb	r2, [r3, #0]
      break;
 800d0a8:	e050      	b.n	800d14c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	220d      	movs	r2, #13
 800d0ae:	701a      	strb	r2, [r3, #0]
      break;
 800d0b0:	e04c      	b.n	800d14c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d049      	beq.n	800d150 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d0c2:	695b      	ldr	r3, [r3, #20]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	4798      	blx	r3
      }
      break;
 800d0c8:	e042      	b.n	800d150 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7ff fd4a 	bl	800cb6c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d009      	beq.n	800d0f6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d005      	beq.n	800d10c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d106:	2105      	movs	r1, #5
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800d112:	b2db      	uxtb	r3, r3
 800d114:	2b01      	cmp	r3, #1
 800d116:	d107      	bne.n	800d128 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	f7ff fe22 	bl	800cd6a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d126:	e014      	b.n	800d152 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f004 f8fb 	bl	8011324 <USBH_LL_Start>
      break;
 800d12e:	e010      	b.n	800d152 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800d130:	bf00      	nop
 800d132:	e00e      	b.n	800d152 <USBH_Process+0x3c6>
      break;
 800d134:	bf00      	nop
 800d136:	e00c      	b.n	800d152 <USBH_Process+0x3c6>
      break;
 800d138:	bf00      	nop
 800d13a:	e00a      	b.n	800d152 <USBH_Process+0x3c6>
    break;
 800d13c:	bf00      	nop
 800d13e:	e008      	b.n	800d152 <USBH_Process+0x3c6>
      break;
 800d140:	bf00      	nop
 800d142:	e006      	b.n	800d152 <USBH_Process+0x3c6>
      break;
 800d144:	bf00      	nop
 800d146:	e004      	b.n	800d152 <USBH_Process+0x3c6>
      break;
 800d148:	bf00      	nop
 800d14a:	e002      	b.n	800d152 <USBH_Process+0x3c6>
      break;
 800d14c:	bf00      	nop
 800d14e:	e000      	b.n	800d152 <USBH_Process+0x3c6>
      break;
 800d150:	bf00      	nop
  }
  return USBH_OK;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b088      	sub	sp, #32
 800d160:	af04      	add	r7, sp, #16
 800d162:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d164:	2301      	movs	r3, #1
 800d166:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d168:	2301      	movs	r3, #1
 800d16a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	785b      	ldrb	r3, [r3, #1]
 800d170:	2b07      	cmp	r3, #7
 800d172:	f200 81bd 	bhi.w	800d4f0 <USBH_HandleEnum+0x394>
 800d176:	a201      	add	r2, pc, #4	@ (adr r2, 800d17c <USBH_HandleEnum+0x20>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d19d 	.word	0x0800d19d
 800d180:	0800d257 	.word	0x0800d257
 800d184:	0800d2c1 	.word	0x0800d2c1
 800d188:	0800d34b 	.word	0x0800d34b
 800d18c:	0800d3b5 	.word	0x0800d3b5
 800d190:	0800d425 	.word	0x0800d425
 800d194:	0800d46b 	.word	0x0800d46b
 800d198:	0800d4b1 	.word	0x0800d4b1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d19c:	2108      	movs	r1, #8
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 fa4c 	bl	800d63c <USBH_Get_DevDesc>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d1a8:	7bbb      	ldrb	r3, [r7, #14]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d12e      	bne.n	800d20c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	7919      	ldrb	r1, [r3, #4]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d1d2:	9202      	str	r2, [sp, #8]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	9201      	str	r2, [sp, #4]
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2280      	movs	r2, #128	@ 0x80
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f001 f8dc 	bl	800e39c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	7959      	ldrb	r1, [r3, #5]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d1f8:	9202      	str	r2, [sp, #8]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	9201      	str	r2, [sp, #4]
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	4603      	mov	r3, r0
 800d202:	2200      	movs	r2, #0
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f001 f8c9 	bl	800e39c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d20a:	e173      	b.n	800d4f4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d20c:	7bbb      	ldrb	r3, [r7, #14]
 800d20e:	2b03      	cmp	r3, #3
 800d210:	f040 8170 	bne.w	800d4f4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d21a:	3301      	adds	r3, #1
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d22a:	2b03      	cmp	r3, #3
 800d22c:	d903      	bls.n	800d236 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	220d      	movs	r2, #13
 800d232:	701a      	strb	r2, [r3, #0]
      break;
 800d234:	e15e      	b.n	800d4f4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	795b      	ldrb	r3, [r3, #5]
 800d23a:	4619      	mov	r1, r3
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f001 f8fd 	bl	800e43c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	791b      	ldrb	r3, [r3, #4]
 800d246:	4619      	mov	r1, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f001 f8f7 	bl	800e43c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2200      	movs	r2, #0
 800d252:	701a      	strb	r2, [r3, #0]
      break;
 800d254:	e14e      	b.n	800d4f4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d256:	2112      	movs	r1, #18
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f9ef 	bl	800d63c <USBH_Get_DevDesc>
 800d25e:	4603      	mov	r3, r0
 800d260:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d262:	7bbb      	ldrb	r3, [r7, #14]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d103      	bne.n	800d270 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2202      	movs	r2, #2
 800d26c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d26e:	e143      	b.n	800d4f8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d270:	7bbb      	ldrb	r3, [r7, #14]
 800d272:	2b03      	cmp	r3, #3
 800d274:	f040 8140 	bne.w	800d4f8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d27e:	3301      	adds	r3, #1
 800d280:	b2da      	uxtb	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d28e:	2b03      	cmp	r3, #3
 800d290:	d903      	bls.n	800d29a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	220d      	movs	r2, #13
 800d296:	701a      	strb	r2, [r3, #0]
      break;
 800d298:	e12e      	b.n	800d4f8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	795b      	ldrb	r3, [r3, #5]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f001 f8cb 	bl	800e43c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	791b      	ldrb	r3, [r3, #4]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f001 f8c5 	bl	800e43c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	701a      	strb	r2, [r3, #0]
      break;
 800d2be:	e11b      	b.n	800d4f8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 fa79 	bl	800d7ba <USBH_SetAddress>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d2cc:	7bbb      	ldrb	r3, [r7, #14]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d130      	bne.n	800d334 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800d2d2:	2002      	movs	r0, #2
 800d2d4:	f004 f98d 	bl	80115f2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2203      	movs	r2, #3
 800d2e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	7919      	ldrb	r1, [r3, #4]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d2fa:	9202      	str	r2, [sp, #8]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	9201      	str	r2, [sp, #4]
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	4603      	mov	r3, r0
 800d304:	2280      	movs	r2, #128	@ 0x80
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f001 f848 	bl	800e39c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	7959      	ldrb	r1, [r3, #5]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d320:	9202      	str	r2, [sp, #8]
 800d322:	2200      	movs	r2, #0
 800d324:	9201      	str	r2, [sp, #4]
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	4603      	mov	r3, r0
 800d32a:	2200      	movs	r2, #0
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f001 f835 	bl	800e39c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d332:	e0e3      	b.n	800d4fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d334:	7bbb      	ldrb	r3, [r7, #14]
 800d336:	2b03      	cmp	r3, #3
 800d338:	f040 80e0 	bne.w	800d4fc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	220d      	movs	r2, #13
 800d340:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2200      	movs	r2, #0
 800d346:	705a      	strb	r2, [r3, #1]
      break;
 800d348:	e0d8      	b.n	800d4fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d34a:	2109      	movs	r1, #9
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 f9a1 	bl	800d694 <USBH_Get_CfgDesc>
 800d352:	4603      	mov	r3, r0
 800d354:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d356:	7bbb      	ldrb	r3, [r7, #14]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d103      	bne.n	800d364 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2204      	movs	r2, #4
 800d360:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d362:	e0cd      	b.n	800d500 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d364:	7bbb      	ldrb	r3, [r7, #14]
 800d366:	2b03      	cmp	r3, #3
 800d368:	f040 80ca 	bne.w	800d500 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d372:	3301      	adds	r3, #1
 800d374:	b2da      	uxtb	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d382:	2b03      	cmp	r3, #3
 800d384:	d903      	bls.n	800d38e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	220d      	movs	r2, #13
 800d38a:	701a      	strb	r2, [r3, #0]
      break;
 800d38c:	e0b8      	b.n	800d500 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	795b      	ldrb	r3, [r3, #5]
 800d392:	4619      	mov	r1, r3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f001 f851 	bl	800e43c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	791b      	ldrb	r3, [r3, #4]
 800d39e:	4619      	mov	r1, r3
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f001 f84b 	bl	800e43c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	701a      	strb	r2, [r3, #0]
      break;
 800d3b2:	e0a5      	b.n	800d500 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f969 	bl	800d694 <USBH_Get_CfgDesc>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d3c6:	7bbb      	ldrb	r3, [r7, #14]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d103      	bne.n	800d3d4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2205      	movs	r2, #5
 800d3d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d3d2:	e097      	b.n	800d504 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	f040 8094 	bne.w	800d504 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d3f2:	2b03      	cmp	r3, #3
 800d3f4:	d903      	bls.n	800d3fe <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	220d      	movs	r2, #13
 800d3fa:	701a      	strb	r2, [r3, #0]
      break;
 800d3fc:	e082      	b.n	800d504 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	795b      	ldrb	r3, [r3, #5]
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f001 f819 	bl	800e43c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	791b      	ldrb	r3, [r3, #4]
 800d40e:	4619      	mov	r1, r3
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f001 f813 	bl	800e43c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	701a      	strb	r2, [r3, #0]
      break;
 800d422:	e06f      	b.n	800d504 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d019      	beq.n	800d462 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d43a:	23ff      	movs	r3, #255	@ 0xff
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f953 	bl	800d6e8 <USBH_Get_StringDesc>
 800d442:	4603      	mov	r3, r0
 800d444:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d446:	7bbb      	ldrb	r3, [r7, #14]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d103      	bne.n	800d454 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2206      	movs	r2, #6
 800d450:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d452:	e059      	b.n	800d508 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	2b03      	cmp	r3, #3
 800d458:	d156      	bne.n	800d508 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2206      	movs	r2, #6
 800d45e:	705a      	strb	r2, [r3, #1]
      break;
 800d460:	e052      	b.n	800d508 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2206      	movs	r2, #6
 800d466:	705a      	strb	r2, [r3, #1]
      break;
 800d468:	e04e      	b.n	800d508 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d470:	2b00      	cmp	r3, #0
 800d472:	d019      	beq.n	800d4a8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d480:	23ff      	movs	r3, #255	@ 0xff
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 f930 	bl	800d6e8 <USBH_Get_StringDesc>
 800d488:	4603      	mov	r3, r0
 800d48a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d48c:	7bbb      	ldrb	r3, [r7, #14]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d103      	bne.n	800d49a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2207      	movs	r2, #7
 800d496:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d498:	e038      	b.n	800d50c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d49a:	7bbb      	ldrb	r3, [r7, #14]
 800d49c:	2b03      	cmp	r3, #3
 800d49e:	d135      	bne.n	800d50c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2207      	movs	r2, #7
 800d4a4:	705a      	strb	r2, [r3, #1]
      break;
 800d4a6:	e031      	b.n	800d50c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2207      	movs	r2, #7
 800d4ac:	705a      	strb	r2, [r3, #1]
      break;
 800d4ae:	e02d      	b.n	800d50c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d017      	beq.n	800d4ea <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d4c6:	23ff      	movs	r3, #255	@ 0xff
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 f90d 	bl	800d6e8 <USBH_Get_StringDesc>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d4d2:	7bbb      	ldrb	r3, [r7, #14]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d102      	bne.n	800d4de <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d4dc:	e018      	b.n	800d510 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4de:	7bbb      	ldrb	r3, [r7, #14]
 800d4e0:	2b03      	cmp	r3, #3
 800d4e2:	d115      	bne.n	800d510 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800d4e8:	e012      	b.n	800d510 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d4ee:	e00f      	b.n	800d510 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800d4f0:	bf00      	nop
 800d4f2:	e00e      	b.n	800d512 <USBH_HandleEnum+0x3b6>
      break;
 800d4f4:	bf00      	nop
 800d4f6:	e00c      	b.n	800d512 <USBH_HandleEnum+0x3b6>
      break;
 800d4f8:	bf00      	nop
 800d4fa:	e00a      	b.n	800d512 <USBH_HandleEnum+0x3b6>
      break;
 800d4fc:	bf00      	nop
 800d4fe:	e008      	b.n	800d512 <USBH_HandleEnum+0x3b6>
      break;
 800d500:	bf00      	nop
 800d502:	e006      	b.n	800d512 <USBH_HandleEnum+0x3b6>
      break;
 800d504:	bf00      	nop
 800d506:	e004      	b.n	800d512 <USBH_HandleEnum+0x3b6>
      break;
 800d508:	bf00      	nop
 800d50a:	e002      	b.n	800d512 <USBH_HandleEnum+0x3b6>
      break;
 800d50c:	bf00      	nop
 800d50e:	e000      	b.n	800d512 <USBH_HandleEnum+0x3b6>
      break;
 800d510:	bf00      	nop
  }
  return Status;
 800d512:	7bfb      	ldrb	r3, [r7, #15]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d52e:	bf00      	nop
 800d530:	370c      	adds	r7, #12
 800d532:	46bd      	mov	sp, r7
 800d534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d538:	4770      	bx	lr

0800d53a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b082      	sub	sp, #8
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d548:	1c5a      	adds	r2, r3, #1
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f804 	bl	800d55e <USBH_HandleSof>
}
 800d556:	bf00      	nop
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b082      	sub	sp, #8
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b0b      	cmp	r3, #11
 800d56e:	d10a      	bne.n	800d586 <USBH_HandleSof+0x28>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d576:	2b00      	cmp	r3, #0
 800d578:	d005      	beq.n	800d586 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d580:	699b      	ldr	r3, [r3, #24]
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	4798      	blx	r3
  }
}
 800d586:	bf00      	nop
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d58e:	b480      	push	{r7}
 800d590:	b083      	sub	sp, #12
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2201      	movs	r2, #1
 800d59a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d59e:	bf00      	nop
}
 800d5a0:	370c      	adds	r7, #12
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d5aa:	b480      	push	{r7}
 800d5ac:	b083      	sub	sp, #12
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d5ba:	bf00      	nop
}
 800d5bc:	370c      	adds	r7, #12
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr

0800d5c6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d5c6:	b480      	push	{r7}
 800d5c8:	b083      	sub	sp, #12
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f003 fea0 	bl	801135a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	791b      	ldrb	r3, [r3, #4]
 800d61e:	4619      	mov	r1, r3
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 ff0b 	bl	800e43c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	795b      	ldrb	r3, [r3, #5]
 800d62a:	4619      	mov	r1, r3
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f000 ff05 	bl	800e43c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b086      	sub	sp, #24
 800d640:	af02      	add	r7, sp, #8
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	460b      	mov	r3, r1
 800d646:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d648:	887b      	ldrh	r3, [r7, #2]
 800d64a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d64e:	d901      	bls.n	800d654 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d650:	2303      	movs	r3, #3
 800d652:	e01b      	b.n	800d68c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d65a:	887b      	ldrh	r3, [r7, #2]
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	4613      	mov	r3, r2
 800d660:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d664:	2100      	movs	r1, #0
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f872 	bl	800d750 <USBH_GetDescriptor>
 800d66c:	4603      	mov	r3, r0
 800d66e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d670:	7bfb      	ldrb	r3, [r7, #15]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d109      	bne.n	800d68a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d67c:	887a      	ldrh	r2, [r7, #2]
 800d67e:	4619      	mov	r1, r3
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f929 	bl	800d8d8 <USBH_ParseDevDesc>
 800d686:	4603      	mov	r3, r0
 800d688:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3710      	adds	r7, #16
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af02      	add	r7, sp, #8
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	460b      	mov	r3, r1
 800d69e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	331c      	adds	r3, #28
 800d6a4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d6a6:	887b      	ldrh	r3, [r7, #2]
 800d6a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6ac:	d901      	bls.n	800d6b2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d6ae:	2303      	movs	r3, #3
 800d6b0:	e016      	b.n	800d6e0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d6b2:	887b      	ldrh	r3, [r7, #2]
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d6bc:	2100      	movs	r1, #0
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f846 	bl	800d750 <USBH_GetDescriptor>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d6c8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d107      	bne.n	800d6de <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d6ce:	887b      	ldrh	r3, [r7, #2]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	68b9      	ldr	r1, [r7, #8]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 f9af 	bl	800da38 <USBH_ParseCfgDesc>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af02      	add	r7, sp, #8
 800d6ee:	60f8      	str	r0, [r7, #12]
 800d6f0:	607a      	str	r2, [r7, #4]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	72fb      	strb	r3, [r7, #11]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d6fc:	893b      	ldrh	r3, [r7, #8]
 800d6fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d702:	d802      	bhi.n	800d70a <USBH_Get_StringDesc+0x22>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d101      	bne.n	800d70e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d70a:	2303      	movs	r3, #3
 800d70c:	e01c      	b.n	800d748 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d70e:	7afb      	ldrb	r3, [r7, #11]
 800d710:	b29b      	uxth	r3, r3
 800d712:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d716:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d71e:	893b      	ldrh	r3, [r7, #8]
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	460b      	mov	r3, r1
 800d724:	2100      	movs	r1, #0
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f000 f812 	bl	800d750 <USBH_GetDescriptor>
 800d72c:	4603      	mov	r3, r0
 800d72e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d730:	7dfb      	ldrb	r3, [r7, #23]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d107      	bne.n	800d746 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d73c:	893a      	ldrh	r2, [r7, #8]
 800d73e:	6879      	ldr	r1, [r7, #4]
 800d740:	4618      	mov	r0, r3
 800d742:	f000 fb8d 	bl	800de60 <USBH_ParseStringDesc>
  }

  return status;
 800d746:	7dfb      	ldrb	r3, [r7, #23]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3718      	adds	r7, #24
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	607b      	str	r3, [r7, #4]
 800d75a:	460b      	mov	r3, r1
 800d75c:	72fb      	strb	r3, [r7, #11]
 800d75e:	4613      	mov	r3, r2
 800d760:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	789b      	ldrb	r3, [r3, #2]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d11c      	bne.n	800d7a4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d76a:	7afb      	ldrb	r3, [r7, #11]
 800d76c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d770:	b2da      	uxtb	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2206      	movs	r2, #6
 800d77a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	893a      	ldrh	r2, [r7, #8]
 800d780:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d782:	893b      	ldrh	r3, [r7, #8]
 800d784:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d788:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d78c:	d104      	bne.n	800d798 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f240 4209 	movw	r2, #1033	@ 0x409
 800d794:	829a      	strh	r2, [r3, #20]
 800d796:	e002      	b.n	800d79e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2200      	movs	r2, #0
 800d79c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	8b3a      	ldrh	r2, [r7, #24]
 800d7a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d7a4:	8b3b      	ldrh	r3, [r7, #24]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	6879      	ldr	r1, [r7, #4]
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f000 fba5 	bl	800defa <USBH_CtlReq>
 800d7b0:	4603      	mov	r3, r0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b082      	sub	sp, #8
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	789b      	ldrb	r3, [r3, #2]
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d10f      	bne.n	800d7ee <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2205      	movs	r2, #5
 800d7d8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d7da:	78fb      	ldrb	r3, [r7, #3]
 800d7dc:	b29a      	uxth	r2, r3
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fb81 	bl	800defa <USBH_CtlReq>
 800d7f8:	4603      	mov	r3, r0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	460b      	mov	r3, r1
 800d80c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	789b      	ldrb	r3, [r3, #2]
 800d812:	2b01      	cmp	r3, #1
 800d814:	d10e      	bne.n	800d834 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2209      	movs	r2, #9
 800d820:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	887a      	ldrh	r2, [r7, #2]
 800d826:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d834:	2200      	movs	r2, #0
 800d836:	2100      	movs	r1, #0
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fb5e 	bl	800defa <USBH_CtlReq>
 800d83e:	4603      	mov	r3, r0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	789b      	ldrb	r3, [r3, #2]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d10f      	bne.n	800d87c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2203      	movs	r2, #3
 800d866:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d868:	78fb      	ldrb	r3, [r7, #3]
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d87c:	2200      	movs	r2, #0
 800d87e:	2100      	movs	r1, #0
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 fb3a 	bl	800defa <USBH_CtlReq>
 800d886:	4603      	mov	r3, r0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	460b      	mov	r3, r1
 800d89a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	789b      	ldrb	r3, [r3, #2]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d10f      	bne.n	800d8c4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d8b6:	78fb      	ldrb	r3, [r7, #3]
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 fb16 	bl	800defa <USBH_CtlReq>
 800d8ce:	4603      	mov	r3, r0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b087      	sub	sp, #28
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d8ec:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d101      	bne.n	800d8fc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d8f8:	2302      	movs	r3, #2
 800d8fa:	e094      	b.n	800da26 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	781a      	ldrb	r2, [r3, #0]
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	785a      	ldrb	r2, [r3, #1]
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	3302      	adds	r3, #2
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	461a      	mov	r2, r3
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	3303      	adds	r3, #3
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	021b      	lsls	r3, r3, #8
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	4313      	orrs	r3, r2
 800d920:	b29a      	uxth	r2, r3
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	791a      	ldrb	r2, [r3, #4]
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	795a      	ldrb	r2, [r3, #5]
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	799a      	ldrb	r2, [r3, #6]
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	79da      	ldrb	r2, [r3, #7]
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d004      	beq.n	800d95a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d956:	2b01      	cmp	r3, #1
 800d958:	d11b      	bne.n	800d992 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	79db      	ldrb	r3, [r3, #7]
 800d95e:	2b20      	cmp	r3, #32
 800d960:	dc0f      	bgt.n	800d982 <USBH_ParseDevDesc+0xaa>
 800d962:	2b08      	cmp	r3, #8
 800d964:	db0f      	blt.n	800d986 <USBH_ParseDevDesc+0xae>
 800d966:	3b08      	subs	r3, #8
 800d968:	4a32      	ldr	r2, [pc, #200]	@ (800da34 <USBH_ParseDevDesc+0x15c>)
 800d96a:	fa22 f303 	lsr.w	r3, r2, r3
 800d96e:	f003 0301 	and.w	r3, r3, #1
 800d972:	2b00      	cmp	r3, #0
 800d974:	bf14      	ite	ne
 800d976:	2301      	movne	r3, #1
 800d978:	2300      	moveq	r3, #0
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d106      	bne.n	800d98e <USBH_ParseDevDesc+0xb6>
 800d980:	e001      	b.n	800d986 <USBH_ParseDevDesc+0xae>
 800d982:	2b40      	cmp	r3, #64	@ 0x40
 800d984:	d003      	beq.n	800d98e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	2208      	movs	r2, #8
 800d98a:	71da      	strb	r2, [r3, #7]
        break;
 800d98c:	e000      	b.n	800d990 <USBH_ParseDevDesc+0xb8>
        break;
 800d98e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d990:	e00e      	b.n	800d9b0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d998:	2b02      	cmp	r3, #2
 800d99a:	d107      	bne.n	800d9ac <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	79db      	ldrb	r3, [r3, #7]
 800d9a0:	2b08      	cmp	r3, #8
 800d9a2:	d005      	beq.n	800d9b0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	2208      	movs	r2, #8
 800d9a8:	71da      	strb	r2, [r3, #7]
 800d9aa:	e001      	b.n	800d9b0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d9b0:	88fb      	ldrh	r3, [r7, #6]
 800d9b2:	2b08      	cmp	r3, #8
 800d9b4:	d936      	bls.n	800da24 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	3308      	adds	r3, #8
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	461a      	mov	r2, r3
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	3309      	adds	r3, #9
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	021b      	lsls	r3, r3, #8
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	b29a      	uxth	r2, r3
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	330a      	adds	r3, #10
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	330b      	adds	r3, #11
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	021b      	lsls	r3, r3, #8
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	330c      	adds	r3, #12
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	330d      	adds	r3, #13
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	021b      	lsls	r3, r3, #8
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	7b9a      	ldrb	r2, [r3, #14]
 800da08:	693b      	ldr	r3, [r7, #16]
 800da0a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	7bda      	ldrb	r2, [r3, #15]
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	7c1a      	ldrb	r2, [r3, #16]
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	7c5a      	ldrb	r2, [r3, #17]
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800da24:	7dfb      	ldrb	r3, [r7, #23]
}
 800da26:	4618      	mov	r0, r3
 800da28:	371c      	adds	r7, #28
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	01000101 	.word	0x01000101

0800da38 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b08c      	sub	sp, #48	@ 0x30
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	4613      	mov	r3, r2
 800da44:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800da4c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800da4e:	2300      	movs	r3, #0
 800da50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800da54:	2300      	movs	r3, #0
 800da56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800da5a:	2300      	movs	r3, #0
 800da5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d101      	bne.n	800da6a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800da66:	2302      	movs	r3, #2
 800da68:	e0da      	b.n	800dc20 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800da6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b09      	cmp	r3, #9
 800da74:	d002      	beq.n	800da7c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800da76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da78:	2209      	movs	r2, #9
 800da7a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	781a      	ldrb	r2, [r3, #0]
 800da80:	6a3b      	ldr	r3, [r7, #32]
 800da82:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	785a      	ldrb	r2, [r3, #1]
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	3302      	adds	r3, #2
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	3303      	adds	r3, #3
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	021b      	lsls	r3, r3, #8
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	4313      	orrs	r3, r2
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800daa6:	bf28      	it	cs
 800daa8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800daac:	b29a      	uxth	r2, r3
 800daae:	6a3b      	ldr	r3, [r7, #32]
 800dab0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	791a      	ldrb	r2, [r3, #4]
 800dab6:	6a3b      	ldr	r3, [r7, #32]
 800dab8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	795a      	ldrb	r2, [r3, #5]
 800dabe:	6a3b      	ldr	r3, [r7, #32]
 800dac0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	799a      	ldrb	r2, [r3, #6]
 800dac6:	6a3b      	ldr	r3, [r7, #32]
 800dac8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	79da      	ldrb	r2, [r3, #7]
 800dace:	6a3b      	ldr	r3, [r7, #32]
 800dad0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	7a1a      	ldrb	r2, [r3, #8]
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800dada:	88fb      	ldrh	r3, [r7, #6]
 800dadc:	2b09      	cmp	r3, #9
 800dade:	f240 809d 	bls.w	800dc1c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800dae2:	2309      	movs	r3, #9
 800dae4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800dae6:	2300      	movs	r3, #0
 800dae8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800daea:	e081      	b.n	800dbf0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800daec:	f107 0316 	add.w	r3, r7, #22
 800daf0:	4619      	mov	r1, r3
 800daf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800daf4:	f000 f9e7 	bl	800dec6 <USBH_GetNextDesc>
 800daf8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800dafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dafc:	785b      	ldrb	r3, [r3, #1]
 800dafe:	2b04      	cmp	r3, #4
 800db00:	d176      	bne.n	800dbf0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800db02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	2b09      	cmp	r3, #9
 800db08:	d002      	beq.n	800db10 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800db0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db0c:	2209      	movs	r2, #9
 800db0e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800db10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db14:	221a      	movs	r2, #26
 800db16:	fb02 f303 	mul.w	r3, r2, r3
 800db1a:	3308      	adds	r3, #8
 800db1c:	6a3a      	ldr	r2, [r7, #32]
 800db1e:	4413      	add	r3, r2
 800db20:	3302      	adds	r3, #2
 800db22:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800db24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db26:	69f8      	ldr	r0, [r7, #28]
 800db28:	f000 f87e 	bl	800dc28 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800db2c:	2300      	movs	r3, #0
 800db2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800db32:	2300      	movs	r3, #0
 800db34:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800db36:	e043      	b.n	800dbc0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800db38:	f107 0316 	add.w	r3, r7, #22
 800db3c:	4619      	mov	r1, r3
 800db3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db40:	f000 f9c1 	bl	800dec6 <USBH_GetNextDesc>
 800db44:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800db46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db48:	785b      	ldrb	r3, [r3, #1]
 800db4a:	2b05      	cmp	r3, #5
 800db4c:	d138      	bne.n	800dbc0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	795b      	ldrb	r3, [r3, #5]
 800db52:	2b01      	cmp	r3, #1
 800db54:	d113      	bne.n	800db7e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d003      	beq.n	800db66 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	799b      	ldrb	r3, [r3, #6]
 800db62:	2b03      	cmp	r3, #3
 800db64:	d10b      	bne.n	800db7e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	79db      	ldrb	r3, [r3, #7]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10b      	bne.n	800db86 <USBH_ParseCfgDesc+0x14e>
 800db6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	2b09      	cmp	r3, #9
 800db74:	d007      	beq.n	800db86 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800db76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db78:	2209      	movs	r2, #9
 800db7a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800db7c:	e003      	b.n	800db86 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800db7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db80:	2207      	movs	r2, #7
 800db82:	701a      	strb	r2, [r3, #0]
 800db84:	e000      	b.n	800db88 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800db86:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800db88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db8c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800db90:	3201      	adds	r2, #1
 800db92:	00d2      	lsls	r2, r2, #3
 800db94:	211a      	movs	r1, #26
 800db96:	fb01 f303 	mul.w	r3, r1, r3
 800db9a:	4413      	add	r3, r2
 800db9c:	3308      	adds	r3, #8
 800db9e:	6a3a      	ldr	r2, [r7, #32]
 800dba0:	4413      	add	r3, r2
 800dba2:	3304      	adds	r3, #4
 800dba4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800dba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dba8:	69b9      	ldr	r1, [r7, #24]
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f000 f870 	bl	800dc90 <USBH_ParseEPDesc>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800dbb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dbba:	3301      	adds	r3, #1
 800dbbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	791b      	ldrb	r3, [r3, #4]
 800dbc4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d204      	bcs.n	800dbd6 <USBH_ParseCfgDesc+0x19e>
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	885a      	ldrh	r2, [r3, #2]
 800dbd0:	8afb      	ldrh	r3, [r7, #22]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d8b0      	bhi.n	800db38 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	791b      	ldrb	r3, [r3, #4]
 800dbda:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d201      	bcs.n	800dbe6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800dbe2:	2303      	movs	r3, #3
 800dbe4:	e01c      	b.n	800dc20 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800dbe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbea:	3301      	adds	r3, #1
 800dbec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d805      	bhi.n	800dc04 <USBH_ParseCfgDesc+0x1cc>
 800dbf8:	6a3b      	ldr	r3, [r7, #32]
 800dbfa:	885a      	ldrh	r2, [r3, #2]
 800dbfc:	8afb      	ldrh	r3, [r7, #22]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	f63f af74 	bhi.w	800daec <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800dc04:	6a3b      	ldr	r3, [r7, #32]
 800dc06:	791b      	ldrb	r3, [r3, #4]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	bf28      	it	cs
 800dc0c:	2302      	movcs	r3, #2
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d201      	bcs.n	800dc1c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800dc18:	2303      	movs	r3, #3
 800dc1a:	e001      	b.n	800dc20 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800dc1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3730      	adds	r7, #48	@ 0x30
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	781a      	ldrb	r2, [r3, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	785a      	ldrb	r2, [r3, #1]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	789a      	ldrb	r2, [r3, #2]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	78da      	ldrb	r2, [r3, #3]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	3304      	adds	r3, #4
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	2b02      	cmp	r3, #2
 800dc5a:	bf28      	it	cs
 800dc5c:	2302      	movcs	r3, #2
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	795a      	ldrb	r2, [r3, #5]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	799a      	ldrb	r2, [r3, #6]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	79da      	ldrb	r2, [r3, #7]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	7a1a      	ldrb	r2, [r3, #8]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	721a      	strb	r2, [r3, #8]
}
 800dc84:	bf00      	nop
 800dc86:	370c      	adds	r7, #12
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b087      	sub	sp, #28
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	781a      	ldrb	r2, [r3, #0]
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	785a      	ldrb	r2, [r3, #1]
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	789a      	ldrb	r2, [r3, #2]
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	78da      	ldrb	r2, [r3, #3]
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	3305      	adds	r3, #5
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	021b      	lsls	r3, r3, #8
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	b29a      	uxth	r2, r3
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	799a      	ldrb	r2, [r3, #6]
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	889b      	ldrh	r3, [r3, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d009      	beq.n	800dcfe <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800dcee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcf2:	d804      	bhi.n	800dcfe <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800dcf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcfc:	d901      	bls.n	800dd02 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d136      	bne.n	800dd7a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	78db      	ldrb	r3, [r3, #3]
 800dd10:	f003 0303 	and.w	r3, r3, #3
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	d108      	bne.n	800dd2a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	889b      	ldrh	r3, [r3, #4]
 800dd1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd20:	f240 8097 	bls.w	800de52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dd24:	2303      	movs	r3, #3
 800dd26:	75fb      	strb	r3, [r7, #23]
 800dd28:	e093      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	78db      	ldrb	r3, [r3, #3]
 800dd2e:	f003 0303 	and.w	r3, r3, #3
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d107      	bne.n	800dd46 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	889b      	ldrh	r3, [r3, #4]
 800dd3a:	2b40      	cmp	r3, #64	@ 0x40
 800dd3c:	f240 8089 	bls.w	800de52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dd40:	2303      	movs	r3, #3
 800dd42:	75fb      	strb	r3, [r7, #23]
 800dd44:	e085      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	78db      	ldrb	r3, [r3, #3]
 800dd4a:	f003 0303 	and.w	r3, r3, #3
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d005      	beq.n	800dd5e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	78db      	ldrb	r3, [r3, #3]
 800dd56:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d10a      	bne.n	800dd74 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	799b      	ldrb	r3, [r3, #6]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d003      	beq.n	800dd6e <USBH_ParseEPDesc+0xde>
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	799b      	ldrb	r3, [r3, #6]
 800dd6a:	2b10      	cmp	r3, #16
 800dd6c:	d970      	bls.n	800de50 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800dd6e:	2303      	movs	r3, #3
 800dd70:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800dd72:	e06d      	b.n	800de50 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800dd74:	2303      	movs	r3, #3
 800dd76:	75fb      	strb	r3, [r7, #23]
 800dd78:	e06b      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d13c      	bne.n	800ddfe <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	78db      	ldrb	r3, [r3, #3]
 800dd88:	f003 0303 	and.w	r3, r3, #3
 800dd8c:	2b02      	cmp	r3, #2
 800dd8e:	d005      	beq.n	800dd9c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	78db      	ldrb	r3, [r3, #3]
 800dd94:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d106      	bne.n	800ddaa <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	889b      	ldrh	r3, [r3, #4]
 800dda0:	2b40      	cmp	r3, #64	@ 0x40
 800dda2:	d956      	bls.n	800de52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dda4:	2303      	movs	r3, #3
 800dda6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dda8:	e053      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	78db      	ldrb	r3, [r3, #3]
 800ddae:	f003 0303 	and.w	r3, r3, #3
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d10e      	bne.n	800ddd4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	799b      	ldrb	r3, [r3, #6]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d007      	beq.n	800ddce <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ddc2:	2b10      	cmp	r3, #16
 800ddc4:	d803      	bhi.n	800ddce <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ddca:	2b40      	cmp	r3, #64	@ 0x40
 800ddcc:	d941      	bls.n	800de52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ddce:	2303      	movs	r3, #3
 800ddd0:	75fb      	strb	r3, [r7, #23]
 800ddd2:	e03e      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	78db      	ldrb	r3, [r3, #3]
 800ddd8:	f003 0303 	and.w	r3, r3, #3
 800dddc:	2b03      	cmp	r3, #3
 800ddde:	d10b      	bne.n	800ddf8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	799b      	ldrb	r3, [r3, #6]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d004      	beq.n	800ddf2 <USBH_ParseEPDesc+0x162>
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	889b      	ldrh	r3, [r3, #4]
 800ddec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ddf0:	d32f      	bcc.n	800de52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ddf2:	2303      	movs	r3, #3
 800ddf4:	75fb      	strb	r3, [r7, #23]
 800ddf6:	e02c      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ddf8:	2303      	movs	r3, #3
 800ddfa:	75fb      	strb	r3, [r7, #23]
 800ddfc:	e029      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800de04:	2b02      	cmp	r3, #2
 800de06:	d120      	bne.n	800de4a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	78db      	ldrb	r3, [r3, #3]
 800de0c:	f003 0303 	and.w	r3, r3, #3
 800de10:	2b00      	cmp	r3, #0
 800de12:	d106      	bne.n	800de22 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	889b      	ldrh	r3, [r3, #4]
 800de18:	2b08      	cmp	r3, #8
 800de1a:	d01a      	beq.n	800de52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800de1c:	2303      	movs	r3, #3
 800de1e:	75fb      	strb	r3, [r7, #23]
 800de20:	e017      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	78db      	ldrb	r3, [r3, #3]
 800de26:	f003 0303 	and.w	r3, r3, #3
 800de2a:	2b03      	cmp	r3, #3
 800de2c:	d10a      	bne.n	800de44 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	799b      	ldrb	r3, [r3, #6]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d003      	beq.n	800de3e <USBH_ParseEPDesc+0x1ae>
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	889b      	ldrh	r3, [r3, #4]
 800de3a:	2b08      	cmp	r3, #8
 800de3c:	d909      	bls.n	800de52 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800de3e:	2303      	movs	r3, #3
 800de40:	75fb      	strb	r3, [r7, #23]
 800de42:	e006      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800de44:	2303      	movs	r3, #3
 800de46:	75fb      	strb	r3, [r7, #23]
 800de48:	e003      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800de4a:	2303      	movs	r3, #3
 800de4c:	75fb      	strb	r3, [r7, #23]
 800de4e:	e000      	b.n	800de52 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800de50:	bf00      	nop
  }

  return status;
 800de52:	7dfb      	ldrb	r3, [r7, #23]
}
 800de54:	4618      	mov	r0, r3
 800de56:	371c      	adds	r7, #28
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800de60:	b480      	push	{r7}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	4613      	mov	r3, r2
 800de6c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	3301      	adds	r3, #1
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	2b03      	cmp	r3, #3
 800de76:	d120      	bne.n	800deba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	1e9a      	subs	r2, r3, #2
 800de7e:	88fb      	ldrh	r3, [r7, #6]
 800de80:	4293      	cmp	r3, r2
 800de82:	bf28      	it	cs
 800de84:	4613      	movcs	r3, r2
 800de86:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	3302      	adds	r3, #2
 800de8c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800de8e:	2300      	movs	r3, #0
 800de90:	82fb      	strh	r3, [r7, #22]
 800de92:	e00b      	b.n	800deac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800de94:	8afb      	ldrh	r3, [r7, #22]
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	4413      	add	r3, r2
 800de9a:	781a      	ldrb	r2, [r3, #0]
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	3301      	adds	r3, #1
 800dea4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dea6:	8afb      	ldrh	r3, [r7, #22]
 800dea8:	3302      	adds	r3, #2
 800deaa:	82fb      	strh	r3, [r7, #22]
 800deac:	8afa      	ldrh	r2, [r7, #22]
 800deae:	8abb      	ldrh	r3, [r7, #20]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d3ef      	bcc.n	800de94 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2200      	movs	r2, #0
 800deb8:	701a      	strb	r2, [r3, #0]
  }
}
 800deba:	bf00      	nop
 800debc:	371c      	adds	r7, #28
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr

0800dec6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dec6:	b480      	push	{r7}
 800dec8:	b085      	sub	sp, #20
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
 800dece:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	7812      	ldrb	r2, [r2, #0]
 800ded8:	4413      	add	r3, r2
 800deda:	b29a      	uxth	r2, r3
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4413      	add	r3, r2
 800deea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800deec:	68fb      	ldr	r3, [r7, #12]
}
 800deee:	4618      	mov	r0, r3
 800def0:	3714      	adds	r7, #20
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr

0800defa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b086      	sub	sp, #24
 800defe:	af00      	add	r7, sp, #0
 800df00:	60f8      	str	r0, [r7, #12]
 800df02:	60b9      	str	r1, [r7, #8]
 800df04:	4613      	mov	r3, r2
 800df06:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800df08:	2301      	movs	r3, #1
 800df0a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	789b      	ldrb	r3, [r3, #2]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d002      	beq.n	800df1a <USBH_CtlReq+0x20>
 800df14:	2b02      	cmp	r3, #2
 800df16:	d00f      	beq.n	800df38 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800df18:	e027      	b.n	800df6a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	68ba      	ldr	r2, [r7, #8]
 800df1e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	88fa      	ldrh	r2, [r7, #6]
 800df24:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2201      	movs	r2, #1
 800df2a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2202      	movs	r2, #2
 800df30:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800df32:	2301      	movs	r3, #1
 800df34:	75fb      	strb	r3, [r7, #23]
      break;
 800df36:	e018      	b.n	800df6a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f000 f81b 	bl	800df74 <USBH_HandleControl>
 800df3e:	4603      	mov	r3, r0
 800df40:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800df42:	7dfb      	ldrb	r3, [r7, #23]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d002      	beq.n	800df4e <USBH_CtlReq+0x54>
 800df48:	7dfb      	ldrb	r3, [r7, #23]
 800df4a:	2b03      	cmp	r3, #3
 800df4c:	d106      	bne.n	800df5c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2201      	movs	r2, #1
 800df52:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2200      	movs	r2, #0
 800df58:	761a      	strb	r2, [r3, #24]
      break;
 800df5a:	e005      	b.n	800df68 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800df5c:	7dfb      	ldrb	r3, [r7, #23]
 800df5e:	2b02      	cmp	r3, #2
 800df60:	d102      	bne.n	800df68 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2201      	movs	r2, #1
 800df66:	709a      	strb	r2, [r3, #2]
      break;
 800df68:	bf00      	nop
  }
  return status;
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3718      	adds	r7, #24
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af02      	add	r7, sp, #8
 800df7a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800df7c:	2301      	movs	r3, #1
 800df7e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800df80:	2300      	movs	r3, #0
 800df82:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	7e1b      	ldrb	r3, [r3, #24]
 800df88:	3b01      	subs	r3, #1
 800df8a:	2b0a      	cmp	r3, #10
 800df8c:	f200 8156 	bhi.w	800e23c <USBH_HandleControl+0x2c8>
 800df90:	a201      	add	r2, pc, #4	@ (adr r2, 800df98 <USBH_HandleControl+0x24>)
 800df92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df96:	bf00      	nop
 800df98:	0800dfc5 	.word	0x0800dfc5
 800df9c:	0800dfdf 	.word	0x0800dfdf
 800dfa0:	0800e049 	.word	0x0800e049
 800dfa4:	0800e06f 	.word	0x0800e06f
 800dfa8:	0800e0a7 	.word	0x0800e0a7
 800dfac:	0800e0d1 	.word	0x0800e0d1
 800dfb0:	0800e123 	.word	0x0800e123
 800dfb4:	0800e145 	.word	0x0800e145
 800dfb8:	0800e181 	.word	0x0800e181
 800dfbc:	0800e1a7 	.word	0x0800e1a7
 800dfc0:	0800e1e5 	.word	0x0800e1e5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f103 0110 	add.w	r1, r3, #16
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	795b      	ldrb	r3, [r3, #5]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f943 	bl	800e25c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2202      	movs	r2, #2
 800dfda:	761a      	strb	r2, [r3, #24]
      break;
 800dfdc:	e139      	b.n	800e252 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	795b      	ldrb	r3, [r3, #5]
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f003 faa7 	bl	8011538 <USBH_LL_GetURBState>
 800dfea:	4603      	mov	r3, r0
 800dfec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800dfee:	7bbb      	ldrb	r3, [r7, #14]
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d11e      	bne.n	800e032 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	7c1b      	ldrb	r3, [r3, #16]
 800dff8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dffc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	8adb      	ldrh	r3, [r3, #22]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00a      	beq.n	800e01c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e006:	7b7b      	ldrb	r3, [r7, #13]
 800e008:	2b80      	cmp	r3, #128	@ 0x80
 800e00a:	d103      	bne.n	800e014 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2203      	movs	r2, #3
 800e010:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e012:	e115      	b.n	800e240 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2205      	movs	r2, #5
 800e018:	761a      	strb	r2, [r3, #24]
      break;
 800e01a:	e111      	b.n	800e240 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e01c:	7b7b      	ldrb	r3, [r7, #13]
 800e01e:	2b80      	cmp	r3, #128	@ 0x80
 800e020:	d103      	bne.n	800e02a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2209      	movs	r2, #9
 800e026:	761a      	strb	r2, [r3, #24]
      break;
 800e028:	e10a      	b.n	800e240 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2207      	movs	r2, #7
 800e02e:	761a      	strb	r2, [r3, #24]
      break;
 800e030:	e106      	b.n	800e240 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e032:	7bbb      	ldrb	r3, [r7, #14]
 800e034:	2b04      	cmp	r3, #4
 800e036:	d003      	beq.n	800e040 <USBH_HandleControl+0xcc>
 800e038:	7bbb      	ldrb	r3, [r7, #14]
 800e03a:	2b02      	cmp	r3, #2
 800e03c:	f040 8100 	bne.w	800e240 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	220b      	movs	r2, #11
 800e044:	761a      	strb	r2, [r3, #24]
      break;
 800e046:	e0fb      	b.n	800e240 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e04e:	b29a      	uxth	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6899      	ldr	r1, [r3, #8]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	899a      	ldrh	r2, [r3, #12]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	791b      	ldrb	r3, [r3, #4]
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 f93a 	bl	800e2da <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2204      	movs	r2, #4
 800e06a:	761a      	strb	r2, [r3, #24]
      break;
 800e06c:	e0f1      	b.n	800e252 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	791b      	ldrb	r3, [r3, #4]
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f003 fa5f 	bl	8011538 <USBH_LL_GetURBState>
 800e07a:	4603      	mov	r3, r0
 800e07c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e07e:	7bbb      	ldrb	r3, [r7, #14]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d102      	bne.n	800e08a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2209      	movs	r2, #9
 800e088:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e08a:	7bbb      	ldrb	r3, [r7, #14]
 800e08c:	2b05      	cmp	r3, #5
 800e08e:	d102      	bne.n	800e096 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e090:	2303      	movs	r3, #3
 800e092:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e094:	e0d6      	b.n	800e244 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e096:	7bbb      	ldrb	r3, [r7, #14]
 800e098:	2b04      	cmp	r3, #4
 800e09a:	f040 80d3 	bne.w	800e244 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	220b      	movs	r2, #11
 800e0a2:	761a      	strb	r2, [r3, #24]
      break;
 800e0a4:	e0ce      	b.n	800e244 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6899      	ldr	r1, [r3, #8]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	899a      	ldrh	r2, [r3, #12]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	795b      	ldrb	r3, [r3, #5]
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	9000      	str	r0, [sp, #0]
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f8ea 	bl	800e290 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2206      	movs	r2, #6
 800e0cc:	761a      	strb	r2, [r3, #24]
      break;
 800e0ce:	e0c0      	b.n	800e252 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	795b      	ldrb	r3, [r3, #5]
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f003 fa2e 	bl	8011538 <USBH_LL_GetURBState>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e0e0:	7bbb      	ldrb	r3, [r7, #14]
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d103      	bne.n	800e0ee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2207      	movs	r2, #7
 800e0ea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e0ec:	e0ac      	b.n	800e248 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e0ee:	7bbb      	ldrb	r3, [r7, #14]
 800e0f0:	2b05      	cmp	r3, #5
 800e0f2:	d105      	bne.n	800e100 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	220c      	movs	r2, #12
 800e0f8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e0fa:	2303      	movs	r3, #3
 800e0fc:	73fb      	strb	r3, [r7, #15]
      break;
 800e0fe:	e0a3      	b.n	800e248 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e100:	7bbb      	ldrb	r3, [r7, #14]
 800e102:	2b02      	cmp	r3, #2
 800e104:	d103      	bne.n	800e10e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2205      	movs	r2, #5
 800e10a:	761a      	strb	r2, [r3, #24]
      break;
 800e10c:	e09c      	b.n	800e248 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e10e:	7bbb      	ldrb	r3, [r7, #14]
 800e110:	2b04      	cmp	r3, #4
 800e112:	f040 8099 	bne.w	800e248 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	220b      	movs	r2, #11
 800e11a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e11c:	2302      	movs	r3, #2
 800e11e:	73fb      	strb	r3, [r7, #15]
      break;
 800e120:	e092      	b.n	800e248 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	791b      	ldrb	r3, [r3, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	2100      	movs	r1, #0
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f8d5 	bl	800e2da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e136:	b29a      	uxth	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2208      	movs	r2, #8
 800e140:	761a      	strb	r2, [r3, #24]

      break;
 800e142:	e086      	b.n	800e252 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	791b      	ldrb	r3, [r3, #4]
 800e148:	4619      	mov	r1, r3
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f003 f9f4 	bl	8011538 <USBH_LL_GetURBState>
 800e150:	4603      	mov	r3, r0
 800e152:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e154:	7bbb      	ldrb	r3, [r7, #14]
 800e156:	2b01      	cmp	r3, #1
 800e158:	d105      	bne.n	800e166 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	220d      	movs	r2, #13
 800e15e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e160:	2300      	movs	r3, #0
 800e162:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e164:	e072      	b.n	800e24c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e166:	7bbb      	ldrb	r3, [r7, #14]
 800e168:	2b04      	cmp	r3, #4
 800e16a:	d103      	bne.n	800e174 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	220b      	movs	r2, #11
 800e170:	761a      	strb	r2, [r3, #24]
      break;
 800e172:	e06b      	b.n	800e24c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e174:	7bbb      	ldrb	r3, [r7, #14]
 800e176:	2b05      	cmp	r3, #5
 800e178:	d168      	bne.n	800e24c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e17a:	2303      	movs	r3, #3
 800e17c:	73fb      	strb	r3, [r7, #15]
      break;
 800e17e:	e065      	b.n	800e24c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	795b      	ldrb	r3, [r3, #5]
 800e184:	2201      	movs	r2, #1
 800e186:	9200      	str	r2, [sp, #0]
 800e188:	2200      	movs	r2, #0
 800e18a:	2100      	movs	r1, #0
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 f87f 	bl	800e290 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e198:	b29a      	uxth	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	220a      	movs	r2, #10
 800e1a2:	761a      	strb	r2, [r3, #24]
      break;
 800e1a4:	e055      	b.n	800e252 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	795b      	ldrb	r3, [r3, #5]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f003 f9c3 	bl	8011538 <USBH_LL_GetURBState>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e1b6:	7bbb      	ldrb	r3, [r7, #14]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d105      	bne.n	800e1c8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	220d      	movs	r2, #13
 800e1c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e1c6:	e043      	b.n	800e250 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e1c8:	7bbb      	ldrb	r3, [r7, #14]
 800e1ca:	2b02      	cmp	r3, #2
 800e1cc:	d103      	bne.n	800e1d6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2209      	movs	r2, #9
 800e1d2:	761a      	strb	r2, [r3, #24]
      break;
 800e1d4:	e03c      	b.n	800e250 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e1d6:	7bbb      	ldrb	r3, [r7, #14]
 800e1d8:	2b04      	cmp	r3, #4
 800e1da:	d139      	bne.n	800e250 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	220b      	movs	r2, #11
 800e1e0:	761a      	strb	r2, [r3, #24]
      break;
 800e1e2:	e035      	b.n	800e250 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	7e5b      	ldrb	r3, [r3, #25]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	b2da      	uxtb	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	765a      	strb	r2, [r3, #25]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	7e5b      	ldrb	r3, [r3, #25]
 800e1f4:	2b02      	cmp	r3, #2
 800e1f6:	d806      	bhi.n	800e206 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e204:	e025      	b.n	800e252 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e20c:	2106      	movs	r1, #6
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2200      	movs	r2, #0
 800e216:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	795b      	ldrb	r3, [r3, #5]
 800e21c:	4619      	mov	r1, r3
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 f90c 	bl	800e43c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	791b      	ldrb	r3, [r3, #4]
 800e228:	4619      	mov	r1, r3
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 f906 	bl	800e43c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e236:	2302      	movs	r3, #2
 800e238:	73fb      	strb	r3, [r7, #15]
      break;
 800e23a:	e00a      	b.n	800e252 <USBH_HandleControl+0x2de>

    default:
      break;
 800e23c:	bf00      	nop
 800e23e:	e008      	b.n	800e252 <USBH_HandleControl+0x2de>
      break;
 800e240:	bf00      	nop
 800e242:	e006      	b.n	800e252 <USBH_HandleControl+0x2de>
      break;
 800e244:	bf00      	nop
 800e246:	e004      	b.n	800e252 <USBH_HandleControl+0x2de>
      break;
 800e248:	bf00      	nop
 800e24a:	e002      	b.n	800e252 <USBH_HandleControl+0x2de>
      break;
 800e24c:	bf00      	nop
 800e24e:	e000      	b.n	800e252 <USBH_HandleControl+0x2de>
      break;
 800e250:	bf00      	nop
  }

  return status;
 800e252:	7bfb      	ldrb	r3, [r7, #15]
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b088      	sub	sp, #32
 800e260:	af04      	add	r7, sp, #16
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	4613      	mov	r3, r2
 800e268:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e26a:	79f9      	ldrb	r1, [r7, #7]
 800e26c:	2300      	movs	r3, #0
 800e26e:	9303      	str	r3, [sp, #12]
 800e270:	2308      	movs	r3, #8
 800e272:	9302      	str	r3, [sp, #8]
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	9301      	str	r3, [sp, #4]
 800e278:	2300      	movs	r3, #0
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	2300      	movs	r3, #0
 800e27e:	2200      	movs	r2, #0
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f003 f928 	bl	80114d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b088      	sub	sp, #32
 800e294:	af04      	add	r7, sp, #16
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	4611      	mov	r1, r2
 800e29c:	461a      	mov	r2, r3
 800e29e:	460b      	mov	r3, r1
 800e2a0:	80fb      	strh	r3, [r7, #6]
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d001      	beq.n	800e2b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e2b4:	7979      	ldrb	r1, [r7, #5]
 800e2b6:	7e3b      	ldrb	r3, [r7, #24]
 800e2b8:	9303      	str	r3, [sp, #12]
 800e2ba:	88fb      	ldrh	r3, [r7, #6]
 800e2bc:	9302      	str	r3, [sp, #8]
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	9301      	str	r3, [sp, #4]
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f003 f903 	bl	80114d6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e2d0:	2300      	movs	r3, #0
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3710      	adds	r7, #16
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}

0800e2da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e2da:	b580      	push	{r7, lr}
 800e2dc:	b088      	sub	sp, #32
 800e2de:	af04      	add	r7, sp, #16
 800e2e0:	60f8      	str	r0, [r7, #12]
 800e2e2:	60b9      	str	r1, [r7, #8]
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	80fb      	strh	r3, [r7, #6]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e2f0:	7979      	ldrb	r1, [r7, #5]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	9303      	str	r3, [sp, #12]
 800e2f6:	88fb      	ldrh	r3, [r7, #6]
 800e2f8:	9302      	str	r3, [sp, #8]
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	9301      	str	r3, [sp, #4]
 800e2fe:	2301      	movs	r3, #1
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	2300      	movs	r3, #0
 800e304:	2201      	movs	r2, #1
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f003 f8e5 	bl	80114d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e30c:	2300      	movs	r3, #0

}
 800e30e:	4618      	mov	r0, r3
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b088      	sub	sp, #32
 800e31a:	af04      	add	r7, sp, #16
 800e31c:	60f8      	str	r0, [r7, #12]
 800e31e:	60b9      	str	r1, [r7, #8]
 800e320:	4611      	mov	r1, r2
 800e322:	461a      	mov	r2, r3
 800e324:	460b      	mov	r3, r1
 800e326:	80fb      	strh	r3, [r7, #6]
 800e328:	4613      	mov	r3, r2
 800e32a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e332:	2b00      	cmp	r3, #0
 800e334:	d001      	beq.n	800e33a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e336:	2300      	movs	r3, #0
 800e338:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e33a:	7979      	ldrb	r1, [r7, #5]
 800e33c:	7e3b      	ldrb	r3, [r7, #24]
 800e33e:	9303      	str	r3, [sp, #12]
 800e340:	88fb      	ldrh	r3, [r7, #6]
 800e342:	9302      	str	r3, [sp, #8]
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	9301      	str	r3, [sp, #4]
 800e348:	2301      	movs	r3, #1
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	2302      	movs	r3, #2
 800e34e:	2200      	movs	r2, #0
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f003 f8c0 	bl	80114d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b088      	sub	sp, #32
 800e364:	af04      	add	r7, sp, #16
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	4611      	mov	r1, r2
 800e36c:	461a      	mov	r2, r3
 800e36e:	460b      	mov	r3, r1
 800e370:	80fb      	strh	r3, [r7, #6]
 800e372:	4613      	mov	r3, r2
 800e374:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e376:	7979      	ldrb	r1, [r7, #5]
 800e378:	2300      	movs	r3, #0
 800e37a:	9303      	str	r3, [sp, #12]
 800e37c:	88fb      	ldrh	r3, [r7, #6]
 800e37e:	9302      	str	r3, [sp, #8]
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	9301      	str	r3, [sp, #4]
 800e384:	2301      	movs	r3, #1
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	2302      	movs	r3, #2
 800e38a:	2201      	movs	r2, #1
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f003 f8a2 	bl	80114d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af04      	add	r7, sp, #16
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	4608      	mov	r0, r1
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	70fb      	strb	r3, [r7, #3]
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	70bb      	strb	r3, [r7, #2]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e3b6:	7878      	ldrb	r0, [r7, #1]
 800e3b8:	78ba      	ldrb	r2, [r7, #2]
 800e3ba:	78f9      	ldrb	r1, [r7, #3]
 800e3bc:	8b3b      	ldrh	r3, [r7, #24]
 800e3be:	9302      	str	r3, [sp, #8]
 800e3c0:	7d3b      	ldrb	r3, [r7, #20]
 800e3c2:	9301      	str	r3, [sp, #4]
 800e3c4:	7c3b      	ldrb	r3, [r7, #16]
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f003 f835 	bl	801143a <USBH_LL_OpenPipe>

  return USBH_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3708      	adds	r7, #8
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b082      	sub	sp, #8
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e3e6:	78fb      	ldrb	r3, [r7, #3]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f003 f854 	bl	8011498 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e3f0:	2300      	movs	r3, #0
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b084      	sub	sp, #16
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	460b      	mov	r3, r1
 800e404:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f836 	bl	800e478 <USBH_GetFreePipe>
 800e40c:	4603      	mov	r3, r0
 800e40e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e410:	89fb      	ldrh	r3, [r7, #14]
 800e412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e416:	4293      	cmp	r3, r2
 800e418:	d00a      	beq.n	800e430 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e41a:	78fa      	ldrb	r2, [r7, #3]
 800e41c:	89fb      	ldrh	r3, [r7, #14]
 800e41e:	f003 030f 	and.w	r3, r3, #15
 800e422:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e426:	6879      	ldr	r1, [r7, #4]
 800e428:	33e0      	adds	r3, #224	@ 0xe0
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	440b      	add	r3, r1
 800e42e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e430:	89fb      	ldrh	r3, [r7, #14]
 800e432:	b2db      	uxtb	r3, r3
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	460b      	mov	r3, r1
 800e446:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e448:	78fb      	ldrb	r3, [r7, #3]
 800e44a:	2b0f      	cmp	r3, #15
 800e44c:	d80d      	bhi.n	800e46a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e44e:	78fb      	ldrb	r3, [r7, #3]
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	33e0      	adds	r3, #224	@ 0xe0
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	685a      	ldr	r2, [r3, #4]
 800e45a:	78fb      	ldrb	r3, [r7, #3]
 800e45c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e460:	6879      	ldr	r1, [r7, #4]
 800e462:	33e0      	adds	r3, #224	@ 0xe0
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	440b      	add	r3, r1
 800e468:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e480:	2300      	movs	r3, #0
 800e482:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e484:	2300      	movs	r3, #0
 800e486:	73fb      	strb	r3, [r7, #15]
 800e488:	e00f      	b.n	800e4aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	33e0      	adds	r3, #224	@ 0xe0
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	4413      	add	r3, r2
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d102      	bne.n	800e4a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e49e:	7bfb      	ldrb	r3, [r7, #15]
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	e007      	b.n	800e4b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e4a4:	7bfb      	ldrb	r3, [r7, #15]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	73fb      	strb	r3, [r7, #15]
 800e4aa:	7bfb      	ldrb	r3, [r7, #15]
 800e4ac:	2b0f      	cmp	r3, #15
 800e4ae:	d9ec      	bls.n	800e48a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e4b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3714      	adds	r7, #20
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e4ca:	79fb      	ldrb	r3, [r7, #7]
 800e4cc:	4a08      	ldr	r2, [pc, #32]	@ (800e4f0 <disk_status+0x30>)
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4413      	add	r3, r2
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	79fa      	ldrb	r2, [r7, #7]
 800e4d8:	4905      	ldr	r1, [pc, #20]	@ (800e4f0 <disk_status+0x30>)
 800e4da:	440a      	add	r2, r1
 800e4dc:	7a12      	ldrb	r2, [r2, #8]
 800e4de:	4610      	mov	r0, r2
 800e4e0:	4798      	blx	r3
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	20000c84 	.word	0x20000c84

0800e4f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e4fe:	2300      	movs	r3, #0
 800e500:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e502:	79fb      	ldrb	r3, [r7, #7]
 800e504:	4a0e      	ldr	r2, [pc, #56]	@ (800e540 <disk_initialize+0x4c>)
 800e506:	5cd3      	ldrb	r3, [r2, r3]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d114      	bne.n	800e536 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e50c:	79fb      	ldrb	r3, [r7, #7]
 800e50e:	4a0c      	ldr	r2, [pc, #48]	@ (800e540 <disk_initialize+0x4c>)
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4413      	add	r3, r2
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	79fa      	ldrb	r2, [r7, #7]
 800e51a:	4909      	ldr	r1, [pc, #36]	@ (800e540 <disk_initialize+0x4c>)
 800e51c:	440a      	add	r2, r1
 800e51e:	7a12      	ldrb	r2, [r2, #8]
 800e520:	4610      	mov	r0, r2
 800e522:	4798      	blx	r3
 800e524:	4603      	mov	r3, r0
 800e526:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e528:	7bfb      	ldrb	r3, [r7, #15]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d103      	bne.n	800e536 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e52e:	79fb      	ldrb	r3, [r7, #7]
 800e530:	4a03      	ldr	r2, [pc, #12]	@ (800e540 <disk_initialize+0x4c>)
 800e532:	2101      	movs	r1, #1
 800e534:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e536:	7bfb      	ldrb	r3, [r7, #15]
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3710      	adds	r7, #16
 800e53c:	46bd      	mov	sp, r7
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	20000c84 	.word	0x20000c84

0800e544 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e544:	b590      	push	{r4, r7, lr}
 800e546:	b087      	sub	sp, #28
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60b9      	str	r1, [r7, #8]
 800e54c:	607a      	str	r2, [r7, #4]
 800e54e:	603b      	str	r3, [r7, #0]
 800e550:	4603      	mov	r3, r0
 800e552:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e554:	7bfb      	ldrb	r3, [r7, #15]
 800e556:	4a0a      	ldr	r2, [pc, #40]	@ (800e580 <disk_read+0x3c>)
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	685b      	ldr	r3, [r3, #4]
 800e55e:	689c      	ldr	r4, [r3, #8]
 800e560:	7bfb      	ldrb	r3, [r7, #15]
 800e562:	4a07      	ldr	r2, [pc, #28]	@ (800e580 <disk_read+0x3c>)
 800e564:	4413      	add	r3, r2
 800e566:	7a18      	ldrb	r0, [r3, #8]
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	68b9      	ldr	r1, [r7, #8]
 800e56e:	47a0      	blx	r4
 800e570:	4603      	mov	r3, r0
 800e572:	75fb      	strb	r3, [r7, #23]
  return res;
 800e574:	7dfb      	ldrb	r3, [r7, #23]
}
 800e576:	4618      	mov	r0, r3
 800e578:	371c      	adds	r7, #28
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd90      	pop	{r4, r7, pc}
 800e57e:	bf00      	nop
 800e580:	20000c84 	.word	0x20000c84

0800e584 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e584:	b590      	push	{r4, r7, lr}
 800e586:	b087      	sub	sp, #28
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60b9      	str	r1, [r7, #8]
 800e58c:	607a      	str	r2, [r7, #4]
 800e58e:	603b      	str	r3, [r7, #0]
 800e590:	4603      	mov	r3, r0
 800e592:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e594:	7bfb      	ldrb	r3, [r7, #15]
 800e596:	4a0a      	ldr	r2, [pc, #40]	@ (800e5c0 <disk_write+0x3c>)
 800e598:	009b      	lsls	r3, r3, #2
 800e59a:	4413      	add	r3, r2
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	68dc      	ldr	r4, [r3, #12]
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
 800e5a2:	4a07      	ldr	r2, [pc, #28]	@ (800e5c0 <disk_write+0x3c>)
 800e5a4:	4413      	add	r3, r2
 800e5a6:	7a18      	ldrb	r0, [r3, #8]
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	68b9      	ldr	r1, [r7, #8]
 800e5ae:	47a0      	blx	r4
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	371c      	adds	r7, #28
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd90      	pop	{r4, r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	20000c84 	.word	0x20000c84

0800e5c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	603a      	str	r2, [r7, #0]
 800e5ce:	71fb      	strb	r3, [r7, #7]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e5d4:	79fb      	ldrb	r3, [r7, #7]
 800e5d6:	4a09      	ldr	r2, [pc, #36]	@ (800e5fc <disk_ioctl+0x38>)
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	4413      	add	r3, r2
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	691b      	ldr	r3, [r3, #16]
 800e5e0:	79fa      	ldrb	r2, [r7, #7]
 800e5e2:	4906      	ldr	r1, [pc, #24]	@ (800e5fc <disk_ioctl+0x38>)
 800e5e4:	440a      	add	r2, r1
 800e5e6:	7a10      	ldrb	r0, [r2, #8]
 800e5e8:	79b9      	ldrb	r1, [r7, #6]
 800e5ea:	683a      	ldr	r2, [r7, #0]
 800e5ec:	4798      	blx	r3
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	73fb      	strb	r3, [r7, #15]
  return res;
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3710      	adds	r7, #16
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	20000c84 	.word	0x20000c84

0800e600 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	3301      	adds	r3, #1
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e610:	89fb      	ldrh	r3, [r7, #14]
 800e612:	021b      	lsls	r3, r3, #8
 800e614:	b21a      	sxth	r2, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	b21b      	sxth	r3, r3
 800e61c:	4313      	orrs	r3, r2
 800e61e:	b21b      	sxth	r3, r3
 800e620:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e622:	89fb      	ldrh	r3, [r7, #14]
}
 800e624:	4618      	mov	r0, r3
 800e626:	3714      	adds	r7, #20
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	3303      	adds	r3, #3
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	021b      	lsls	r3, r3, #8
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	3202      	adds	r2, #2
 800e648:	7812      	ldrb	r2, [r2, #0]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	021b      	lsls	r3, r3, #8
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	3201      	adds	r2, #1
 800e656:	7812      	ldrb	r2, [r2, #0]
 800e658:	4313      	orrs	r3, r2
 800e65a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	021b      	lsls	r3, r3, #8
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	7812      	ldrb	r2, [r2, #0]
 800e664:	4313      	orrs	r3, r2
 800e666:	60fb      	str	r3, [r7, #12]
	return rv;
 800e668:	68fb      	ldr	r3, [r7, #12]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3714      	adds	r7, #20
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr

0800e676 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e676:	b480      	push	{r7}
 800e678:	b083      	sub	sp, #12
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
 800e67e:	460b      	mov	r3, r1
 800e680:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	1c5a      	adds	r2, r3, #1
 800e686:	607a      	str	r2, [r7, #4]
 800e688:	887a      	ldrh	r2, [r7, #2]
 800e68a:	b2d2      	uxtb	r2, r2
 800e68c:	701a      	strb	r2, [r3, #0]
 800e68e:	887b      	ldrh	r3, [r7, #2]
 800e690:	0a1b      	lsrs	r3, r3, #8
 800e692:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	1c5a      	adds	r2, r3, #1
 800e698:	607a      	str	r2, [r7, #4]
 800e69a:	887a      	ldrh	r2, [r7, #2]
 800e69c:	b2d2      	uxtb	r2, r2
 800e69e:	701a      	strb	r2, [r3, #0]
}
 800e6a0:	bf00      	nop
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	1c5a      	adds	r2, r3, #1
 800e6ba:	607a      	str	r2, [r7, #4]
 800e6bc:	683a      	ldr	r2, [r7, #0]
 800e6be:	b2d2      	uxtb	r2, r2
 800e6c0:	701a      	strb	r2, [r3, #0]
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	0a1b      	lsrs	r3, r3, #8
 800e6c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	1c5a      	adds	r2, r3, #1
 800e6cc:	607a      	str	r2, [r7, #4]
 800e6ce:	683a      	ldr	r2, [r7, #0]
 800e6d0:	b2d2      	uxtb	r2, r2
 800e6d2:	701a      	strb	r2, [r3, #0]
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	0a1b      	lsrs	r3, r3, #8
 800e6d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	b2d2      	uxtb	r2, r2
 800e6e4:	701a      	strb	r2, [r3, #0]
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	0a1b      	lsrs	r3, r3, #8
 800e6ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	1c5a      	adds	r2, r3, #1
 800e6f0:	607a      	str	r2, [r7, #4]
 800e6f2:	683a      	ldr	r2, [r7, #0]
 800e6f4:	b2d2      	uxtb	r2, r2
 800e6f6:	701a      	strb	r2, [r3, #0]
}
 800e6f8:	bf00      	nop
 800e6fa:	370c      	adds	r7, #12
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e702:	4770      	bx	lr

0800e704 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e704:	b480      	push	{r7}
 800e706:	b087      	sub	sp, #28
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00d      	beq.n	800e73a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e71e:	693a      	ldr	r2, [r7, #16]
 800e720:	1c53      	adds	r3, r2, #1
 800e722:	613b      	str	r3, [r7, #16]
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	1c59      	adds	r1, r3, #1
 800e728:	6179      	str	r1, [r7, #20]
 800e72a:	7812      	ldrb	r2, [r2, #0]
 800e72c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	3b01      	subs	r3, #1
 800e732:	607b      	str	r3, [r7, #4]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d1f1      	bne.n	800e71e <mem_cpy+0x1a>
	}
}
 800e73a:	bf00      	nop
 800e73c:	371c      	adds	r7, #28
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr

0800e746 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e746:	b480      	push	{r7}
 800e748:	b087      	sub	sp, #28
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	60f8      	str	r0, [r7, #12]
 800e74e:	60b9      	str	r1, [r7, #8]
 800e750:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	1c5a      	adds	r2, r3, #1
 800e75a:	617a      	str	r2, [r7, #20]
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	b2d2      	uxtb	r2, r2
 800e760:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	3b01      	subs	r3, #1
 800e766:	607b      	str	r3, [r7, #4]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1f3      	bne.n	800e756 <mem_set+0x10>
}
 800e76e:	bf00      	nop
 800e770:	bf00      	nop
 800e772:	371c      	adds	r7, #28
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e77c:	b480      	push	{r7}
 800e77e:	b089      	sub	sp, #36	@ 0x24
 800e780:	af00      	add	r7, sp, #0
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	61fb      	str	r3, [r7, #28]
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e790:	2300      	movs	r3, #0
 800e792:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e794:	69fb      	ldr	r3, [r7, #28]
 800e796:	1c5a      	adds	r2, r3, #1
 800e798:	61fa      	str	r2, [r7, #28]
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	4619      	mov	r1, r3
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	1c5a      	adds	r2, r3, #1
 800e7a2:	61ba      	str	r2, [r7, #24]
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	1acb      	subs	r3, r1, r3
 800e7a8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	3b01      	subs	r3, #1
 800e7ae:	607b      	str	r3, [r7, #4]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d002      	beq.n	800e7bc <mem_cmp+0x40>
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d0eb      	beq.n	800e794 <mem_cmp+0x18>

	return r;
 800e7bc:	697b      	ldr	r3, [r7, #20]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3724      	adds	r7, #36	@ 0x24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e7ca:	b480      	push	{r7}
 800e7cc:	b083      	sub	sp, #12
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e7d4:	e002      	b.n	800e7dc <chk_chr+0x12>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	3301      	adds	r3, #1
 800e7da:	607b      	str	r3, [r7, #4]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d005      	beq.n	800e7f0 <chk_chr+0x26>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d1f2      	bne.n	800e7d6 <chk_chr+0xc>
	return *str;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	781b      	ldrb	r3, [r3, #0]
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e800:	b480      	push	{r7}
 800e802:	b085      	sub	sp, #20
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e80a:	2300      	movs	r3, #0
 800e80c:	60bb      	str	r3, [r7, #8]
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	60fb      	str	r3, [r7, #12]
 800e812:	e029      	b.n	800e868 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e814:	4a27      	ldr	r2, [pc, #156]	@ (800e8b4 <chk_lock+0xb4>)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	011b      	lsls	r3, r3, #4
 800e81a:	4413      	add	r3, r2
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d01d      	beq.n	800e85e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e822:	4a24      	ldr	r2, [pc, #144]	@ (800e8b4 <chk_lock+0xb4>)
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	011b      	lsls	r3, r3, #4
 800e828:	4413      	add	r3, r2
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d116      	bne.n	800e862 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e834:	4a1f      	ldr	r2, [pc, #124]	@ (800e8b4 <chk_lock+0xb4>)
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	011b      	lsls	r3, r3, #4
 800e83a:	4413      	add	r3, r2
 800e83c:	3304      	adds	r3, #4
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e844:	429a      	cmp	r2, r3
 800e846:	d10c      	bne.n	800e862 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e848:	4a1a      	ldr	r2, [pc, #104]	@ (800e8b4 <chk_lock+0xb4>)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	011b      	lsls	r3, r3, #4
 800e84e:	4413      	add	r3, r2
 800e850:	3308      	adds	r3, #8
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e858:	429a      	cmp	r2, r3
 800e85a:	d102      	bne.n	800e862 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e85c:	e007      	b.n	800e86e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e85e:	2301      	movs	r3, #1
 800e860:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3301      	adds	r3, #1
 800e866:	60fb      	str	r3, [r7, #12]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d9d2      	bls.n	800e814 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2b02      	cmp	r3, #2
 800e872:	d109      	bne.n	800e888 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d102      	bne.n	800e880 <chk_lock+0x80>
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	2b02      	cmp	r3, #2
 800e87e:	d101      	bne.n	800e884 <chk_lock+0x84>
 800e880:	2300      	movs	r3, #0
 800e882:	e010      	b.n	800e8a6 <chk_lock+0xa6>
 800e884:	2312      	movs	r3, #18
 800e886:	e00e      	b.n	800e8a6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d108      	bne.n	800e8a0 <chk_lock+0xa0>
 800e88e:	4a09      	ldr	r2, [pc, #36]	@ (800e8b4 <chk_lock+0xb4>)
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	011b      	lsls	r3, r3, #4
 800e894:	4413      	add	r3, r2
 800e896:	330c      	adds	r3, #12
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e89e:	d101      	bne.n	800e8a4 <chk_lock+0xa4>
 800e8a0:	2310      	movs	r3, #16
 800e8a2:	e000      	b.n	800e8a6 <chk_lock+0xa6>
 800e8a4:	2300      	movs	r3, #0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3714      	adds	r7, #20
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	20000c64 	.word	0x20000c64

0800e8b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	607b      	str	r3, [r7, #4]
 800e8c2:	e002      	b.n	800e8ca <enq_lock+0x12>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	607b      	str	r3, [r7, #4]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d806      	bhi.n	800e8de <enq_lock+0x26>
 800e8d0:	4a09      	ldr	r2, [pc, #36]	@ (800e8f8 <enq_lock+0x40>)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	011b      	lsls	r3, r3, #4
 800e8d6:	4413      	add	r3, r2
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1f2      	bne.n	800e8c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	bf14      	ite	ne
 800e8e4:	2301      	movne	r3, #1
 800e8e6:	2300      	moveq	r3, #0
 800e8e8:	b2db      	uxtb	r3, r3
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	370c      	adds	r7, #12
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	20000c64 	.word	0x20000c64

0800e8fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b085      	sub	sp, #20
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e906:	2300      	movs	r3, #0
 800e908:	60fb      	str	r3, [r7, #12]
 800e90a:	e01f      	b.n	800e94c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e90c:	4a41      	ldr	r2, [pc, #260]	@ (800ea14 <inc_lock+0x118>)
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	011b      	lsls	r3, r3, #4
 800e912:	4413      	add	r3, r2
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d113      	bne.n	800e946 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e91e:	4a3d      	ldr	r2, [pc, #244]	@ (800ea14 <inc_lock+0x118>)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	011b      	lsls	r3, r3, #4
 800e924:	4413      	add	r3, r2
 800e926:	3304      	adds	r3, #4
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e92e:	429a      	cmp	r2, r3
 800e930:	d109      	bne.n	800e946 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e932:	4a38      	ldr	r2, [pc, #224]	@ (800ea14 <inc_lock+0x118>)
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	011b      	lsls	r3, r3, #4
 800e938:	4413      	add	r3, r2
 800e93a:	3308      	adds	r3, #8
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e942:	429a      	cmp	r2, r3
 800e944:	d006      	beq.n	800e954 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	3301      	adds	r3, #1
 800e94a:	60fb      	str	r3, [r7, #12]
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d9dc      	bls.n	800e90c <inc_lock+0x10>
 800e952:	e000      	b.n	800e956 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e954:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2b02      	cmp	r3, #2
 800e95a:	d132      	bne.n	800e9c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e95c:	2300      	movs	r3, #0
 800e95e:	60fb      	str	r3, [r7, #12]
 800e960:	e002      	b.n	800e968 <inc_lock+0x6c>
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	3301      	adds	r3, #1
 800e966:	60fb      	str	r3, [r7, #12]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d806      	bhi.n	800e97c <inc_lock+0x80>
 800e96e:	4a29      	ldr	r2, [pc, #164]	@ (800ea14 <inc_lock+0x118>)
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	011b      	lsls	r3, r3, #4
 800e974:	4413      	add	r3, r2
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d1f2      	bne.n	800e962 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2b02      	cmp	r3, #2
 800e980:	d101      	bne.n	800e986 <inc_lock+0x8a>
 800e982:	2300      	movs	r3, #0
 800e984:	e040      	b.n	800ea08 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	4922      	ldr	r1, [pc, #136]	@ (800ea14 <inc_lock+0x118>)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	011b      	lsls	r3, r3, #4
 800e990:	440b      	add	r3, r1
 800e992:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	689a      	ldr	r2, [r3, #8]
 800e998:	491e      	ldr	r1, [pc, #120]	@ (800ea14 <inc_lock+0x118>)
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	011b      	lsls	r3, r3, #4
 800e99e:	440b      	add	r3, r1
 800e9a0:	3304      	adds	r3, #4
 800e9a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	695a      	ldr	r2, [r3, #20]
 800e9a8:	491a      	ldr	r1, [pc, #104]	@ (800ea14 <inc_lock+0x118>)
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	011b      	lsls	r3, r3, #4
 800e9ae:	440b      	add	r3, r1
 800e9b0:	3308      	adds	r3, #8
 800e9b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e9b4:	4a17      	ldr	r2, [pc, #92]	@ (800ea14 <inc_lock+0x118>)
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	011b      	lsls	r3, r3, #4
 800e9ba:	4413      	add	r3, r2
 800e9bc:	330c      	adds	r3, #12
 800e9be:	2200      	movs	r2, #0
 800e9c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d009      	beq.n	800e9dc <inc_lock+0xe0>
 800e9c8:	4a12      	ldr	r2, [pc, #72]	@ (800ea14 <inc_lock+0x118>)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	011b      	lsls	r3, r3, #4
 800e9ce:	4413      	add	r3, r2
 800e9d0:	330c      	adds	r3, #12
 800e9d2:	881b      	ldrh	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d001      	beq.n	800e9dc <inc_lock+0xe0>
 800e9d8:	2300      	movs	r3, #0
 800e9da:	e015      	b.n	800ea08 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d108      	bne.n	800e9f4 <inc_lock+0xf8>
 800e9e2:	4a0c      	ldr	r2, [pc, #48]	@ (800ea14 <inc_lock+0x118>)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	011b      	lsls	r3, r3, #4
 800e9e8:	4413      	add	r3, r2
 800e9ea:	330c      	adds	r3, #12
 800e9ec:	881b      	ldrh	r3, [r3, #0]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	b29a      	uxth	r2, r3
 800e9f2:	e001      	b.n	800e9f8 <inc_lock+0xfc>
 800e9f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e9f8:	4906      	ldr	r1, [pc, #24]	@ (800ea14 <inc_lock+0x118>)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	011b      	lsls	r3, r3, #4
 800e9fe:	440b      	add	r3, r1
 800ea00:	330c      	adds	r3, #12
 800ea02:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	3301      	adds	r3, #1
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3714      	adds	r7, #20
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	20000c64 	.word	0x20000c64

0800ea18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	3b01      	subs	r3, #1
 800ea24:	607b      	str	r3, [r7, #4]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d825      	bhi.n	800ea78 <dec_lock+0x60>
		n = Files[i].ctr;
 800ea2c:	4a17      	ldr	r2, [pc, #92]	@ (800ea8c <dec_lock+0x74>)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	011b      	lsls	r3, r3, #4
 800ea32:	4413      	add	r3, r2
 800ea34:	330c      	adds	r3, #12
 800ea36:	881b      	ldrh	r3, [r3, #0]
 800ea38:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ea3a:	89fb      	ldrh	r3, [r7, #14]
 800ea3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea40:	d101      	bne.n	800ea46 <dec_lock+0x2e>
 800ea42:	2300      	movs	r3, #0
 800ea44:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ea46:	89fb      	ldrh	r3, [r7, #14]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d002      	beq.n	800ea52 <dec_lock+0x3a>
 800ea4c:	89fb      	ldrh	r3, [r7, #14]
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ea52:	4a0e      	ldr	r2, [pc, #56]	@ (800ea8c <dec_lock+0x74>)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	011b      	lsls	r3, r3, #4
 800ea58:	4413      	add	r3, r2
 800ea5a:	330c      	adds	r3, #12
 800ea5c:	89fa      	ldrh	r2, [r7, #14]
 800ea5e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ea60:	89fb      	ldrh	r3, [r7, #14]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d105      	bne.n	800ea72 <dec_lock+0x5a>
 800ea66:	4a09      	ldr	r2, [pc, #36]	@ (800ea8c <dec_lock+0x74>)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	011b      	lsls	r3, r3, #4
 800ea6c:	4413      	add	r3, r2
 800ea6e:	2200      	movs	r2, #0
 800ea70:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ea72:	2300      	movs	r3, #0
 800ea74:	737b      	strb	r3, [r7, #13]
 800ea76:	e001      	b.n	800ea7c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ea78:	2302      	movs	r3, #2
 800ea7a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ea7c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3714      	adds	r7, #20
 800ea82:	46bd      	mov	sp, r7
 800ea84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	20000c64 	.word	0x20000c64

0800ea90 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b085      	sub	sp, #20
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ea98:	2300      	movs	r3, #0
 800ea9a:	60fb      	str	r3, [r7, #12]
 800ea9c:	e010      	b.n	800eac0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ea9e:	4a0d      	ldr	r2, [pc, #52]	@ (800ead4 <clear_lock+0x44>)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	011b      	lsls	r3, r3, #4
 800eaa4:	4413      	add	r3, r2
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d105      	bne.n	800eaba <clear_lock+0x2a>
 800eaae:	4a09      	ldr	r2, [pc, #36]	@ (800ead4 <clear_lock+0x44>)
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	011b      	lsls	r3, r3, #4
 800eab4:	4413      	add	r3, r2
 800eab6:	2200      	movs	r2, #0
 800eab8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	3301      	adds	r3, #1
 800eabe:	60fb      	str	r3, [r7, #12]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d9eb      	bls.n	800ea9e <clear_lock+0xe>
	}
}
 800eac6:	bf00      	nop
 800eac8:	bf00      	nop
 800eaca:	3714      	adds	r7, #20
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr
 800ead4:	20000c64 	.word	0x20000c64

0800ead8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	78db      	ldrb	r3, [r3, #3]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d034      	beq.n	800eb56 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaf0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	7858      	ldrb	r0, [r3, #1]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eafc:	2301      	movs	r3, #1
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	f7ff fd40 	bl	800e584 <disk_write>
 800eb04:	4603      	mov	r3, r0
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d002      	beq.n	800eb10 <sync_window+0x38>
			res = FR_DISK_ERR;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	73fb      	strb	r3, [r7, #15]
 800eb0e:	e022      	b.n	800eb56 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a1b      	ldr	r3, [r3, #32]
 800eb1a:	697a      	ldr	r2, [r7, #20]
 800eb1c:	1ad2      	subs	r2, r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	699b      	ldr	r3, [r3, #24]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d217      	bcs.n	800eb56 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	789b      	ldrb	r3, [r3, #2]
 800eb2a:	613b      	str	r3, [r7, #16]
 800eb2c:	e010      	b.n	800eb50 <sync_window+0x78>
					wsect += fs->fsize;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	699b      	ldr	r3, [r3, #24]
 800eb32:	697a      	ldr	r2, [r7, #20]
 800eb34:	4413      	add	r3, r2
 800eb36:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	7858      	ldrb	r0, [r3, #1]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb42:	2301      	movs	r3, #1
 800eb44:	697a      	ldr	r2, [r7, #20]
 800eb46:	f7ff fd1d 	bl	800e584 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	613b      	str	r3, [r7, #16]
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d8eb      	bhi.n	800eb2e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800eb56:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb72:	683a      	ldr	r2, [r7, #0]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d01b      	beq.n	800ebb0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7ff ffad 	bl	800ead8 <sync_window>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eb82:	7bfb      	ldrb	r3, [r7, #15]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d113      	bne.n	800ebb0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	7858      	ldrb	r0, [r3, #1]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb92:	2301      	movs	r3, #1
 800eb94:	683a      	ldr	r2, [r7, #0]
 800eb96:	f7ff fcd5 	bl	800e544 <disk_read>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d004      	beq.n	800ebaa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eba4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eba6:	2301      	movs	r3, #1
 800eba8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	683a      	ldr	r2, [r7, #0]
 800ebae:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3710      	adds	r7, #16
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
	...

0800ebbc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7ff ff87 	bl	800ead8 <sync_window>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ebce:	7bfb      	ldrb	r3, [r7, #15]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d158      	bne.n	800ec86 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2b03      	cmp	r3, #3
 800ebda:	d148      	bne.n	800ec6e <sync_fs+0xb2>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	791b      	ldrb	r3, [r3, #4]
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d144      	bne.n	800ec6e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	3330      	adds	r3, #48	@ 0x30
 800ebe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebec:	2100      	movs	r1, #0
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7ff fda9 	bl	800e746 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	3330      	adds	r3, #48	@ 0x30
 800ebf8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ebfc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ec00:	4618      	mov	r0, r3
 800ec02:	f7ff fd38 	bl	800e676 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	3330      	adds	r3, #48	@ 0x30
 800ec0a:	4921      	ldr	r1, [pc, #132]	@ (800ec90 <sync_fs+0xd4>)
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7ff fd4d 	bl	800e6ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	3330      	adds	r3, #48	@ 0x30
 800ec16:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ec1a:	491e      	ldr	r1, [pc, #120]	@ (800ec94 <sync_fs+0xd8>)
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7ff fd45 	bl	800e6ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	3330      	adds	r3, #48	@ 0x30
 800ec26:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	691b      	ldr	r3, [r3, #16]
 800ec2e:	4619      	mov	r1, r3
 800ec30:	4610      	mov	r0, r2
 800ec32:	f7ff fd3b 	bl	800e6ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	3330      	adds	r3, #48	@ 0x30
 800ec3a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	4619      	mov	r1, r3
 800ec44:	4610      	mov	r0, r2
 800ec46:	f7ff fd31 	bl	800e6ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	69db      	ldr	r3, [r3, #28]
 800ec4e:	1c5a      	adds	r2, r3, #1
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	7858      	ldrb	r0, [r3, #1]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec62:	2301      	movs	r3, #1
 800ec64:	f7ff fc8e 	bl	800e584 <disk_write>
			fs->fsi_flag = 0;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	785b      	ldrb	r3, [r3, #1]
 800ec72:	2200      	movs	r2, #0
 800ec74:	2100      	movs	r1, #0
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff fca4 	bl	800e5c4 <disk_ioctl>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d001      	beq.n	800ec86 <sync_fs+0xca>
 800ec82:	2301      	movs	r3, #1
 800ec84:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ec86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	41615252 	.word	0x41615252
 800ec94:	61417272 	.word	0x61417272

0800ec98 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	3b02      	subs	r3, #2
 800eca6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	695b      	ldr	r3, [r3, #20]
 800ecac:	3b02      	subs	r3, #2
 800ecae:	683a      	ldr	r2, [r7, #0]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d301      	bcc.n	800ecb8 <clust2sect+0x20>
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	e008      	b.n	800ecca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	895b      	ldrh	r3, [r3, #10]
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	fb03 f202 	mul.w	r2, r3, r2
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecc8:	4413      	add	r3, r2
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr

0800ecd6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b086      	sub	sp, #24
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
 800ecde:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d904      	bls.n	800ecf6 <get_fat+0x20>
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	695b      	ldr	r3, [r3, #20]
 800ecf0:	683a      	ldr	r2, [r7, #0]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d302      	bcc.n	800ecfc <get_fat+0x26>
		val = 1;	/* Internal error */
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	617b      	str	r3, [r7, #20]
 800ecfa:	e08e      	b.n	800ee1a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ecfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ed00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	2b03      	cmp	r3, #3
 800ed08:	d061      	beq.n	800edce <get_fat+0xf8>
 800ed0a:	2b03      	cmp	r3, #3
 800ed0c:	dc7b      	bgt.n	800ee06 <get_fat+0x130>
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d002      	beq.n	800ed18 <get_fat+0x42>
 800ed12:	2b02      	cmp	r3, #2
 800ed14:	d041      	beq.n	800ed9a <get_fat+0xc4>
 800ed16:	e076      	b.n	800ee06 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	60fb      	str	r3, [r7, #12]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	085b      	lsrs	r3, r3, #1
 800ed20:	68fa      	ldr	r2, [r7, #12]
 800ed22:	4413      	add	r3, r2
 800ed24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	6a1a      	ldr	r2, [r3, #32]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	0a5b      	lsrs	r3, r3, #9
 800ed2e:	4413      	add	r3, r2
 800ed30:	4619      	mov	r1, r3
 800ed32:	6938      	ldr	r0, [r7, #16]
 800ed34:	f7ff ff14 	bl	800eb60 <move_window>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d166      	bne.n	800ee0c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	1c5a      	adds	r2, r3, #1
 800ed42:	60fa      	str	r2, [r7, #12]
 800ed44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed48:	693a      	ldr	r2, [r7, #16]
 800ed4a:	4413      	add	r3, r2
 800ed4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ed50:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	6a1a      	ldr	r2, [r3, #32]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	0a5b      	lsrs	r3, r3, #9
 800ed5a:	4413      	add	r3, r2
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	6938      	ldr	r0, [r7, #16]
 800ed60:	f7ff fefe 	bl	800eb60 <move_window>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d152      	bne.n	800ee10 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	4413      	add	r3, r2
 800ed74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ed78:	021b      	lsls	r3, r3, #8
 800ed7a:	68ba      	ldr	r2, [r7, #8]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	f003 0301 	and.w	r3, r3, #1
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d002      	beq.n	800ed90 <get_fat+0xba>
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	091b      	lsrs	r3, r3, #4
 800ed8e:	e002      	b.n	800ed96 <get_fat+0xc0>
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed96:	617b      	str	r3, [r7, #20]
			break;
 800ed98:	e03f      	b.n	800ee1a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	6a1a      	ldr	r2, [r3, #32]
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	0a1b      	lsrs	r3, r3, #8
 800eda2:	4413      	add	r3, r2
 800eda4:	4619      	mov	r1, r3
 800eda6:	6938      	ldr	r0, [r7, #16]
 800eda8:	f7ff feda 	bl	800eb60 <move_window>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d130      	bne.n	800ee14 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	005b      	lsls	r3, r3, #1
 800edbc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800edc0:	4413      	add	r3, r2
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7ff fc1c 	bl	800e600 <ld_word>
 800edc8:	4603      	mov	r3, r0
 800edca:	617b      	str	r3, [r7, #20]
			break;
 800edcc:	e025      	b.n	800ee1a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	6a1a      	ldr	r2, [r3, #32]
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	09db      	lsrs	r3, r3, #7
 800edd6:	4413      	add	r3, r2
 800edd8:	4619      	mov	r1, r3
 800edda:	6938      	ldr	r0, [r7, #16]
 800eddc:	f7ff fec0 	bl	800eb60 <move_window>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d118      	bne.n	800ee18 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	009b      	lsls	r3, r3, #2
 800edf0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800edf4:	4413      	add	r3, r2
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7ff fc1a 	bl	800e630 <ld_dword>
 800edfc:	4603      	mov	r3, r0
 800edfe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ee02:	617b      	str	r3, [r7, #20]
			break;
 800ee04:	e009      	b.n	800ee1a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ee06:	2301      	movs	r3, #1
 800ee08:	617b      	str	r3, [r7, #20]
 800ee0a:	e006      	b.n	800ee1a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee0c:	bf00      	nop
 800ee0e:	e004      	b.n	800ee1a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee10:	bf00      	nop
 800ee12:	e002      	b.n	800ee1a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ee14:	bf00      	nop
 800ee16:	e000      	b.n	800ee1a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ee18:	bf00      	nop
		}
	}

	return val;
 800ee1a:	697b      	ldr	r3, [r7, #20]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3718      	adds	r7, #24
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ee24:	b590      	push	{r4, r7, lr}
 800ee26:	b089      	sub	sp, #36	@ 0x24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ee30:	2302      	movs	r3, #2
 800ee32:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	f240 80d9 	bls.w	800efee <put_fat+0x1ca>
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	695b      	ldr	r3, [r3, #20]
 800ee40:	68ba      	ldr	r2, [r7, #8]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	f080 80d3 	bcs.w	800efee <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	2b03      	cmp	r3, #3
 800ee4e:	f000 8096 	beq.w	800ef7e <put_fat+0x15a>
 800ee52:	2b03      	cmp	r3, #3
 800ee54:	f300 80cb 	bgt.w	800efee <put_fat+0x1ca>
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d002      	beq.n	800ee62 <put_fat+0x3e>
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d06e      	beq.n	800ef3e <put_fat+0x11a>
 800ee60:	e0c5      	b.n	800efee <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	61bb      	str	r3, [r7, #24]
 800ee66:	69bb      	ldr	r3, [r7, #24]
 800ee68:	085b      	lsrs	r3, r3, #1
 800ee6a:	69ba      	ldr	r2, [r7, #24]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6a1a      	ldr	r2, [r3, #32]
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	0a5b      	lsrs	r3, r3, #9
 800ee78:	4413      	add	r3, r2
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	68f8      	ldr	r0, [r7, #12]
 800ee7e:	f7ff fe6f 	bl	800eb60 <move_window>
 800ee82:	4603      	mov	r3, r0
 800ee84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee86:	7ffb      	ldrb	r3, [r7, #31]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f040 80a9 	bne.w	800efe0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	1c59      	adds	r1, r3, #1
 800ee98:	61b9      	str	r1, [r7, #24]
 800ee9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee9e:	4413      	add	r3, r2
 800eea0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	f003 0301 	and.w	r3, r3, #1
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d00d      	beq.n	800eec8 <put_fat+0xa4>
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	b25b      	sxtb	r3, r3
 800eeb2:	f003 030f 	and.w	r3, r3, #15
 800eeb6:	b25a      	sxtb	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	b2db      	uxtb	r3, r3
 800eebc:	011b      	lsls	r3, r3, #4
 800eebe:	b25b      	sxtb	r3, r3
 800eec0:	4313      	orrs	r3, r2
 800eec2:	b25b      	sxtb	r3, r3
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	e001      	b.n	800eecc <put_fat+0xa8>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	697a      	ldr	r2, [r7, #20]
 800eece:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2201      	movs	r2, #1
 800eed4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6a1a      	ldr	r2, [r3, #32]
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	0a5b      	lsrs	r3, r3, #9
 800eede:	4413      	add	r3, r2
 800eee0:	4619      	mov	r1, r3
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f7ff fe3c 	bl	800eb60 <move_window>
 800eee8:	4603      	mov	r3, r0
 800eeea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eeec:	7ffb      	ldrb	r3, [r7, #31]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d178      	bne.n	800efe4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eefe:	4413      	add	r3, r2
 800ef00:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	f003 0301 	and.w	r3, r3, #1
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d003      	beq.n	800ef14 <put_fat+0xf0>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	091b      	lsrs	r3, r3, #4
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	e00e      	b.n	800ef32 <put_fat+0x10e>
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	b25b      	sxtb	r3, r3
 800ef1a:	f023 030f 	bic.w	r3, r3, #15
 800ef1e:	b25a      	sxtb	r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	0a1b      	lsrs	r3, r3, #8
 800ef24:	b25b      	sxtb	r3, r3
 800ef26:	f003 030f 	and.w	r3, r3, #15
 800ef2a:	b25b      	sxtb	r3, r3
 800ef2c:	4313      	orrs	r3, r2
 800ef2e:	b25b      	sxtb	r3, r3
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	70da      	strb	r2, [r3, #3]
			break;
 800ef3c:	e057      	b.n	800efee <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6a1a      	ldr	r2, [r3, #32]
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	0a1b      	lsrs	r3, r3, #8
 800ef46:	4413      	add	r3, r2
 800ef48:	4619      	mov	r1, r3
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f7ff fe08 	bl	800eb60 <move_window>
 800ef50:	4603      	mov	r3, r0
 800ef52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef54:	7ffb      	ldrb	r3, [r7, #31]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d146      	bne.n	800efe8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ef68:	4413      	add	r3, r2
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	b292      	uxth	r2, r2
 800ef6e:	4611      	mov	r1, r2
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7ff fb80 	bl	800e676 <st_word>
			fs->wflag = 1;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	70da      	strb	r2, [r3, #3]
			break;
 800ef7c:	e037      	b.n	800efee <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	6a1a      	ldr	r2, [r3, #32]
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	09db      	lsrs	r3, r3, #7
 800ef86:	4413      	add	r3, r2
 800ef88:	4619      	mov	r1, r3
 800ef8a:	68f8      	ldr	r0, [r7, #12]
 800ef8c:	f7ff fde8 	bl	800eb60 <move_window>
 800ef90:	4603      	mov	r3, r0
 800ef92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef94:	7ffb      	ldrb	r3, [r7, #31]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d128      	bne.n	800efec <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800efae:	4413      	add	r3, r2
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7ff fb3d 	bl	800e630 <ld_dword>
 800efb6:	4603      	mov	r3, r0
 800efb8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800efbc:	4323      	orrs	r3, r4
 800efbe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800efce:	4413      	add	r3, r2
 800efd0:	6879      	ldr	r1, [r7, #4]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7ff fb6a 	bl	800e6ac <st_dword>
			fs->wflag = 1;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2201      	movs	r2, #1
 800efdc:	70da      	strb	r2, [r3, #3]
			break;
 800efde:	e006      	b.n	800efee <put_fat+0x1ca>
			if (res != FR_OK) break;
 800efe0:	bf00      	nop
 800efe2:	e004      	b.n	800efee <put_fat+0x1ca>
			if (res != FR_OK) break;
 800efe4:	bf00      	nop
 800efe6:	e002      	b.n	800efee <put_fat+0x1ca>
			if (res != FR_OK) break;
 800efe8:	bf00      	nop
 800efea:	e000      	b.n	800efee <put_fat+0x1ca>
			if (res != FR_OK) break;
 800efec:	bf00      	nop
		}
	}
	return res;
 800efee:	7ffb      	ldrb	r3, [r7, #31]
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3724      	adds	r7, #36	@ 0x24
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd90      	pop	{r4, r7, pc}

0800eff8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b088      	sub	sp, #32
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2b01      	cmp	r3, #1
 800f012:	d904      	bls.n	800f01e <remove_chain+0x26>
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	695b      	ldr	r3, [r3, #20]
 800f018:	68ba      	ldr	r2, [r7, #8]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d301      	bcc.n	800f022 <remove_chain+0x2a>
 800f01e:	2302      	movs	r3, #2
 800f020:	e04b      	b.n	800f0ba <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d00c      	beq.n	800f042 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f028:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f02c:	6879      	ldr	r1, [r7, #4]
 800f02e:	69b8      	ldr	r0, [r7, #24]
 800f030:	f7ff fef8 	bl	800ee24 <put_fat>
 800f034:	4603      	mov	r3, r0
 800f036:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f038:	7ffb      	ldrb	r3, [r7, #31]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d001      	beq.n	800f042 <remove_chain+0x4a>
 800f03e:	7ffb      	ldrb	r3, [r7, #31]
 800f040:	e03b      	b.n	800f0ba <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f042:	68b9      	ldr	r1, [r7, #8]
 800f044:	68f8      	ldr	r0, [r7, #12]
 800f046:	f7ff fe46 	bl	800ecd6 <get_fat>
 800f04a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d031      	beq.n	800f0b6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d101      	bne.n	800f05c <remove_chain+0x64>
 800f058:	2302      	movs	r3, #2
 800f05a:	e02e      	b.n	800f0ba <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f062:	d101      	bne.n	800f068 <remove_chain+0x70>
 800f064:	2301      	movs	r3, #1
 800f066:	e028      	b.n	800f0ba <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f068:	2200      	movs	r2, #0
 800f06a:	68b9      	ldr	r1, [r7, #8]
 800f06c:	69b8      	ldr	r0, [r7, #24]
 800f06e:	f7ff fed9 	bl	800ee24 <put_fat>
 800f072:	4603      	mov	r3, r0
 800f074:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f076:	7ffb      	ldrb	r3, [r7, #31]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d001      	beq.n	800f080 <remove_chain+0x88>
 800f07c:	7ffb      	ldrb	r3, [r7, #31]
 800f07e:	e01c      	b.n	800f0ba <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f080:	69bb      	ldr	r3, [r7, #24]
 800f082:	691a      	ldr	r2, [r3, #16]
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	695b      	ldr	r3, [r3, #20]
 800f088:	3b02      	subs	r3, #2
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d20b      	bcs.n	800f0a6 <remove_chain+0xae>
			fs->free_clst++;
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	691b      	ldr	r3, [r3, #16]
 800f092:	1c5a      	adds	r2, r3, #1
 800f094:	69bb      	ldr	r3, [r7, #24]
 800f096:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	791b      	ldrb	r3, [r3, #4]
 800f09c:	f043 0301 	orr.w	r3, r3, #1
 800f0a0:	b2da      	uxtb	r2, r3
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f0aa:	69bb      	ldr	r3, [r7, #24]
 800f0ac:	695b      	ldr	r3, [r3, #20]
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d3c6      	bcc.n	800f042 <remove_chain+0x4a>
 800f0b4:	e000      	b.n	800f0b8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f0b6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3720      	adds	r7, #32
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f0c2:	b580      	push	{r7, lr}
 800f0c4:	b088      	sub	sp, #32
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
 800f0ca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d10d      	bne.n	800f0f4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d004      	beq.n	800f0ee <create_chain+0x2c>
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	695b      	ldr	r3, [r3, #20]
 800f0e8:	69ba      	ldr	r2, [r7, #24]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d31b      	bcc.n	800f126 <create_chain+0x64>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	61bb      	str	r3, [r7, #24]
 800f0f2:	e018      	b.n	800f126 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f0f4:	6839      	ldr	r1, [r7, #0]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f7ff fded 	bl	800ecd6 <get_fat>
 800f0fc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2b01      	cmp	r3, #1
 800f102:	d801      	bhi.n	800f108 <create_chain+0x46>
 800f104:	2301      	movs	r3, #1
 800f106:	e070      	b.n	800f1ea <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f10e:	d101      	bne.n	800f114 <create_chain+0x52>
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	e06a      	b.n	800f1ea <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	695b      	ldr	r3, [r3, #20]
 800f118:	68fa      	ldr	r2, [r7, #12]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d201      	bcs.n	800f122 <create_chain+0x60>
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	e063      	b.n	800f1ea <create_chain+0x128>
		scl = clst;
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f126:	69bb      	ldr	r3, [r7, #24]
 800f128:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	3301      	adds	r3, #1
 800f12e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	695b      	ldr	r3, [r3, #20]
 800f134:	69fa      	ldr	r2, [r7, #28]
 800f136:	429a      	cmp	r2, r3
 800f138:	d307      	bcc.n	800f14a <create_chain+0x88>
				ncl = 2;
 800f13a:	2302      	movs	r3, #2
 800f13c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f13e:	69fa      	ldr	r2, [r7, #28]
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	429a      	cmp	r2, r3
 800f144:	d901      	bls.n	800f14a <create_chain+0x88>
 800f146:	2300      	movs	r3, #0
 800f148:	e04f      	b.n	800f1ea <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f14a:	69f9      	ldr	r1, [r7, #28]
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7ff fdc2 	bl	800ecd6 <get_fat>
 800f152:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d00e      	beq.n	800f178 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d003      	beq.n	800f168 <create_chain+0xa6>
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f166:	d101      	bne.n	800f16c <create_chain+0xaa>
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	e03e      	b.n	800f1ea <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f16c:	69fa      	ldr	r2, [r7, #28]
 800f16e:	69bb      	ldr	r3, [r7, #24]
 800f170:	429a      	cmp	r2, r3
 800f172:	d1da      	bne.n	800f12a <create_chain+0x68>
 800f174:	2300      	movs	r3, #0
 800f176:	e038      	b.n	800f1ea <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f178:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f17a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f17e:	69f9      	ldr	r1, [r7, #28]
 800f180:	6938      	ldr	r0, [r7, #16]
 800f182:	f7ff fe4f 	bl	800ee24 <put_fat>
 800f186:	4603      	mov	r3, r0
 800f188:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f18a:	7dfb      	ldrb	r3, [r7, #23]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d109      	bne.n	800f1a4 <create_chain+0xe2>
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d006      	beq.n	800f1a4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f196:	69fa      	ldr	r2, [r7, #28]
 800f198:	6839      	ldr	r1, [r7, #0]
 800f19a:	6938      	ldr	r0, [r7, #16]
 800f19c:	f7ff fe42 	bl	800ee24 <put_fat>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f1a4:	7dfb      	ldrb	r3, [r7, #23]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d116      	bne.n	800f1d8 <create_chain+0x116>
		fs->last_clst = ncl;
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	69fa      	ldr	r2, [r7, #28]
 800f1ae:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	691a      	ldr	r2, [r3, #16]
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	695b      	ldr	r3, [r3, #20]
 800f1b8:	3b02      	subs	r3, #2
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d804      	bhi.n	800f1c8 <create_chain+0x106>
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	1e5a      	subs	r2, r3, #1
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	791b      	ldrb	r3, [r3, #4]
 800f1cc:	f043 0301 	orr.w	r3, r3, #1
 800f1d0:	b2da      	uxtb	r2, r3
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	711a      	strb	r2, [r3, #4]
 800f1d6:	e007      	b.n	800f1e8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f1d8:	7dfb      	ldrb	r3, [r7, #23]
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d102      	bne.n	800f1e4 <create_chain+0x122>
 800f1de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f1e2:	e000      	b.n	800f1e6 <create_chain+0x124>
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f1e8:	69fb      	ldr	r3, [r7, #28]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3720      	adds	r7, #32
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f1f2:	b480      	push	{r7}
 800f1f4:	b087      	sub	sp, #28
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f206:	3304      	adds	r3, #4
 800f208:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	0a5b      	lsrs	r3, r3, #9
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	8952      	ldrh	r2, [r2, #10]
 800f212:	fbb3 f3f2 	udiv	r3, r3, r2
 800f216:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	1d1a      	adds	r2, r3, #4
 800f21c:	613a      	str	r2, [r7, #16]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d101      	bne.n	800f22c <clmt_clust+0x3a>
 800f228:	2300      	movs	r3, #0
 800f22a:	e010      	b.n	800f24e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f22c:	697a      	ldr	r2, [r7, #20]
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	429a      	cmp	r2, r3
 800f232:	d307      	bcc.n	800f244 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f234:	697a      	ldr	r2, [r7, #20]
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	1ad3      	subs	r3, r2, r3
 800f23a:	617b      	str	r3, [r7, #20]
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	3304      	adds	r3, #4
 800f240:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f242:	e7e9      	b.n	800f218 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f244:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	4413      	add	r3, r2
}
 800f24e:	4618      	mov	r0, r3
 800f250:	371c      	adds	r7, #28
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr

0800f25a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b086      	sub	sp, #24
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
 800f262:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f270:	d204      	bcs.n	800f27c <dir_sdi+0x22>
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	f003 031f 	and.w	r3, r3, #31
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f27c:	2302      	movs	r3, #2
 800f27e:	e063      	b.n	800f348 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	683a      	ldr	r2, [r7, #0]
 800f284:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d106      	bne.n	800f2a0 <dir_sdi+0x46>
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	2b02      	cmp	r3, #2
 800f298:	d902      	bls.n	800f2a0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f29e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10c      	bne.n	800f2c0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	095b      	lsrs	r3, r3, #5
 800f2aa:	693a      	ldr	r2, [r7, #16]
 800f2ac:	8912      	ldrh	r2, [r2, #8]
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d301      	bcc.n	800f2b6 <dir_sdi+0x5c>
 800f2b2:	2302      	movs	r3, #2
 800f2b4:	e048      	b.n	800f348 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	61da      	str	r2, [r3, #28]
 800f2be:	e029      	b.n	800f314 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	895b      	ldrh	r3, [r3, #10]
 800f2c4:	025b      	lsls	r3, r3, #9
 800f2c6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f2c8:	e019      	b.n	800f2fe <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6979      	ldr	r1, [r7, #20]
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7ff fd01 	bl	800ecd6 <get_fat>
 800f2d4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f2dc:	d101      	bne.n	800f2e2 <dir_sdi+0x88>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	e032      	b.n	800f348 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d904      	bls.n	800f2f2 <dir_sdi+0x98>
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	695b      	ldr	r3, [r3, #20]
 800f2ec:	697a      	ldr	r2, [r7, #20]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d301      	bcc.n	800f2f6 <dir_sdi+0x9c>
 800f2f2:	2302      	movs	r3, #2
 800f2f4:	e028      	b.n	800f348 <dir_sdi+0xee>
			ofs -= csz;
 800f2f6:	683a      	ldr	r2, [r7, #0]
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f2fe:	683a      	ldr	r2, [r7, #0]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	429a      	cmp	r2, r3
 800f304:	d2e1      	bcs.n	800f2ca <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f306:	6979      	ldr	r1, [r7, #20]
 800f308:	6938      	ldr	r0, [r7, #16]
 800f30a:	f7ff fcc5 	bl	800ec98 <clust2sect>
 800f30e:	4602      	mov	r2, r0
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	697a      	ldr	r2, [r7, #20]
 800f318:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	69db      	ldr	r3, [r3, #28]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d101      	bne.n	800f326 <dir_sdi+0xcc>
 800f322:	2302      	movs	r3, #2
 800f324:	e010      	b.n	800f348 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	69da      	ldr	r2, [r3, #28]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	0a5b      	lsrs	r3, r3, #9
 800f32e:	441a      	add	r2, r3
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f340:	441a      	add	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f346:	2300      	movs	r3, #0
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3718      	adds	r7, #24
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b086      	sub	sp, #24
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	695b      	ldr	r3, [r3, #20]
 800f364:	3320      	adds	r3, #32
 800f366:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	69db      	ldr	r3, [r3, #28]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d003      	beq.n	800f378 <dir_next+0x28>
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f376:	d301      	bcc.n	800f37c <dir_next+0x2c>
 800f378:	2304      	movs	r3, #4
 800f37a:	e0aa      	b.n	800f4d2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f382:	2b00      	cmp	r3, #0
 800f384:	f040 8098 	bne.w	800f4b8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	69db      	ldr	r3, [r3, #28]
 800f38c:	1c5a      	adds	r2, r3, #1
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	699b      	ldr	r3, [r3, #24]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d10b      	bne.n	800f3b2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	095b      	lsrs	r3, r3, #5
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	8912      	ldrh	r2, [r2, #8]
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	f0c0 8088 	bcc.w	800f4b8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	61da      	str	r2, [r3, #28]
 800f3ae:	2304      	movs	r3, #4
 800f3b0:	e08f      	b.n	800f4d2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	0a5b      	lsrs	r3, r3, #9
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	8952      	ldrh	r2, [r2, #10]
 800f3ba:	3a01      	subs	r2, #1
 800f3bc:	4013      	ands	r3, r2
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d17a      	bne.n	800f4b8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	699b      	ldr	r3, [r3, #24]
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f7ff fc83 	bl	800ecd6 <get_fat>
 800f3d0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d801      	bhi.n	800f3dc <dir_next+0x8c>
 800f3d8:	2302      	movs	r3, #2
 800f3da:	e07a      	b.n	800f4d2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f3e2:	d101      	bne.n	800f3e8 <dir_next+0x98>
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	e074      	b.n	800f4d2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	695b      	ldr	r3, [r3, #20]
 800f3ec:	697a      	ldr	r2, [r7, #20]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d358      	bcc.n	800f4a4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d104      	bne.n	800f402 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	61da      	str	r2, [r3, #28]
 800f3fe:	2304      	movs	r3, #4
 800f400:	e067      	b.n	800f4d2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	699b      	ldr	r3, [r3, #24]
 800f408:	4619      	mov	r1, r3
 800f40a:	4610      	mov	r0, r2
 800f40c:	f7ff fe59 	bl	800f0c2 <create_chain>
 800f410:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d101      	bne.n	800f41c <dir_next+0xcc>
 800f418:	2307      	movs	r3, #7
 800f41a:	e05a      	b.n	800f4d2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d101      	bne.n	800f426 <dir_next+0xd6>
 800f422:	2302      	movs	r3, #2
 800f424:	e055      	b.n	800f4d2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f42c:	d101      	bne.n	800f432 <dir_next+0xe2>
 800f42e:	2301      	movs	r3, #1
 800f430:	e04f      	b.n	800f4d2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f432:	68f8      	ldr	r0, [r7, #12]
 800f434:	f7ff fb50 	bl	800ead8 <sync_window>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <dir_next+0xf2>
 800f43e:	2301      	movs	r3, #1
 800f440:	e047      	b.n	800f4d2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	3330      	adds	r3, #48	@ 0x30
 800f446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f44a:	2100      	movs	r1, #0
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7ff f97a 	bl	800e746 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f452:	2300      	movs	r3, #0
 800f454:	613b      	str	r3, [r7, #16]
 800f456:	6979      	ldr	r1, [r7, #20]
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f7ff fc1d 	bl	800ec98 <clust2sect>
 800f45e:	4602      	mov	r2, r0
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f464:	e012      	b.n	800f48c <dir_next+0x13c>
						fs->wflag = 1;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2201      	movs	r2, #1
 800f46a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f46c:	68f8      	ldr	r0, [r7, #12]
 800f46e:	f7ff fb33 	bl	800ead8 <sync_window>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d001      	beq.n	800f47c <dir_next+0x12c>
 800f478:	2301      	movs	r3, #1
 800f47a:	e02a      	b.n	800f4d2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	3301      	adds	r3, #1
 800f480:	613b      	str	r3, [r7, #16]
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f486:	1c5a      	adds	r2, r3, #1
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	895b      	ldrh	r3, [r3, #10]
 800f490:	461a      	mov	r2, r3
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	4293      	cmp	r3, r2
 800f496:	d3e6      	bcc.n	800f466 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	1ad2      	subs	r2, r2, r3
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	697a      	ldr	r2, [r7, #20]
 800f4a8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f4aa:	6979      	ldr	r1, [r7, #20]
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f7ff fbf3 	bl	800ec98 <clust2sect>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4ca:	441a      	add	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f4d0:	2300      	movs	r3, #0
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3718      	adds	r7, #24
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f4da:	b580      	push	{r7, lr}
 800f4dc:	b086      	sub	sp, #24
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
 800f4e2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7ff feb4 	bl	800f25a <dir_sdi>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f4f6:	7dfb      	ldrb	r3, [r7, #23]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d12b      	bne.n	800f554 <dir_alloc+0x7a>
		n = 0;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	69db      	ldr	r3, [r3, #28]
 800f504:	4619      	mov	r1, r3
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f7ff fb2a 	bl	800eb60 <move_window>
 800f50c:	4603      	mov	r3, r0
 800f50e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f510:	7dfb      	ldrb	r3, [r7, #23]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d11d      	bne.n	800f552 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6a1b      	ldr	r3, [r3, #32]
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	2be5      	cmp	r3, #229	@ 0xe5
 800f51e:	d004      	beq.n	800f52a <dir_alloc+0x50>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6a1b      	ldr	r3, [r3, #32]
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d107      	bne.n	800f53a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	3301      	adds	r3, #1
 800f52e:	613b      	str	r3, [r7, #16]
 800f530:	693a      	ldr	r2, [r7, #16]
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	429a      	cmp	r2, r3
 800f536:	d102      	bne.n	800f53e <dir_alloc+0x64>
 800f538:	e00c      	b.n	800f554 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f53a:	2300      	movs	r3, #0
 800f53c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f53e:	2101      	movs	r1, #1
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f7ff ff05 	bl	800f350 <dir_next>
 800f546:	4603      	mov	r3, r0
 800f548:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f54a:	7dfb      	ldrb	r3, [r7, #23]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d0d7      	beq.n	800f500 <dir_alloc+0x26>
 800f550:	e000      	b.n	800f554 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f552:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f554:	7dfb      	ldrb	r3, [r7, #23]
 800f556:	2b04      	cmp	r3, #4
 800f558:	d101      	bne.n	800f55e <dir_alloc+0x84>
 800f55a:	2307      	movs	r3, #7
 800f55c:	75fb      	strb	r3, [r7, #23]
	return res;
 800f55e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f560:	4618      	mov	r0, r3
 800f562:	3718      	adds	r7, #24
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}

0800f568 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	331a      	adds	r3, #26
 800f576:	4618      	mov	r0, r3
 800f578:	f7ff f842 	bl	800e600 <ld_word>
 800f57c:	4603      	mov	r3, r0
 800f57e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	2b03      	cmp	r3, #3
 800f586:	d109      	bne.n	800f59c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	3314      	adds	r3, #20
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7ff f837 	bl	800e600 <ld_word>
 800f592:	4603      	mov	r3, r0
 800f594:	041b      	lsls	r3, r3, #16
 800f596:	68fa      	ldr	r2, [r7, #12]
 800f598:	4313      	orrs	r3, r2
 800f59a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f59c:	68fb      	ldr	r3, [r7, #12]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3710      	adds	r7, #16
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f5a6:	b580      	push	{r7, lr}
 800f5a8:	b084      	sub	sp, #16
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	60f8      	str	r0, [r7, #12]
 800f5ae:	60b9      	str	r1, [r7, #8]
 800f5b0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	331a      	adds	r3, #26
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	b292      	uxth	r2, r2
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7ff f85a 	bl	800e676 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	2b03      	cmp	r3, #3
 800f5c8:	d109      	bne.n	800f5de <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	f103 0214 	add.w	r2, r3, #20
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	0c1b      	lsrs	r3, r3, #16
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	4610      	mov	r0, r2
 800f5da:	f7ff f84c 	bl	800e676 <st_word>
	}
}
 800f5de:	bf00      	nop
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b086      	sub	sp, #24
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f5f4:	2100      	movs	r1, #0
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7ff fe2f 	bl	800f25a <dir_sdi>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f600:	7dfb      	ldrb	r3, [r7, #23]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d001      	beq.n	800f60a <dir_find+0x24>
 800f606:	7dfb      	ldrb	r3, [r7, #23]
 800f608:	e03e      	b.n	800f688 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	69db      	ldr	r3, [r3, #28]
 800f60e:	4619      	mov	r1, r3
 800f610:	6938      	ldr	r0, [r7, #16]
 800f612:	f7ff faa5 	bl	800eb60 <move_window>
 800f616:	4603      	mov	r3, r0
 800f618:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f61a:	7dfb      	ldrb	r3, [r7, #23]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d12f      	bne.n	800f680 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6a1b      	ldr	r3, [r3, #32]
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f628:	7bfb      	ldrb	r3, [r7, #15]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d102      	bne.n	800f634 <dir_find+0x4e>
 800f62e:	2304      	movs	r3, #4
 800f630:	75fb      	strb	r3, [r7, #23]
 800f632:	e028      	b.n	800f686 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a1b      	ldr	r3, [r3, #32]
 800f638:	330b      	adds	r3, #11
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f640:	b2da      	uxtb	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a1b      	ldr	r3, [r3, #32]
 800f64a:	330b      	adds	r3, #11
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	f003 0308 	and.w	r3, r3, #8
 800f652:	2b00      	cmp	r3, #0
 800f654:	d10a      	bne.n	800f66c <dir_find+0x86>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6a18      	ldr	r0, [r3, #32]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	3324      	adds	r3, #36	@ 0x24
 800f65e:	220b      	movs	r2, #11
 800f660:	4619      	mov	r1, r3
 800f662:	f7ff f88b 	bl	800e77c <mem_cmp>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00b      	beq.n	800f684 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f66c:	2100      	movs	r1, #0
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f7ff fe6e 	bl	800f350 <dir_next>
 800f674:	4603      	mov	r3, r0
 800f676:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f678:	7dfb      	ldrb	r3, [r7, #23]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d0c5      	beq.n	800f60a <dir_find+0x24>
 800f67e:	e002      	b.n	800f686 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f680:	bf00      	nop
 800f682:	e000      	b.n	800f686 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f684:	bf00      	nop

	return res;
 800f686:	7dfb      	ldrb	r3, [r7, #23]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3718      	adds	r7, #24
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f69e:	2101      	movs	r1, #1
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f7ff ff1a 	bl	800f4da <dir_alloc>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f6aa:	7bfb      	ldrb	r3, [r7, #15]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d11c      	bne.n	800f6ea <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	69db      	ldr	r3, [r3, #28]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	68b8      	ldr	r0, [r7, #8]
 800f6b8:	f7ff fa52 	bl	800eb60 <move_window>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d111      	bne.n	800f6ea <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6a1b      	ldr	r3, [r3, #32]
 800f6ca:	2220      	movs	r2, #32
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7ff f839 	bl	800e746 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a18      	ldr	r0, [r3, #32]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	3324      	adds	r3, #36	@ 0x24
 800f6dc:	220b      	movs	r2, #11
 800f6de:	4619      	mov	r1, r3
 800f6e0:	f7ff f810 	bl	800e704 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b088      	sub	sp, #32
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	3324      	adds	r3, #36	@ 0x24
 800f708:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f70a:	220b      	movs	r2, #11
 800f70c:	2120      	movs	r1, #32
 800f70e:	68b8      	ldr	r0, [r7, #8]
 800f710:	f7ff f819 	bl	800e746 <mem_set>
	si = i = 0; ni = 8;
 800f714:	2300      	movs	r3, #0
 800f716:	613b      	str	r3, [r7, #16]
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	61fb      	str	r3, [r7, #28]
 800f71c:	2308      	movs	r3, #8
 800f71e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	1c5a      	adds	r2, r3, #1
 800f724:	61fa      	str	r2, [r7, #28]
 800f726:	68fa      	ldr	r2, [r7, #12]
 800f728:	4413      	add	r3, r2
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f72e:	7efb      	ldrb	r3, [r7, #27]
 800f730:	2b20      	cmp	r3, #32
 800f732:	d94e      	bls.n	800f7d2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f734:	7efb      	ldrb	r3, [r7, #27]
 800f736:	2b2f      	cmp	r3, #47	@ 0x2f
 800f738:	d006      	beq.n	800f748 <create_name+0x54>
 800f73a:	7efb      	ldrb	r3, [r7, #27]
 800f73c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f73e:	d110      	bne.n	800f762 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f740:	e002      	b.n	800f748 <create_name+0x54>
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	3301      	adds	r3, #1
 800f746:	61fb      	str	r3, [r7, #28]
 800f748:	68fa      	ldr	r2, [r7, #12]
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	4413      	add	r3, r2
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	2b2f      	cmp	r3, #47	@ 0x2f
 800f752:	d0f6      	beq.n	800f742 <create_name+0x4e>
 800f754:	68fa      	ldr	r2, [r7, #12]
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	4413      	add	r3, r2
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f75e:	d0f0      	beq.n	800f742 <create_name+0x4e>
			break;
 800f760:	e038      	b.n	800f7d4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f762:	7efb      	ldrb	r3, [r7, #27]
 800f764:	2b2e      	cmp	r3, #46	@ 0x2e
 800f766:	d003      	beq.n	800f770 <create_name+0x7c>
 800f768:	693a      	ldr	r2, [r7, #16]
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d30c      	bcc.n	800f78a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	2b0b      	cmp	r3, #11
 800f774:	d002      	beq.n	800f77c <create_name+0x88>
 800f776:	7efb      	ldrb	r3, [r7, #27]
 800f778:	2b2e      	cmp	r3, #46	@ 0x2e
 800f77a:	d001      	beq.n	800f780 <create_name+0x8c>
 800f77c:	2306      	movs	r3, #6
 800f77e:	e044      	b.n	800f80a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f780:	2308      	movs	r3, #8
 800f782:	613b      	str	r3, [r7, #16]
 800f784:	230b      	movs	r3, #11
 800f786:	617b      	str	r3, [r7, #20]
			continue;
 800f788:	e022      	b.n	800f7d0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f78a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	da04      	bge.n	800f79c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f792:	7efb      	ldrb	r3, [r7, #27]
 800f794:	3b80      	subs	r3, #128	@ 0x80
 800f796:	4a1f      	ldr	r2, [pc, #124]	@ (800f814 <create_name+0x120>)
 800f798:	5cd3      	ldrb	r3, [r2, r3]
 800f79a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f79c:	7efb      	ldrb	r3, [r7, #27]
 800f79e:	4619      	mov	r1, r3
 800f7a0:	481d      	ldr	r0, [pc, #116]	@ (800f818 <create_name+0x124>)
 800f7a2:	f7ff f812 	bl	800e7ca <chk_chr>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d001      	beq.n	800f7b0 <create_name+0xbc>
 800f7ac:	2306      	movs	r3, #6
 800f7ae:	e02c      	b.n	800f80a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f7b0:	7efb      	ldrb	r3, [r7, #27]
 800f7b2:	2b60      	cmp	r3, #96	@ 0x60
 800f7b4:	d905      	bls.n	800f7c2 <create_name+0xce>
 800f7b6:	7efb      	ldrb	r3, [r7, #27]
 800f7b8:	2b7a      	cmp	r3, #122	@ 0x7a
 800f7ba:	d802      	bhi.n	800f7c2 <create_name+0xce>
 800f7bc:	7efb      	ldrb	r3, [r7, #27]
 800f7be:	3b20      	subs	r3, #32
 800f7c0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	1c5a      	adds	r2, r3, #1
 800f7c6:	613a      	str	r2, [r7, #16]
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	4413      	add	r3, r2
 800f7cc:	7efa      	ldrb	r2, [r7, #27]
 800f7ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f7d0:	e7a6      	b.n	800f720 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f7d2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	441a      	add	r2, r3
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d101      	bne.n	800f7e8 <create_name+0xf4>
 800f7e4:	2306      	movs	r3, #6
 800f7e6:	e010      	b.n	800f80a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	2be5      	cmp	r3, #229	@ 0xe5
 800f7ee:	d102      	bne.n	800f7f6 <create_name+0x102>
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2205      	movs	r2, #5
 800f7f4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f7f6:	7efb      	ldrb	r3, [r7, #27]
 800f7f8:	2b20      	cmp	r3, #32
 800f7fa:	d801      	bhi.n	800f800 <create_name+0x10c>
 800f7fc:	2204      	movs	r2, #4
 800f7fe:	e000      	b.n	800f802 <create_name+0x10e>
 800f800:	2200      	movs	r2, #0
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	330b      	adds	r3, #11
 800f806:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f808:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	3720      	adds	r7, #32
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	080119d8 	.word	0x080119d8
 800f818:	08011960 	.word	0x08011960

0800f81c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b086      	sub	sp, #24
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f830:	e002      	b.n	800f838 <follow_path+0x1c>
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	3301      	adds	r3, #1
 800f836:	603b      	str	r3, [r7, #0]
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f83e:	d0f8      	beq.n	800f832 <follow_path+0x16>
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	2b5c      	cmp	r3, #92	@ 0x5c
 800f846:	d0f4      	beq.n	800f832 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	2200      	movs	r2, #0
 800f84c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	2b1f      	cmp	r3, #31
 800f854:	d80a      	bhi.n	800f86c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2280      	movs	r2, #128	@ 0x80
 800f85a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f85e:	2100      	movs	r1, #0
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f7ff fcfa 	bl	800f25a <dir_sdi>
 800f866:	4603      	mov	r3, r0
 800f868:	75fb      	strb	r3, [r7, #23]
 800f86a:	e043      	b.n	800f8f4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f86c:	463b      	mov	r3, r7
 800f86e:	4619      	mov	r1, r3
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f7ff ff3f 	bl	800f6f4 <create_name>
 800f876:	4603      	mov	r3, r0
 800f878:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f87a:	7dfb      	ldrb	r3, [r7, #23]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d134      	bne.n	800f8ea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7ff feb0 	bl	800f5e6 <dir_find>
 800f886:	4603      	mov	r3, r0
 800f888:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f890:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f892:	7dfb      	ldrb	r3, [r7, #23]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d00a      	beq.n	800f8ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f898:	7dfb      	ldrb	r3, [r7, #23]
 800f89a:	2b04      	cmp	r3, #4
 800f89c:	d127      	bne.n	800f8ee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f89e:	7afb      	ldrb	r3, [r7, #11]
 800f8a0:	f003 0304 	and.w	r3, r3, #4
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d122      	bne.n	800f8ee <follow_path+0xd2>
 800f8a8:	2305      	movs	r3, #5
 800f8aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f8ac:	e01f      	b.n	800f8ee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f8ae:	7afb      	ldrb	r3, [r7, #11]
 800f8b0:	f003 0304 	and.w	r3, r3, #4
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d11c      	bne.n	800f8f2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	799b      	ldrb	r3, [r3, #6]
 800f8bc:	f003 0310 	and.w	r3, r3, #16
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d102      	bne.n	800f8ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f8c4:	2305      	movs	r3, #5
 800f8c6:	75fb      	strb	r3, [r7, #23]
 800f8c8:	e014      	b.n	800f8f4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	695b      	ldr	r3, [r3, #20]
 800f8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8d8:	4413      	add	r3, r2
 800f8da:	4619      	mov	r1, r3
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f7ff fe43 	bl	800f568 <ld_clust>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f8e8:	e7c0      	b.n	800f86c <follow_path+0x50>
			if (res != FR_OK) break;
 800f8ea:	bf00      	nop
 800f8ec:	e002      	b.n	800f8f4 <follow_path+0xd8>
				break;
 800f8ee:	bf00      	nop
 800f8f0:	e000      	b.n	800f8f4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f8f2:	bf00      	nop
			}
		}
	}

	return res;
 800f8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3718      	adds	r7, #24
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}

0800f8fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f8fe:	b480      	push	{r7}
 800f900:	b087      	sub	sp, #28
 800f902:	af00      	add	r7, sp, #0
 800f904:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f90a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d031      	beq.n	800f978 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	617b      	str	r3, [r7, #20]
 800f91a:	e002      	b.n	800f922 <get_ldnumber+0x24>
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	3301      	adds	r3, #1
 800f920:	617b      	str	r3, [r7, #20]
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	2b20      	cmp	r3, #32
 800f928:	d903      	bls.n	800f932 <get_ldnumber+0x34>
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	2b3a      	cmp	r3, #58	@ 0x3a
 800f930:	d1f4      	bne.n	800f91c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	2b3a      	cmp	r3, #58	@ 0x3a
 800f938:	d11c      	bne.n	800f974 <get_ldnumber+0x76>
			tp = *path;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	1c5a      	adds	r2, r3, #1
 800f944:	60fa      	str	r2, [r7, #12]
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	3b30      	subs	r3, #48	@ 0x30
 800f94a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	2b09      	cmp	r3, #9
 800f950:	d80e      	bhi.n	800f970 <get_ldnumber+0x72>
 800f952:	68fa      	ldr	r2, [r7, #12]
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	429a      	cmp	r2, r3
 800f958:	d10a      	bne.n	800f970 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d107      	bne.n	800f970 <get_ldnumber+0x72>
					vol = (int)i;
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	3301      	adds	r3, #1
 800f968:	617b      	str	r3, [r7, #20]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	697a      	ldr	r2, [r7, #20]
 800f96e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	e002      	b.n	800f97a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f974:	2300      	movs	r3, #0
 800f976:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f978:	693b      	ldr	r3, [r7, #16]
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	371c      	adds	r7, #28
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr
	...

0800f988 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	70da      	strb	r2, [r3, #3]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f99e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f9a0:	6839      	ldr	r1, [r7, #0]
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f7ff f8dc 	bl	800eb60 <move_window>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <check_fs+0x2a>
 800f9ae:	2304      	movs	r3, #4
 800f9b0:	e038      	b.n	800fa24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	3330      	adds	r3, #48	@ 0x30
 800f9b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fe fe20 	bl	800e600 <ld_word>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d001      	beq.n	800f9d0 <check_fs+0x48>
 800f9cc:	2303      	movs	r3, #3
 800f9ce:	e029      	b.n	800fa24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f9d6:	2be9      	cmp	r3, #233	@ 0xe9
 800f9d8:	d009      	beq.n	800f9ee <check_fs+0x66>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f9e0:	2beb      	cmp	r3, #235	@ 0xeb
 800f9e2:	d11e      	bne.n	800fa22 <check_fs+0x9a>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f9ea:	2b90      	cmp	r3, #144	@ 0x90
 800f9ec:	d119      	bne.n	800fa22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	3330      	adds	r3, #48	@ 0x30
 800f9f2:	3336      	adds	r3, #54	@ 0x36
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fe fe1b 	bl	800e630 <ld_dword>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fa00:	4a0a      	ldr	r2, [pc, #40]	@ (800fa2c <check_fs+0xa4>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d101      	bne.n	800fa0a <check_fs+0x82>
 800fa06:	2300      	movs	r3, #0
 800fa08:	e00c      	b.n	800fa24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	3330      	adds	r3, #48	@ 0x30
 800fa0e:	3352      	adds	r3, #82	@ 0x52
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fe fe0d 	bl	800e630 <ld_dword>
 800fa16:	4603      	mov	r3, r0
 800fa18:	4a05      	ldr	r2, [pc, #20]	@ (800fa30 <check_fs+0xa8>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d101      	bne.n	800fa22 <check_fs+0x9a>
 800fa1e:	2300      	movs	r3, #0
 800fa20:	e000      	b.n	800fa24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fa22:	2302      	movs	r3, #2
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	00544146 	.word	0x00544146
 800fa30:	33544146 	.word	0x33544146

0800fa34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b096      	sub	sp, #88	@ 0x58
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2200      	movs	r2, #0
 800fa46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f7ff ff58 	bl	800f8fe <get_ldnumber>
 800fa4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fa50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	da01      	bge.n	800fa5a <find_volume+0x26>
 800fa56:	230b      	movs	r3, #11
 800fa58:	e22d      	b.n	800feb6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fa5a:	4aa1      	ldr	r2, [pc, #644]	@ (800fce0 <find_volume+0x2ac>)
 800fa5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa62:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fa64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d101      	bne.n	800fa6e <find_volume+0x3a>
 800fa6a:	230c      	movs	r3, #12
 800fa6c:	e223      	b.n	800feb6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fa74:	79fb      	ldrb	r3, [r7, #7]
 800fa76:	f023 0301 	bic.w	r3, r3, #1
 800fa7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d01a      	beq.n	800faba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa86:	785b      	ldrb	r3, [r3, #1]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fe fd19 	bl	800e4c0 <disk_status>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fa94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fa98:	f003 0301 	and.w	r3, r3, #1
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d10c      	bne.n	800faba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800faa0:	79fb      	ldrb	r3, [r7, #7]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d007      	beq.n	800fab6 <find_volume+0x82>
 800faa6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800faaa:	f003 0304 	and.w	r3, r3, #4
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d001      	beq.n	800fab6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fab2:	230a      	movs	r3, #10
 800fab4:	e1ff      	b.n	800feb6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fab6:	2300      	movs	r3, #0
 800fab8:	e1fd      	b.n	800feb6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800faba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fabc:	2200      	movs	r2, #0
 800fabe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fac2:	b2da      	uxtb	r2, r3
 800fac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faca:	785b      	ldrb	r3, [r3, #1]
 800facc:	4618      	mov	r0, r3
 800face:	f7fe fd11 	bl	800e4f4 <disk_initialize>
 800fad2:	4603      	mov	r3, r0
 800fad4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fad8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fadc:	f003 0301 	and.w	r3, r3, #1
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d001      	beq.n	800fae8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fae4:	2303      	movs	r3, #3
 800fae6:	e1e6      	b.n	800feb6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fae8:	79fb      	ldrb	r3, [r7, #7]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d007      	beq.n	800fafe <find_volume+0xca>
 800faee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800faf2:	f003 0304 	and.w	r3, r3, #4
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d001      	beq.n	800fafe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fafa:	230a      	movs	r3, #10
 800fafc:	e1db      	b.n	800feb6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fafe:	2300      	movs	r3, #0
 800fb00:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fb02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fb04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fb06:	f7ff ff3f 	bl	800f988 <check_fs>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fb10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fb14:	2b02      	cmp	r3, #2
 800fb16:	d149      	bne.n	800fbac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fb18:	2300      	movs	r3, #0
 800fb1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fb1c:	e01e      	b.n	800fb5c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fb24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb26:	011b      	lsls	r3, r3, #4
 800fb28:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800fb2c:	4413      	add	r3, r2
 800fb2e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb32:	3304      	adds	r3, #4
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d006      	beq.n	800fb48 <find_volume+0x114>
 800fb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb3c:	3308      	adds	r3, #8
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7fe fd76 	bl	800e630 <ld_dword>
 800fb44:	4602      	mov	r2, r0
 800fb46:	e000      	b.n	800fb4a <find_volume+0x116>
 800fb48:	2200      	movs	r2, #0
 800fb4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	3358      	adds	r3, #88	@ 0x58
 800fb50:	443b      	add	r3, r7
 800fb52:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fb56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb58:	3301      	adds	r3, #1
 800fb5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fb5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb5e:	2b03      	cmp	r3, #3
 800fb60:	d9dd      	bls.n	800fb1e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fb62:	2300      	movs	r3, #0
 800fb64:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800fb66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <find_volume+0x13e>
 800fb6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fb72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	3358      	adds	r3, #88	@ 0x58
 800fb78:	443b      	add	r3, r7
 800fb7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fb7e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fb80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d005      	beq.n	800fb92 <find_volume+0x15e>
 800fb86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fb88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fb8a:	f7ff fefd 	bl	800f988 <check_fs>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	e000      	b.n	800fb94 <find_volume+0x160>
 800fb92:	2303      	movs	r3, #3
 800fb94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fb98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d905      	bls.n	800fbac <find_volume+0x178>
 800fba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fba2:	3301      	adds	r3, #1
 800fba4:	643b      	str	r3, [r7, #64]	@ 0x40
 800fba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fba8:	2b03      	cmp	r3, #3
 800fbaa:	d9e2      	bls.n	800fb72 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fbac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fbb0:	2b04      	cmp	r3, #4
 800fbb2:	d101      	bne.n	800fbb8 <find_volume+0x184>
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	e17e      	b.n	800feb6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fbb8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d901      	bls.n	800fbc4 <find_volume+0x190>
 800fbc0:	230d      	movs	r3, #13
 800fbc2:	e178      	b.n	800feb6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbc6:	3330      	adds	r3, #48	@ 0x30
 800fbc8:	330b      	adds	r3, #11
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fe fd18 	bl	800e600 <ld_word>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbd6:	d001      	beq.n	800fbdc <find_volume+0x1a8>
 800fbd8:	230d      	movs	r3, #13
 800fbda:	e16c      	b.n	800feb6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbde:	3330      	adds	r3, #48	@ 0x30
 800fbe0:	3316      	adds	r3, #22
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f7fe fd0c 	bl	800e600 <ld_word>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fbec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d106      	bne.n	800fc00 <find_volume+0x1cc>
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf4:	3330      	adds	r3, #48	@ 0x30
 800fbf6:	3324      	adds	r3, #36	@ 0x24
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7fe fd19 	bl	800e630 <ld_dword>
 800fbfe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800fc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fc04:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fc06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc08:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc12:	789b      	ldrb	r3, [r3, #2]
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d005      	beq.n	800fc24 <find_volume+0x1f0>
 800fc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc1a:	789b      	ldrb	r3, [r3, #2]
 800fc1c:	2b02      	cmp	r3, #2
 800fc1e:	d001      	beq.n	800fc24 <find_volume+0x1f0>
 800fc20:	230d      	movs	r3, #13
 800fc22:	e148      	b.n	800feb6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc26:	789b      	ldrb	r3, [r3, #2]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc2c:	fb02 f303 	mul.w	r3, r2, r3
 800fc30:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fc38:	461a      	mov	r2, r3
 800fc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc40:	895b      	ldrh	r3, [r3, #10]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d008      	beq.n	800fc58 <find_volume+0x224>
 800fc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc48:	895b      	ldrh	r3, [r3, #10]
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc4e:	895b      	ldrh	r3, [r3, #10]
 800fc50:	3b01      	subs	r3, #1
 800fc52:	4013      	ands	r3, r2
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d001      	beq.n	800fc5c <find_volume+0x228>
 800fc58:	230d      	movs	r3, #13
 800fc5a:	e12c      	b.n	800feb6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc5e:	3330      	adds	r3, #48	@ 0x30
 800fc60:	3311      	adds	r3, #17
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe fccc 	bl	800e600 <ld_word>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc72:	891b      	ldrh	r3, [r3, #8]
 800fc74:	f003 030f 	and.w	r3, r3, #15
 800fc78:	b29b      	uxth	r3, r3
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d001      	beq.n	800fc82 <find_volume+0x24e>
 800fc7e:	230d      	movs	r3, #13
 800fc80:	e119      	b.n	800feb6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fc82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc84:	3330      	adds	r3, #48	@ 0x30
 800fc86:	3313      	adds	r3, #19
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fe fcb9 	bl	800e600 <ld_word>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fc92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d106      	bne.n	800fca6 <find_volume+0x272>
 800fc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc9a:	3330      	adds	r3, #48	@ 0x30
 800fc9c:	3320      	adds	r3, #32
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fe fcc6 	bl	800e630 <ld_dword>
 800fca4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca8:	3330      	adds	r3, #48	@ 0x30
 800fcaa:	330e      	adds	r3, #14
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7fe fca7 	bl	800e600 <ld_word>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fcb6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d101      	bne.n	800fcc0 <find_volume+0x28c>
 800fcbc:	230d      	movs	r3, #13
 800fcbe:	e0fa      	b.n	800feb6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fcc0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fcc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcc4:	4413      	add	r3, r2
 800fcc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcc8:	8912      	ldrh	r2, [r2, #8]
 800fcca:	0912      	lsrs	r2, r2, #4
 800fccc:	b292      	uxth	r2, r2
 800fcce:	4413      	add	r3, r2
 800fcd0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fcd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d204      	bcs.n	800fce4 <find_volume+0x2b0>
 800fcda:	230d      	movs	r3, #13
 800fcdc:	e0eb      	b.n	800feb6 <find_volume+0x482>
 800fcde:	bf00      	nop
 800fce0:	20000c5c 	.word	0x20000c5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fce8:	1ad3      	subs	r3, r2, r3
 800fcea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcec:	8952      	ldrh	r2, [r2, #10]
 800fcee:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcf2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d101      	bne.n	800fcfe <find_volume+0x2ca>
 800fcfa:	230d      	movs	r3, #13
 800fcfc:	e0db      	b.n	800feb6 <find_volume+0x482>
		fmt = FS_FAT32;
 800fcfe:	2303      	movs	r3, #3
 800fd00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd06:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d802      	bhi.n	800fd14 <find_volume+0x2e0>
 800fd0e:	2302      	movs	r3, #2
 800fd10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd16:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d802      	bhi.n	800fd24 <find_volume+0x2f0>
 800fd1e:	2301      	movs	r3, #1
 800fd20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd26:	1c9a      	adds	r2, r3, #2
 800fd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd2a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fd30:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fd32:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fd34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd36:	441a      	add	r2, r3
 800fd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fd3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fd3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd40:	441a      	add	r2, r3
 800fd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd44:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800fd46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fd4a:	2b03      	cmp	r3, #3
 800fd4c:	d11e      	bne.n	800fd8c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd50:	3330      	adds	r3, #48	@ 0x30
 800fd52:	332a      	adds	r3, #42	@ 0x2a
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fe fc53 	bl	800e600 <ld_word>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d001      	beq.n	800fd64 <find_volume+0x330>
 800fd60:	230d      	movs	r3, #13
 800fd62:	e0a8      	b.n	800feb6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd66:	891b      	ldrh	r3, [r3, #8]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d001      	beq.n	800fd70 <find_volume+0x33c>
 800fd6c:	230d      	movs	r3, #13
 800fd6e:	e0a2      	b.n	800feb6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd72:	3330      	adds	r3, #48	@ 0x30
 800fd74:	332c      	adds	r3, #44	@ 0x2c
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fe fc5a 	bl	800e630 <ld_dword>
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd80:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd8a:	e01f      	b.n	800fdcc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd8e:	891b      	ldrh	r3, [r3, #8]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d101      	bne.n	800fd98 <find_volume+0x364>
 800fd94:	230d      	movs	r3, #13
 800fd96:	e08e      	b.n	800feb6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd9a:	6a1a      	ldr	r2, [r3, #32]
 800fd9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd9e:	441a      	add	r2, r3
 800fda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fda2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fda4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fda8:	2b02      	cmp	r3, #2
 800fdaa:	d103      	bne.n	800fdb4 <find_volume+0x380>
 800fdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdae:	695b      	ldr	r3, [r3, #20]
 800fdb0:	005b      	lsls	r3, r3, #1
 800fdb2:	e00a      	b.n	800fdca <find_volume+0x396>
 800fdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb6:	695a      	ldr	r2, [r3, #20]
 800fdb8:	4613      	mov	r3, r2
 800fdba:	005b      	lsls	r3, r3, #1
 800fdbc:	4413      	add	r3, r2
 800fdbe:	085a      	lsrs	r2, r3, #1
 800fdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc2:	695b      	ldr	r3, [r3, #20]
 800fdc4:	f003 0301 	and.w	r3, r3, #1
 800fdc8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fdca:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdce:	699a      	ldr	r2, [r3, #24]
 800fdd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdd2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800fdd6:	0a5b      	lsrs	r3, r3, #9
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d201      	bcs.n	800fde0 <find_volume+0x3ac>
 800fddc:	230d      	movs	r3, #13
 800fdde:	e06a      	b.n	800feb6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fde6:	611a      	str	r2, [r3, #16]
 800fde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdea:	691a      	ldr	r2, [r3, #16]
 800fdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdee:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf2:	2280      	movs	r2, #128	@ 0x80
 800fdf4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fdf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fdfa:	2b03      	cmp	r3, #3
 800fdfc:	d149      	bne.n	800fe92 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe00:	3330      	adds	r3, #48	@ 0x30
 800fe02:	3330      	adds	r3, #48	@ 0x30
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7fe fbfb 	bl	800e600 <ld_word>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d140      	bne.n	800fe92 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fe10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe12:	3301      	adds	r3, #1
 800fe14:	4619      	mov	r1, r3
 800fe16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fe18:	f7fe fea2 	bl	800eb60 <move_window>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d137      	bne.n	800fe92 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fe22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe24:	2200      	movs	r2, #0
 800fe26:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fe28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe2a:	3330      	adds	r3, #48	@ 0x30
 800fe2c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7fe fbe5 	bl	800e600 <ld_word>
 800fe36:	4603      	mov	r3, r0
 800fe38:	461a      	mov	r2, r3
 800fe3a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d127      	bne.n	800fe92 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fe42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe44:	3330      	adds	r3, #48	@ 0x30
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fe fbf2 	bl	800e630 <ld_dword>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	4a1c      	ldr	r2, [pc, #112]	@ (800fec0 <find_volume+0x48c>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d11e      	bne.n	800fe92 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fe54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe56:	3330      	adds	r3, #48	@ 0x30
 800fe58:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7fe fbe7 	bl	800e630 <ld_dword>
 800fe62:	4603      	mov	r3, r0
 800fe64:	4a17      	ldr	r2, [pc, #92]	@ (800fec4 <find_volume+0x490>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d113      	bne.n	800fe92 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fe6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe6c:	3330      	adds	r3, #48	@ 0x30
 800fe6e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fe fbdc 	bl	800e630 <ld_dword>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe7c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fe7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe80:	3330      	adds	r3, #48	@ 0x30
 800fe82:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fe fbd2 	bl	800e630 <ld_dword>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe90:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fe92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe94:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fe98:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fe9a:	4b0b      	ldr	r3, [pc, #44]	@ (800fec8 <find_volume+0x494>)
 800fe9c:	881b      	ldrh	r3, [r3, #0]
 800fe9e:	3301      	adds	r3, #1
 800fea0:	b29a      	uxth	r2, r3
 800fea2:	4b09      	ldr	r3, [pc, #36]	@ (800fec8 <find_volume+0x494>)
 800fea4:	801a      	strh	r2, [r3, #0]
 800fea6:	4b08      	ldr	r3, [pc, #32]	@ (800fec8 <find_volume+0x494>)
 800fea8:	881a      	ldrh	r2, [r3, #0]
 800feaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800feae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800feb0:	f7fe fdee 	bl	800ea90 <clear_lock>
#endif
	return FR_OK;
 800feb4:	2300      	movs	r3, #0
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3758      	adds	r7, #88	@ 0x58
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	41615252 	.word	0x41615252
 800fec4:	61417272 	.word	0x61417272
 800fec8:	20000c60 	.word	0x20000c60

0800fecc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b084      	sub	sp, #16
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fed6:	2309      	movs	r3, #9
 800fed8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d01c      	beq.n	800ff1a <validate+0x4e>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d018      	beq.n	800ff1a <validate+0x4e>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d013      	beq.n	800ff1a <validate+0x4e>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	889a      	ldrh	r2, [r3, #4]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	88db      	ldrh	r3, [r3, #6]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d10c      	bne.n	800ff1a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	785b      	ldrb	r3, [r3, #1]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fe fada 	bl	800e4c0 <disk_status>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d101      	bne.n	800ff1a <validate+0x4e>
			res = FR_OK;
 800ff16:	2300      	movs	r3, #0
 800ff18:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ff1a:	7bfb      	ldrb	r3, [r7, #15]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d102      	bne.n	800ff26 <validate+0x5a>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	e000      	b.n	800ff28 <validate+0x5c>
 800ff26:	2300      	movs	r3, #0
 800ff28:	683a      	ldr	r2, [r7, #0]
 800ff2a:	6013      	str	r3, [r2, #0]
	return res;
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3710      	adds	r7, #16
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
	...

0800ff38 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b088      	sub	sp, #32
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	4613      	mov	r3, r2
 800ff44:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ff4a:	f107 0310 	add.w	r3, r7, #16
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7ff fcd5 	bl	800f8fe <get_ldnumber>
 800ff54:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	da01      	bge.n	800ff60 <f_mount+0x28>
 800ff5c:	230b      	movs	r3, #11
 800ff5e:	e02b      	b.n	800ffb8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ff60:	4a17      	ldr	r2, [pc, #92]	@ (800ffc0 <f_mount+0x88>)
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff68:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ff6a:	69bb      	ldr	r3, [r7, #24]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d005      	beq.n	800ff7c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ff70:	69b8      	ldr	r0, [r7, #24]
 800ff72:	f7fe fd8d 	bl	800ea90 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d002      	beq.n	800ff88 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2200      	movs	r2, #0
 800ff86:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ff88:	68fa      	ldr	r2, [r7, #12]
 800ff8a:	490d      	ldr	r1, [pc, #52]	@ (800ffc0 <f_mount+0x88>)
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d002      	beq.n	800ff9e <f_mount+0x66>
 800ff98:	79fb      	ldrb	r3, [r7, #7]
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d001      	beq.n	800ffa2 <f_mount+0x6a>
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	e00a      	b.n	800ffb8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ffa2:	f107 010c 	add.w	r1, r7, #12
 800ffa6:	f107 0308 	add.w	r3, r7, #8
 800ffaa:	2200      	movs	r2, #0
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7ff fd41 	bl	800fa34 <find_volume>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3720      	adds	r7, #32
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	20000c5c 	.word	0x20000c5c

0800ffc4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b098      	sub	sp, #96	@ 0x60
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	4613      	mov	r3, r2
 800ffd0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d101      	bne.n	800ffdc <f_open+0x18>
 800ffd8:	2309      	movs	r3, #9
 800ffda:	e1a9      	b.n	8010330 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ffdc:	79fb      	ldrb	r3, [r7, #7]
 800ffde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ffe2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ffe4:	79fa      	ldrb	r2, [r7, #7]
 800ffe6:	f107 0110 	add.w	r1, r7, #16
 800ffea:	f107 0308 	add.w	r3, r7, #8
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7ff fd20 	bl	800fa34 <find_volume>
 800fff4:	4603      	mov	r3, r0
 800fff6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800fffa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fffe:	2b00      	cmp	r3, #0
 8010000:	f040 818d 	bne.w	801031e <f_open+0x35a>
		dj.obj.fs = fs;
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010008:	68ba      	ldr	r2, [r7, #8]
 801000a:	f107 0314 	add.w	r3, r7, #20
 801000e:	4611      	mov	r1, r2
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff fc03 	bl	800f81c <follow_path>
 8010016:	4603      	mov	r3, r0
 8010018:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801001c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010020:	2b00      	cmp	r3, #0
 8010022:	d118      	bne.n	8010056 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010024:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010028:	b25b      	sxtb	r3, r3
 801002a:	2b00      	cmp	r3, #0
 801002c:	da03      	bge.n	8010036 <f_open+0x72>
				res = FR_INVALID_NAME;
 801002e:	2306      	movs	r3, #6
 8010030:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010034:	e00f      	b.n	8010056 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010036:	79fb      	ldrb	r3, [r7, #7]
 8010038:	2b01      	cmp	r3, #1
 801003a:	bf8c      	ite	hi
 801003c:	2301      	movhi	r3, #1
 801003e:	2300      	movls	r3, #0
 8010040:	b2db      	uxtb	r3, r3
 8010042:	461a      	mov	r2, r3
 8010044:	f107 0314 	add.w	r3, r7, #20
 8010048:	4611      	mov	r1, r2
 801004a:	4618      	mov	r0, r3
 801004c:	f7fe fbd8 	bl	800e800 <chk_lock>
 8010050:	4603      	mov	r3, r0
 8010052:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010056:	79fb      	ldrb	r3, [r7, #7]
 8010058:	f003 031c 	and.w	r3, r3, #28
 801005c:	2b00      	cmp	r3, #0
 801005e:	d07f      	beq.n	8010160 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010060:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010064:	2b00      	cmp	r3, #0
 8010066:	d017      	beq.n	8010098 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010068:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801006c:	2b04      	cmp	r3, #4
 801006e:	d10e      	bne.n	801008e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010070:	f7fe fc22 	bl	800e8b8 <enq_lock>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d006      	beq.n	8010088 <f_open+0xc4>
 801007a:	f107 0314 	add.w	r3, r7, #20
 801007e:	4618      	mov	r0, r3
 8010080:	f7ff fb06 	bl	800f690 <dir_register>
 8010084:	4603      	mov	r3, r0
 8010086:	e000      	b.n	801008a <f_open+0xc6>
 8010088:	2312      	movs	r3, #18
 801008a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801008e:	79fb      	ldrb	r3, [r7, #7]
 8010090:	f043 0308 	orr.w	r3, r3, #8
 8010094:	71fb      	strb	r3, [r7, #7]
 8010096:	e010      	b.n	80100ba <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010098:	7ebb      	ldrb	r3, [r7, #26]
 801009a:	f003 0311 	and.w	r3, r3, #17
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d003      	beq.n	80100aa <f_open+0xe6>
					res = FR_DENIED;
 80100a2:	2307      	movs	r3, #7
 80100a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80100a8:	e007      	b.n	80100ba <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80100aa:	79fb      	ldrb	r3, [r7, #7]
 80100ac:	f003 0304 	and.w	r3, r3, #4
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d002      	beq.n	80100ba <f_open+0xf6>
 80100b4:	2308      	movs	r3, #8
 80100b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80100ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d168      	bne.n	8010194 <f_open+0x1d0>
 80100c2:	79fb      	ldrb	r3, [r7, #7]
 80100c4:	f003 0308 	and.w	r3, r3, #8
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d063      	beq.n	8010194 <f_open+0x1d0>
				dw = GET_FATTIME();
 80100cc:	f7fb ff36 	bl	800bf3c <get_fattime>
 80100d0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80100d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100d4:	330e      	adds	r3, #14
 80100d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fe fae7 	bl	800e6ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80100de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100e0:	3316      	adds	r3, #22
 80100e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fe fae1 	bl	800e6ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80100ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100ec:	330b      	adds	r3, #11
 80100ee:	2220      	movs	r2, #32
 80100f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80100f6:	4611      	mov	r1, r2
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7ff fa35 	bl	800f568 <ld_clust>
 80100fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010104:	2200      	movs	r2, #0
 8010106:	4618      	mov	r0, r3
 8010108:	f7ff fa4d 	bl	800f5a6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801010c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801010e:	331c      	adds	r3, #28
 8010110:	2100      	movs	r1, #0
 8010112:	4618      	mov	r0, r3
 8010114:	f7fe faca 	bl	800e6ac <st_dword>
					fs->wflag = 1;
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	2201      	movs	r2, #1
 801011c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801011e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010120:	2b00      	cmp	r3, #0
 8010122:	d037      	beq.n	8010194 <f_open+0x1d0>
						dw = fs->winsect;
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010128:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801012a:	f107 0314 	add.w	r3, r7, #20
 801012e:	2200      	movs	r2, #0
 8010130:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8010132:	4618      	mov	r0, r3
 8010134:	f7fe ff60 	bl	800eff8 <remove_chain>
 8010138:	4603      	mov	r3, r0
 801013a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801013e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010142:	2b00      	cmp	r3, #0
 8010144:	d126      	bne.n	8010194 <f_open+0x1d0>
							res = move_window(fs, dw);
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801014a:	4618      	mov	r0, r3
 801014c:	f7fe fd08 	bl	800eb60 <move_window>
 8010150:	4603      	mov	r3, r0
 8010152:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801015a:	3a01      	subs	r2, #1
 801015c:	60da      	str	r2, [r3, #12]
 801015e:	e019      	b.n	8010194 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010160:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010164:	2b00      	cmp	r3, #0
 8010166:	d115      	bne.n	8010194 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010168:	7ebb      	ldrb	r3, [r7, #26]
 801016a:	f003 0310 	and.w	r3, r3, #16
 801016e:	2b00      	cmp	r3, #0
 8010170:	d003      	beq.n	801017a <f_open+0x1b6>
					res = FR_NO_FILE;
 8010172:	2304      	movs	r3, #4
 8010174:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010178:	e00c      	b.n	8010194 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801017a:	79fb      	ldrb	r3, [r7, #7]
 801017c:	f003 0302 	and.w	r3, r3, #2
 8010180:	2b00      	cmp	r3, #0
 8010182:	d007      	beq.n	8010194 <f_open+0x1d0>
 8010184:	7ebb      	ldrb	r3, [r7, #26]
 8010186:	f003 0301 	and.w	r3, r3, #1
 801018a:	2b00      	cmp	r3, #0
 801018c:	d002      	beq.n	8010194 <f_open+0x1d0>
						res = FR_DENIED;
 801018e:	2307      	movs	r3, #7
 8010190:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010194:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010198:	2b00      	cmp	r3, #0
 801019a:	d126      	bne.n	80101ea <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801019c:	79fb      	ldrb	r3, [r7, #7]
 801019e:	f003 0308 	and.w	r3, r3, #8
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d003      	beq.n	80101ae <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80101a6:	79fb      	ldrb	r3, [r7, #7]
 80101a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80101b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80101bc:	79fb      	ldrb	r3, [r7, #7]
 80101be:	2b01      	cmp	r3, #1
 80101c0:	bf8c      	ite	hi
 80101c2:	2301      	movhi	r3, #1
 80101c4:	2300      	movls	r3, #0
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	461a      	mov	r2, r3
 80101ca:	f107 0314 	add.w	r3, r7, #20
 80101ce:	4611      	mov	r1, r2
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe fb93 	bl	800e8fc <inc_lock>
 80101d6:	4602      	mov	r2, r0
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	691b      	ldr	r3, [r3, #16]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d102      	bne.n	80101ea <f_open+0x226>
 80101e4:	2302      	movs	r3, #2
 80101e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80101ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	f040 8095 	bne.w	801031e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101f8:	4611      	mov	r1, r2
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7ff f9b4 	bl	800f568 <ld_clust>
 8010200:	4602      	mov	r2, r0
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010208:	331c      	adds	r3, #28
 801020a:	4618      	mov	r0, r3
 801020c:	f7fe fa10 	bl	800e630 <ld_dword>
 8010210:	4602      	mov	r2, r0
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2200      	movs	r2, #0
 801021a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801021c:	693a      	ldr	r2, [r7, #16]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	88da      	ldrh	r2, [r3, #6]
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	79fa      	ldrb	r2, [r7, #7]
 801022e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2200      	movs	r2, #0
 8010234:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2200      	movs	r2, #0
 801023a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2200      	movs	r2, #0
 8010240:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	3330      	adds	r3, #48	@ 0x30
 8010246:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801024a:	2100      	movs	r1, #0
 801024c:	4618      	mov	r0, r3
 801024e:	f7fe fa7a 	bl	800e746 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010252:	79fb      	ldrb	r3, [r7, #7]
 8010254:	f003 0320 	and.w	r3, r3, #32
 8010258:	2b00      	cmp	r3, #0
 801025a:	d060      	beq.n	801031e <f_open+0x35a>
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	68db      	ldr	r3, [r3, #12]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d05c      	beq.n	801031e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	68da      	ldr	r2, [r3, #12]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	895b      	ldrh	r3, [r3, #10]
 8010270:	025b      	lsls	r3, r3, #9
 8010272:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	689b      	ldr	r3, [r3, #8]
 8010278:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	68db      	ldr	r3, [r3, #12]
 801027e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010280:	e016      	b.n	80102b0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010286:	4618      	mov	r0, r3
 8010288:	f7fe fd25 	bl	800ecd6 <get_fat>
 801028c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801028e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010290:	2b01      	cmp	r3, #1
 8010292:	d802      	bhi.n	801029a <f_open+0x2d6>
 8010294:	2302      	movs	r3, #2
 8010296:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801029a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801029c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80102a0:	d102      	bne.n	80102a8 <f_open+0x2e4>
 80102a2:	2301      	movs	r3, #1
 80102a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80102a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80102aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102ac:	1ad3      	subs	r3, r2, r3
 80102ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80102b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d103      	bne.n	80102c0 <f_open+0x2fc>
 80102b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80102ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80102bc:	429a      	cmp	r2, r3
 80102be:	d8e0      	bhi.n	8010282 <f_open+0x2be>
				}
				fp->clust = clst;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80102c4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80102c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d127      	bne.n	801031e <f_open+0x35a>
 80102ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d022      	beq.n	801031e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fe fcdb 	bl	800ec98 <clust2sect>
 80102e2:	6478      	str	r0, [r7, #68]	@ 0x44
 80102e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d103      	bne.n	80102f2 <f_open+0x32e>
						res = FR_INT_ERR;
 80102ea:	2302      	movs	r3, #2
 80102ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80102f0:	e015      	b.n	801031e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80102f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80102f4:	0a5a      	lsrs	r2, r3, #9
 80102f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102f8:	441a      	add	r2, r3
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	7858      	ldrb	r0, [r3, #1]
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	6a1a      	ldr	r2, [r3, #32]
 801030c:	2301      	movs	r3, #1
 801030e:	f7fe f919 	bl	800e544 <disk_read>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	d002      	beq.n	801031e <f_open+0x35a>
 8010318:	2301      	movs	r3, #1
 801031a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801031e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010322:	2b00      	cmp	r3, #0
 8010324:	d002      	beq.n	801032c <f_open+0x368>
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801032c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8010330:	4618      	mov	r0, r3
 8010332:	3760      	adds	r7, #96	@ 0x60
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b08c      	sub	sp, #48	@ 0x30
 801033c:	af00      	add	r7, sp, #0
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	607a      	str	r2, [r7, #4]
 8010344:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	2200      	movs	r2, #0
 801034e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f107 0210 	add.w	r2, r7, #16
 8010356:	4611      	mov	r1, r2
 8010358:	4618      	mov	r0, r3
 801035a:	f7ff fdb7 	bl	800fecc <validate>
 801035e:	4603      	mov	r3, r0
 8010360:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010364:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010368:	2b00      	cmp	r3, #0
 801036a:	d107      	bne.n	801037c <f_write+0x44>
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	7d5b      	ldrb	r3, [r3, #21]
 8010370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010374:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010378:	2b00      	cmp	r3, #0
 801037a:	d002      	beq.n	8010382 <f_write+0x4a>
 801037c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010380:	e14b      	b.n	801061a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	7d1b      	ldrb	r3, [r3, #20]
 8010386:	f003 0302 	and.w	r3, r3, #2
 801038a:	2b00      	cmp	r3, #0
 801038c:	d101      	bne.n	8010392 <f_write+0x5a>
 801038e:	2307      	movs	r3, #7
 8010390:	e143      	b.n	801061a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	699a      	ldr	r2, [r3, #24]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	441a      	add	r2, r3
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	699b      	ldr	r3, [r3, #24]
 801039e:	429a      	cmp	r2, r3
 80103a0:	f080 812d 	bcs.w	80105fe <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	699b      	ldr	r3, [r3, #24]
 80103a8:	43db      	mvns	r3, r3
 80103aa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80103ac:	e127      	b.n	80105fe <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	699b      	ldr	r3, [r3, #24]
 80103b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f040 80e3 	bne.w	8010582 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	699b      	ldr	r3, [r3, #24]
 80103c0:	0a5b      	lsrs	r3, r3, #9
 80103c2:	693a      	ldr	r2, [r7, #16]
 80103c4:	8952      	ldrh	r2, [r2, #10]
 80103c6:	3a01      	subs	r2, #1
 80103c8:	4013      	ands	r3, r2
 80103ca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d143      	bne.n	801045a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	699b      	ldr	r3, [r3, #24]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d10c      	bne.n	80103f4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	689b      	ldr	r3, [r3, #8]
 80103de:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80103e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d11a      	bne.n	801041c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2100      	movs	r1, #0
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fe fe69 	bl	800f0c2 <create_chain>
 80103f0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80103f2:	e013      	b.n	801041c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d007      	beq.n	801040c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	699b      	ldr	r3, [r3, #24]
 8010400:	4619      	mov	r1, r3
 8010402:	68f8      	ldr	r0, [r7, #12]
 8010404:	f7fe fef5 	bl	800f1f2 <clmt_clust>
 8010408:	62b8      	str	r0, [r7, #40]	@ 0x28
 801040a:	e007      	b.n	801041c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801040c:	68fa      	ldr	r2, [r7, #12]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	69db      	ldr	r3, [r3, #28]
 8010412:	4619      	mov	r1, r3
 8010414:	4610      	mov	r0, r2
 8010416:	f7fe fe54 	bl	800f0c2 <create_chain>
 801041a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801041c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801041e:	2b00      	cmp	r3, #0
 8010420:	f000 80f2 	beq.w	8010608 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010426:	2b01      	cmp	r3, #1
 8010428:	d104      	bne.n	8010434 <f_write+0xfc>
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2202      	movs	r2, #2
 801042e:	755a      	strb	r2, [r3, #21]
 8010430:	2302      	movs	r3, #2
 8010432:	e0f2      	b.n	801061a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801043a:	d104      	bne.n	8010446 <f_write+0x10e>
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	2201      	movs	r2, #1
 8010440:	755a      	strb	r2, [r3, #21]
 8010442:	2301      	movs	r3, #1
 8010444:	e0e9      	b.n	801061a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801044a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	689b      	ldr	r3, [r3, #8]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d102      	bne.n	801045a <f_write+0x122>
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010458:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	7d1b      	ldrb	r3, [r3, #20]
 801045e:	b25b      	sxtb	r3, r3
 8010460:	2b00      	cmp	r3, #0
 8010462:	da18      	bge.n	8010496 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	7858      	ldrb	r0, [r3, #1]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	6a1a      	ldr	r2, [r3, #32]
 8010472:	2301      	movs	r3, #1
 8010474:	f7fe f886 	bl	800e584 <disk_write>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d004      	beq.n	8010488 <f_write+0x150>
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2201      	movs	r2, #1
 8010482:	755a      	strb	r2, [r3, #21]
 8010484:	2301      	movs	r3, #1
 8010486:	e0c8      	b.n	801061a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	7d1b      	ldrb	r3, [r3, #20]
 801048c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010490:	b2da      	uxtb	r2, r3
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010496:	693a      	ldr	r2, [r7, #16]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	69db      	ldr	r3, [r3, #28]
 801049c:	4619      	mov	r1, r3
 801049e:	4610      	mov	r0, r2
 80104a0:	f7fe fbfa 	bl	800ec98 <clust2sect>
 80104a4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d104      	bne.n	80104b6 <f_write+0x17e>
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2202      	movs	r2, #2
 80104b0:	755a      	strb	r2, [r3, #21]
 80104b2:	2302      	movs	r3, #2
 80104b4:	e0b1      	b.n	801061a <f_write+0x2e2>
			sect += csect;
 80104b6:	697a      	ldr	r2, [r7, #20]
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	4413      	add	r3, r2
 80104bc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	0a5b      	lsrs	r3, r3, #9
 80104c2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80104c4:	6a3b      	ldr	r3, [r7, #32]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d03c      	beq.n	8010544 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80104ca:	69ba      	ldr	r2, [r7, #24]
 80104cc:	6a3b      	ldr	r3, [r7, #32]
 80104ce:	4413      	add	r3, r2
 80104d0:	693a      	ldr	r2, [r7, #16]
 80104d2:	8952      	ldrh	r2, [r2, #10]
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d905      	bls.n	80104e4 <f_write+0x1ac>
					cc = fs->csize - csect;
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	895b      	ldrh	r3, [r3, #10]
 80104dc:	461a      	mov	r2, r3
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	7858      	ldrb	r0, [r3, #1]
 80104e8:	6a3b      	ldr	r3, [r7, #32]
 80104ea:	697a      	ldr	r2, [r7, #20]
 80104ec:	69f9      	ldr	r1, [r7, #28]
 80104ee:	f7fe f849 	bl	800e584 <disk_write>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d004      	beq.n	8010502 <f_write+0x1ca>
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	2201      	movs	r2, #1
 80104fc:	755a      	strb	r2, [r3, #21]
 80104fe:	2301      	movs	r3, #1
 8010500:	e08b      	b.n	801061a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	6a1a      	ldr	r2, [r3, #32]
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	6a3a      	ldr	r2, [r7, #32]
 801050c:	429a      	cmp	r2, r3
 801050e:	d915      	bls.n	801053c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	6a1a      	ldr	r2, [r3, #32]
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	1ad3      	subs	r3, r2, r3
 801051e:	025b      	lsls	r3, r3, #9
 8010520:	69fa      	ldr	r2, [r7, #28]
 8010522:	4413      	add	r3, r2
 8010524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010528:	4619      	mov	r1, r3
 801052a:	f7fe f8eb 	bl	800e704 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	7d1b      	ldrb	r3, [r3, #20]
 8010532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010536:	b2da      	uxtb	r2, r3
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801053c:	6a3b      	ldr	r3, [r7, #32]
 801053e:	025b      	lsls	r3, r3, #9
 8010540:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8010542:	e03f      	b.n	80105c4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	6a1b      	ldr	r3, [r3, #32]
 8010548:	697a      	ldr	r2, [r7, #20]
 801054a:	429a      	cmp	r2, r3
 801054c:	d016      	beq.n	801057c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	699a      	ldr	r2, [r3, #24]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010556:	429a      	cmp	r2, r3
 8010558:	d210      	bcs.n	801057c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	7858      	ldrb	r0, [r3, #1]
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010564:	2301      	movs	r3, #1
 8010566:	697a      	ldr	r2, [r7, #20]
 8010568:	f7fd ffec 	bl	800e544 <disk_read>
 801056c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801056e:	2b00      	cmp	r3, #0
 8010570:	d004      	beq.n	801057c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	2201      	movs	r2, #1
 8010576:	755a      	strb	r2, [r3, #21]
 8010578:	2301      	movs	r3, #1
 801057a:	e04e      	b.n	801061a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	697a      	ldr	r2, [r7, #20]
 8010580:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	699b      	ldr	r3, [r3, #24]
 8010586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801058a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801058e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	429a      	cmp	r2, r3
 8010596:	d901      	bls.n	801059c <f_write+0x264>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	699b      	ldr	r3, [r3, #24]
 80105a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105aa:	4413      	add	r3, r2
 80105ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105ae:	69f9      	ldr	r1, [r7, #28]
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7fe f8a7 	bl	800e704 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	7d1b      	ldrb	r3, [r3, #20]
 80105ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80105be:	b2da      	uxtb	r2, r3
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80105c4:	69fa      	ldr	r2, [r7, #28]
 80105c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c8:	4413      	add	r3, r2
 80105ca:	61fb      	str	r3, [r7, #28]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	699a      	ldr	r2, [r3, #24]
 80105d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105d2:	441a      	add	r2, r3
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	619a      	str	r2, [r3, #24]
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	68da      	ldr	r2, [r3, #12]
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	699b      	ldr	r3, [r3, #24]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	bf38      	it	cc
 80105e4:	461a      	movcc	r2, r3
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	60da      	str	r2, [r3, #12]
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	681a      	ldr	r2, [r3, #0]
 80105ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f0:	441a      	add	r2, r3
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	601a      	str	r2, [r3, #0]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105fa:	1ad3      	subs	r3, r2, r3
 80105fc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2b00      	cmp	r3, #0
 8010602:	f47f aed4 	bne.w	80103ae <f_write+0x76>
 8010606:	e000      	b.n	801060a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010608:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	7d1b      	ldrb	r3, [r3, #20]
 801060e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010612:	b2da      	uxtb	r2, r3
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010618:	2300      	movs	r3, #0
}
 801061a:	4618      	mov	r0, r3
 801061c:	3730      	adds	r7, #48	@ 0x30
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b086      	sub	sp, #24
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f107 0208 	add.w	r2, r7, #8
 8010630:	4611      	mov	r1, r2
 8010632:	4618      	mov	r0, r3
 8010634:	f7ff fc4a 	bl	800fecc <validate>
 8010638:	4603      	mov	r3, r0
 801063a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801063c:	7dfb      	ldrb	r3, [r7, #23]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d168      	bne.n	8010714 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	7d1b      	ldrb	r3, [r3, #20]
 8010646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801064a:	2b00      	cmp	r3, #0
 801064c:	d062      	beq.n	8010714 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	7d1b      	ldrb	r3, [r3, #20]
 8010652:	b25b      	sxtb	r3, r3
 8010654:	2b00      	cmp	r3, #0
 8010656:	da15      	bge.n	8010684 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	7858      	ldrb	r0, [r3, #1]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6a1a      	ldr	r2, [r3, #32]
 8010666:	2301      	movs	r3, #1
 8010668:	f7fd ff8c 	bl	800e584 <disk_write>
 801066c:	4603      	mov	r3, r0
 801066e:	2b00      	cmp	r3, #0
 8010670:	d001      	beq.n	8010676 <f_sync+0x54>
 8010672:	2301      	movs	r3, #1
 8010674:	e04f      	b.n	8010716 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	7d1b      	ldrb	r3, [r3, #20]
 801067a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801067e:	b2da      	uxtb	r2, r3
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010684:	f7fb fc5a 	bl	800bf3c <get_fattime>
 8010688:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801068a:	68ba      	ldr	r2, [r7, #8]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010690:	4619      	mov	r1, r3
 8010692:	4610      	mov	r0, r2
 8010694:	f7fe fa64 	bl	800eb60 <move_window>
 8010698:	4603      	mov	r3, r0
 801069a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801069c:	7dfb      	ldrb	r3, [r7, #23]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d138      	bne.n	8010714 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106a6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	330b      	adds	r3, #11
 80106ac:	781a      	ldrb	r2, [r3, #0]
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	330b      	adds	r3, #11
 80106b2:	f042 0220 	orr.w	r2, r2, #32
 80106b6:	b2d2      	uxtb	r2, r2
 80106b8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6818      	ldr	r0, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	689b      	ldr	r3, [r3, #8]
 80106c2:	461a      	mov	r2, r3
 80106c4:	68f9      	ldr	r1, [r7, #12]
 80106c6:	f7fe ff6e 	bl	800f5a6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	f103 021c 	add.w	r2, r3, #28
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	4619      	mov	r1, r3
 80106d6:	4610      	mov	r0, r2
 80106d8:	f7fd ffe8 	bl	800e6ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	3316      	adds	r3, #22
 80106e0:	6939      	ldr	r1, [r7, #16]
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7fd ffe2 	bl	800e6ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	3312      	adds	r3, #18
 80106ec:	2100      	movs	r1, #0
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fd ffc1 	bl	800e676 <st_word>
					fs->wflag = 1;
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	2201      	movs	r2, #1
 80106f8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fe fa5d 	bl	800ebbc <sync_fs>
 8010702:	4603      	mov	r3, r0
 8010704:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	7d1b      	ldrb	r3, [r3, #20]
 801070a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801070e:	b2da      	uxtb	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010714:	7dfb      	ldrb	r3, [r7, #23]
}
 8010716:	4618      	mov	r0, r3
 8010718:	3718      	adds	r7, #24
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}

0801071e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801071e:	b580      	push	{r7, lr}
 8010720:	b084      	sub	sp, #16
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f7ff ff7b 	bl	8010622 <f_sync>
 801072c:	4603      	mov	r3, r0
 801072e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010730:	7bfb      	ldrb	r3, [r7, #15]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d118      	bne.n	8010768 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f107 0208 	add.w	r2, r7, #8
 801073c:	4611      	mov	r1, r2
 801073e:	4618      	mov	r0, r3
 8010740:	f7ff fbc4 	bl	800fecc <validate>
 8010744:	4603      	mov	r3, r0
 8010746:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010748:	7bfb      	ldrb	r3, [r7, #15]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d10c      	bne.n	8010768 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	691b      	ldr	r3, [r3, #16]
 8010752:	4618      	mov	r0, r3
 8010754:	f7fe f960 	bl	800ea18 <dec_lock>
 8010758:	4603      	mov	r3, r0
 801075a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801075c:	7bfb      	ldrb	r3, [r7, #15]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d102      	bne.n	8010768 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010768:	7bfb      	ldrb	r3, [r7, #15]
}
 801076a:	4618      	mov	r0, r3
 801076c:	3710      	adds	r7, #16
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
	...

08010774 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8010774:	b590      	push	{r4, r7, lr}
 8010776:	b09d      	sub	sp, #116	@ 0x74
 8010778:	af00      	add	r7, sp, #0
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	607a      	str	r2, [r7, #4]
 801077e:	603b      	str	r3, [r7, #0]
 8010780:	460b      	mov	r3, r1
 8010782:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8010784:	2301      	movs	r3, #1
 8010786:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8010788:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801078c:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 801078e:	f107 030c 	add.w	r3, r7, #12
 8010792:	4618      	mov	r0, r3
 8010794:	f7ff f8b3 	bl	800f8fe <get_ldnumber>
 8010798:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801079a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801079c:	2b00      	cmp	r3, #0
 801079e:	da02      	bge.n	80107a6 <f_mkfs+0x32>
 80107a0:	230b      	movs	r3, #11
 80107a2:	f000 bc0d 	b.w	8010fc0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80107a6:	4a94      	ldr	r2, [pc, #592]	@ (80109f8 <f_mkfs+0x284>)
 80107a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d005      	beq.n	80107be <f_mkfs+0x4a>
 80107b2:	4a91      	ldr	r2, [pc, #580]	@ (80109f8 <f_mkfs+0x284>)
 80107b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107ba:	2200      	movs	r2, #0
 80107bc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80107be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107c0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80107c4:	2300      	movs	r3, #0
 80107c6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80107ca:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fd fe90 	bl	800e4f4 <disk_initialize>
 80107d4:	4603      	mov	r3, r0
 80107d6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80107da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80107de:	f003 0301 	and.w	r3, r3, #1
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d001      	beq.n	80107ea <f_mkfs+0x76>
 80107e6:	2303      	movs	r3, #3
 80107e8:	e3ea      	b.n	8010fc0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80107ea:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80107ee:	f003 0304 	and.w	r3, r3, #4
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d001      	beq.n	80107fa <f_mkfs+0x86>
 80107f6:	230a      	movs	r3, #10
 80107f8:	e3e2      	b.n	8010fc0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80107fa:	f107 0214 	add.w	r2, r7, #20
 80107fe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8010802:	2103      	movs	r1, #3
 8010804:	4618      	mov	r0, r3
 8010806:	f7fd fedd 	bl	800e5c4 <disk_ioctl>
 801080a:	4603      	mov	r3, r0
 801080c:	2b00      	cmp	r3, #0
 801080e:	d10c      	bne.n	801082a <f_mkfs+0xb6>
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d009      	beq.n	801082a <f_mkfs+0xb6>
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801081c:	d805      	bhi.n	801082a <f_mkfs+0xb6>
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	1e5a      	subs	r2, r3, #1
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	4013      	ands	r3, r2
 8010826:	2b00      	cmp	r3, #0
 8010828:	d001      	beq.n	801082e <f_mkfs+0xba>
 801082a:	2301      	movs	r3, #1
 801082c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 801082e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010832:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d003      	beq.n	8010842 <f_mkfs+0xce>
 801083a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	429a      	cmp	r2, r3
 8010840:	d309      	bcc.n	8010856 <f_mkfs+0xe2>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010848:	d805      	bhi.n	8010856 <f_mkfs+0xe2>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	1e5a      	subs	r2, r3, #1
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4013      	ands	r3, r2
 8010852:	2b00      	cmp	r3, #0
 8010854:	d001      	beq.n	801085a <f_mkfs+0xe6>
 8010856:	2313      	movs	r3, #19
 8010858:	e3b2      	b.n	8010fc0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 801085a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010862:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8010868:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801086a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010872:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8010874:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010878:	fb02 f303 	mul.w	r3, r2, r3
 801087c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 801087e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010880:	2b00      	cmp	r3, #0
 8010882:	d101      	bne.n	8010888 <f_mkfs+0x114>
 8010884:	230e      	movs	r3, #14
 8010886:	e39b      	b.n	8010fc0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8010888:	f107 0210 	add.w	r2, r7, #16
 801088c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8010890:	2101      	movs	r1, #1
 8010892:	4618      	mov	r0, r3
 8010894:	f7fd fe96 	bl	800e5c4 <disk_ioctl>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d001      	beq.n	80108a2 <f_mkfs+0x12e>
 801089e:	2301      	movs	r3, #1
 80108a0:	e38e      	b.n	8010fc0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80108a2:	7afb      	ldrb	r3, [r7, #11]
 80108a4:	f003 0308 	and.w	r3, r3, #8
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d001      	beq.n	80108b0 <f_mkfs+0x13c>
 80108ac:	2300      	movs	r3, #0
 80108ae:	e000      	b.n	80108b2 <f_mkfs+0x13e>
 80108b0:	233f      	movs	r3, #63	@ 0x3f
 80108b2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d901      	bls.n	80108c0 <f_mkfs+0x14c>
 80108bc:	230e      	movs	r3, #14
 80108be:	e37f      	b.n	8010fc0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80108c0:	693a      	ldr	r2, [r7, #16]
 80108c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108c4:	1ad3      	subs	r3, r2, r3
 80108c6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80108cc:	d801      	bhi.n	80108d2 <f_mkfs+0x15e>
 80108ce:	230e      	movs	r3, #14
 80108d0:	e376      	b.n	8010fc0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2b80      	cmp	r3, #128	@ 0x80
 80108d6:	d901      	bls.n	80108dc <f_mkfs+0x168>
 80108d8:	2313      	movs	r3, #19
 80108da:	e371      	b.n	8010fc0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80108dc:	7afb      	ldrb	r3, [r7, #11]
 80108de:	f003 0302 	and.w	r3, r3, #2
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00d      	beq.n	8010902 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80108e6:	7afb      	ldrb	r3, [r7, #11]
 80108e8:	f003 0307 	and.w	r3, r3, #7
 80108ec:	2b02      	cmp	r3, #2
 80108ee:	d004      	beq.n	80108fa <f_mkfs+0x186>
 80108f0:	7afb      	ldrb	r3, [r7, #11]
 80108f2:	f003 0301 	and.w	r3, r3, #1
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d103      	bne.n	8010902 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80108fa:	2303      	movs	r3, #3
 80108fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010900:	e009      	b.n	8010916 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8010902:	7afb      	ldrb	r3, [r7, #11]
 8010904:	f003 0301 	and.w	r3, r3, #1
 8010908:	2b00      	cmp	r3, #0
 801090a:	d101      	bne.n	8010910 <f_mkfs+0x19c>
 801090c:	2313      	movs	r3, #19
 801090e:	e357      	b.n	8010fc0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8010910:	2302      	movs	r3, #2
 8010912:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 801091a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801091e:	2b03      	cmp	r3, #3
 8010920:	d13c      	bne.n	801099c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8010922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010924:	2b00      	cmp	r3, #0
 8010926:	d11b      	bne.n	8010960 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	0c5b      	lsrs	r3, r3, #17
 801092c:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801092e:	2300      	movs	r3, #0
 8010930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010932:	2301      	movs	r3, #1
 8010934:	653b      	str	r3, [r7, #80]	@ 0x50
 8010936:	e005      	b.n	8010944 <f_mkfs+0x1d0>
 8010938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801093a:	3301      	adds	r3, #1
 801093c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801093e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010940:	005b      	lsls	r3, r3, #1
 8010942:	653b      	str	r3, [r7, #80]	@ 0x50
 8010944:	4a2d      	ldr	r2, [pc, #180]	@ (80109fc <f_mkfs+0x288>)
 8010946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d007      	beq.n	8010960 <f_mkfs+0x1ec>
 8010950:	4a2a      	ldr	r2, [pc, #168]	@ (80109fc <f_mkfs+0x288>)
 8010952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010958:	461a      	mov	r2, r3
 801095a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801095c:	4293      	cmp	r3, r2
 801095e:	d2eb      	bcs.n	8010938 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8010960:	693a      	ldr	r2, [r7, #16]
 8010962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010964:	fbb2 f3f3 	udiv	r3, r2, r3
 8010968:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801096a:	6a3b      	ldr	r3, [r7, #32]
 801096c:	3302      	adds	r3, #2
 801096e:	009a      	lsls	r2, r3, #2
 8010970:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010972:	4413      	add	r3, r2
 8010974:	1e5a      	subs	r2, r3, #1
 8010976:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010978:	fbb2 f3f3 	udiv	r3, r2, r3
 801097c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 801097e:	2320      	movs	r3, #32
 8010980:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 8010982:	2300      	movs	r3, #0
 8010984:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8010986:	6a3b      	ldr	r3, [r7, #32]
 8010988:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801098c:	4293      	cmp	r3, r2
 801098e:	d903      	bls.n	8010998 <f_mkfs+0x224>
 8010990:	6a3b      	ldr	r3, [r7, #32]
 8010992:	4a1b      	ldr	r2, [pc, #108]	@ (8010a00 <f_mkfs+0x28c>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d952      	bls.n	8010a3e <f_mkfs+0x2ca>
 8010998:	230e      	movs	r3, #14
 801099a:	e311      	b.n	8010fc0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 801099c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d11b      	bne.n	80109da <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	0b1b      	lsrs	r3, r3, #12
 80109a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80109a8:	2300      	movs	r3, #0
 80109aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109ac:	2301      	movs	r3, #1
 80109ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80109b0:	e005      	b.n	80109be <f_mkfs+0x24a>
 80109b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109b4:	3301      	adds	r3, #1
 80109b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80109be:	4a11      	ldr	r2, [pc, #68]	@ (8010a04 <f_mkfs+0x290>)
 80109c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d007      	beq.n	80109da <f_mkfs+0x266>
 80109ca:	4a0e      	ldr	r2, [pc, #56]	@ (8010a04 <f_mkfs+0x290>)
 80109cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109d2:	461a      	mov	r2, r3
 80109d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d2eb      	bcs.n	80109b2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80109da:	693a      	ldr	r2, [r7, #16]
 80109dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109de:	fbb2 f3f3 	udiv	r3, r2, r3
 80109e2:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80109e4:	6a3b      	ldr	r3, [r7, #32]
 80109e6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80109ea:	4293      	cmp	r3, r2
 80109ec:	d90c      	bls.n	8010a08 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80109ee:	6a3b      	ldr	r3, [r7, #32]
 80109f0:	3302      	adds	r3, #2
 80109f2:	005b      	lsls	r3, r3, #1
 80109f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80109f6:	e012      	b.n	8010a1e <f_mkfs+0x2aa>
 80109f8:	20000c5c 	.word	0x20000c5c
 80109fc:	08011a58 	.word	0x08011a58
 8010a00:	0ffffff5 	.word	0x0ffffff5
 8010a04:	08011a68 	.word	0x08011a68
				} else {
					fmt = FS_FAT12;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8010a0e:	6a3a      	ldr	r2, [r7, #32]
 8010a10:	4613      	mov	r3, r2
 8010a12:	005b      	lsls	r3, r3, #1
 8010a14:	4413      	add	r3, r2
 8010a16:	3301      	adds	r3, #1
 8010a18:	085b      	lsrs	r3, r3, #1
 8010a1a:	3303      	adds	r3, #3
 8010a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8010a1e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010a20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a22:	4413      	add	r3, r2
 8010a24:	1e5a      	subs	r2, r3, #1
 8010a26:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8010a2e:	2301      	movs	r3, #1
 8010a30:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8010a32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a34:	015a      	lsls	r2, r3, #5
 8010a36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8010a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a42:	4413      	add	r3, r2
 8010a44:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8010a46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010a48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a4a:	fb03 f202 	mul.w	r2, r3, r2
 8010a4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a50:	4413      	add	r3, r2
 8010a52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010a54:	4413      	add	r3, r2
 8010a56:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8010a58:	697a      	ldr	r2, [r7, #20]
 8010a5a:	69fb      	ldr	r3, [r7, #28]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	1e5a      	subs	r2, r3, #1
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	425b      	negs	r3, r3
 8010a64:	401a      	ands	r2, r3
 8010a66:	69fb      	ldr	r3, [r7, #28]
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8010a6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010a70:	2b03      	cmp	r3, #3
 8010a72:	d108      	bne.n	8010a86 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8010a74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a78:	4413      	add	r3, r2
 8010a7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8010a7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a80:	4413      	add	r3, r2
 8010a82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010a84:	e006      	b.n	8010a94 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8010a86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a8e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010a90:	4413      	add	r3, r2
 8010a92:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8010a94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a96:	011a      	lsls	r2, r3, #4
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	441a      	add	r2, r3
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9e:	1ad2      	subs	r2, r2, r3
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d901      	bls.n	8010aaa <f_mkfs+0x336>
 8010aa6:	230e      	movs	r3, #14
 8010aa8:	e28a      	b.n	8010fc0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8010aaa:	693a      	ldr	r2, [r7, #16]
 8010aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010aae:	1ad2      	subs	r2, r2, r3
 8010ab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010ab2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010ab4:	fb01 f303 	mul.w	r3, r1, r3
 8010ab8:	1ad2      	subs	r2, r2, r3
 8010aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010abc:	1ad2      	subs	r2, r2, r3
 8010abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ac4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8010ac6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010aca:	2b03      	cmp	r3, #3
 8010acc:	d10f      	bne.n	8010aee <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8010ace:	6a3b      	ldr	r3, [r7, #32]
 8010ad0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d80a      	bhi.n	8010aee <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d105      	bne.n	8010aea <f_mkfs+0x376>
 8010ade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ae0:	085b      	lsrs	r3, r3, #1
 8010ae2:	607b      	str	r3, [r7, #4]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d144      	bne.n	8010b74 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8010aea:	230e      	movs	r3, #14
 8010aec:	e268      	b.n	8010fc0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8010aee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010af2:	2b02      	cmp	r3, #2
 8010af4:	d133      	bne.n	8010b5e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8010af6:	6a3b      	ldr	r3, [r7, #32]
 8010af8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d91e      	bls.n	8010b3e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d107      	bne.n	8010b16 <f_mkfs+0x3a2>
 8010b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b08:	005b      	lsls	r3, r3, #1
 8010b0a:	2b40      	cmp	r3, #64	@ 0x40
 8010b0c:	d803      	bhi.n	8010b16 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8010b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b10:	005b      	lsls	r3, r3, #1
 8010b12:	607b      	str	r3, [r7, #4]
 8010b14:	e033      	b.n	8010b7e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8010b16:	7afb      	ldrb	r3, [r7, #11]
 8010b18:	f003 0302 	and.w	r3, r3, #2
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d003      	beq.n	8010b28 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8010b20:	2303      	movs	r3, #3
 8010b22:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8010b26:	e02a      	b.n	8010b7e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d105      	bne.n	8010b3a <f_mkfs+0x3c6>
 8010b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b30:	005b      	lsls	r3, r3, #1
 8010b32:	607b      	str	r3, [r7, #4]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2b80      	cmp	r3, #128	@ 0x80
 8010b38:	d91e      	bls.n	8010b78 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8010b3a:	230e      	movs	r3, #14
 8010b3c:	e240      	b.n	8010fc0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8010b3e:	6a3b      	ldr	r3, [r7, #32]
 8010b40:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d80a      	bhi.n	8010b5e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d105      	bne.n	8010b5a <f_mkfs+0x3e6>
 8010b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b50:	005b      	lsls	r3, r3, #1
 8010b52:	607b      	str	r3, [r7, #4]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2b80      	cmp	r3, #128	@ 0x80
 8010b58:	d910      	bls.n	8010b7c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8010b5a:	230e      	movs	r3, #14
 8010b5c:	e230      	b.n	8010fc0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8010b5e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d10c      	bne.n	8010b80 <f_mkfs+0x40c>
 8010b66:	6a3b      	ldr	r3, [r7, #32]
 8010b68:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	d907      	bls.n	8010b80 <f_mkfs+0x40c>
 8010b70:	230e      	movs	r3, #14
 8010b72:	e225      	b.n	8010fc0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8010b74:	bf00      	nop
 8010b76:	e6ce      	b.n	8010916 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010b78:	bf00      	nop
 8010b7a:	e6cc      	b.n	8010916 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010b7c:	bf00      	nop
			pau = au;
 8010b7e:	e6ca      	b.n	8010916 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8010b80:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8010b82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b84:	461a      	mov	r2, r3
 8010b86:	2100      	movs	r1, #0
 8010b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b8a:	f7fd fddc 	bl	800e746 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8010b8e:	220b      	movs	r2, #11
 8010b90:	49b2      	ldr	r1, [pc, #712]	@ (8010e5c <f_mkfs+0x6e8>)
 8010b92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b94:	f7fd fdb6 	bl	800e704 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8010b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b9a:	330b      	adds	r3, #11
 8010b9c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010b9e:	4611      	mov	r1, r2
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7fd fd68 	bl	800e676 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8010ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba8:	330d      	adds	r3, #13
 8010baa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010bac:	b2d2      	uxtb	r2, r2
 8010bae:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8010bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bb2:	330e      	adds	r3, #14
 8010bb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010bb6:	b292      	uxth	r2, r2
 8010bb8:	4611      	mov	r1, r2
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fd fd5b 	bl	800e676 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8010bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc2:	3310      	adds	r3, #16
 8010bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010bc6:	b2d2      	uxtb	r2, r2
 8010bc8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8010bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bcc:	f103 0211 	add.w	r2, r3, #17
 8010bd0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010bd4:	2b03      	cmp	r3, #3
 8010bd6:	d002      	beq.n	8010bde <f_mkfs+0x46a>
 8010bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	e000      	b.n	8010be0 <f_mkfs+0x46c>
 8010bde:	2300      	movs	r3, #0
 8010be0:	4619      	mov	r1, r3
 8010be2:	4610      	mov	r0, r2
 8010be4:	f7fd fd47 	bl	800e676 <st_word>
		if (sz_vol < 0x10000) {
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010bee:	d208      	bcs.n	8010c02 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8010bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bf2:	3313      	adds	r3, #19
 8010bf4:	693a      	ldr	r2, [r7, #16]
 8010bf6:	b292      	uxth	r2, r2
 8010bf8:	4611      	mov	r1, r2
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7fd fd3b 	bl	800e676 <st_word>
 8010c00:	e006      	b.n	8010c10 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8010c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c04:	3320      	adds	r3, #32
 8010c06:	693a      	ldr	r2, [r7, #16]
 8010c08:	4611      	mov	r1, r2
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fd fd4e 	bl	800e6ac <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8010c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c12:	3315      	adds	r3, #21
 8010c14:	22f8      	movs	r2, #248	@ 0xf8
 8010c16:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8010c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c1a:	3318      	adds	r3, #24
 8010c1c:	213f      	movs	r1, #63	@ 0x3f
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fd fd29 	bl	800e676 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8010c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c26:	331a      	adds	r3, #26
 8010c28:	21ff      	movs	r1, #255	@ 0xff
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fd fd23 	bl	800e676 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8010c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c32:	331c      	adds	r3, #28
 8010c34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fd fd38 	bl	800e6ac <st_dword>
		if (fmt == FS_FAT32) {
 8010c3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010c40:	2b03      	cmp	r3, #3
 8010c42:	d131      	bne.n	8010ca8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8010c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c46:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8010c4a:	f7fb f977 	bl	800bf3c <get_fattime>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	4619      	mov	r1, r3
 8010c52:	4620      	mov	r0, r4
 8010c54:	f7fd fd2a 	bl	800e6ac <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8010c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c5a:	3324      	adds	r3, #36	@ 0x24
 8010c5c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fd fd24 	bl	800e6ac <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8010c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c66:	332c      	adds	r3, #44	@ 0x2c
 8010c68:	2102      	movs	r1, #2
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fd fd1e 	bl	800e6ac <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8010c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c72:	3330      	adds	r3, #48	@ 0x30
 8010c74:	2101      	movs	r1, #1
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fd fcfd 	bl	800e676 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8010c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c7e:	3332      	adds	r3, #50	@ 0x32
 8010c80:	2106      	movs	r1, #6
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fd fcf7 	bl	800e676 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8010c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c8a:	3340      	adds	r3, #64	@ 0x40
 8010c8c:	2280      	movs	r2, #128	@ 0x80
 8010c8e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8010c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c92:	3342      	adds	r3, #66	@ 0x42
 8010c94:	2229      	movs	r2, #41	@ 0x29
 8010c96:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8010c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c9a:	3347      	adds	r3, #71	@ 0x47
 8010c9c:	2213      	movs	r2, #19
 8010c9e:	4970      	ldr	r1, [pc, #448]	@ (8010e60 <f_mkfs+0x6ec>)
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fd fd2f 	bl	800e704 <mem_cpy>
 8010ca6:	e020      	b.n	8010cea <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8010ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010caa:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8010cae:	f7fb f945 	bl	800bf3c <get_fattime>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	4619      	mov	r1, r3
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f7fd fcf8 	bl	800e6ac <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8010cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cbe:	3316      	adds	r3, #22
 8010cc0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010cc2:	b292      	uxth	r2, r2
 8010cc4:	4611      	mov	r1, r2
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7fd fcd5 	bl	800e676 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8010ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cce:	3324      	adds	r3, #36	@ 0x24
 8010cd0:	2280      	movs	r2, #128	@ 0x80
 8010cd2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8010cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cd6:	3326      	adds	r3, #38	@ 0x26
 8010cd8:	2229      	movs	r2, #41	@ 0x29
 8010cda:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8010cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cde:	332b      	adds	r3, #43	@ 0x2b
 8010ce0:	2213      	movs	r2, #19
 8010ce2:	4960      	ldr	r1, [pc, #384]	@ (8010e64 <f_mkfs+0x6f0>)
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7fd fd0d 	bl	800e704 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8010cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010cf0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	f7fd fcbe 	bl	800e676 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8010cfa:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010cfe:	2301      	movs	r3, #1
 8010d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010d04:	f7fd fc3e 	bl	800e584 <disk_write>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d001      	beq.n	8010d12 <f_mkfs+0x59e>
 8010d0e:	2301      	movs	r3, #1
 8010d10:	e156      	b.n	8010fc0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8010d12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010d16:	2b03      	cmp	r3, #3
 8010d18:	d140      	bne.n	8010d9c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8010d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d1c:	1d9a      	adds	r2, r3, #6
 8010d1e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010d22:	2301      	movs	r3, #1
 8010d24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010d26:	f7fd fc2d 	bl	800e584 <disk_write>
			mem_set(buf, 0, ss);
 8010d2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	2100      	movs	r1, #0
 8010d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010d32:	f7fd fd08 	bl	800e746 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8010d36:	494c      	ldr	r1, [pc, #304]	@ (8010e68 <f_mkfs+0x6f4>)
 8010d38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010d3a:	f7fd fcb7 	bl	800e6ac <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d40:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010d44:	4949      	ldr	r1, [pc, #292]	@ (8010e6c <f_mkfs+0x6f8>)
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7fd fcb0 	bl	800e6ac <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8010d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d4e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8010d52:	6a3b      	ldr	r3, [r7, #32]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	4619      	mov	r1, r3
 8010d58:	4610      	mov	r0, r2
 8010d5a:	f7fd fca7 	bl	800e6ac <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8010d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d60:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010d64:	2102      	movs	r1, #2
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7fd fca0 	bl	800e6ac <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8010d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d6e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010d72:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fd fc7d 	bl	800e676 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8010d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d7e:	1dda      	adds	r2, r3, #7
 8010d80:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010d84:	2301      	movs	r3, #1
 8010d86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010d88:	f7fd fbfc 	bl	800e584 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8010d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d8e:	1c5a      	adds	r2, r3, #1
 8010d90:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010d94:	2301      	movs	r3, #1
 8010d96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010d98:	f7fd fbf4 	bl	800e584 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8010d9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d9e:	2100      	movs	r1, #0
 8010da0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010da2:	f7fd fcd0 	bl	800e746 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8010da6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010da8:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010daa:	2300      	movs	r3, #0
 8010dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010dae:	e04b      	b.n	8010e48 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8010db0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010db4:	2b03      	cmp	r3, #3
 8010db6:	d113      	bne.n	8010de0 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8010db8:	f06f 0107 	mvn.w	r1, #7
 8010dbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010dbe:	f7fd fc75 	bl	800e6ac <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8010dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dc4:	3304      	adds	r3, #4
 8010dc6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fd fc6e 	bl	800e6ac <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8010dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dd2:	3308      	adds	r3, #8
 8010dd4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fd fc67 	bl	800e6ac <st_dword>
 8010dde:	e00b      	b.n	8010df8 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8010de0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d101      	bne.n	8010dec <f_mkfs+0x678>
 8010de8:	4b21      	ldr	r3, [pc, #132]	@ (8010e70 <f_mkfs+0x6fc>)
 8010dea:	e001      	b.n	8010df0 <f_mkfs+0x67c>
 8010dec:	f06f 0307 	mvn.w	r3, #7
 8010df0:	4619      	mov	r1, r3
 8010df2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010df4:	f7fd fc5a 	bl	800e6ac <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8010df8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010dfa:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8010dfc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e00:	4293      	cmp	r3, r2
 8010e02:	bf28      	it	cs
 8010e04:	4613      	movcs	r3, r2
 8010e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010e08:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e0e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010e10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010e12:	f7fd fbb7 	bl	800e584 <disk_write>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d001      	beq.n	8010e20 <f_mkfs+0x6ac>
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	e0cf      	b.n	8010fc0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8010e20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e22:	461a      	mov	r2, r3
 8010e24:	2100      	movs	r1, #0
 8010e26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e28:	f7fd fc8d 	bl	800e746 <mem_set>
				sect += n; nsect -= n;
 8010e2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010e2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e30:	4413      	add	r3, r2
 8010e32:	667b      	str	r3, [r7, #100]	@ 0x64
 8010e34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8010e3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d1dc      	bne.n	8010dfc <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e44:	3301      	adds	r3, #1
 8010e46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d3af      	bcc.n	8010db0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8010e50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010e54:	2b03      	cmp	r3, #3
 8010e56:	d10d      	bne.n	8010e74 <f_mkfs+0x700>
 8010e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e5a:	e00c      	b.n	8010e76 <f_mkfs+0x702>
 8010e5c:	08011970 	.word	0x08011970
 8010e60:	0801197c 	.word	0x0801197c
 8010e64:	08011990 	.word	0x08011990
 8010e68:	41615252 	.word	0x41615252
 8010e6c:	61417272 	.word	0x61417272
 8010e70:	00fffff8 	.word	0x00fffff8
 8010e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010e76:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8010e78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	bf28      	it	cs
 8010e80:	4613      	movcs	r3, r2
 8010e82:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010e84:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010e8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010e8e:	f7fd fb79 	bl	800e584 <disk_write>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d001      	beq.n	8010e9c <f_mkfs+0x728>
 8010e98:	2301      	movs	r3, #1
 8010e9a:	e091      	b.n	8010fc0 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8010e9c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ea0:	4413      	add	r3, r2
 8010ea2:	667b      	str	r3, [r7, #100]	@ 0x64
 8010ea4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010ea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8010eac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d1e2      	bne.n	8010e78 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8010eb2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010eb6:	2b03      	cmp	r3, #3
 8010eb8:	d103      	bne.n	8010ec2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8010eba:	230c      	movs	r3, #12
 8010ebc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8010ec0:	e010      	b.n	8010ee4 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ec8:	d303      	bcc.n	8010ed2 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8010eca:	2306      	movs	r3, #6
 8010ecc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8010ed0:	e008      	b.n	8010ee4 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8010ed2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8010ed6:	2b02      	cmp	r3, #2
 8010ed8:	d101      	bne.n	8010ede <f_mkfs+0x76a>
 8010eda:	2304      	movs	r3, #4
 8010edc:	e000      	b.n	8010ee0 <f_mkfs+0x76c>
 8010ede:	2301      	movs	r3, #1
 8010ee0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8010ee4:	7afb      	ldrb	r3, [r7, #11]
 8010ee6:	f003 0308 	and.w	r3, r3, #8
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d15b      	bne.n	8010fa6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8010eee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	2100      	movs	r1, #0
 8010ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ef6:	f7fd fc26 	bl	800e746 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010efc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010f00:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fd fbb6 	bl	800e676 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f0c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010f10:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	2200      	movs	r2, #0
 8010f16:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8010f18:	69bb      	ldr	r3, [r7, #24]
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	3302      	adds	r3, #2
 8010f24:	2201      	movs	r2, #1
 8010f26:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8010f28:	69bb      	ldr	r3, [r7, #24]
 8010f2a:	3303      	adds	r3, #3
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	3304      	adds	r3, #4
 8010f34:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8010f38:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8010f3a:	693a      	ldr	r2, [r7, #16]
 8010f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f3e:	441a      	add	r2, r3
 8010f40:	4b21      	ldr	r3, [pc, #132]	@ (8010fc8 <f_mkfs+0x854>)
 8010f42:	fba3 1302 	umull	r1, r3, r3, r2
 8010f46:	1ad2      	subs	r2, r2, r3
 8010f48:	0852      	lsrs	r2, r2, #1
 8010f4a:	4413      	add	r3, r2
 8010f4c:	0b5b      	lsrs	r3, r3, #13
 8010f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	3305      	adds	r3, #5
 8010f54:	22fe      	movs	r2, #254	@ 0xfe
 8010f56:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8010f58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010f5a:	089b      	lsrs	r3, r3, #2
 8010f5c:	b2da      	uxtb	r2, r3
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	3306      	adds	r3, #6
 8010f62:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8010f66:	b2d2      	uxtb	r2, r2
 8010f68:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	3307      	adds	r3, #7
 8010f6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010f70:	b2d2      	uxtb	r2, r2
 8010f72:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8010f74:	69bb      	ldr	r3, [r7, #24]
 8010f76:	3308      	adds	r3, #8
 8010f78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fd fb96 	bl	800e6ac <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8010f80:	69bb      	ldr	r3, [r7, #24]
 8010f82:	330c      	adds	r3, #12
 8010f84:	693a      	ldr	r2, [r7, #16]
 8010f86:	4611      	mov	r1, r2
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fd fb8f 	bl	800e6ac <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8010f8e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8010f92:	2301      	movs	r3, #1
 8010f94:	2200      	movs	r2, #0
 8010f96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010f98:	f7fd faf4 	bl	800e584 <disk_write>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d001      	beq.n	8010fa6 <f_mkfs+0x832>
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	e00c      	b.n	8010fc0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8010fa6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8010faa:	2200      	movs	r2, #0
 8010fac:	2100      	movs	r1, #0
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7fd fb08 	bl	800e5c4 <disk_ioctl>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d001      	beq.n	8010fbe <f_mkfs+0x84a>
 8010fba:	2301      	movs	r3, #1
 8010fbc:	e000      	b.n	8010fc0 <f_mkfs+0x84c>

	return FR_OK;
 8010fbe:	2300      	movs	r3, #0
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3774      	adds	r7, #116	@ 0x74
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd90      	pop	{r4, r7, pc}
 8010fc8:	0515565b 	.word	0x0515565b

08010fcc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b087      	sub	sp, #28
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010fda:	2301      	movs	r3, #1
 8010fdc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8011060 <FATFS_LinkDriverEx+0x94>)
 8010fe4:	7a5b      	ldrb	r3, [r3, #9]
 8010fe6:	b2db      	uxtb	r3, r3
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d131      	bne.n	8011050 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010fec:	4b1c      	ldr	r3, [pc, #112]	@ (8011060 <FATFS_LinkDriverEx+0x94>)
 8010fee:	7a5b      	ldrb	r3, [r3, #9]
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8011060 <FATFS_LinkDriverEx+0x94>)
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010ffa:	4b19      	ldr	r3, [pc, #100]	@ (8011060 <FATFS_LinkDriverEx+0x94>)
 8010ffc:	7a5b      	ldrb	r3, [r3, #9]
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	4a17      	ldr	r2, [pc, #92]	@ (8011060 <FATFS_LinkDriverEx+0x94>)
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	4413      	add	r3, r2
 8011006:	68fa      	ldr	r2, [r7, #12]
 8011008:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801100a:	4b15      	ldr	r3, [pc, #84]	@ (8011060 <FATFS_LinkDriverEx+0x94>)
 801100c:	7a5b      	ldrb	r3, [r3, #9]
 801100e:	b2db      	uxtb	r3, r3
 8011010:	461a      	mov	r2, r3
 8011012:	4b13      	ldr	r3, [pc, #76]	@ (8011060 <FATFS_LinkDriverEx+0x94>)
 8011014:	4413      	add	r3, r2
 8011016:	79fa      	ldrb	r2, [r7, #7]
 8011018:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801101a:	4b11      	ldr	r3, [pc, #68]	@ (8011060 <FATFS_LinkDriverEx+0x94>)
 801101c:	7a5b      	ldrb	r3, [r3, #9]
 801101e:	b2db      	uxtb	r3, r3
 8011020:	1c5a      	adds	r2, r3, #1
 8011022:	b2d1      	uxtb	r1, r2
 8011024:	4a0e      	ldr	r2, [pc, #56]	@ (8011060 <FATFS_LinkDriverEx+0x94>)
 8011026:	7251      	strb	r1, [r2, #9]
 8011028:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801102a:	7dbb      	ldrb	r3, [r7, #22]
 801102c:	3330      	adds	r3, #48	@ 0x30
 801102e:	b2da      	uxtb	r2, r3
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	3301      	adds	r3, #1
 8011038:	223a      	movs	r2, #58	@ 0x3a
 801103a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	3302      	adds	r3, #2
 8011040:	222f      	movs	r2, #47	@ 0x2f
 8011042:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	3303      	adds	r3, #3
 8011048:	2200      	movs	r2, #0
 801104a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801104c:	2300      	movs	r3, #0
 801104e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011050:	7dfb      	ldrb	r3, [r7, #23]
}
 8011052:	4618      	mov	r0, r3
 8011054:	371c      	adds	r7, #28
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop
 8011060:	20000c84 	.word	0x20000c84

08011064 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801106e:	2200      	movs	r2, #0
 8011070:	6839      	ldr	r1, [r7, #0]
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f7ff ffaa 	bl	8010fcc <FATFS_LinkDriverEx>
 8011078:	4603      	mov	r3, r0
}
 801107a:	4618      	mov	r0, r3
 801107c:	3708      	adds	r7, #8
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
	...

08011084 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011088:	2201      	movs	r2, #1
 801108a:	490e      	ldr	r1, [pc, #56]	@ (80110c4 <MX_USB_HOST_Init+0x40>)
 801108c:	480e      	ldr	r0, [pc, #56]	@ (80110c8 <MX_USB_HOST_Init+0x44>)
 801108e:	f7fb fd33 	bl	800caf8 <USBH_Init>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d001      	beq.n	801109c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011098:	f7f0 f8f8 	bl	800128c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801109c:	490b      	ldr	r1, [pc, #44]	@ (80110cc <MX_USB_HOST_Init+0x48>)
 801109e:	480a      	ldr	r0, [pc, #40]	@ (80110c8 <MX_USB_HOST_Init+0x44>)
 80110a0:	f7fb fdd7 	bl	800cc52 <USBH_RegisterClass>
 80110a4:	4603      	mov	r3, r0
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d001      	beq.n	80110ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80110aa:	f7f0 f8ef 	bl	800128c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80110ae:	4806      	ldr	r0, [pc, #24]	@ (80110c8 <MX_USB_HOST_Init+0x44>)
 80110b0:	f7fb fe5b 	bl	800cd6a <USBH_Start>
 80110b4:	4603      	mov	r3, r0
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d001      	beq.n	80110be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80110ba:	f7f0 f8e7 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80110be:	bf00      	nop
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	080110e5 	.word	0x080110e5
 80110c8:	20000c90 	.word	0x20000c90
 80110cc:	20000028 	.word	0x20000028

080110d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80110d4:	4802      	ldr	r0, [pc, #8]	@ (80110e0 <MX_USB_HOST_Process+0x10>)
 80110d6:	f7fb fe59 	bl	800cd8c <USBH_Process>
}
 80110da:	bf00      	nop
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	20000c90 	.word	0x20000c90

080110e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	460b      	mov	r3, r1
 80110ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80110f0:	78fb      	ldrb	r3, [r7, #3]
 80110f2:	3b01      	subs	r3, #1
 80110f4:	2b04      	cmp	r3, #4
 80110f6:	d819      	bhi.n	801112c <USBH_UserProcess+0x48>
 80110f8:	a201      	add	r2, pc, #4	@ (adr r2, 8011100 <USBH_UserProcess+0x1c>)
 80110fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110fe:	bf00      	nop
 8011100:	0801112d 	.word	0x0801112d
 8011104:	0801111d 	.word	0x0801111d
 8011108:	0801112d 	.word	0x0801112d
 801110c:	08011125 	.word	0x08011125
 8011110:	08011115 	.word	0x08011115
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011114:	4b09      	ldr	r3, [pc, #36]	@ (801113c <USBH_UserProcess+0x58>)
 8011116:	2203      	movs	r2, #3
 8011118:	701a      	strb	r2, [r3, #0]
  break;
 801111a:	e008      	b.n	801112e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801111c:	4b07      	ldr	r3, [pc, #28]	@ (801113c <USBH_UserProcess+0x58>)
 801111e:	2202      	movs	r2, #2
 8011120:	701a      	strb	r2, [r3, #0]
  break;
 8011122:	e004      	b.n	801112e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011124:	4b05      	ldr	r3, [pc, #20]	@ (801113c <USBH_UserProcess+0x58>)
 8011126:	2201      	movs	r2, #1
 8011128:	701a      	strb	r2, [r3, #0]
  break;
 801112a:	e000      	b.n	801112e <USBH_UserProcess+0x4a>

  default:
  break;
 801112c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801112e:	bf00      	nop
 8011130:	370c      	adds	r7, #12
 8011132:	46bd      	mov	sp, r7
 8011134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop
 801113c:	20001068 	.word	0x20001068

08011140 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b08a      	sub	sp, #40	@ 0x28
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011148:	f107 0314 	add.w	r3, r7, #20
 801114c:	2200      	movs	r2, #0
 801114e:	601a      	str	r2, [r3, #0]
 8011150:	605a      	str	r2, [r3, #4]
 8011152:	609a      	str	r2, [r3, #8]
 8011154:	60da      	str	r2, [r3, #12]
 8011156:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011160:	d147      	bne.n	80111f2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011162:	2300      	movs	r3, #0
 8011164:	613b      	str	r3, [r7, #16]
 8011166:	4b25      	ldr	r3, [pc, #148]	@ (80111fc <HAL_HCD_MspInit+0xbc>)
 8011168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801116a:	4a24      	ldr	r2, [pc, #144]	@ (80111fc <HAL_HCD_MspInit+0xbc>)
 801116c:	f043 0301 	orr.w	r3, r3, #1
 8011170:	6313      	str	r3, [r2, #48]	@ 0x30
 8011172:	4b22      	ldr	r3, [pc, #136]	@ (80111fc <HAL_HCD_MspInit+0xbc>)
 8011174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011176:	f003 0301 	and.w	r3, r3, #1
 801117a:	613b      	str	r3, [r7, #16]
 801117c:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 801117e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8011182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011184:	2302      	movs	r3, #2
 8011186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011188:	2300      	movs	r3, #0
 801118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801118c:	2303      	movs	r3, #3
 801118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011190:	230a      	movs	r3, #10
 8011192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011194:	f107 0314 	add.w	r3, r7, #20
 8011198:	4619      	mov	r1, r3
 801119a:	4819      	ldr	r0, [pc, #100]	@ (8011200 <HAL_HCD_MspInit+0xc0>)
 801119c:	f7f2 fb84 	bl	80038a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 80111a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80111a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111a6:	2302      	movs	r3, #2
 80111a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111aa:	2300      	movs	r3, #0
 80111ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 80111ae:	f107 0314 	add.w	r3, r7, #20
 80111b2:	4619      	mov	r1, r3
 80111b4:	4812      	ldr	r0, [pc, #72]	@ (8011200 <HAL_HCD_MspInit+0xc0>)
 80111b6:	f7f2 fb77 	bl	80038a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80111ba:	4b10      	ldr	r3, [pc, #64]	@ (80111fc <HAL_HCD_MspInit+0xbc>)
 80111bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111be:	4a0f      	ldr	r2, [pc, #60]	@ (80111fc <HAL_HCD_MspInit+0xbc>)
 80111c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111c4:	6353      	str	r3, [r2, #52]	@ 0x34
 80111c6:	2300      	movs	r3, #0
 80111c8:	60fb      	str	r3, [r7, #12]
 80111ca:	4b0c      	ldr	r3, [pc, #48]	@ (80111fc <HAL_HCD_MspInit+0xbc>)
 80111cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111ce:	4a0b      	ldr	r2, [pc, #44]	@ (80111fc <HAL_HCD_MspInit+0xbc>)
 80111d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80111d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80111d6:	4b09      	ldr	r3, [pc, #36]	@ (80111fc <HAL_HCD_MspInit+0xbc>)
 80111d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80111de:	60fb      	str	r3, [r7, #12]
 80111e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80111e2:	2200      	movs	r2, #0
 80111e4:	2100      	movs	r1, #0
 80111e6:	2043      	movs	r0, #67	@ 0x43
 80111e8:	f7f0 ff86 	bl	80020f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80111ec:	2043      	movs	r0, #67	@ 0x43
 80111ee:	f7f0 ff9f 	bl	8002130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80111f2:	bf00      	nop
 80111f4:	3728      	adds	r7, #40	@ 0x28
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	40023800 	.word	0x40023800
 8011200:	40020000 	.word	0x40020000

08011204 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011212:	4618      	mov	r0, r3
 8011214:	f7fc f991 	bl	800d53a <USBH_LL_IncTimer>
}
 8011218:	bf00      	nop
 801121a:	3708      	adds	r7, #8
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}

08011220 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801122e:	4618      	mov	r0, r3
 8011230:	f7fc f9c9 	bl	800d5c6 <USBH_LL_Connect>
}
 8011234:	bf00      	nop
 8011236:	3708      	adds	r7, #8
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b082      	sub	sp, #8
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801124a:	4618      	mov	r0, r3
 801124c:	f7fc f9d2 	bl	800d5f4 <USBH_LL_Disconnect>
}
 8011250:	bf00      	nop
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011258:	b480      	push	{r7}
 801125a:	b083      	sub	sp, #12
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	460b      	mov	r3, r1
 8011262:	70fb      	strb	r3, [r7, #3]
 8011264:	4613      	mov	r3, r2
 8011266:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011268:	bf00      	nop
 801126a:	370c      	adds	r7, #12
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr

08011274 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b082      	sub	sp, #8
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011282:	4618      	mov	r0, r3
 8011284:	f7fc f983 	bl	800d58e <USBH_LL_PortEnabled>
}
 8011288:	bf00      	nop
 801128a:	3708      	adds	r7, #8
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801129e:	4618      	mov	r0, r3
 80112a0:	f7fc f983 	bl	800d5aa <USBH_LL_PortDisabled>
}
 80112a4:	bf00      	nop
 80112a6:	3708      	adds	r7, #8
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}

080112ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d12a      	bne.n	8011314 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80112be:	4a18      	ldr	r2, [pc, #96]	@ (8011320 <USBH_LL_Init+0x74>)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4a15      	ldr	r2, [pc, #84]	@ (8011320 <USBH_LL_Init+0x74>)
 80112ca:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80112ce:	4b14      	ldr	r3, [pc, #80]	@ (8011320 <USBH_LL_Init+0x74>)
 80112d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80112d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80112d6:	4b12      	ldr	r3, [pc, #72]	@ (8011320 <USBH_LL_Init+0x74>)
 80112d8:	2208      	movs	r2, #8
 80112da:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80112dc:	4b10      	ldr	r3, [pc, #64]	@ (8011320 <USBH_LL_Init+0x74>)
 80112de:	2201      	movs	r2, #1
 80112e0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80112e2:	4b0f      	ldr	r3, [pc, #60]	@ (8011320 <USBH_LL_Init+0x74>)
 80112e4:	2200      	movs	r2, #0
 80112e6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80112e8:	4b0d      	ldr	r3, [pc, #52]	@ (8011320 <USBH_LL_Init+0x74>)
 80112ea:	2202      	movs	r2, #2
 80112ec:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80112ee:	4b0c      	ldr	r3, [pc, #48]	@ (8011320 <USBH_LL_Init+0x74>)
 80112f0:	2200      	movs	r2, #0
 80112f2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80112f4:	480a      	ldr	r0, [pc, #40]	@ (8011320 <USBH_LL_Init+0x74>)
 80112f6:	f7f2 fcb4 	bl	8003c62 <HAL_HCD_Init>
 80112fa:	4603      	mov	r3, r0
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d001      	beq.n	8011304 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011300:	f7ef ffc4 	bl	800128c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011304:	4806      	ldr	r0, [pc, #24]	@ (8011320 <USBH_LL_Init+0x74>)
 8011306:	f7f3 f915 	bl	8004534 <HAL_HCD_GetCurrentFrame>
 801130a:	4603      	mov	r3, r0
 801130c:	4619      	mov	r1, r3
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f7fc f904 	bl	800d51c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011314:	2300      	movs	r3, #0
}
 8011316:	4618      	mov	r0, r3
 8011318:	3708      	adds	r7, #8
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	2000106c 	.word	0x2000106c

08011324 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801132c:	2300      	movs	r3, #0
 801132e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011330:	2300      	movs	r3, #0
 8011332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801133a:	4618      	mov	r0, r3
 801133c:	f7f3 f882 	bl	8004444 <HAL_HCD_Start>
 8011340:	4603      	mov	r3, r0
 8011342:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011344:	7bfb      	ldrb	r3, [r7, #15]
 8011346:	4618      	mov	r0, r3
 8011348:	f000 f95e 	bl	8011608 <USBH_Get_USB_Status>
 801134c:	4603      	mov	r3, r0
 801134e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011350:	7bbb      	ldrb	r3, [r7, #14]
}
 8011352:	4618      	mov	r0, r3
 8011354:	3710      	adds	r7, #16
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}

0801135a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801135a:	b580      	push	{r7, lr}
 801135c:	b084      	sub	sp, #16
 801135e:	af00      	add	r7, sp, #0
 8011360:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011362:	2300      	movs	r3, #0
 8011364:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011366:	2300      	movs	r3, #0
 8011368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011370:	4618      	mov	r0, r3
 8011372:	f7f3 f88a 	bl	800448a <HAL_HCD_Stop>
 8011376:	4603      	mov	r3, r0
 8011378:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801137a:	7bfb      	ldrb	r3, [r7, #15]
 801137c:	4618      	mov	r0, r3
 801137e:	f000 f943 	bl	8011608 <USBH_Get_USB_Status>
 8011382:	4603      	mov	r3, r0
 8011384:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011386:	7bbb      	ldrb	r3, [r7, #14]
}
 8011388:	4618      	mov	r0, r3
 801138a:	3710      	adds	r7, #16
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b084      	sub	sp, #16
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011398:	2301      	movs	r3, #1
 801139a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7f3 f8d4 	bl	8004550 <HAL_HCD_GetCurrentSpeed>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b02      	cmp	r3, #2
 80113ac:	d00c      	beq.n	80113c8 <USBH_LL_GetSpeed+0x38>
 80113ae:	2b02      	cmp	r3, #2
 80113b0:	d80d      	bhi.n	80113ce <USBH_LL_GetSpeed+0x3e>
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d002      	beq.n	80113bc <USBH_LL_GetSpeed+0x2c>
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d003      	beq.n	80113c2 <USBH_LL_GetSpeed+0x32>
 80113ba:	e008      	b.n	80113ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80113bc:	2300      	movs	r3, #0
 80113be:	73fb      	strb	r3, [r7, #15]
    break;
 80113c0:	e008      	b.n	80113d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80113c2:	2301      	movs	r3, #1
 80113c4:	73fb      	strb	r3, [r7, #15]
    break;
 80113c6:	e005      	b.n	80113d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80113c8:	2302      	movs	r3, #2
 80113ca:	73fb      	strb	r3, [r7, #15]
    break;
 80113cc:	e002      	b.n	80113d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80113ce:	2301      	movs	r3, #1
 80113d0:	73fb      	strb	r3, [r7, #15]
    break;
 80113d2:	bf00      	nop
  }
  return  speed;
 80113d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3710      	adds	r7, #16
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}

080113de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80113de:	b580      	push	{r7, lr}
 80113e0:	b084      	sub	sp, #16
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113e6:	2300      	movs	r3, #0
 80113e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113ea:	2300      	movs	r3, #0
 80113ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7f3 f865 	bl	80044c4 <HAL_HCD_ResetPort>
 80113fa:	4603      	mov	r3, r0
 80113fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80113fe:	7bfb      	ldrb	r3, [r7, #15]
 8011400:	4618      	mov	r0, r3
 8011402:	f000 f901 	bl	8011608 <USBH_Get_USB_Status>
 8011406:	4603      	mov	r3, r0
 8011408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801140a:	7bbb      	ldrb	r3, [r7, #14]
}
 801140c:	4618      	mov	r0, r3
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	460b      	mov	r3, r1
 801141e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011426:	78fa      	ldrb	r2, [r7, #3]
 8011428:	4611      	mov	r1, r2
 801142a:	4618      	mov	r0, r3
 801142c:	f7f3 f86d 	bl	800450a <HAL_HCD_HC_GetXferCount>
 8011430:	4603      	mov	r3, r0
}
 8011432:	4618      	mov	r0, r3
 8011434:	3708      	adds	r7, #8
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}

0801143a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801143a:	b590      	push	{r4, r7, lr}
 801143c:	b089      	sub	sp, #36	@ 0x24
 801143e:	af04      	add	r7, sp, #16
 8011440:	6078      	str	r0, [r7, #4]
 8011442:	4608      	mov	r0, r1
 8011444:	4611      	mov	r1, r2
 8011446:	461a      	mov	r2, r3
 8011448:	4603      	mov	r3, r0
 801144a:	70fb      	strb	r3, [r7, #3]
 801144c:	460b      	mov	r3, r1
 801144e:	70bb      	strb	r3, [r7, #2]
 8011450:	4613      	mov	r3, r2
 8011452:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011454:	2300      	movs	r3, #0
 8011456:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011458:	2300      	movs	r3, #0
 801145a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8011462:	787c      	ldrb	r4, [r7, #1]
 8011464:	78ba      	ldrb	r2, [r7, #2]
 8011466:	78f9      	ldrb	r1, [r7, #3]
 8011468:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801146a:	9302      	str	r3, [sp, #8]
 801146c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011470:	9301      	str	r3, [sp, #4]
 8011472:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011476:	9300      	str	r3, [sp, #0]
 8011478:	4623      	mov	r3, r4
 801147a:	f7f2 fc59 	bl	8003d30 <HAL_HCD_HC_Init>
 801147e:	4603      	mov	r3, r0
 8011480:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011482:	7bfb      	ldrb	r3, [r7, #15]
 8011484:	4618      	mov	r0, r3
 8011486:	f000 f8bf 	bl	8011608 <USBH_Get_USB_Status>
 801148a:	4603      	mov	r3, r0
 801148c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801148e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011490:	4618      	mov	r0, r3
 8011492:	3714      	adds	r7, #20
 8011494:	46bd      	mov	sp, r7
 8011496:	bd90      	pop	{r4, r7, pc}

08011498 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	460b      	mov	r3, r1
 80114a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114a4:	2300      	movs	r3, #0
 80114a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114a8:	2300      	movs	r3, #0
 80114aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80114b2:	78fa      	ldrb	r2, [r7, #3]
 80114b4:	4611      	mov	r1, r2
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7f2 fcf2 	bl	8003ea0 <HAL_HCD_HC_Halt>
 80114bc:	4603      	mov	r3, r0
 80114be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80114c0:	7bfb      	ldrb	r3, [r7, #15]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f000 f8a0 	bl	8011608 <USBH_Get_USB_Status>
 80114c8:	4603      	mov	r3, r0
 80114ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80114d6:	b590      	push	{r4, r7, lr}
 80114d8:	b089      	sub	sp, #36	@ 0x24
 80114da:	af04      	add	r7, sp, #16
 80114dc:	6078      	str	r0, [r7, #4]
 80114de:	4608      	mov	r0, r1
 80114e0:	4611      	mov	r1, r2
 80114e2:	461a      	mov	r2, r3
 80114e4:	4603      	mov	r3, r0
 80114e6:	70fb      	strb	r3, [r7, #3]
 80114e8:	460b      	mov	r3, r1
 80114ea:	70bb      	strb	r3, [r7, #2]
 80114ec:	4613      	mov	r3, r2
 80114ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114f0:	2300      	movs	r3, #0
 80114f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114f4:	2300      	movs	r3, #0
 80114f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80114fe:	787c      	ldrb	r4, [r7, #1]
 8011500:	78ba      	ldrb	r2, [r7, #2]
 8011502:	78f9      	ldrb	r1, [r7, #3]
 8011504:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011508:	9303      	str	r3, [sp, #12]
 801150a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801150c:	9302      	str	r3, [sp, #8]
 801150e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011510:	9301      	str	r3, [sp, #4]
 8011512:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011516:	9300      	str	r3, [sp, #0]
 8011518:	4623      	mov	r3, r4
 801151a:	f7f2 fce5 	bl	8003ee8 <HAL_HCD_HC_SubmitRequest>
 801151e:	4603      	mov	r3, r0
 8011520:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011522:	7bfb      	ldrb	r3, [r7, #15]
 8011524:	4618      	mov	r0, r3
 8011526:	f000 f86f 	bl	8011608 <USBH_Get_USB_Status>
 801152a:	4603      	mov	r3, r0
 801152c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801152e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3714      	adds	r7, #20
 8011534:	46bd      	mov	sp, r7
 8011536:	bd90      	pop	{r4, r7, pc}

08011538 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	460b      	mov	r3, r1
 8011542:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801154a:	78fa      	ldrb	r2, [r7, #3]
 801154c:	4611      	mov	r1, r2
 801154e:	4618      	mov	r0, r3
 8011550:	f7f2 ffc6 	bl	80044e0 <HAL_HCD_HC_GetURBState>
 8011554:	4603      	mov	r3, r0
}
 8011556:	4618      	mov	r0, r3
 8011558:	3708      	adds	r7, #8
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}

0801155e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801155e:	b580      	push	{r7, lr}
 8011560:	b082      	sub	sp, #8
 8011562:	af00      	add	r7, sp, #0
 8011564:	6078      	str	r0, [r7, #4]
 8011566:	460b      	mov	r3, r1
 8011568:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8011570:	2b01      	cmp	r3, #1
 8011572:	d103      	bne.n	801157c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011574:	78fb      	ldrb	r3, [r7, #3]
 8011576:	4618      	mov	r0, r3
 8011578:	f000 f872 	bl	8011660 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801157c:	20c8      	movs	r0, #200	@ 0xc8
 801157e:	f7f0 fcdf 	bl	8001f40 <HAL_Delay>
  return USBH_OK;
 8011582:	2300      	movs	r3, #0
}
 8011584:	4618      	mov	r0, r3
 8011586:	3708      	adds	r7, #8
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801158c:	b480      	push	{r7}
 801158e:	b085      	sub	sp, #20
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	460b      	mov	r3, r1
 8011596:	70fb      	strb	r3, [r7, #3]
 8011598:	4613      	mov	r3, r2
 801159a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80115a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80115a4:	78fa      	ldrb	r2, [r7, #3]
 80115a6:	68f9      	ldr	r1, [r7, #12]
 80115a8:	4613      	mov	r3, r2
 80115aa:	011b      	lsls	r3, r3, #4
 80115ac:	1a9b      	subs	r3, r3, r2
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	440b      	add	r3, r1
 80115b2:	3317      	adds	r3, #23
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00a      	beq.n	80115d0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80115ba:	78fa      	ldrb	r2, [r7, #3]
 80115bc:	68f9      	ldr	r1, [r7, #12]
 80115be:	4613      	mov	r3, r2
 80115c0:	011b      	lsls	r3, r3, #4
 80115c2:	1a9b      	subs	r3, r3, r2
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	440b      	add	r3, r1
 80115c8:	333c      	adds	r3, #60	@ 0x3c
 80115ca:	78ba      	ldrb	r2, [r7, #2]
 80115cc:	701a      	strb	r2, [r3, #0]
 80115ce:	e009      	b.n	80115e4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80115d0:	78fa      	ldrb	r2, [r7, #3]
 80115d2:	68f9      	ldr	r1, [r7, #12]
 80115d4:	4613      	mov	r3, r2
 80115d6:	011b      	lsls	r3, r3, #4
 80115d8:	1a9b      	subs	r3, r3, r2
 80115da:	009b      	lsls	r3, r3, #2
 80115dc:	440b      	add	r3, r1
 80115de:	333d      	adds	r3, #61	@ 0x3d
 80115e0:	78ba      	ldrb	r2, [r7, #2]
 80115e2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80115e4:	2300      	movs	r3, #0
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3714      	adds	r7, #20
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr

080115f2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b082      	sub	sp, #8
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f7f0 fca0 	bl	8001f40 <HAL_Delay>
}
 8011600:	bf00      	nop
 8011602:	3708      	adds	r7, #8
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011608:	b480      	push	{r7}
 801160a:	b085      	sub	sp, #20
 801160c:	af00      	add	r7, sp, #0
 801160e:	4603      	mov	r3, r0
 8011610:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011616:	79fb      	ldrb	r3, [r7, #7]
 8011618:	2b03      	cmp	r3, #3
 801161a:	d817      	bhi.n	801164c <USBH_Get_USB_Status+0x44>
 801161c:	a201      	add	r2, pc, #4	@ (adr r2, 8011624 <USBH_Get_USB_Status+0x1c>)
 801161e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011622:	bf00      	nop
 8011624:	08011635 	.word	0x08011635
 8011628:	0801163b 	.word	0x0801163b
 801162c:	08011641 	.word	0x08011641
 8011630:	08011647 	.word	0x08011647
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011634:	2300      	movs	r3, #0
 8011636:	73fb      	strb	r3, [r7, #15]
    break;
 8011638:	e00b      	b.n	8011652 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801163a:	2302      	movs	r3, #2
 801163c:	73fb      	strb	r3, [r7, #15]
    break;
 801163e:	e008      	b.n	8011652 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011640:	2301      	movs	r3, #1
 8011642:	73fb      	strb	r3, [r7, #15]
    break;
 8011644:	e005      	b.n	8011652 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011646:	2302      	movs	r3, #2
 8011648:	73fb      	strb	r3, [r7, #15]
    break;
 801164a:	e002      	b.n	8011652 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801164c:	2302      	movs	r3, #2
 801164e:	73fb      	strb	r3, [r7, #15]
    break;
 8011650:	bf00      	nop
  }
  return usb_status;
 8011652:	7bfb      	ldrb	r3, [r7, #15]
}
 8011654:	4618      	mov	r0, r3
 8011656:	3714      	adds	r7, #20
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr

08011660 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	4603      	mov	r3, r0
 8011668:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801166a:	79fb      	ldrb	r3, [r7, #7]
 801166c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801166e:	79fb      	ldrb	r3, [r7, #7]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d102      	bne.n	801167a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011674:	2300      	movs	r3, #0
 8011676:	73fb      	strb	r3, [r7, #15]
 8011678:	e001      	b.n	801167e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801167a:	2301      	movs	r3, #1
 801167c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 801167e:	7bfb      	ldrb	r3, [r7, #15]
 8011680:	461a      	mov	r2, r3
 8011682:	2104      	movs	r1, #4
 8011684:	4803      	ldr	r0, [pc, #12]	@ (8011694 <MX_DriverVbusFS+0x34>)
 8011686:	f7f2 fad3 	bl	8003c30 <HAL_GPIO_WritePin>
}
 801168a:	bf00      	nop
 801168c:	3710      	adds	r7, #16
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	40020400 	.word	0x40020400

08011698 <malloc>:
 8011698:	4b02      	ldr	r3, [pc, #8]	@ (80116a4 <malloc+0xc>)
 801169a:	4601      	mov	r1, r0
 801169c:	6818      	ldr	r0, [r3, #0]
 801169e:	f000 b82d 	b.w	80116fc <_malloc_r>
 80116a2:	bf00      	nop
 80116a4:	20000048 	.word	0x20000048

080116a8 <free>:
 80116a8:	4b02      	ldr	r3, [pc, #8]	@ (80116b4 <free+0xc>)
 80116aa:	4601      	mov	r1, r0
 80116ac:	6818      	ldr	r0, [r3, #0]
 80116ae:	f000 b8f5 	b.w	801189c <_free_r>
 80116b2:	bf00      	nop
 80116b4:	20000048 	.word	0x20000048

080116b8 <sbrk_aligned>:
 80116b8:	b570      	push	{r4, r5, r6, lr}
 80116ba:	4e0f      	ldr	r6, [pc, #60]	@ (80116f8 <sbrk_aligned+0x40>)
 80116bc:	460c      	mov	r4, r1
 80116be:	6831      	ldr	r1, [r6, #0]
 80116c0:	4605      	mov	r5, r0
 80116c2:	b911      	cbnz	r1, 80116ca <sbrk_aligned+0x12>
 80116c4:	f000 f8ae 	bl	8011824 <_sbrk_r>
 80116c8:	6030      	str	r0, [r6, #0]
 80116ca:	4621      	mov	r1, r4
 80116cc:	4628      	mov	r0, r5
 80116ce:	f000 f8a9 	bl	8011824 <_sbrk_r>
 80116d2:	1c43      	adds	r3, r0, #1
 80116d4:	d103      	bne.n	80116de <sbrk_aligned+0x26>
 80116d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80116da:	4620      	mov	r0, r4
 80116dc:	bd70      	pop	{r4, r5, r6, pc}
 80116de:	1cc4      	adds	r4, r0, #3
 80116e0:	f024 0403 	bic.w	r4, r4, #3
 80116e4:	42a0      	cmp	r0, r4
 80116e6:	d0f8      	beq.n	80116da <sbrk_aligned+0x22>
 80116e8:	1a21      	subs	r1, r4, r0
 80116ea:	4628      	mov	r0, r5
 80116ec:	f000 f89a 	bl	8011824 <_sbrk_r>
 80116f0:	3001      	adds	r0, #1
 80116f2:	d1f2      	bne.n	80116da <sbrk_aligned+0x22>
 80116f4:	e7ef      	b.n	80116d6 <sbrk_aligned+0x1e>
 80116f6:	bf00      	nop
 80116f8:	2000144c 	.word	0x2000144c

080116fc <_malloc_r>:
 80116fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011700:	1ccd      	adds	r5, r1, #3
 8011702:	f025 0503 	bic.w	r5, r5, #3
 8011706:	3508      	adds	r5, #8
 8011708:	2d0c      	cmp	r5, #12
 801170a:	bf38      	it	cc
 801170c:	250c      	movcc	r5, #12
 801170e:	2d00      	cmp	r5, #0
 8011710:	4606      	mov	r6, r0
 8011712:	db01      	blt.n	8011718 <_malloc_r+0x1c>
 8011714:	42a9      	cmp	r1, r5
 8011716:	d904      	bls.n	8011722 <_malloc_r+0x26>
 8011718:	230c      	movs	r3, #12
 801171a:	6033      	str	r3, [r6, #0]
 801171c:	2000      	movs	r0, #0
 801171e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011722:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80117f8 <_malloc_r+0xfc>
 8011726:	f000 f869 	bl	80117fc <__malloc_lock>
 801172a:	f8d8 3000 	ldr.w	r3, [r8]
 801172e:	461c      	mov	r4, r3
 8011730:	bb44      	cbnz	r4, 8011784 <_malloc_r+0x88>
 8011732:	4629      	mov	r1, r5
 8011734:	4630      	mov	r0, r6
 8011736:	f7ff ffbf 	bl	80116b8 <sbrk_aligned>
 801173a:	1c43      	adds	r3, r0, #1
 801173c:	4604      	mov	r4, r0
 801173e:	d158      	bne.n	80117f2 <_malloc_r+0xf6>
 8011740:	f8d8 4000 	ldr.w	r4, [r8]
 8011744:	4627      	mov	r7, r4
 8011746:	2f00      	cmp	r7, #0
 8011748:	d143      	bne.n	80117d2 <_malloc_r+0xd6>
 801174a:	2c00      	cmp	r4, #0
 801174c:	d04b      	beq.n	80117e6 <_malloc_r+0xea>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	4639      	mov	r1, r7
 8011752:	4630      	mov	r0, r6
 8011754:	eb04 0903 	add.w	r9, r4, r3
 8011758:	f000 f864 	bl	8011824 <_sbrk_r>
 801175c:	4581      	cmp	r9, r0
 801175e:	d142      	bne.n	80117e6 <_malloc_r+0xea>
 8011760:	6821      	ldr	r1, [r4, #0]
 8011762:	1a6d      	subs	r5, r5, r1
 8011764:	4629      	mov	r1, r5
 8011766:	4630      	mov	r0, r6
 8011768:	f7ff ffa6 	bl	80116b8 <sbrk_aligned>
 801176c:	3001      	adds	r0, #1
 801176e:	d03a      	beq.n	80117e6 <_malloc_r+0xea>
 8011770:	6823      	ldr	r3, [r4, #0]
 8011772:	442b      	add	r3, r5
 8011774:	6023      	str	r3, [r4, #0]
 8011776:	f8d8 3000 	ldr.w	r3, [r8]
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	bb62      	cbnz	r2, 80117d8 <_malloc_r+0xdc>
 801177e:	f8c8 7000 	str.w	r7, [r8]
 8011782:	e00f      	b.n	80117a4 <_malloc_r+0xa8>
 8011784:	6822      	ldr	r2, [r4, #0]
 8011786:	1b52      	subs	r2, r2, r5
 8011788:	d420      	bmi.n	80117cc <_malloc_r+0xd0>
 801178a:	2a0b      	cmp	r2, #11
 801178c:	d917      	bls.n	80117be <_malloc_r+0xc2>
 801178e:	1961      	adds	r1, r4, r5
 8011790:	42a3      	cmp	r3, r4
 8011792:	6025      	str	r5, [r4, #0]
 8011794:	bf18      	it	ne
 8011796:	6059      	strne	r1, [r3, #4]
 8011798:	6863      	ldr	r3, [r4, #4]
 801179a:	bf08      	it	eq
 801179c:	f8c8 1000 	streq.w	r1, [r8]
 80117a0:	5162      	str	r2, [r4, r5]
 80117a2:	604b      	str	r3, [r1, #4]
 80117a4:	4630      	mov	r0, r6
 80117a6:	f000 f82f 	bl	8011808 <__malloc_unlock>
 80117aa:	f104 000b 	add.w	r0, r4, #11
 80117ae:	1d23      	adds	r3, r4, #4
 80117b0:	f020 0007 	bic.w	r0, r0, #7
 80117b4:	1ac2      	subs	r2, r0, r3
 80117b6:	bf1c      	itt	ne
 80117b8:	1a1b      	subne	r3, r3, r0
 80117ba:	50a3      	strne	r3, [r4, r2]
 80117bc:	e7af      	b.n	801171e <_malloc_r+0x22>
 80117be:	6862      	ldr	r2, [r4, #4]
 80117c0:	42a3      	cmp	r3, r4
 80117c2:	bf0c      	ite	eq
 80117c4:	f8c8 2000 	streq.w	r2, [r8]
 80117c8:	605a      	strne	r2, [r3, #4]
 80117ca:	e7eb      	b.n	80117a4 <_malloc_r+0xa8>
 80117cc:	4623      	mov	r3, r4
 80117ce:	6864      	ldr	r4, [r4, #4]
 80117d0:	e7ae      	b.n	8011730 <_malloc_r+0x34>
 80117d2:	463c      	mov	r4, r7
 80117d4:	687f      	ldr	r7, [r7, #4]
 80117d6:	e7b6      	b.n	8011746 <_malloc_r+0x4a>
 80117d8:	461a      	mov	r2, r3
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	42a3      	cmp	r3, r4
 80117de:	d1fb      	bne.n	80117d8 <_malloc_r+0xdc>
 80117e0:	2300      	movs	r3, #0
 80117e2:	6053      	str	r3, [r2, #4]
 80117e4:	e7de      	b.n	80117a4 <_malloc_r+0xa8>
 80117e6:	230c      	movs	r3, #12
 80117e8:	6033      	str	r3, [r6, #0]
 80117ea:	4630      	mov	r0, r6
 80117ec:	f000 f80c 	bl	8011808 <__malloc_unlock>
 80117f0:	e794      	b.n	801171c <_malloc_r+0x20>
 80117f2:	6005      	str	r5, [r0, #0]
 80117f4:	e7d6      	b.n	80117a4 <_malloc_r+0xa8>
 80117f6:	bf00      	nop
 80117f8:	20001450 	.word	0x20001450

080117fc <__malloc_lock>:
 80117fc:	4801      	ldr	r0, [pc, #4]	@ (8011804 <__malloc_lock+0x8>)
 80117fe:	f000 b84b 	b.w	8011898 <__retarget_lock_acquire_recursive>
 8011802:	bf00      	nop
 8011804:	20001590 	.word	0x20001590

08011808 <__malloc_unlock>:
 8011808:	4801      	ldr	r0, [pc, #4]	@ (8011810 <__malloc_unlock+0x8>)
 801180a:	f000 b846 	b.w	801189a <__retarget_lock_release_recursive>
 801180e:	bf00      	nop
 8011810:	20001590 	.word	0x20001590

08011814 <memset>:
 8011814:	4402      	add	r2, r0
 8011816:	4603      	mov	r3, r0
 8011818:	4293      	cmp	r3, r2
 801181a:	d100      	bne.n	801181e <memset+0xa>
 801181c:	4770      	bx	lr
 801181e:	f803 1b01 	strb.w	r1, [r3], #1
 8011822:	e7f9      	b.n	8011818 <memset+0x4>

08011824 <_sbrk_r>:
 8011824:	b538      	push	{r3, r4, r5, lr}
 8011826:	4d06      	ldr	r5, [pc, #24]	@ (8011840 <_sbrk_r+0x1c>)
 8011828:	2300      	movs	r3, #0
 801182a:	4604      	mov	r4, r0
 801182c:	4608      	mov	r0, r1
 801182e:	602b      	str	r3, [r5, #0]
 8011830:	f7f0 fad2 	bl	8001dd8 <_sbrk>
 8011834:	1c43      	adds	r3, r0, #1
 8011836:	d102      	bne.n	801183e <_sbrk_r+0x1a>
 8011838:	682b      	ldr	r3, [r5, #0]
 801183a:	b103      	cbz	r3, 801183e <_sbrk_r+0x1a>
 801183c:	6023      	str	r3, [r4, #0]
 801183e:	bd38      	pop	{r3, r4, r5, pc}
 8011840:	2000158c 	.word	0x2000158c

08011844 <__errno>:
 8011844:	4b01      	ldr	r3, [pc, #4]	@ (801184c <__errno+0x8>)
 8011846:	6818      	ldr	r0, [r3, #0]
 8011848:	4770      	bx	lr
 801184a:	bf00      	nop
 801184c:	20000048 	.word	0x20000048

08011850 <__libc_init_array>:
 8011850:	b570      	push	{r4, r5, r6, lr}
 8011852:	4d0d      	ldr	r5, [pc, #52]	@ (8011888 <__libc_init_array+0x38>)
 8011854:	4c0d      	ldr	r4, [pc, #52]	@ (801188c <__libc_init_array+0x3c>)
 8011856:	1b64      	subs	r4, r4, r5
 8011858:	10a4      	asrs	r4, r4, #2
 801185a:	2600      	movs	r6, #0
 801185c:	42a6      	cmp	r6, r4
 801185e:	d109      	bne.n	8011874 <__libc_init_array+0x24>
 8011860:	4d0b      	ldr	r5, [pc, #44]	@ (8011890 <__libc_init_array+0x40>)
 8011862:	4c0c      	ldr	r4, [pc, #48]	@ (8011894 <__libc_init_array+0x44>)
 8011864:	f000 f864 	bl	8011930 <_init>
 8011868:	1b64      	subs	r4, r4, r5
 801186a:	10a4      	asrs	r4, r4, #2
 801186c:	2600      	movs	r6, #0
 801186e:	42a6      	cmp	r6, r4
 8011870:	d105      	bne.n	801187e <__libc_init_array+0x2e>
 8011872:	bd70      	pop	{r4, r5, r6, pc}
 8011874:	f855 3b04 	ldr.w	r3, [r5], #4
 8011878:	4798      	blx	r3
 801187a:	3601      	adds	r6, #1
 801187c:	e7ee      	b.n	801185c <__libc_init_array+0xc>
 801187e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011882:	4798      	blx	r3
 8011884:	3601      	adds	r6, #1
 8011886:	e7f2      	b.n	801186e <__libc_init_array+0x1e>
 8011888:	08011a80 	.word	0x08011a80
 801188c:	08011a80 	.word	0x08011a80
 8011890:	08011a80 	.word	0x08011a80
 8011894:	08011a84 	.word	0x08011a84

08011898 <__retarget_lock_acquire_recursive>:
 8011898:	4770      	bx	lr

0801189a <__retarget_lock_release_recursive>:
 801189a:	4770      	bx	lr

0801189c <_free_r>:
 801189c:	b538      	push	{r3, r4, r5, lr}
 801189e:	4605      	mov	r5, r0
 80118a0:	2900      	cmp	r1, #0
 80118a2:	d041      	beq.n	8011928 <_free_r+0x8c>
 80118a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80118a8:	1f0c      	subs	r4, r1, #4
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	bfb8      	it	lt
 80118ae:	18e4      	addlt	r4, r4, r3
 80118b0:	f7ff ffa4 	bl	80117fc <__malloc_lock>
 80118b4:	4a1d      	ldr	r2, [pc, #116]	@ (801192c <_free_r+0x90>)
 80118b6:	6813      	ldr	r3, [r2, #0]
 80118b8:	b933      	cbnz	r3, 80118c8 <_free_r+0x2c>
 80118ba:	6063      	str	r3, [r4, #4]
 80118bc:	6014      	str	r4, [r2, #0]
 80118be:	4628      	mov	r0, r5
 80118c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118c4:	f7ff bfa0 	b.w	8011808 <__malloc_unlock>
 80118c8:	42a3      	cmp	r3, r4
 80118ca:	d908      	bls.n	80118de <_free_r+0x42>
 80118cc:	6820      	ldr	r0, [r4, #0]
 80118ce:	1821      	adds	r1, r4, r0
 80118d0:	428b      	cmp	r3, r1
 80118d2:	bf01      	itttt	eq
 80118d4:	6819      	ldreq	r1, [r3, #0]
 80118d6:	685b      	ldreq	r3, [r3, #4]
 80118d8:	1809      	addeq	r1, r1, r0
 80118da:	6021      	streq	r1, [r4, #0]
 80118dc:	e7ed      	b.n	80118ba <_free_r+0x1e>
 80118de:	461a      	mov	r2, r3
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	b10b      	cbz	r3, 80118e8 <_free_r+0x4c>
 80118e4:	42a3      	cmp	r3, r4
 80118e6:	d9fa      	bls.n	80118de <_free_r+0x42>
 80118e8:	6811      	ldr	r1, [r2, #0]
 80118ea:	1850      	adds	r0, r2, r1
 80118ec:	42a0      	cmp	r0, r4
 80118ee:	d10b      	bne.n	8011908 <_free_r+0x6c>
 80118f0:	6820      	ldr	r0, [r4, #0]
 80118f2:	4401      	add	r1, r0
 80118f4:	1850      	adds	r0, r2, r1
 80118f6:	4283      	cmp	r3, r0
 80118f8:	6011      	str	r1, [r2, #0]
 80118fa:	d1e0      	bne.n	80118be <_free_r+0x22>
 80118fc:	6818      	ldr	r0, [r3, #0]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	6053      	str	r3, [r2, #4]
 8011902:	4408      	add	r0, r1
 8011904:	6010      	str	r0, [r2, #0]
 8011906:	e7da      	b.n	80118be <_free_r+0x22>
 8011908:	d902      	bls.n	8011910 <_free_r+0x74>
 801190a:	230c      	movs	r3, #12
 801190c:	602b      	str	r3, [r5, #0]
 801190e:	e7d6      	b.n	80118be <_free_r+0x22>
 8011910:	6820      	ldr	r0, [r4, #0]
 8011912:	1821      	adds	r1, r4, r0
 8011914:	428b      	cmp	r3, r1
 8011916:	bf04      	itt	eq
 8011918:	6819      	ldreq	r1, [r3, #0]
 801191a:	685b      	ldreq	r3, [r3, #4]
 801191c:	6063      	str	r3, [r4, #4]
 801191e:	bf04      	itt	eq
 8011920:	1809      	addeq	r1, r1, r0
 8011922:	6021      	streq	r1, [r4, #0]
 8011924:	6054      	str	r4, [r2, #4]
 8011926:	e7ca      	b.n	80118be <_free_r+0x22>
 8011928:	bd38      	pop	{r3, r4, r5, pc}
 801192a:	bf00      	nop
 801192c:	20001450 	.word	0x20001450

08011930 <_init>:
 8011930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011932:	bf00      	nop
 8011934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011936:	bc08      	pop	{r3}
 8011938:	469e      	mov	lr, r3
 801193a:	4770      	bx	lr

0801193c <_fini>:
 801193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801193e:	bf00      	nop
 8011940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011942:	bc08      	pop	{r3}
 8011944:	469e      	mov	lr, r3
 8011946:	4770      	bx	lr
