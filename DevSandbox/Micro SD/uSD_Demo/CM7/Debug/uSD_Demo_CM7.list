
uSD_Demo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d868  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800db08  0800db08  0000eb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc88  0800dc88  0000f078  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc88  0800dc88  0000ec88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc90  0800dc90  0000f078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc90  0800dc90  0000ec90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dc94  0800dc94  0000ec94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  24000000  0800dc98  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  24000078  0800dd10  0000f078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000880  0800dd10  0000f880  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f77b  00000000  00000000  0000f0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d90  00000000  00000000  0002e821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  000325b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f5  00000000  00000000  00033e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ec22  00000000  00000000  0003513d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002422c  00000000  00000000  00073d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018b928  00000000  00000000  00097f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002238b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ec4  00000000  00000000  002238f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0022a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800daf0 	.word	0x0800daf0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800daf0 	.word	0x0800daf0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b49      	ldr	r3, [pc, #292]	@ (800079c <SystemInit+0x12c>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a48      	ldr	r2, [pc, #288]	@ (800079c <SystemInit+0x12c>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b45      	ldr	r3, [pc, #276]	@ (800079c <SystemInit+0x12c>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a44      	ldr	r2, [pc, #272]	@ (800079c <SystemInit+0x12c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <SystemInit+0x130>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <SystemInit+0x130>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a3e      	ldr	r2, [pc, #248]	@ (80007a0 <SystemInit+0x130>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <SystemInit+0x134>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3c      	ldr	r2, [pc, #240]	@ (80007a4 <SystemInit+0x134>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <SystemInit+0x134>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <SystemInit+0x134>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4938      	ldr	r1, [pc, #224]	@ (80007a4 <SystemInit+0x134>)
 80006c4:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <SystemInit+0x138>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b35      	ldr	r3, [pc, #212]	@ (80007a0 <SystemInit+0x130>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <SystemInit+0x130>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a30      	ldr	r2, [pc, #192]	@ (80007a0 <SystemInit+0x130>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <SystemInit+0x134>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <SystemInit+0x134>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <SystemInit+0x134>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <SystemInit+0x134>)
 80006fa:	4a2c      	ldr	r2, [pc, #176]	@ (80007ac <SystemInit+0x13c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <SystemInit+0x134>)
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemInit+0x140>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemInit+0x134>)
 8000706:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <SystemInit+0x144>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <SystemInit+0x134>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemInit+0x134>)
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <SystemInit+0x144>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemInit+0x134>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SystemInit+0x134>)
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemInit+0x144>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemInit+0x134>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1d      	ldr	r2, [pc, #116]	@ (80007a4 <SystemInit+0x134>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <SystemInit+0x134>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <SystemInit+0x148>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <SystemInit+0x148>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <SystemInit+0x14c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x150>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <SystemInit+0x154>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <SystemInit+0x134>)
 800075c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d113      	bne.n	8000790 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <SystemInit+0x134>)
 800076a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800076e:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <SystemInit+0x134>)
 8000770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000774:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <SystemInit+0x158>)
 800077a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800077e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <SystemInit+0x134>)
 8000782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <SystemInit+0x134>)
 8000788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800078c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	52002000 	.word	0x52002000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007ac:	02020200 	.word	0x02020200
 80007b0:	01ff0000 	.word	0x01ff0000
 80007b4:	01010280 	.word	0x01010280
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108
 80007c8:	52004000 	.word	0x52004000

080007cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <ExitRun0Mode+0x30>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	f023 0306 	bic.w	r3, r3, #6
 80007d8:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <ExitRun0Mode+0x30>)
 80007da:	f043 0302 	orr.w	r3, r3, #2
 80007de:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007e0:	bf00      	nop
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <ExitRun0Mode+0x30>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f9      	beq.n	80007e2 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	58024800 	.word	0x58024800

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000806:	f000 fb4f 	bl	8000ea8 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800080a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800080e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000810:	bf00      	nop
 8000812:	4b44      	ldr	r3, [pc, #272]	@ (8000924 <main+0x124>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d004      	beq.n	8000828 <main+0x28>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dcf4      	bgt.n	8000812 <main+0x12>
  if ( timeout < 0 )
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	da01      	bge.n	8000832 <main+0x32>
  {
  Error_Handler();
 800082e:	f000 fb67 	bl	8000f00 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fecb 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f889 	bl	800094c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800083a:	f000 f8fd 	bl	8000a38 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800083e:	4b39      	ldr	r3, [pc, #228]	@ (8000924 <main+0x124>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000844:	4a37      	ldr	r2, [pc, #220]	@ (8000924 <main+0x124>)
 8000846:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800084a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800084e:	4b35      	ldr	r3, [pc, #212]	@ (8000924 <main+0x124>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800085c:	2000      	movs	r0, #0
 800085e:	f002 f869 	bl	8002934 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f002 f87f 	bl	8002968 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800086a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800086e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000870:	bf00      	nop
 8000872:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <main+0x124>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d104      	bne.n	8000888 <main+0x88>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	1e5a      	subs	r2, r3, #1
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	dcf4      	bgt.n	8000872 <main+0x72>
if ( timeout < 0 )
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	da01      	bge.n	8000892 <main+0x92>
{
Error_Handler();
 800088e:	f000 fb37 	bl	8000f00 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 f9f5 	bl	8000c80 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000896:	f000 f8ed 	bl	8000a74 <MX_I2C1_Init>
  MX_SPI1_Init();
 800089a:	f000 f94d 	bl	8000b38 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 800089e:	f000 f927 	bl	8000af0 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80008a2:	f000 f9a1 	bl	8000be8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80008a6:	f009 ff89 	bl	800a7bc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fres = f_mount(&fatfs, "", 1);
 80008aa:	2201      	movs	r2, #1
 80008ac:	491e      	ldr	r1, [pc, #120]	@ (8000928 <main+0x128>)
 80008ae:	481f      	ldr	r0, [pc, #124]	@ (800092c <main+0x12c>)
 80008b0:	f00b fe1c 	bl	800c4ec <f_mount>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <main+0x130>)
 80008ba:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) printf("f_mount error (%i)\r\n", fres);
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <main+0x130>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d005      	beq.n	80008d0 <main+0xd0>
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <main+0x130>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	481a      	ldr	r0, [pc, #104]	@ (8000934 <main+0x134>)
 80008cc:	f00c faa2 	bl	800ce14 <iprintf>

  fres = f_open(&fil, "test.txt", FA_OPEN_ALWAYS | FA_WRITE); //open and read/write access, if does not exist create new
 80008d0:	2212      	movs	r2, #18
 80008d2:	4919      	ldr	r1, [pc, #100]	@ (8000938 <main+0x138>)
 80008d4:	4819      	ldr	r0, [pc, #100]	@ (800093c <main+0x13c>)
 80008d6:	f00b fe4f 	bl	800c578 <f_open>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <main+0x130>)
 80008e0:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) printf("f_open error (%i)\r\n", fres);
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <main+0x130>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d005      	beq.n	80008f6 <main+0xf6>
 80008ea:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <main+0x130>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4619      	mov	r1, r3
 80008f0:	4813      	ldr	r0, [pc, #76]	@ (8000940 <main+0x140>)
 80008f2:	f00c fa8f 	bl	800ce14 <iprintf>

  fres = f_write(&fil, &demoText, sizeof(demoText), &bytesWritten);
 80008f6:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <main+0x144>)
 80008f8:	220b      	movs	r2, #11
 80008fa:	4913      	ldr	r1, [pc, #76]	@ (8000948 <main+0x148>)
 80008fc:	480f      	ldr	r0, [pc, #60]	@ (800093c <main+0x13c>)
 80008fe:	f00b fff5 	bl	800c8ec <f_write>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <main+0x130>)
 8000908:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) printf("f_open error (%i)\r\n", fres);
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <main+0x130>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d006      	beq.n	8000920 <main+0x120>
 8000912:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <main+0x130>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4619      	mov	r1, r3
 8000918:	4809      	ldr	r0, [pc, #36]	@ (8000940 <main+0x140>)
 800091a:	f00c fa7b 	bl	800ce14 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <main+0x120>
 8000924:	58024400 	.word	0x58024400
 8000928:	0800db08 	.word	0x0800db08
 800092c:	24000280 	.word	0x24000280
 8000930:	240006e0 	.word	0x240006e0
 8000934:	0800db0c 	.word	0x0800db0c
 8000938:	0800db24 	.word	0x0800db24
 800093c:	240004b0 	.word	0x240004b0
 8000940:	0800db30 	.word	0x0800db30
 8000944:	240006e4 	.word	0x240006e4
 8000948:	24000008 	.word	0x24000008

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b09c      	sub	sp, #112	@ 0x70
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000956:	224c      	movs	r2, #76	@ 0x4c
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f00c faaf 	bl	800cebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2220      	movs	r2, #32
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f00c faa9 	bl	800cebe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800096c:	2004      	movs	r0, #4
 800096e:	f002 f95d 	bl	8002c2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b2d      	ldr	r3, [pc, #180]	@ (8000a2c <SystemClock_Config+0xe0>)
 8000978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800097a:	4a2c      	ldr	r2, [pc, #176]	@ (8000a2c <SystemClock_Config+0xe0>)
 800097c:	f023 0301 	bic.w	r3, r3, #1
 8000980:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000982:	4b2a      	ldr	r3, [pc, #168]	@ (8000a2c <SystemClock_Config+0xe0>)
 8000984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <SystemClock_Config+0xe4>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000994:	4a26      	ldr	r2, [pc, #152]	@ (8000a30 <SystemClock_Config+0xe4>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b24      	ldr	r3, [pc, #144]	@ (8000a30 <SystemClock_Config+0xe4>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009a8:	bf00      	nop
 80009aa:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <SystemClock_Config+0xe4>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009b6:	d1f8      	bne.n	80009aa <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80009b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a34 <SystemClock_Config+0xe8>)
 80009ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a34 <SystemClock_Config+0xe8>)
 80009be:	f023 0303 	bic.w	r3, r3, #3
 80009c2:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 80009c4:	2312      	movs	r3, #18
 80009c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80009d0:	2380      	movs	r3, #128	@ 0x80
 80009d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80009d4:	2320      	movs	r3, #32
 80009d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d8:	2300      	movs	r3, #0
 80009da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 f97d 	bl	8002ce0 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80009ec:	f000 fa88 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	233f      	movs	r3, #63	@ 0x3f
 80009f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2101      	movs	r1, #1
 8000a14:	4618      	mov	r0, r3
 8000a16:	f002 fdbd 	bl	8003594 <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000a20:	f000 fa6e 	bl	8000f00 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3770      	adds	r7, #112	@ 0x70
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	58000400 	.word	0x58000400
 8000a30:	58024800 	.word	0x58024800
 8000a34:	58024400 	.word	0x58024400

08000a38 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0b0      	sub	sp, #192	@ 0xc0
 8000a3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	22c0      	movs	r2, #192	@ 0xc0
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00c fa3a 	bl	800cebe <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000a4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a4e:	f04f 0300 	mov.w	r3, #0
 8000a52:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000a56:	2300      	movs	r3, #0
 8000a58:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 f925 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000a68:	f000 fa4a 	bl	8000f00 <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	37c0      	adds	r7, #192	@ 0xc0
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aec <MX_I2C1_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a80:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000a84:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a86:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab0:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000ab2:	f001 ff6d 	bl	8002990 <HAL_I2C_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000abc:	f000 fa20 	bl	8000f00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4809      	ldr	r0, [pc, #36]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000ac4:	f002 f81a 	bl	8002afc <HAL_I2CEx_ConfigAnalogFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ace:	f000 fa17 	bl	8000f00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000ad6:	f002 f85c 	bl	8002b92 <HAL_I2CEx_ConfigDigitalFilter>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ae0:	f000 fa0e 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	24000094 	.word	0x24000094
 8000aec:	40005400 	.word	0x40005400

08000af0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_SDMMC1_SD_Init+0x40>)
 8000af6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <MX_SDMMC1_SD_Init+0x44>)
 8000af8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <MX_SDMMC1_SD_Init+0x40>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_SDMMC1_SD_Init+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <MX_SDMMC1_SD_Init+0x40>)
 8000b08:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b0c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_SDMMC1_SD_Init+0x40>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_SDMMC1_SD_Init+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_SDMMC1_SD_Init+0x40>)
 8000b1c:	f005 fdc4 	bl	80066a8 <HAL_SD_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000b26:	f000 f9eb 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	240000e8 	.word	0x240000e8
 8000b34:	52007000 	.word	0x52007000

08000b38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b3c:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b3e:	4a29      	ldr	r2, [pc, #164]	@ (8000be4 <MX_SPI1_Init+0xac>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b27      	ldr	r3, [pc, #156]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b44:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b25      	ldr	r3, [pc, #148]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b52:	2207      	movs	r2, #7
 8000b54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	4b22      	ldr	r3, [pc, #136]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b5c:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b66:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b6e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000b72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b80:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b92:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_SPI1_Init+0xa8>)
 8000bcc:	f006 ff56 	bl	8007a7c <HAL_SPI_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000bd6:	f000 f993 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000164 	.word	0x24000164
 8000be4:	40013000 	.word	0x40013000

08000be8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bec:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000bee:	4a23      	ldr	r2, [pc, #140]	@ (8000c7c <MX_USART3_UART_Init+0x94>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c30:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c32:	f007 fb1c 	bl	800826e <HAL_UART_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c3c:	f000 f960 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c40:	2100      	movs	r1, #0
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c44:	f008 ff76 	bl	8009b34 <HAL_UARTEx_SetTxFifoThreshold>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c4e:	f000 f957 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c56:	f008 ffab 	bl	8009bb0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c60:	f000 f94e 	bl	8000f00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <MX_USART3_UART_Init+0x90>)
 8000c66:	f008 ff2c 	bl	8009ac2 <HAL_UARTEx_DisableFifoMode>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c70:	f000 f946 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	240001ec 	.word	0x240001ec
 8000c7c:	40004800 	.word	0x40004800

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	@ 0x30
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	4b7d      	ldr	r3, [pc, #500]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	4a7b      	ldr	r2, [pc, #492]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca6:	4b79      	ldr	r3, [pc, #484]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b75      	ldr	r3, [pc, #468]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cba:	4a74      	ldr	r2, [pc, #464]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc4:	4b71      	ldr	r3, [pc, #452]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	4a6c      	ldr	r2, [pc, #432]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cf0:	4b66      	ldr	r3, [pc, #408]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	4a65      	ldr	r2, [pc, #404]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d00:	4b62      	ldr	r3, [pc, #392]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	f003 0320 	and.w	r3, r3, #32
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4b5f      	ldr	r3, [pc, #380]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	4a5d      	ldr	r2, [pc, #372]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d2c:	4b57      	ldr	r3, [pc, #348]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d32:	4a56      	ldr	r2, [pc, #344]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3c:	4b53      	ldr	r3, [pc, #332]	@ (8000e8c <MX_GPIO_Init+0x20c>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_TF_Pin|LED4_TV_Pin|LED2_TB_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	210d      	movs	r1, #13
 8000d4e:	4850      	ldr	r0, [pc, #320]	@ (8000e90 <MX_GPIO_Init+0x210>)
 8000d50:	f001 fdb2 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_TA_GPIO_Port, LED3_TA_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2102      	movs	r1, #2
 8000d58:	484e      	ldr	r0, [pc, #312]	@ (8000e94 <MX_GPIO_Init+0x214>)
 8000d5a:	f001 fdad 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED5_AP2P_GPIO_Port, LED5_AP2P_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d64:	484c      	ldr	r0, [pc, #304]	@ (8000e98 <MX_GPIO_Init+0x218>)
 8000d66:	f001 fda7 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d70:	484a      	ldr	r0, [pc, #296]	@ (8000e9c <MX_GPIO_Init+0x21c>)
 8000d72:	f001 fda1 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_TX_GPIO_Port, LED6_TX_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d7c:	4848      	ldr	r0, [pc, #288]	@ (8000ea0 <MX_GPIO_Init+0x220>)
 8000d7e:	f001 fd9b 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000d82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	483d      	ldr	r0, [pc, #244]	@ (8000e90 <MX_GPIO_Init+0x210>)
 8000d9a:	f001 fbc5 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_TF_Pin LED4_TV_Pin LED2_TB_Pin */
  GPIO_InitStruct.Pin = LED1_TF_Pin|LED4_TV_Pin|LED2_TB_Pin;
 8000d9e:	230d      	movs	r3, #13
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4836      	ldr	r0, [pc, #216]	@ (8000e90 <MX_GPIO_Init+0x210>)
 8000db6:	f001 fbb7 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_INT_Pin */
  GPIO_InitStruct.Pin = NFC_INT_Pin;
 8000dba:	2308      	movs	r3, #8
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NFC_INT_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4835      	ldr	r0, [pc, #212]	@ (8000ea4 <MX_GPIO_Init+0x224>)
 8000dd0:	f001 fbaa 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_TA_Pin */
  GPIO_InitStruct.Pin = LED3_TA_Pin;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED3_TA_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	482a      	ldr	r0, [pc, #168]	@ (8000e94 <MX_GPIO_Init+0x214>)
 8000dec:	f001 fb9c 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED5_AP2P_Pin */
  GPIO_InitStruct.Pin = LED5_AP2P_Pin;
 8000df0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED5_AP2P_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4823      	ldr	r0, [pc, #140]	@ (8000e98 <MX_GPIO_Init+0x218>)
 8000e0a:	f001 fb8d 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000e0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	481d      	ldr	r0, [pc, #116]	@ (8000e9c <MX_GPIO_Init+0x21c>)
 8000e28:	f001 fb7e 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC1_CD_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin;
 8000e2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SDMMC1_CD_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4817      	ldr	r0, [pc, #92]	@ (8000ea0 <MX_GPIO_Init+0x220>)
 8000e42:	f001 fb71 	bl	8002528 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_TX_Pin */
  GPIO_InitStruct.Pin = LED6_TX_Pin;
 8000e46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED6_TX_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4810      	ldr	r0, [pc, #64]	@ (8000ea0 <MX_GPIO_Init+0x220>)
 8000e60:	f001 fb62 	bl	8002528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(NFC_INT_EXTI_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	2009      	movs	r0, #9
 8000e6a:	f000 fd4c 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(NFC_INT_EXTI_IRQn);
 8000e6e:	2009      	movs	r0, #9
 8000e70:	f000 fd63 	bl	800193a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(USER_BUTTON_EXTI_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2028      	movs	r0, #40	@ 0x28
 8000e7a:	f000 fd44 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USER_BUTTON_EXTI_IRQn);
 8000e7e:	2028      	movs	r0, #40	@ 0x28
 8000e80:	f000 fd5b 	bl	800193a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e84:	bf00      	nop
 8000e86:	3730      	adds	r7, #48	@ 0x30
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	58020800 	.word	0x58020800
 8000e94:	58020400 	.word	0x58020400
 8000e98:	58021400 	.word	0x58021400
 8000e9c:	58020c00 	.word	0x58020c00
 8000ea0:	58021800 	.word	0x58021800
 8000ea4:	58020000 	.word	0x58020000

08000ea8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eba:	f000 fd59 	bl	8001970 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000eca:	231f      	movs	r3, #31
 8000ecc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ece:	2387      	movs	r3, #135	@ 0x87
 8000ed0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eea:	463b      	mov	r3, r7
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fd77 	bl	80019e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ef2:	2004      	movs	r0, #4
 8000ef4:	f000 fd54 	bl	80019a0 <HAL_MPU_Enable>

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <Error_Handler+0x8>

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <HAL_MspInit+0x30>)
 8000f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f18:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <HAL_MspInit+0x30>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_MspInit+0x30>)
 8000f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	58024400 	.word	0x58024400

08000f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0ba      	sub	sp, #232	@ 0xe8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	22c0      	movs	r2, #192	@ 0xc0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f00b ffac 	bl	800cebe <memset>
  if(hi2c->Instance==I2C1)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001018 <HAL_I2C_MspInit+0xd8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d14f      	bne.n	8001010 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f70:	f04f 0208 	mov.w	r2, #8
 8000f74:	f04f 0300 	mov.w	r3, #0
 8000f78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_CSI;
 8000f7c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 fe8f 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000f94:	f7ff ffb4 	bl	8000f00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <HAL_I2C_MspInit+0xdc>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800101c <HAL_I2C_MspInit+0xdc>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <HAL_I2C_MspInit+0xdc>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbe:	2312      	movs	r3, #18
 8000fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4810      	ldr	r0, [pc, #64]	@ (8001020 <HAL_I2C_MspInit+0xe0>)
 8000fde:	f001 faa3 	bl	8002528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_I2C_MspInit+0xdc>)
 8000fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800101c <HAL_I2C_MspInit+0xdc>)
 8000fea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_I2C_MspInit+0xdc>)
 8000ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	201f      	movs	r0, #31
 8001006:	f000 fc7e 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800100a:	201f      	movs	r0, #31
 800100c:	f000 fc95 	bl	800193a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001010:	bf00      	nop
 8001012:	37e8      	adds	r7, #232	@ 0xe8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40005400 	.word	0x40005400
 800101c:	58024400 	.word	0x58024400
 8001020:	58020400 	.word	0x58020400

08001024 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0bc      	sub	sp, #240	@ 0xf0
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	22c0      	movs	r2, #192	@ 0xc0
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f00b ff3a 	bl	800cebe <memset>
  if(hsd->Instance==SDMMC1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a41      	ldr	r2, [pc, #260]	@ (8001154 <HAL_SD_MspInit+0x130>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d17a      	bne.n	800114a <HAL_SD_MspInit+0x126>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001054:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8001060:	2320      	movs	r3, #32
 8001062:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 96;
 8001064:	2360      	movs	r3, #96	@ 0x60
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800106c:	2302      	movs	r3, #2
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001074:	2340      	movs	r3, #64	@ 0x40
 8001076:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001078:	2300      	movs	r3, #0
 800107a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001080:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001084:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fe0e 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_SD_MspInit+0x76>
    {
      Error_Handler();
 8001096:	f7ff ff33 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800109a:	4b2f      	ldr	r3, [pc, #188]	@ (8001158 <HAL_SD_MspInit+0x134>)
 800109c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001158 <HAL_SD_MspInit+0x134>)
 80010a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80010aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001158 <HAL_SD_MspInit+0x134>)
 80010ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b8:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <HAL_SD_MspInit+0x134>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	4a26      	ldr	r2, [pc, #152]	@ (8001158 <HAL_SD_MspInit+0x134>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c8:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <HAL_SD_MspInit+0x134>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <HAL_SD_MspInit+0x134>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001158 <HAL_SD_MspInit+0x134>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <HAL_SD_MspInit+0x134>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80010f4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80010f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800110e:	230c      	movs	r3, #12
 8001110:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001118:	4619      	mov	r1, r3
 800111a:	4810      	ldr	r0, [pc, #64]	@ (800115c <HAL_SD_MspInit+0x138>)
 800111c:	f001 fa04 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001120:	2304      	movs	r3, #4
 8001122:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001138:	230c      	movs	r3, #12
 800113a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001142:	4619      	mov	r1, r3
 8001144:	4806      	ldr	r0, [pc, #24]	@ (8001160 <HAL_SD_MspInit+0x13c>)
 8001146:	f001 f9ef 	bl	8002528 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800114a:	bf00      	nop
 800114c:	37f0      	adds	r7, #240	@ 0xf0
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	52007000 	.word	0x52007000
 8001158:	58024400 	.word	0x58024400
 800115c:	58020800 	.word	0x58020800
 8001160:	58020c00 	.word	0x58020c00

08001164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0bc      	sub	sp, #240	@ 0xf0
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0318 	add.w	r3, r7, #24
 8001180:	22c0      	movs	r2, #192	@ 0xc0
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00b fe9a 	bl	800cebe <memset>
  if(hspi->Instance==SPI1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a3c      	ldr	r2, [pc, #240]	@ (8001280 <HAL_SPI_MspInit+0x11c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d171      	bne.n	8001278 <HAL_SPI_MspInit+0x114>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001194:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80011a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fd7e 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80011b6:	f7ff fea3 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ba:	4b32      	ldr	r3, [pc, #200]	@ (8001284 <HAL_SPI_MspInit+0x120>)
 80011bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011c0:	4a30      	ldr	r2, [pc, #192]	@ (8001284 <HAL_SPI_MspInit+0x120>)
 80011c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001284 <HAL_SPI_MspInit+0x120>)
 80011cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <HAL_SPI_MspInit+0x120>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011de:	4a29      	ldr	r2, [pc, #164]	@ (8001284 <HAL_SPI_MspInit+0x120>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e8:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <HAL_SPI_MspInit+0x120>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	4b23      	ldr	r3, [pc, #140]	@ (8001284 <HAL_SPI_MspInit+0x120>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <HAL_SPI_MspInit+0x120>)
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <HAL_SPI_MspInit+0x120>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001214:	2360      	movs	r3, #96	@ 0x60
 8001216:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800122c:	2305      	movs	r3, #5
 800122e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001236:	4619      	mov	r1, r3
 8001238:	4813      	ldr	r0, [pc, #76]	@ (8001288 <HAL_SPI_MspInit+0x124>)
 800123a:	f001 f975 	bl	8002528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800123e:	2320      	movs	r3, #32
 8001240:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001256:	2305      	movs	r3, #5
 8001258:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001260:	4619      	mov	r1, r3
 8001262:	480a      	ldr	r0, [pc, #40]	@ (800128c <HAL_SPI_MspInit+0x128>)
 8001264:	f001 f960 	bl	8002528 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2023      	movs	r0, #35	@ 0x23
 800126e:	f000 fb4a 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001272:	2023      	movs	r0, #35	@ 0x23
 8001274:	f000 fb61 	bl	800193a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001278:	bf00      	nop
 800127a:	37f0      	adds	r7, #240	@ 0xf0
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40013000 	.word	0x40013000
 8001284:	58024400 	.word	0x58024400
 8001288:	58020000 	.word	0x58020000
 800128c:	58020400 	.word	0x58020400

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ba      	sub	sp, #232	@ 0xe8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	22c0      	movs	r2, #192	@ 0xc0
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00b fe04 	bl	800cebe <memset>
  if(huart->Instance==USART3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001368 <HAL_UART_MspInit+0xd8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d14e      	bne.n	800135e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c0:	f04f 0202 	mov.w	r2, #2
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 80012cc:	2304      	movs	r3, #4
 80012ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 fce8 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012e2:	f7ff fe0d 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012e6:	4b21      	ldr	r3, [pc, #132]	@ (800136c <HAL_UART_MspInit+0xdc>)
 80012e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ec:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <HAL_UART_MspInit+0xdc>)
 80012ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <HAL_UART_MspInit+0xdc>)
 80012f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	4b19      	ldr	r3, [pc, #100]	@ (800136c <HAL_UART_MspInit+0xdc>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	4a18      	ldr	r2, [pc, #96]	@ (800136c <HAL_UART_MspInit+0xdc>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_UART_MspInit+0xdc>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001322:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800133c:	2307      	movs	r3, #7
 800133e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001342:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001346:	4619      	mov	r1, r3
 8001348:	4809      	ldr	r0, [pc, #36]	@ (8001370 <HAL_UART_MspInit+0xe0>)
 800134a:	f001 f8ed 	bl	8002528 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2027      	movs	r0, #39	@ 0x27
 8001354:	f000 fad7 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001358:	2027      	movs	r0, #39	@ 0x27
 800135a:	f000 faee 	bl	800193a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800135e:	bf00      	nop
 8001360:	37e8      	adds	r7, #232	@ 0xe8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40004800 	.word	0x40004800
 800136c:	58024400 	.word	0x58024400
 8001370:	58020c00 	.word	0x58020c00

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <NMI_Handler+0x4>

0800137c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <MemManage_Handler+0x4>

0800138c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <UsageFault_Handler+0x4>

0800139c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ca:	f000 f971 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 80013d6:	2008      	movs	r0, #8
 80013d8:	f001 fa87 	bl	80028ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <I2C1_EV_IRQHandler+0x10>)
 80013e6:	f001 fb6f 	bl	8002ac8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	24000094 	.word	0x24000094

080013f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <SPI1_IRQHandler+0x10>)
 80013fa:	f006 fc63 	bl	8007cc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	24000164 	.word	0x24000164

08001408 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <USART3_IRQHandler+0x10>)
 800140e:	f006 ff7f 	bl	8008310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	240001ec 	.word	0x240001ec

0800141c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001420:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001424:	f001 fa61 	bl	80028ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00a      	b.n	8001454 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800143e:	f3af 8000 	nop.w
 8001442:	4601      	mov	r1, r0
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	60ba      	str	r2, [r7, #8]
 800144a:	b2ca      	uxtb	r2, r1
 800144c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf0      	blt.n	800143e <_read+0x12>
  }

  return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e009      	b.n	800148c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60ba      	str	r2, [r7, #8]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf1      	blt.n	8001478 <_write+0x12>
  }
  return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_close>:

int _close(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014c6:	605a      	str	r2, [r3, #4]
  return 0;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_isatty>:

int _isatty(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f00b fd10 	bl	800cf5c <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	@ (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	24080000 	.word	0x24080000
 8001568:	00000400 	.word	0x00000400
 800156c:	240006e8 	.word	0x240006e8
 8001570:	24000880 	.word	0x24000880

08001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80015b0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001578:	f7ff f928 	bl	80007cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800157c:	f7ff f878 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	@ (80015b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	@ (80015b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	@ (80015c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a6:	f00b fcdf 	bl	800cf68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff f929 	bl	8000800 <main>
  bx  lr
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80015bc:	0800dc98 	.word	0x0800dc98
  ldr r2, =_sbss
 80015c0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80015c4:	24000880 	.word	0x24000880

080015c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC3_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d2:	2003      	movs	r0, #3
 80015d4:	f000 f98c 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015d8:	f002 f992 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80015dc:	4602      	mov	r2, r0
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_Init+0x68>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	0a1b      	lsrs	r3, r3, #8
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	4913      	ldr	r1, [pc, #76]	@ (8001638 <HAL_Init+0x6c>)
 80015ea:	5ccb      	ldrb	r3, [r1, r3]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <HAL_Init+0x68>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001638 <HAL_Init+0x6c>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	4a0b      	ldr	r2, [pc, #44]	@ (800163c <HAL_Init+0x70>)
 800160e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001610:	4a0b      	ldr	r2, [pc, #44]	@ (8001640 <HAL_Init+0x74>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001616:	200f      	movs	r0, #15
 8001618:	f000 f814 	bl	8001644 <HAL_InitTick>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e002      	b.n	800162c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001626:	f7ff fc71 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	58024400 	.word	0x58024400
 8001638:	0800db88 	.word	0x0800db88
 800163c:	24000004 	.word	0x24000004
 8001640:	24000000 	.word	0x24000000

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800164c:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <HAL_InitTick+0x60>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e021      	b.n	800169c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <HAL_InitTick+0x64>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_InitTick+0x60>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f971 	bl	8001956 <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800168c:	f000 f93b 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	@ (80016ac <HAL_InitTick+0x68>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	24000018 	.word	0x24000018
 80016a8:	24000000 	.word	0x24000000
 80016ac:	24000014 	.word	0x24000014

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	24000018 	.word	0x24000018
 80016d4:	240006ec 	.word	0x240006ec

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	240006ec 	.word	0x240006ec

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	24000018 	.word	0x24000018

08001738 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800173c:	4b03      	ldr	r3, [pc, #12]	@ (800174c <HAL_GetREVID+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0c1b      	lsrs	r3, r3, #16
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	5c001000 	.word	0x5c001000

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <__NVIC_SetPriorityGrouping+0x40>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	4313      	orrs	r3, r2
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <__NVIC_SetPriorityGrouping+0x40>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00
 8001794:	05fa0000 	.word	0x05fa0000

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	@ (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	@ (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	@ (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	@ 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff29 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff40 	bl	8001798 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff90 	bl	8001844 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5f 	bl	80017f0 <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff33 	bl	80017b4 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa4 	bl	80018ac <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001974:	f3bf 8f5f 	dmb	sy
}
 8001978:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <HAL_MPU_Disable+0x28>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	4a06      	ldr	r2, [pc, #24]	@ (8001998 <HAL_MPU_Disable+0x28>)
 8001980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001984:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_MPU_Disable+0x2c>)
 8001988:	2200      	movs	r2, #0
 800198a:	605a      	str	r2, [r3, #4]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00
 800199c:	e000ed90 	.word	0xe000ed90

080019a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019a8:	4a0b      	ldr	r2, [pc, #44]	@ (80019d8 <HAL_MPU_Enable+0x38>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <HAL_MPU_Enable+0x3c>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b6:	4a09      	ldr	r2, [pc, #36]	@ (80019dc <HAL_MPU_Enable+0x3c>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019bc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019be:	f3bf 8f4f 	dsb	sy
}
 80019c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019c4:	f3bf 8f6f 	isb	sy
}
 80019c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed90 	.word	0xe000ed90
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	785a      	ldrb	r2, [r3, #1]
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_MPU_ConfigRegion+0x7c>)
 80019ee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <HAL_MPU_ConfigRegion+0x7c>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	4a19      	ldr	r2, [pc, #100]	@ (8001a5c <HAL_MPU_ConfigRegion+0x7c>)
 80019f6:	f023 0301 	bic.w	r3, r3, #1
 80019fa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019fc:	4a17      	ldr	r2, [pc, #92]	@ (8001a5c <HAL_MPU_ConfigRegion+0x7c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7b1b      	ldrb	r3, [r3, #12]
 8001a08:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7adb      	ldrb	r3, [r3, #11]
 8001a0e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7a9b      	ldrb	r3, [r3, #10]
 8001a16:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7b5b      	ldrb	r3, [r3, #13]
 8001a1e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7b9b      	ldrb	r3, [r3, #14]
 8001a26:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7bdb      	ldrb	r3, [r3, #15]
 8001a2e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7a5b      	ldrb	r3, [r3, #9]
 8001a36:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7a1b      	ldrb	r3, [r3, #8]
 8001a3e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a40:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	7812      	ldrb	r2, [r2, #0]
 8001a46:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a48:	4a04      	ldr	r2, [pc, #16]	@ (8001a5c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a4a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a4c:	6113      	str	r3, [r2, #16]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed90 	.word	0xe000ed90

08001a60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff fe36 	bl	80016d8 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e2dc      	b.n	8002032 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d008      	beq.n	8001a96 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2280      	movs	r2, #128	@ 0x80
 8001a88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e2cd      	b.n	8002032 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a76      	ldr	r2, [pc, #472]	@ (8001c74 <HAL_DMA_Abort+0x214>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d04a      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a74      	ldr	r2, [pc, #464]	@ (8001c78 <HAL_DMA_Abort+0x218>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d045      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a73      	ldr	r2, [pc, #460]	@ (8001c7c <HAL_DMA_Abort+0x21c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d040      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a71      	ldr	r2, [pc, #452]	@ (8001c80 <HAL_DMA_Abort+0x220>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d03b      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a70      	ldr	r2, [pc, #448]	@ (8001c84 <HAL_DMA_Abort+0x224>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d036      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a6e      	ldr	r2, [pc, #440]	@ (8001c88 <HAL_DMA_Abort+0x228>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d031      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8001c8c <HAL_DMA_Abort+0x22c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d02c      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8001c90 <HAL_DMA_Abort+0x230>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d027      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6a      	ldr	r2, [pc, #424]	@ (8001c94 <HAL_DMA_Abort+0x234>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a68      	ldr	r2, [pc, #416]	@ (8001c98 <HAL_DMA_Abort+0x238>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01d      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a67      	ldr	r2, [pc, #412]	@ (8001c9c <HAL_DMA_Abort+0x23c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d018      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a65      	ldr	r2, [pc, #404]	@ (8001ca0 <HAL_DMA_Abort+0x240>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a64      	ldr	r2, [pc, #400]	@ (8001ca4 <HAL_DMA_Abort+0x244>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00e      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a62      	ldr	r2, [pc, #392]	@ (8001ca8 <HAL_DMA_Abort+0x248>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d009      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a61      	ldr	r2, [pc, #388]	@ (8001cac <HAL_DMA_Abort+0x24c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d004      	beq.n	8001b36 <HAL_DMA_Abort+0xd6>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a5f      	ldr	r2, [pc, #380]	@ (8001cb0 <HAL_DMA_Abort+0x250>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_DMA_Abort+0xda>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_DMA_Abort+0xdc>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 021e 	bic.w	r2, r2, #30
 8001b4e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b5e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	e00a      	b.n	8001b7e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 020e 	bic.w	r2, r2, #14
 8001b76:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a3c      	ldr	r2, [pc, #240]	@ (8001c74 <HAL_DMA_Abort+0x214>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d072      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c78 <HAL_DMA_Abort+0x218>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d06d      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a39      	ldr	r2, [pc, #228]	@ (8001c7c <HAL_DMA_Abort+0x21c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d068      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a37      	ldr	r2, [pc, #220]	@ (8001c80 <HAL_DMA_Abort+0x220>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d063      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a36      	ldr	r2, [pc, #216]	@ (8001c84 <HAL_DMA_Abort+0x224>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d05e      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a34      	ldr	r2, [pc, #208]	@ (8001c88 <HAL_DMA_Abort+0x228>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d059      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a33      	ldr	r2, [pc, #204]	@ (8001c8c <HAL_DMA_Abort+0x22c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d054      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a31      	ldr	r2, [pc, #196]	@ (8001c90 <HAL_DMA_Abort+0x230>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d04f      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a30      	ldr	r2, [pc, #192]	@ (8001c94 <HAL_DMA_Abort+0x234>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d04a      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c98 <HAL_DMA_Abort+0x238>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d045      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c9c <HAL_DMA_Abort+0x23c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d040      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca0 <HAL_DMA_Abort+0x240>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d03b      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca4 <HAL_DMA_Abort+0x244>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d036      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a28      	ldr	r2, [pc, #160]	@ (8001ca8 <HAL_DMA_Abort+0x248>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d031      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a27      	ldr	r2, [pc, #156]	@ (8001cac <HAL_DMA_Abort+0x24c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d02c      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a25      	ldr	r2, [pc, #148]	@ (8001cb0 <HAL_DMA_Abort+0x250>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d027      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a24      	ldr	r2, [pc, #144]	@ (8001cb4 <HAL_DMA_Abort+0x254>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d022      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a22      	ldr	r2, [pc, #136]	@ (8001cb8 <HAL_DMA_Abort+0x258>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01d      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_DMA_Abort+0x25c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d018      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <HAL_DMA_Abort+0x260>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc4 <HAL_DMA_Abort+0x264>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00e      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc8 <HAL_DMA_Abort+0x268>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ccc <HAL_DMA_Abort+0x26c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_DMA_Abort+0x20e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	@ (8001cd0 <HAL_DMA_Abort+0x270>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d132      	bne.n	8001cd4 <HAL_DMA_Abort+0x274>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e031      	b.n	8001cd6 <HAL_DMA_Abort+0x276>
 8001c72:	bf00      	nop
 8001c74:	40020010 	.word	0x40020010
 8001c78:	40020028 	.word	0x40020028
 8001c7c:	40020040 	.word	0x40020040
 8001c80:	40020058 	.word	0x40020058
 8001c84:	40020070 	.word	0x40020070
 8001c88:	40020088 	.word	0x40020088
 8001c8c:	400200a0 	.word	0x400200a0
 8001c90:	400200b8 	.word	0x400200b8
 8001c94:	40020410 	.word	0x40020410
 8001c98:	40020428 	.word	0x40020428
 8001c9c:	40020440 	.word	0x40020440
 8001ca0:	40020458 	.word	0x40020458
 8001ca4:	40020470 	.word	0x40020470
 8001ca8:	40020488 	.word	0x40020488
 8001cac:	400204a0 	.word	0x400204a0
 8001cb0:	400204b8 	.word	0x400204b8
 8001cb4:	58025408 	.word	0x58025408
 8001cb8:	5802541c 	.word	0x5802541c
 8001cbc:	58025430 	.word	0x58025430
 8001cc0:	58025444 	.word	0x58025444
 8001cc4:	58025458 	.word	0x58025458
 8001cc8:	5802546c 	.word	0x5802546c
 8001ccc:	58025480 	.word	0x58025480
 8001cd0:	58025494 	.word	0x58025494
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ce8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6d      	ldr	r2, [pc, #436]	@ (8001ea4 <HAL_DMA_Abort+0x444>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d04a      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a6b      	ldr	r2, [pc, #428]	@ (8001ea8 <HAL_DMA_Abort+0x448>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d045      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a6a      	ldr	r2, [pc, #424]	@ (8001eac <HAL_DMA_Abort+0x44c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d040      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a68      	ldr	r2, [pc, #416]	@ (8001eb0 <HAL_DMA_Abort+0x450>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d03b      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a67      	ldr	r2, [pc, #412]	@ (8001eb4 <HAL_DMA_Abort+0x454>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d036      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a65      	ldr	r2, [pc, #404]	@ (8001eb8 <HAL_DMA_Abort+0x458>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d031      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a64      	ldr	r2, [pc, #400]	@ (8001ebc <HAL_DMA_Abort+0x45c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d02c      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a62      	ldr	r2, [pc, #392]	@ (8001ec0 <HAL_DMA_Abort+0x460>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d027      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a61      	ldr	r2, [pc, #388]	@ (8001ec4 <HAL_DMA_Abort+0x464>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d022      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a5f      	ldr	r2, [pc, #380]	@ (8001ec8 <HAL_DMA_Abort+0x468>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01d      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a5e      	ldr	r2, [pc, #376]	@ (8001ecc <HAL_DMA_Abort+0x46c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d018      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed0 <HAL_DMA_Abort+0x470>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed4 <HAL_DMA_Abort+0x474>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00e      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a59      	ldr	r2, [pc, #356]	@ (8001ed8 <HAL_DMA_Abort+0x478>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d009      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a58      	ldr	r2, [pc, #352]	@ (8001edc <HAL_DMA_Abort+0x47c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d004      	beq.n	8001d8a <HAL_DMA_Abort+0x32a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a56      	ldr	r2, [pc, #344]	@ (8001ee0 <HAL_DMA_Abort+0x480>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d108      	bne.n	8001d9c <HAL_DMA_Abort+0x33c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0201 	bic.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e007      	b.n	8001dac <HAL_DMA_Abort+0x34c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001dac:	e013      	b.n	8001dd6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dae:	f7ff fc93 	bl	80016d8 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d90c      	bls.n	8001dd6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e12d      	b.n	8002032 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e5      	bne.n	8001dae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <HAL_DMA_Abort+0x444>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d04a      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea8 <HAL_DMA_Abort+0x448>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d045      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8001eac <HAL_DMA_Abort+0x44c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d040      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb0 <HAL_DMA_Abort+0x450>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d03b      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a29      	ldr	r2, [pc, #164]	@ (8001eb4 <HAL_DMA_Abort+0x454>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d036      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a27      	ldr	r2, [pc, #156]	@ (8001eb8 <HAL_DMA_Abort+0x458>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d031      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a26      	ldr	r2, [pc, #152]	@ (8001ebc <HAL_DMA_Abort+0x45c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d02c      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ec0 <HAL_DMA_Abort+0x460>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d027      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a23      	ldr	r2, [pc, #140]	@ (8001ec4 <HAL_DMA_Abort+0x464>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d022      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a21      	ldr	r2, [pc, #132]	@ (8001ec8 <HAL_DMA_Abort+0x468>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01d      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a20      	ldr	r2, [pc, #128]	@ (8001ecc <HAL_DMA_Abort+0x46c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d018      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed0 <HAL_DMA_Abort+0x470>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed4 <HAL_DMA_Abort+0x474>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d00e      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed8 <HAL_DMA_Abort+0x478>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1a      	ldr	r2, [pc, #104]	@ (8001edc <HAL_DMA_Abort+0x47c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d004      	beq.n	8001e82 <HAL_DMA_Abort+0x422>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <HAL_DMA_Abort+0x480>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_DMA_Abort+0x426>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_DMA_Abort+0x428>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d02b      	beq.n	8001ee4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e90:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	223f      	movs	r2, #63	@ 0x3f
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	e02a      	b.n	8001efa <HAL_DMA_Abort+0x49a>
 8001ea4:	40020010 	.word	0x40020010
 8001ea8:	40020028 	.word	0x40020028
 8001eac:	40020040 	.word	0x40020040
 8001eb0:	40020058 	.word	0x40020058
 8001eb4:	40020070 	.word	0x40020070
 8001eb8:	40020088 	.word	0x40020088
 8001ebc:	400200a0 	.word	0x400200a0
 8001ec0:	400200b8 	.word	0x400200b8
 8001ec4:	40020410 	.word	0x40020410
 8001ec8:	40020428 	.word	0x40020428
 8001ecc:	40020440 	.word	0x40020440
 8001ed0:	40020458 	.word	0x40020458
 8001ed4:	40020470 	.word	0x40020470
 8001ed8:	40020488 	.word	0x40020488
 8001edc:	400204a0 	.word	0x400204a0
 8001ee0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a4f      	ldr	r2, [pc, #316]	@ (800203c <HAL_DMA_Abort+0x5dc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d072      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a4d      	ldr	r2, [pc, #308]	@ (8002040 <HAL_DMA_Abort+0x5e0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d06d      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a4c      	ldr	r2, [pc, #304]	@ (8002044 <HAL_DMA_Abort+0x5e4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d068      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002048 <HAL_DMA_Abort+0x5e8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d063      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a49      	ldr	r2, [pc, #292]	@ (800204c <HAL_DMA_Abort+0x5ec>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d05e      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a47      	ldr	r2, [pc, #284]	@ (8002050 <HAL_DMA_Abort+0x5f0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d059      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a46      	ldr	r2, [pc, #280]	@ (8002054 <HAL_DMA_Abort+0x5f4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d054      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a44      	ldr	r2, [pc, #272]	@ (8002058 <HAL_DMA_Abort+0x5f8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d04f      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a43      	ldr	r2, [pc, #268]	@ (800205c <HAL_DMA_Abort+0x5fc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d04a      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a41      	ldr	r2, [pc, #260]	@ (8002060 <HAL_DMA_Abort+0x600>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d045      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a40      	ldr	r2, [pc, #256]	@ (8002064 <HAL_DMA_Abort+0x604>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d040      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3e      	ldr	r2, [pc, #248]	@ (8002068 <HAL_DMA_Abort+0x608>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d03b      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a3d      	ldr	r2, [pc, #244]	@ (800206c <HAL_DMA_Abort+0x60c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d036      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a3b      	ldr	r2, [pc, #236]	@ (8002070 <HAL_DMA_Abort+0x610>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d031      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a3a      	ldr	r2, [pc, #232]	@ (8002074 <HAL_DMA_Abort+0x614>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d02c      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a38      	ldr	r2, [pc, #224]	@ (8002078 <HAL_DMA_Abort+0x618>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d027      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a37      	ldr	r2, [pc, #220]	@ (800207c <HAL_DMA_Abort+0x61c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d022      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a35      	ldr	r2, [pc, #212]	@ (8002080 <HAL_DMA_Abort+0x620>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01d      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a34      	ldr	r2, [pc, #208]	@ (8002084 <HAL_DMA_Abort+0x624>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d018      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a32      	ldr	r2, [pc, #200]	@ (8002088 <HAL_DMA_Abort+0x628>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a31      	ldr	r2, [pc, #196]	@ (800208c <HAL_DMA_Abort+0x62c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00e      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002090 <HAL_DMA_Abort+0x630>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d009      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a2e      	ldr	r2, [pc, #184]	@ (8002094 <HAL_DMA_Abort+0x634>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d004      	beq.n	8001fea <HAL_DMA_Abort+0x58a>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8002098 <HAL_DMA_Abort+0x638>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_DMA_Abort+0x58e>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_DMA_Abort+0x590>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d015      	beq.n	8002020 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ffc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002010:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002014:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800201e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40020010 	.word	0x40020010
 8002040:	40020028 	.word	0x40020028
 8002044:	40020040 	.word	0x40020040
 8002048:	40020058 	.word	0x40020058
 800204c:	40020070 	.word	0x40020070
 8002050:	40020088 	.word	0x40020088
 8002054:	400200a0 	.word	0x400200a0
 8002058:	400200b8 	.word	0x400200b8
 800205c:	40020410 	.word	0x40020410
 8002060:	40020428 	.word	0x40020428
 8002064:	40020440 	.word	0x40020440
 8002068:	40020458 	.word	0x40020458
 800206c:	40020470 	.word	0x40020470
 8002070:	40020488 	.word	0x40020488
 8002074:	400204a0 	.word	0x400204a0
 8002078:	400204b8 	.word	0x400204b8
 800207c:	58025408 	.word	0x58025408
 8002080:	5802541c 	.word	0x5802541c
 8002084:	58025430 	.word	0x58025430
 8002088:	58025444 	.word	0x58025444
 800208c:	58025458 	.word	0x58025458
 8002090:	5802546c 	.word	0x5802546c
 8002094:	58025480 	.word	0x58025480
 8002098:	58025494 	.word	0x58025494

0800209c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e237      	b.n	800251e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d004      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2280      	movs	r2, #128	@ 0x80
 80020be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e22c      	b.n	800251e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a5c      	ldr	r2, [pc, #368]	@ (800223c <HAL_DMA_Abort_IT+0x1a0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d04a      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002240 <HAL_DMA_Abort_IT+0x1a4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d045      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a59      	ldr	r2, [pc, #356]	@ (8002244 <HAL_DMA_Abort_IT+0x1a8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d040      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a58      	ldr	r2, [pc, #352]	@ (8002248 <HAL_DMA_Abort_IT+0x1ac>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d03b      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a56      	ldr	r2, [pc, #344]	@ (800224c <HAL_DMA_Abort_IT+0x1b0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d036      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a55      	ldr	r2, [pc, #340]	@ (8002250 <HAL_DMA_Abort_IT+0x1b4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d031      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a53      	ldr	r2, [pc, #332]	@ (8002254 <HAL_DMA_Abort_IT+0x1b8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02c      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a52      	ldr	r2, [pc, #328]	@ (8002258 <HAL_DMA_Abort_IT+0x1bc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d027      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a50      	ldr	r2, [pc, #320]	@ (800225c <HAL_DMA_Abort_IT+0x1c0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d022      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a4f      	ldr	r2, [pc, #316]	@ (8002260 <HAL_DMA_Abort_IT+0x1c4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d01d      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a4d      	ldr	r2, [pc, #308]	@ (8002264 <HAL_DMA_Abort_IT+0x1c8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d018      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a4c      	ldr	r2, [pc, #304]	@ (8002268 <HAL_DMA_Abort_IT+0x1cc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a4a      	ldr	r2, [pc, #296]	@ (800226c <HAL_DMA_Abort_IT+0x1d0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00e      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a49      	ldr	r2, [pc, #292]	@ (8002270 <HAL_DMA_Abort_IT+0x1d4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a47      	ldr	r2, [pc, #284]	@ (8002274 <HAL_DMA_Abort_IT+0x1d8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_DMA_Abort_IT+0xc8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a46      	ldr	r2, [pc, #280]	@ (8002278 <HAL_DMA_Abort_IT+0x1dc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_DMA_Abort_IT+0xcc>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_DMA_Abort_IT+0xce>
 8002168:	2300      	movs	r3, #0
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8086 	beq.w	800227c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2204      	movs	r2, #4
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2f      	ldr	r2, [pc, #188]	@ (800223c <HAL_DMA_Abort_IT+0x1a0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d04a      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2e      	ldr	r2, [pc, #184]	@ (8002240 <HAL_DMA_Abort_IT+0x1a4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d045      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2c      	ldr	r2, [pc, #176]	@ (8002244 <HAL_DMA_Abort_IT+0x1a8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d040      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2b      	ldr	r2, [pc, #172]	@ (8002248 <HAL_DMA_Abort_IT+0x1ac>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d03b      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a29      	ldr	r2, [pc, #164]	@ (800224c <HAL_DMA_Abort_IT+0x1b0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d036      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a28      	ldr	r2, [pc, #160]	@ (8002250 <HAL_DMA_Abort_IT+0x1b4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d031      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a26      	ldr	r2, [pc, #152]	@ (8002254 <HAL_DMA_Abort_IT+0x1b8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d02c      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a25      	ldr	r2, [pc, #148]	@ (8002258 <HAL_DMA_Abort_IT+0x1bc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d027      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a23      	ldr	r2, [pc, #140]	@ (800225c <HAL_DMA_Abort_IT+0x1c0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d022      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a22      	ldr	r2, [pc, #136]	@ (8002260 <HAL_DMA_Abort_IT+0x1c4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d01d      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a20      	ldr	r2, [pc, #128]	@ (8002264 <HAL_DMA_Abort_IT+0x1c8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d018      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <HAL_DMA_Abort_IT+0x1cc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d013      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	@ (800226c <HAL_DMA_Abort_IT+0x1d0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00e      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002270 <HAL_DMA_Abort_IT+0x1d4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d009      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1a      	ldr	r2, [pc, #104]	@ (8002274 <HAL_DMA_Abort_IT+0x1d8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d004      	beq.n	8002218 <HAL_DMA_Abort_IT+0x17c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a19      	ldr	r2, [pc, #100]	@ (8002278 <HAL_DMA_Abort_IT+0x1dc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d108      	bne.n	800222a <HAL_DMA_Abort_IT+0x18e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e178      	b.n	800251c <HAL_DMA_Abort_IT+0x480>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e16f      	b.n	800251c <HAL_DMA_Abort_IT+0x480>
 800223c:	40020010 	.word	0x40020010
 8002240:	40020028 	.word	0x40020028
 8002244:	40020040 	.word	0x40020040
 8002248:	40020058 	.word	0x40020058
 800224c:	40020070 	.word	0x40020070
 8002250:	40020088 	.word	0x40020088
 8002254:	400200a0 	.word	0x400200a0
 8002258:	400200b8 	.word	0x400200b8
 800225c:	40020410 	.word	0x40020410
 8002260:	40020428 	.word	0x40020428
 8002264:	40020440 	.word	0x40020440
 8002268:	40020458 	.word	0x40020458
 800226c:	40020470 	.word	0x40020470
 8002270:	40020488 	.word	0x40020488
 8002274:	400204a0 	.word	0x400204a0
 8002278:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 020e 	bic.w	r2, r2, #14
 800228a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6c      	ldr	r2, [pc, #432]	@ (8002444 <HAL_DMA_Abort_IT+0x3a8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d04a      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a6b      	ldr	r2, [pc, #428]	@ (8002448 <HAL_DMA_Abort_IT+0x3ac>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d045      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a69      	ldr	r2, [pc, #420]	@ (800244c <HAL_DMA_Abort_IT+0x3b0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d040      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a68      	ldr	r2, [pc, #416]	@ (8002450 <HAL_DMA_Abort_IT+0x3b4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d03b      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a66      	ldr	r2, [pc, #408]	@ (8002454 <HAL_DMA_Abort_IT+0x3b8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d036      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a65      	ldr	r2, [pc, #404]	@ (8002458 <HAL_DMA_Abort_IT+0x3bc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d031      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a63      	ldr	r2, [pc, #396]	@ (800245c <HAL_DMA_Abort_IT+0x3c0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d02c      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a62      	ldr	r2, [pc, #392]	@ (8002460 <HAL_DMA_Abort_IT+0x3c4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d027      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a60      	ldr	r2, [pc, #384]	@ (8002464 <HAL_DMA_Abort_IT+0x3c8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d022      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002468 <HAL_DMA_Abort_IT+0x3cc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d01d      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a5d      	ldr	r2, [pc, #372]	@ (800246c <HAL_DMA_Abort_IT+0x3d0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d018      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002470 <HAL_DMA_Abort_IT+0x3d4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d013      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a5a      	ldr	r2, [pc, #360]	@ (8002474 <HAL_DMA_Abort_IT+0x3d8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00e      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a59      	ldr	r2, [pc, #356]	@ (8002478 <HAL_DMA_Abort_IT+0x3dc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d009      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a57      	ldr	r2, [pc, #348]	@ (800247c <HAL_DMA_Abort_IT+0x3e0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d004      	beq.n	800232c <HAL_DMA_Abort_IT+0x290>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a56      	ldr	r2, [pc, #344]	@ (8002480 <HAL_DMA_Abort_IT+0x3e4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d108      	bne.n	800233e <HAL_DMA_Abort_IT+0x2a2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0201 	bic.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e007      	b.n	800234e <HAL_DMA_Abort_IT+0x2b2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0201 	bic.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a3c      	ldr	r2, [pc, #240]	@ (8002444 <HAL_DMA_Abort_IT+0x3a8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d072      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a3a      	ldr	r2, [pc, #232]	@ (8002448 <HAL_DMA_Abort_IT+0x3ac>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d06d      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a39      	ldr	r2, [pc, #228]	@ (800244c <HAL_DMA_Abort_IT+0x3b0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d068      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a37      	ldr	r2, [pc, #220]	@ (8002450 <HAL_DMA_Abort_IT+0x3b4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d063      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a36      	ldr	r2, [pc, #216]	@ (8002454 <HAL_DMA_Abort_IT+0x3b8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d05e      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a34      	ldr	r2, [pc, #208]	@ (8002458 <HAL_DMA_Abort_IT+0x3bc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d059      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a33      	ldr	r2, [pc, #204]	@ (800245c <HAL_DMA_Abort_IT+0x3c0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d054      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a31      	ldr	r2, [pc, #196]	@ (8002460 <HAL_DMA_Abort_IT+0x3c4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d04f      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a30      	ldr	r2, [pc, #192]	@ (8002464 <HAL_DMA_Abort_IT+0x3c8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d04a      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002468 <HAL_DMA_Abort_IT+0x3cc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d045      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2d      	ldr	r2, [pc, #180]	@ (800246c <HAL_DMA_Abort_IT+0x3d0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d040      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002470 <HAL_DMA_Abort_IT+0x3d4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d03b      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002474 <HAL_DMA_Abort_IT+0x3d8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d036      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a28      	ldr	r2, [pc, #160]	@ (8002478 <HAL_DMA_Abort_IT+0x3dc>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d031      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a27      	ldr	r2, [pc, #156]	@ (800247c <HAL_DMA_Abort_IT+0x3e0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d02c      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a25      	ldr	r2, [pc, #148]	@ (8002480 <HAL_DMA_Abort_IT+0x3e4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d027      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a24      	ldr	r2, [pc, #144]	@ (8002484 <HAL_DMA_Abort_IT+0x3e8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d022      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a22      	ldr	r2, [pc, #136]	@ (8002488 <HAL_DMA_Abort_IT+0x3ec>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01d      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a21      	ldr	r2, [pc, #132]	@ (800248c <HAL_DMA_Abort_IT+0x3f0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d018      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1f      	ldr	r2, [pc, #124]	@ (8002490 <HAL_DMA_Abort_IT+0x3f4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d013      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1e      	ldr	r2, [pc, #120]	@ (8002494 <HAL_DMA_Abort_IT+0x3f8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00e      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1c      	ldr	r2, [pc, #112]	@ (8002498 <HAL_DMA_Abort_IT+0x3fc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d009      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1b      	ldr	r2, [pc, #108]	@ (800249c <HAL_DMA_Abort_IT+0x400>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d004      	beq.n	800243e <HAL_DMA_Abort_IT+0x3a2>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a19      	ldr	r2, [pc, #100]	@ (80024a0 <HAL_DMA_Abort_IT+0x404>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d132      	bne.n	80024a4 <HAL_DMA_Abort_IT+0x408>
 800243e:	2301      	movs	r3, #1
 8002440:	e031      	b.n	80024a6 <HAL_DMA_Abort_IT+0x40a>
 8002442:	bf00      	nop
 8002444:	40020010 	.word	0x40020010
 8002448:	40020028 	.word	0x40020028
 800244c:	40020040 	.word	0x40020040
 8002450:	40020058 	.word	0x40020058
 8002454:	40020070 	.word	0x40020070
 8002458:	40020088 	.word	0x40020088
 800245c:	400200a0 	.word	0x400200a0
 8002460:	400200b8 	.word	0x400200b8
 8002464:	40020410 	.word	0x40020410
 8002468:	40020428 	.word	0x40020428
 800246c:	40020440 	.word	0x40020440
 8002470:	40020458 	.word	0x40020458
 8002474:	40020470 	.word	0x40020470
 8002478:	40020488 	.word	0x40020488
 800247c:	400204a0 	.word	0x400204a0
 8002480:	400204b8 	.word	0x400204b8
 8002484:	58025408 	.word	0x58025408
 8002488:	5802541c 	.word	0x5802541c
 800248c:	58025430 	.word	0x58025430
 8002490:	58025444 	.word	0x58025444
 8002494:	58025458 	.word	0x58025458
 8002498:	5802546c 	.word	0x5802546c
 800249c:	58025480 	.word	0x58025480
 80024a0:	58025494 	.word	0x58025494
 80024a4:	2300      	movs	r3, #0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d028      	beq.n	80024fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2201      	movs	r2, #1
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00c      	beq.n	80024fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop

08002528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002536:	4b89      	ldr	r3, [pc, #548]	@ (800275c <HAL_GPIO_Init+0x234>)
 8002538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800253a:	e194      	b.n	8002866 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8186 	beq.w	8002860 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d005      	beq.n	800256c <HAL_GPIO_Init+0x44>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d130      	bne.n	80025ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025a2:	2201      	movs	r2, #1
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	f003 0201 	and.w	r2, r3, #1
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d017      	beq.n	800260a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d123      	bne.n	800265e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	08da      	lsrs	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3208      	adds	r2, #8
 800261e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	220f      	movs	r2, #15
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	69b9      	ldr	r1, [r7, #24]
 800265a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	2203      	movs	r2, #3
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0203 	and.w	r2, r3, #3
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 80e0 	beq.w	8002860 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002760 <HAL_GPIO_Init+0x238>)
 80026a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026a6:	4a2e      	ldr	r2, [pc, #184]	@ (8002760 <HAL_GPIO_Init+0x238>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80026b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002760 <HAL_GPIO_Init+0x238>)
 80026b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026be:	4a29      	ldr	r2, [pc, #164]	@ (8002764 <HAL_GPIO_Init+0x23c>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a20      	ldr	r2, [pc, #128]	@ (8002768 <HAL_GPIO_Init+0x240>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d052      	beq.n	8002790 <HAL_GPIO_Init+0x268>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a1f      	ldr	r2, [pc, #124]	@ (800276c <HAL_GPIO_Init+0x244>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d031      	beq.n	8002756 <HAL_GPIO_Init+0x22e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002770 <HAL_GPIO_Init+0x248>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02b      	beq.n	8002752 <HAL_GPIO_Init+0x22a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002774 <HAL_GPIO_Init+0x24c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d025      	beq.n	800274e <HAL_GPIO_Init+0x226>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a1c      	ldr	r2, [pc, #112]	@ (8002778 <HAL_GPIO_Init+0x250>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01f      	beq.n	800274a <HAL_GPIO_Init+0x222>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a1b      	ldr	r2, [pc, #108]	@ (800277c <HAL_GPIO_Init+0x254>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_GPIO_Init+0x21e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a1a      	ldr	r2, [pc, #104]	@ (8002780 <HAL_GPIO_Init+0x258>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0x21a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a19      	ldr	r2, [pc, #100]	@ (8002784 <HAL_GPIO_Init+0x25c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_GPIO_Init+0x216>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a18      	ldr	r2, [pc, #96]	@ (8002788 <HAL_GPIO_Init+0x260>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <HAL_GPIO_Init+0x212>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a17      	ldr	r2, [pc, #92]	@ (800278c <HAL_GPIO_Init+0x264>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_GPIO_Init+0x20e>
 8002732:	2309      	movs	r3, #9
 8002734:	e02d      	b.n	8002792 <HAL_GPIO_Init+0x26a>
 8002736:	230a      	movs	r3, #10
 8002738:	e02b      	b.n	8002792 <HAL_GPIO_Init+0x26a>
 800273a:	2308      	movs	r3, #8
 800273c:	e029      	b.n	8002792 <HAL_GPIO_Init+0x26a>
 800273e:	2307      	movs	r3, #7
 8002740:	e027      	b.n	8002792 <HAL_GPIO_Init+0x26a>
 8002742:	2306      	movs	r3, #6
 8002744:	e025      	b.n	8002792 <HAL_GPIO_Init+0x26a>
 8002746:	2305      	movs	r3, #5
 8002748:	e023      	b.n	8002792 <HAL_GPIO_Init+0x26a>
 800274a:	2304      	movs	r3, #4
 800274c:	e021      	b.n	8002792 <HAL_GPIO_Init+0x26a>
 800274e:	2303      	movs	r3, #3
 8002750:	e01f      	b.n	8002792 <HAL_GPIO_Init+0x26a>
 8002752:	2302      	movs	r3, #2
 8002754:	e01d      	b.n	8002792 <HAL_GPIO_Init+0x26a>
 8002756:	2301      	movs	r3, #1
 8002758:	e01b      	b.n	8002792 <HAL_GPIO_Init+0x26a>
 800275a:	bf00      	nop
 800275c:	58000080 	.word	0x58000080
 8002760:	58024400 	.word	0x58024400
 8002764:	58000400 	.word	0x58000400
 8002768:	58020000 	.word	0x58020000
 800276c:	58020400 	.word	0x58020400
 8002770:	58020800 	.word	0x58020800
 8002774:	58020c00 	.word	0x58020c00
 8002778:	58021000 	.word	0x58021000
 800277c:	58021400 	.word	0x58021400
 8002780:	58021800 	.word	0x58021800
 8002784:	58021c00 	.word	0x58021c00
 8002788:	58022000 	.word	0x58022000
 800278c:	58022400 	.word	0x58022400
 8002790:	2300      	movs	r3, #0
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	f002 0203 	and.w	r2, r2, #3
 8002798:	0092      	lsls	r2, r2, #2
 800279a:	4093      	lsls	r3, r2
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a2:	4938      	ldr	r1, [pc, #224]	@ (8002884 <HAL_GPIO_Init+0x35c>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002804:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	3301      	adds	r3, #1
 8002864:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	f47f ae63 	bne.w	800253c <HAL_GPIO_Init+0x14>
  }
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	3724      	adds	r7, #36	@ 0x24
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	58000400 	.word	0x58000400

08002888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	887b      	ldrh	r3, [r7, #2]
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	e001      	b.n	80028aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c8:	787b      	ldrb	r3, [r7, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028d4:	e003      	b.n	80028de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	041a      	lsls	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	619a      	str	r2, [r3, #24]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002904:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 f804 	bl	800291e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800293c:	4a08      	ldr	r2, [pc, #32]	@ (8002960 <HAL_HSEM_FastTake+0x2c>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3320      	adds	r3, #32
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	4a07      	ldr	r2, [pc, #28]	@ (8002964 <HAL_HSEM_FastTake+0x30>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d101      	bne.n	8002950 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	58026400 	.word	0x58026400
 8002964:	80000300 	.word	0x80000300

08002968 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002972:	4906      	ldr	r1, [pc, #24]	@ (800298c <HAL_HSEM_Release+0x24>)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	58026400 	.word	0x58026400

08002990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e08b      	b.n	8002aba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fac2 	bl	8000f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	@ 0x24
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	e006      	b.n	8002a18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d108      	bne.n	8002a32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	e007      	b.n	8002a42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac4 <HAL_I2C_Init+0x134>)
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69d9      	ldr	r1, [r3, #28]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	02008000 	.word	0x02008000

08002ac8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	68f9      	ldr	r1, [r7, #12]
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
  }
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d138      	bne.n	8002b84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e032      	b.n	8002b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2224      	movs	r2, #36	@ 0x24
 8002b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d139      	bne.n	8002c1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e033      	b.n	8002c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2224      	movs	r2, #36	@ 0x24
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002be4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e000      	b.n	8002c1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002c34:	4b29      	ldr	r3, [pc, #164]	@ (8002cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d00a      	beq.n	8002c56 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c40:	4b26      	ldr	r3, [pc, #152]	@ (8002cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d001      	beq.n	8002c52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e040      	b.n	8002cd4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e03e      	b.n	8002cd4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c56:	4b21      	ldr	r3, [pc, #132]	@ (8002cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002c5e:	491f      	ldr	r1, [pc, #124]	@ (8002cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c66:	f7fe fd37 	bl	80016d8 <HAL_GetTick>
 8002c6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c6c:	e009      	b.n	8002c82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c6e:	f7fe fd33 	bl	80016d8 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c7c:	d901      	bls.n	8002c82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e028      	b.n	8002cd4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c82:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c8e:	d1ee      	bne.n	8002c6e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b1e      	cmp	r3, #30
 8002c94:	d008      	beq.n	8002ca8 <HAL_PWREx_ConfigSupply+0x7c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c9a:	d005      	beq.n	8002ca8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b1d      	cmp	r3, #29
 8002ca0:	d002      	beq.n	8002ca8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b2d      	cmp	r3, #45	@ 0x2d
 8002ca6:	d114      	bne.n	8002cd2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ca8:	f7fe fd16 	bl	80016d8 <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cae:	e009      	b.n	8002cc4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002cb0:	f7fe fd12 	bl	80016d8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cbe:	d901      	bls.n	8002cc4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e007      	b.n	8002cd4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002cc4:	4b05      	ldr	r3, [pc, #20]	@ (8002cdc <HAL_PWREx_ConfigSupply+0xb0>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd0:	d1ee      	bne.n	8002cb0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	58024800 	.word	0x58024800

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	@ 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f000 bc48 	b.w	8003584 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 8088 	beq.w	8002e12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d02:	4b99      	ldr	r3, [pc, #612]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d0c:	4b96      	ldr	r3, [pc, #600]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d007      	beq.n	8002d28 <HAL_RCC_OscConfig+0x48>
 8002d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1a:	2b18      	cmp	r3, #24
 8002d1c:	d111      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62>
 8002d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d10c      	bne.n	8002d42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	4b8f      	ldr	r3, [pc, #572]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d06d      	beq.n	8002e10 <HAL_RCC_OscConfig+0x130>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d169      	bne.n	8002e10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f000 bc21 	b.w	8003584 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCC_OscConfig+0x7a>
 8002d4c:	4b86      	ldr	r3, [pc, #536]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a85      	ldr	r2, [pc, #532]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	e02e      	b.n	8002db8 <HAL_RCC_OscConfig+0xd8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x9c>
 8002d62:	4b81      	ldr	r3, [pc, #516]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a80      	ldr	r2, [pc, #512]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b7e      	ldr	r3, [pc, #504]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a7d      	ldr	r2, [pc, #500]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xd8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0xc0>
 8002d86:	4b78      	ldr	r3, [pc, #480]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a77      	ldr	r2, [pc, #476]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b75      	ldr	r3, [pc, #468]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a74      	ldr	r2, [pc, #464]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xd8>
 8002da0:	4b71      	ldr	r3, [pc, #452]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a70      	ldr	r2, [pc, #448]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b6e      	ldr	r3, [pc, #440]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a6d      	ldr	r2, [pc, #436]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fc8a 	bl	80016d8 <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fc86 	bl	80016d8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	@ 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e3d4      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dda:	4b63      	ldr	r3, [pc, #396]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xe8>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe fc76 	bl	80016d8 <HAL_GetTick>
 8002dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fc72 	bl	80016d8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	@ 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e3c0      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e02:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x110>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80ca 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e20:	4b51      	ldr	r3, [pc, #324]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e28:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_RCC_OscConfig+0x166>
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	2b18      	cmp	r3, #24
 8002e3a:	d156      	bne.n	8002eea <HAL_RCC_OscConfig+0x20a>
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d151      	bne.n	8002eea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e46:	4b48      	ldr	r3, [pc, #288]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_RCC_OscConfig+0x17e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e392      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e5e:	4b42      	ldr	r3, [pc, #264]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 0219 	bic.w	r2, r3, #25
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	493f      	ldr	r1, [pc, #252]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fc32 	bl	80016d8 <HAL_GetTick>
 8002e74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e78:	f7fe fc2e 	bl	80016d8 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e37c      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e8a:	4b37      	ldr	r3, [pc, #220]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	f7fe fc4f 	bl	8001738 <HAL_GetREVID>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d817      	bhi.n	8002ed4 <HAL_RCC_OscConfig+0x1f4>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2b40      	cmp	r3, #64	@ 0x40
 8002eaa:	d108      	bne.n	8002ebe <HAL_RCC_OscConfig+0x1de>
 8002eac:	4b2e      	ldr	r3, [pc, #184]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ebc:	e07a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	031b      	lsls	r3, r3, #12
 8002ecc:	4926      	ldr	r1, [pc, #152]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed2:	e06f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b24      	ldr	r3, [pc, #144]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	4921      	ldr	r1, [pc, #132]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ee8:	e064      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d047      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 0219 	bic.w	r2, r3, #25
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	491a      	ldr	r1, [pc, #104]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fbe8 	bl	80016d8 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0c:	f7fe fbe4 	bl	80016d8 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e332      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f1e:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	f7fe fc05 	bl	8001738 <HAL_GetREVID>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d819      	bhi.n	8002f6c <HAL_RCC_OscConfig+0x28c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b40      	cmp	r3, #64	@ 0x40
 8002f3e:	d108      	bne.n	8002f52 <HAL_RCC_OscConfig+0x272>
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f48:	4a07      	ldr	r2, [pc, #28]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f4e:	6053      	str	r3, [r2, #4]
 8002f50:	e030      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2d4>
 8002f52:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	031b      	lsls	r3, r3, #12
 8002f60:	4901      	ldr	r1, [pc, #4]	@ (8002f68 <HAL_RCC_OscConfig+0x288>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
 8002f66:	e025      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2d4>
 8002f68:	58024400 	.word	0x58024400
 8002f6c:	4b9a      	ldr	r3, [pc, #616]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	061b      	lsls	r3, r3, #24
 8002f7a:	4997      	ldr	r1, [pc, #604]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
 8002f80:	e018      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f82:	4b95      	ldr	r3, [pc, #596]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a94      	ldr	r2, [pc, #592]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fba3 	bl	80016d8 <HAL_GetTick>
 8002f92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fe fb9f 	bl	80016d8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e2ed      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002fa8:	4b8b      	ldr	r3, [pc, #556]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80a9 	beq.w	8003114 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc2:	4b85      	ldr	r3, [pc, #532]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fcc:	4b82      	ldr	r3, [pc, #520]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d007      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x308>
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b18      	cmp	r3, #24
 8002fdc:	d13a      	bne.n	8003054 <HAL_RCC_OscConfig+0x374>
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d135      	bne.n	8003054 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fe8:	4b7b      	ldr	r3, [pc, #492]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_OscConfig+0x320>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	2b80      	cmp	r3, #128	@ 0x80
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e2c1      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003000:	f7fe fb9a 	bl	8001738 <HAL_GetREVID>
 8003004:	4603      	mov	r3, r0
 8003006:	f241 0203 	movw	r2, #4099	@ 0x1003
 800300a:	4293      	cmp	r3, r2
 800300c:	d817      	bhi.n	800303e <HAL_RCC_OscConfig+0x35e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	2b20      	cmp	r3, #32
 8003014:	d108      	bne.n	8003028 <HAL_RCC_OscConfig+0x348>
 8003016:	4b70      	ldr	r3, [pc, #448]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800301e:	4a6e      	ldr	r2, [pc, #440]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8003020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003024:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003026:	e075      	b.n	8003114 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003028:	4b6b      	ldr	r3, [pc, #428]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	069b      	lsls	r3, r3, #26
 8003036:	4968      	ldr	r1, [pc, #416]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800303c:	e06a      	b.n	8003114 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800303e:	4b66      	ldr	r3, [pc, #408]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	061b      	lsls	r3, r3, #24
 800304c:	4962      	ldr	r1, [pc, #392]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 800304e:	4313      	orrs	r3, r2
 8003050:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003052:	e05f      	b.n	8003114 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d042      	beq.n	80030e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800305c:	4b5e      	ldr	r3, [pc, #376]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a5d      	ldr	r2, [pc, #372]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8003062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe fb36 	bl	80016d8 <HAL_GetTick>
 800306c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003070:	f7fe fb32 	bl	80016d8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e280      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003082:	4b55      	ldr	r3, [pc, #340]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800308e:	f7fe fb53 	bl	8001738 <HAL_GetREVID>
 8003092:	4603      	mov	r3, r0
 8003094:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003098:	4293      	cmp	r3, r2
 800309a:	d817      	bhi.n	80030cc <HAL_RCC_OscConfig+0x3ec>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d108      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3d6>
 80030a4:	4b4c      	ldr	r3, [pc, #304]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80030ac:	4a4a      	ldr	r2, [pc, #296]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80030ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030b2:	6053      	str	r3, [r2, #4]
 80030b4:	e02e      	b.n	8003114 <HAL_RCC_OscConfig+0x434>
 80030b6:	4b48      	ldr	r3, [pc, #288]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	069b      	lsls	r3, r3, #26
 80030c4:	4944      	ldr	r1, [pc, #272]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
 80030ca:	e023      	b.n	8003114 <HAL_RCC_OscConfig+0x434>
 80030cc:	4b42      	ldr	r3, [pc, #264]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	061b      	lsls	r3, r3, #24
 80030da:	493f      	ldr	r1, [pc, #252]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
 80030e0:	e018      	b.n	8003114 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80030e2:	4b3d      	ldr	r3, [pc, #244]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a3c      	ldr	r2, [pc, #240]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80030e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fe faf3 	bl	80016d8 <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80030f6:	f7fe faef 	bl	80016d8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e23d      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003108:	4b33      	ldr	r3, [pc, #204]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d036      	beq.n	800318e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d019      	beq.n	800315c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003128:	4b2b      	ldr	r3, [pc, #172]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 800312a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312c:	4a2a      	ldr	r2, [pc, #168]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7fe fad0 	bl	80016d8 <HAL_GetTick>
 8003138:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313c:	f7fe facc 	bl	80016d8 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e21a      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800314e:	4b22      	ldr	r3, [pc, #136]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x45c>
 800315a:	e018      	b.n	800318e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315c:	4b1e      	ldr	r3, [pc, #120]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 800315e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003160:	4a1d      	ldr	r2, [pc, #116]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe fab6 	bl	80016d8 <HAL_GetTick>
 800316c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003170:	f7fe fab2 	bl	80016d8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e200      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003182:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8003184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d039      	beq.n	800320e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01c      	beq.n	80031dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031a2:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a0c      	ldr	r2, [pc, #48]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80031a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80031ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fa93 	bl	80016d8 <HAL_GetTick>
 80031b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b6:	f7fe fa8f 	bl	80016d8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e1dd      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x4d6>
 80031d4:	e01b      	b.n	800320e <HAL_RCC_OscConfig+0x52e>
 80031d6:	bf00      	nop
 80031d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031dc:	4b9b      	ldr	r3, [pc, #620]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a9a      	ldr	r2, [pc, #616]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80031e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031e8:	f7fe fa76 	bl	80016d8 <HAL_GetTick>
 80031ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f0:	f7fe fa72 	bl	80016d8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1c0      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003202:	4b92      	ldr	r3, [pc, #584]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8081 	beq.w	800331e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800321c:	4b8c      	ldr	r3, [pc, #560]	@ (8003450 <HAL_RCC_OscConfig+0x770>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a8b      	ldr	r2, [pc, #556]	@ (8003450 <HAL_RCC_OscConfig+0x770>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003228:	f7fe fa56 	bl	80016d8 <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fe fa52 	bl	80016d8 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	@ 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1a0      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003242:	4b83      	ldr	r3, [pc, #524]	@ (8003450 <HAL_RCC_OscConfig+0x770>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d106      	bne.n	8003264 <HAL_RCC_OscConfig+0x584>
 8003256:	4b7d      	ldr	r3, [pc, #500]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325a:	4a7c      	ldr	r2, [pc, #496]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6713      	str	r3, [r2, #112]	@ 0x70
 8003262:	e02d      	b.n	80032c0 <HAL_RCC_OscConfig+0x5e0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10c      	bne.n	8003286 <HAL_RCC_OscConfig+0x5a6>
 800326c:	4b77      	ldr	r3, [pc, #476]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003270:	4a76      	ldr	r2, [pc, #472]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	6713      	str	r3, [r2, #112]	@ 0x70
 8003278:	4b74      	ldr	r3, [pc, #464]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327c:	4a73      	ldr	r2, [pc, #460]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 800327e:	f023 0304 	bic.w	r3, r3, #4
 8003282:	6713      	str	r3, [r2, #112]	@ 0x70
 8003284:	e01c      	b.n	80032c0 <HAL_RCC_OscConfig+0x5e0>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b05      	cmp	r3, #5
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x5c8>
 800328e:	4b6f      	ldr	r3, [pc, #444]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003292:	4a6e      	ldr	r2, [pc, #440]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003294:	f043 0304 	orr.w	r3, r3, #4
 8003298:	6713      	str	r3, [r2, #112]	@ 0x70
 800329a:	4b6c      	ldr	r3, [pc, #432]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329e:	4a6b      	ldr	r2, [pc, #428]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032a6:	e00b      	b.n	80032c0 <HAL_RCC_OscConfig+0x5e0>
 80032a8:	4b68      	ldr	r3, [pc, #416]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ac:	4a67      	ldr	r2, [pc, #412]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80032ae:	f023 0301 	bic.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b4:	4b65      	ldr	r3, [pc, #404]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b8:	4a64      	ldr	r2, [pc, #400]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80032ba:	f023 0304 	bic.w	r3, r3, #4
 80032be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d015      	beq.n	80032f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe fa06 	bl	80016d8 <HAL_GetTick>
 80032cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fe fa02 	bl	80016d8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e14e      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032e6:	4b59      	ldr	r3, [pc, #356]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ee      	beq.n	80032d0 <HAL_RCC_OscConfig+0x5f0>
 80032f2:	e014      	b.n	800331e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7fe f9f0 	bl	80016d8 <HAL_GetTick>
 80032f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fe f9ec 	bl	80016d8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e138      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003312:	4b4e      	ldr	r3, [pc, #312]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1ee      	bne.n	80032fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 812d 	beq.w	8003582 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003328:	4b48      	ldr	r3, [pc, #288]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003330:	2b18      	cmp	r3, #24
 8003332:	f000 80bd 	beq.w	80034b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333a:	2b02      	cmp	r3, #2
 800333c:	f040 809e 	bne.w	800347c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b42      	ldr	r3, [pc, #264]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a41      	ldr	r2, [pc, #260]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003346:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800334a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe f9c4 	bl	80016d8 <HAL_GetTick>
 8003350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe f9c0 	bl	80016d8 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e10e      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003366:	4b39      	ldr	r3, [pc, #228]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003372:	4b36      	ldr	r3, [pc, #216]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003376:	4b37      	ldr	r3, [pc, #220]	@ (8003454 <HAL_RCC_OscConfig+0x774>)
 8003378:	4013      	ands	r3, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	430a      	orrs	r2, r1
 8003386:	4931      	ldr	r1, [pc, #196]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003388:	4313      	orrs	r3, r2
 800338a:	628b      	str	r3, [r1, #40]	@ 0x28
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	3b01      	subs	r3, #1
 8003392:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339a:	3b01      	subs	r3, #1
 800339c:	025b      	lsls	r3, r3, #9
 800339e:	b29b      	uxth	r3, r3
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a6:	3b01      	subs	r3, #1
 80033a8:	041b      	lsls	r3, r3, #16
 80033aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b4:	3b01      	subs	r3, #1
 80033b6:	061b      	lsls	r3, r3, #24
 80033b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80033bc:	4923      	ldr	r1, [pc, #140]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80033c2:	4b22      	ldr	r3, [pc, #136]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80033c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c6:	4a21      	ldr	r2, [pc, #132]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033ce:	4b1f      	ldr	r3, [pc, #124]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80033d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d2:	4b21      	ldr	r3, [pc, #132]	@ (8003458 <HAL_RCC_OscConfig+0x778>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80033da:	00d2      	lsls	r2, r2, #3
 80033dc:	491b      	ldr	r1, [pc, #108]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80033e2:	4b1a      	ldr	r3, [pc, #104]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80033e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e6:	f023 020c 	bic.w	r2, r3, #12
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	4917      	ldr	r1, [pc, #92]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80033f4:	4b15      	ldr	r3, [pc, #84]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	f023 0202 	bic.w	r2, r3, #2
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003400:	4912      	ldr	r1, [pc, #72]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003406:	4b11      	ldr	r3, [pc, #68]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340a:	4a10      	ldr	r2, [pc, #64]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003416:	4a0d      	ldr	r2, [pc, #52]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800341c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800341e:	4b0b      	ldr	r3, [pc, #44]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800342a:	4b08      	ldr	r3, [pc, #32]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	4a07      	ldr	r2, [pc, #28]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003436:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a04      	ldr	r2, [pc, #16]	@ (800344c <HAL_RCC_OscConfig+0x76c>)
 800343c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fe f949 	bl	80016d8 <HAL_GetTick>
 8003446:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003448:	e011      	b.n	800346e <HAL_RCC_OscConfig+0x78e>
 800344a:	bf00      	nop
 800344c:	58024400 	.word	0x58024400
 8003450:	58024800 	.word	0x58024800
 8003454:	fffffc0c 	.word	0xfffffc0c
 8003458:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe f93c 	bl	80016d8 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e08a      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800346e:	4b47      	ldr	r3, [pc, #284]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x77c>
 800347a:	e082      	b.n	8003582 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347c:	4b43      	ldr	r3, [pc, #268]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a42      	ldr	r2, [pc, #264]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 8003482:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe f926 	bl	80016d8 <HAL_GetTick>
 800348c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe f922 	bl	80016d8 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e070      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034a2:	4b3a      	ldr	r3, [pc, #232]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x7b0>
 80034ae:	e068      	b.n	8003582 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034b0:	4b36      	ldr	r3, [pc, #216]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034b6:	4b35      	ldr	r3, [pc, #212]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d031      	beq.n	8003528 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 0203 	and.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d12a      	bne.n	8003528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d122      	bne.n	8003528 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d11a      	bne.n	8003528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	0a5b      	lsrs	r3, r3, #9
 80034f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d111      	bne.n	8003528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d108      	bne.n	8003528 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0e1b      	lsrs	r3, r3, #24
 800351a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003522:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e02b      	b.n	8003584 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800352c:	4b17      	ldr	r3, [pc, #92]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 800352e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003530:	08db      	lsrs	r3, r3, #3
 8003532:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003536:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d01f      	beq.n	8003582 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003542:	4b12      	ldr	r3, [pc, #72]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 8003544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003546:	4a11      	ldr	r2, [pc, #68]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800354e:	f7fe f8c3 	bl	80016d8 <HAL_GetTick>
 8003552:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003554:	bf00      	nop
 8003556:	f7fe f8bf 	bl	80016d8 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	4293      	cmp	r3, r2
 8003560:	d0f9      	beq.n	8003556 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 8003564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003566:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <HAL_RCC_OscConfig+0x8b0>)
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800356e:	00d2      	lsls	r2, r2, #3
 8003570:	4906      	ldr	r1, [pc, #24]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 8003572:	4313      	orrs	r3, r2
 8003574:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003576:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	4a04      	ldr	r2, [pc, #16]	@ (800358c <HAL_RCC_OscConfig+0x8ac>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3730      	adds	r7, #48	@ 0x30
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	58024400 	.word	0x58024400
 8003590:	ffff0007 	.word	0xffff0007

08003594 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e19c      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b8a      	ldr	r3, [pc, #552]	@ (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d910      	bls.n	80035d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b87      	ldr	r3, [pc, #540]	@ (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 020f 	bic.w	r2, r3, #15
 80035be:	4985      	ldr	r1, [pc, #532]	@ (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b83      	ldr	r3, [pc, #524]	@ (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e184      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	4b7b      	ldr	r3, [pc, #492]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d908      	bls.n	8003606 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035f4:	4b78      	ldr	r3, [pc, #480]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	4975      	ldr	r1, [pc, #468]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003602:	4313      	orrs	r3, r2
 8003604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	4b70      	ldr	r3, [pc, #448]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800361e:	429a      	cmp	r2, r3
 8003620:	d908      	bls.n	8003634 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003622:	4b6d      	ldr	r3, [pc, #436]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	496a      	ldr	r1, [pc, #424]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003630:	4313      	orrs	r3, r2
 8003632:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d010      	beq.n	8003662 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	4b64      	ldr	r3, [pc, #400]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800364c:	429a      	cmp	r2, r3
 800364e:	d908      	bls.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003650:	4b61      	ldr	r3, [pc, #388]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	495e      	ldr	r1, [pc, #376]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 800365e:	4313      	orrs	r3, r2
 8003660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d010      	beq.n	8003690 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	4b59      	ldr	r3, [pc, #356]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800367a:	429a      	cmp	r2, r3
 800367c:	d908      	bls.n	8003690 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800367e:	4b56      	ldr	r3, [pc, #344]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	4953      	ldr	r1, [pc, #332]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 800368c:	4313      	orrs	r3, r2
 800368e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d010      	beq.n	80036be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	4b4d      	ldr	r3, [pc, #308]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d908      	bls.n	80036be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b4a      	ldr	r3, [pc, #296]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f023 020f 	bic.w	r2, r3, #15
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4947      	ldr	r1, [pc, #284]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d055      	beq.n	8003776 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80036ca:	4b43      	ldr	r3, [pc, #268]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4940      	ldr	r1, [pc, #256]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036e4:	4b3c      	ldr	r3, [pc, #240]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d121      	bne.n	8003734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0f6      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d107      	bne.n	800370c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036fc:	4b36      	ldr	r3, [pc, #216]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d115      	bne.n	8003734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0ea      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d107      	bne.n	8003724 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003714:	4b30      	ldr	r3, [pc, #192]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0de      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003724:	4b2c      	ldr	r3, [pc, #176]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0d6      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003734:	4b28      	ldr	r3, [pc, #160]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f023 0207 	bic.w	r2, r3, #7
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4925      	ldr	r1, [pc, #148]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003742:	4313      	orrs	r3, r2
 8003744:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003746:	f7fd ffc7 	bl	80016d8 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374c:	e00a      	b.n	8003764 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800374e:	f7fd ffc3 	bl	80016d8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e0be      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003764:	4b1c      	ldr	r3, [pc, #112]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	429a      	cmp	r2, r3
 8003774:	d1eb      	bne.n	800374e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d010      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	4b14      	ldr	r3, [pc, #80]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	429a      	cmp	r2, r3
 8003790:	d208      	bcs.n	80037a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003792:	4b11      	ldr	r3, [pc, #68]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f023 020f 	bic.w	r2, r3, #15
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	490e      	ldr	r1, [pc, #56]	@ (80037d8 <HAL_RCC_ClockConfig+0x244>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d214      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 020f 	bic.w	r2, r3, #15
 80037ba:	4906      	ldr	r1, [pc, #24]	@ (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b04      	ldr	r3, [pc, #16]	@ (80037d4 <HAL_RCC_ClockConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e086      	b.n	80038e2 <HAL_RCC_ClockConfig+0x34e>
 80037d4:	52002000 	.word	0x52002000
 80037d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d010      	beq.n	800380a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	4b3f      	ldr	r3, [pc, #252]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d208      	bcs.n	800380a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037f8:	4b3c      	ldr	r3, [pc, #240]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	4939      	ldr	r1, [pc, #228]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003806:	4313      	orrs	r3, r2
 8003808:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d010      	beq.n	8003838 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	4b34      	ldr	r3, [pc, #208]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003822:	429a      	cmp	r2, r3
 8003824:	d208      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003826:	4b31      	ldr	r3, [pc, #196]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	492e      	ldr	r1, [pc, #184]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003834:	4313      	orrs	r3, r2
 8003836:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d010      	beq.n	8003866 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	699a      	ldr	r2, [r3, #24]
 8003848:	4b28      	ldr	r3, [pc, #160]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003850:	429a      	cmp	r2, r3
 8003852:	d208      	bcs.n	8003866 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003854:	4b25      	ldr	r3, [pc, #148]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	4922      	ldr	r1, [pc, #136]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003862:	4313      	orrs	r3, r2
 8003864:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d010      	beq.n	8003894 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	4b1d      	ldr	r3, [pc, #116]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800387e:	429a      	cmp	r2, r3
 8003880:	d208      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003882:	4b1a      	ldr	r3, [pc, #104]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4917      	ldr	r1, [pc, #92]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 8003890:	4313      	orrs	r3, r2
 8003892:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003894:	f000 f834 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b14      	ldr	r3, [pc, #80]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	4912      	ldr	r1, [pc, #72]	@ (80038f0 <HAL_RCC_ClockConfig+0x35c>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <HAL_RCC_ClockConfig+0x358>)
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	4a0d      	ldr	r2, [pc, #52]	@ (80038f0 <HAL_RCC_ClockConfig+0x35c>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	4a0a      	ldr	r2, [pc, #40]	@ (80038f4 <HAL_RCC_ClockConfig+0x360>)
 80038ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038cc:	4a0a      	ldr	r2, [pc, #40]	@ (80038f8 <HAL_RCC_ClockConfig+0x364>)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80038d2:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <HAL_RCC_ClockConfig+0x368>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd feb4 	bl	8001644 <HAL_InitTick>
 80038dc:	4603      	mov	r3, r0
 80038de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	58024400 	.word	0x58024400
 80038f0:	0800db88 	.word	0x0800db88
 80038f4:	24000004 	.word	0x24000004
 80038f8:	24000000 	.word	0x24000000
 80038fc:	24000014 	.word	0x24000014

08003900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	@ 0x24
 8003904:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003906:	4bb3      	ldr	r3, [pc, #716]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800390e:	2b18      	cmp	r3, #24
 8003910:	f200 8155 	bhi.w	8003bbe <HAL_RCC_GetSysClockFreq+0x2be>
 8003914:	a201      	add	r2, pc, #4	@ (adr r2, 800391c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	08003981 	.word	0x08003981
 8003920:	08003bbf 	.word	0x08003bbf
 8003924:	08003bbf 	.word	0x08003bbf
 8003928:	08003bbf 	.word	0x08003bbf
 800392c:	08003bbf 	.word	0x08003bbf
 8003930:	08003bbf 	.word	0x08003bbf
 8003934:	08003bbf 	.word	0x08003bbf
 8003938:	08003bbf 	.word	0x08003bbf
 800393c:	080039a7 	.word	0x080039a7
 8003940:	08003bbf 	.word	0x08003bbf
 8003944:	08003bbf 	.word	0x08003bbf
 8003948:	08003bbf 	.word	0x08003bbf
 800394c:	08003bbf 	.word	0x08003bbf
 8003950:	08003bbf 	.word	0x08003bbf
 8003954:	08003bbf 	.word	0x08003bbf
 8003958:	08003bbf 	.word	0x08003bbf
 800395c:	080039ad 	.word	0x080039ad
 8003960:	08003bbf 	.word	0x08003bbf
 8003964:	08003bbf 	.word	0x08003bbf
 8003968:	08003bbf 	.word	0x08003bbf
 800396c:	08003bbf 	.word	0x08003bbf
 8003970:	08003bbf 	.word	0x08003bbf
 8003974:	08003bbf 	.word	0x08003bbf
 8003978:	08003bbf 	.word	0x08003bbf
 800397c:	080039b3 	.word	0x080039b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003980:	4b94      	ldr	r3, [pc, #592]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800398c:	4b91      	ldr	r3, [pc, #580]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	08db      	lsrs	r3, r3, #3
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	4a90      	ldr	r2, [pc, #576]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
 800399c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800399e:	e111      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039a0:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039a2:	61bb      	str	r3, [r7, #24]
      break;
 80039a4:	e10e      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80039a6:	4b8d      	ldr	r3, [pc, #564]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039a8:	61bb      	str	r3, [r7, #24]
      break;
 80039aa:	e10b      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80039ac:	4b8c      	ldr	r3, [pc, #560]	@ (8003be0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039ae:	61bb      	str	r3, [r7, #24]
      break;
 80039b0:	e108      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039b2:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039bc:	4b85      	ldr	r3, [pc, #532]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80039c8:	4b82      	ldr	r3, [pc, #520]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80039d2:	4b80      	ldr	r3, [pc, #512]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d6:	08db      	lsrs	r3, r3, #3
 80039d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80e1 	beq.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	f000 8083 	beq.w	8003b04 <HAL_RCC_GetSysClockFreq+0x204>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	f200 80a1 	bhi.w	8003b48 <HAL_RCC_GetSysClockFreq+0x248>
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x114>
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d056      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a12:	e099      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a14:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d02d      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a20:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	08db      	lsrs	r3, r3, #3
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	4a6b      	ldr	r2, [pc, #428]	@ (8003bd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4a:	4b62      	ldr	r3, [pc, #392]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003a7a:	e087      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003be8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8e:	4b51      	ldr	r3, [pc, #324]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aa2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003abe:	e065      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad2:	4b40      	ldr	r3, [pc, #256]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ae6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b02:	e043      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003bf0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b16:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b2a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b46:	e021      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b52:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003bec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b6e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003be4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003b8c:	4b11      	ldr	r3, [pc, #68]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	0a5b      	lsrs	r3, r3, #9
 8003b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b96:	3301      	adds	r3, #1
 8003b98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb0:	ee17 3a90 	vmov	r3, s15
 8003bb4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003bb6:	e005      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
      break;
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003bbe:	4b07      	ldr	r3, [pc, #28]	@ (8003bdc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bc0:	61bb      	str	r3, [r7, #24]
      break;
 8003bc2:	bf00      	nop
  }

  return sysclockfreq;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3724      	adds	r7, #36	@ 0x24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	58024400 	.word	0x58024400
 8003bd8:	03d09000 	.word	0x03d09000
 8003bdc:	003d0900 	.word	0x003d0900
 8003be0:	017d7840 	.word	0x017d7840
 8003be4:	46000000 	.word	0x46000000
 8003be8:	4c742400 	.word	0x4c742400
 8003bec:	4a742400 	.word	0x4a742400
 8003bf0:	4bbebc20 	.word	0x4bbebc20

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bfa:	f7ff fe81 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	490f      	ldr	r1, [pc, #60]	@ (8003c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c0c:	5ccb      	ldrb	r3, [r1, r3]
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	fa22 f303 	lsr.w	r3, r2, r3
 8003c16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c18:	4b0a      	ldr	r3, [pc, #40]	@ (8003c44 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	4a09      	ldr	r2, [pc, #36]	@ (8003c48 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c22:	5cd3      	ldrb	r3, [r2, r3]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	4a07      	ldr	r2, [pc, #28]	@ (8003c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003c30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c32:	4a07      	ldr	r2, [pc, #28]	@ (8003c50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c38:	4b04      	ldr	r3, [pc, #16]	@ (8003c4c <HAL_RCC_GetHCLKFreq+0x58>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	58024400 	.word	0x58024400
 8003c48:	0800db88 	.word	0x0800db88
 8003c4c:	24000004 	.word	0x24000004
 8003c50:	24000000 	.word	0x24000000

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c58:	f7ff ffcc 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4904      	ldr	r1, [pc, #16]	@ (8003c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	58024400 	.word	0x58024400
 8003c7c:	0800db88 	.word	0x0800db88

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c84:	f7ff ffb6 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4904      	ldr	r1, [pc, #16]	@ (8003ca8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	58024400 	.word	0x58024400
 8003ca8:	0800db88 	.word	0x0800db88

08003cac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb0:	b0ca      	sub	sp, #296	@ 0x128
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8003cd6:	d049      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ce2:	d02f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ce4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ce8:	d828      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cee:	d01a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cf4:	d822      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cfe:	d007      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d00:	e01c      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d02:	4bb8      	ldr	r3, [pc, #736]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	4ab7      	ldr	r2, [pc, #732]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d0e:	e01a      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	3308      	adds	r3, #8
 8003d16:	2102      	movs	r1, #2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f002 fb61 	bl	80063e0 <RCCEx_PLL2_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d24:	e00f      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	3328      	adds	r3, #40	@ 0x28
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 fc08 	bl	8006544 <RCCEx_PLL3_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d3a:	e004      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d42:	e000      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d4e:	4ba5      	ldr	r3, [pc, #660]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d5c:	4aa1      	ldr	r2, [pc, #644]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003d78:	f04f 0900 	mov.w	r9, #0
 8003d7c:	ea58 0309 	orrs.w	r3, r8, r9
 8003d80:	d047      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d82a      	bhi.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003da9 	.word	0x08003da9
 8003d98:	08003db7 	.word	0x08003db7
 8003d9c:	08003dcd 	.word	0x08003dcd
 8003da0:	08003deb 	.word	0x08003deb
 8003da4:	08003deb 	.word	0x08003deb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da8:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	4a8d      	ldr	r2, [pc, #564]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003db4:	e01a      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dba:	3308      	adds	r3, #8
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f002 fb0e 	bl	80063e0 <RCCEx_PLL2_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dca:	e00f      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd0:	3328      	adds	r3, #40	@ 0x28
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f002 fbb5 	bl	8006544 <RCCEx_PLL3_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003de0:	e004      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df4:	4b7b      	ldr	r3, [pc, #492]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	f023 0107 	bic.w	r1, r3, #7
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e02:	4a78      	ldr	r2, [pc, #480]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e08:	e003      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003e1e:	f04f 0b00 	mov.w	fp, #0
 8003e22:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e26:	d04c      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e32:	d030      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e38:	d829      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e3c:	d02d      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e40:	d825      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e42:	2b80      	cmp	r3, #128	@ 0x80
 8003e44:	d018      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003e46:	2b80      	cmp	r3, #128	@ 0x80
 8003e48:	d821      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003e4e:	2b40      	cmp	r3, #64	@ 0x40
 8003e50:	d007      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003e52:	e01c      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e54:	4b63      	ldr	r3, [pc, #396]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	4a62      	ldr	r2, [pc, #392]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e60:	e01c      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e66:	3308      	adds	r3, #8
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f002 fab8 	bl	80063e0 <RCCEx_PLL2_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e76:	e011      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	3328      	adds	r3, #40	@ 0x28
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f002 fb5f 	bl	8006544 <RCCEx_PLL3_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e8c:	e006      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e94:	e002      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb2:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eb8:	e003      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003ece:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003ed8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003edc:	460b      	mov	r3, r1
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	d053      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003eea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eee:	d035      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ef0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ef4:	d82e      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ef6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003efa:	d031      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003efc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f00:	d828      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f06:	d01a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f0c:	d822      	bhi.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003f12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f16:	d007      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003f18:	e01c      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f1a:	4b32      	ldr	r3, [pc, #200]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	4a31      	ldr	r2, [pc, #196]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f26:	e01c      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f002 fa55 	bl	80063e0 <RCCEx_PLL2_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e011      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f42:	3328      	adds	r3, #40	@ 0x28
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f002 fafc 	bl	8006544 <RCCEx_PLL3_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f52:	e006      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f5a:	e002      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f5c:	bf00      	nop
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f80:	e003      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003f96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003fa0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	d056      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb6:	d038      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003fb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fbc:	d831      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fc2:	d034      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003fc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003fc8:	d82b      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fce:	d01d      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003fd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fd4:	d825      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d006      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003fda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003fe0:	e01f      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fe2:	bf00      	nop
 8003fe4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe8:	4ba2      	ldr	r3, [pc, #648]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	4aa1      	ldr	r2, [pc, #644]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ff4:	e01c      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f002 f9ee 	bl	80063e0 <RCCEx_PLL2_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800400a:	e011      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	3328      	adds	r3, #40	@ 0x28
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f002 fa95 	bl	8006544 <RCCEx_PLL3_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004028:	e002      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800402e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10b      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004038:	4b8e      	ldr	r3, [pc, #568]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004044:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004048:	4a8a      	ldr	r2, [pc, #552]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800404a:	430b      	orrs	r3, r1
 800404c:	6593      	str	r3, [r2, #88]	@ 0x58
 800404e:	e003      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004064:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800406e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d03a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407e:	2b30      	cmp	r3, #48	@ 0x30
 8004080:	d01f      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004082:	2b30      	cmp	r3, #48	@ 0x30
 8004084:	d819      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004086:	2b20      	cmp	r3, #32
 8004088:	d00c      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800408a:	2b20      	cmp	r3, #32
 800408c:	d815      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d019      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004092:	2b10      	cmp	r3, #16
 8004094:	d111      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004096:	4b77      	ldr	r3, [pc, #476]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409a:	4a76      	ldr	r2, [pc, #472]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800409c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80040a2:	e011      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	3308      	adds	r3, #8
 80040aa:	2102      	movs	r1, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f002 f997 	bl	80063e0 <RCCEx_PLL2_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80040b8:	e006      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c0:	e002      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80040c2:	bf00      	nop
 80040c4:	e000      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80040c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040d0:	4b68      	ldr	r3, [pc, #416]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040de:	4a65      	ldr	r2, [pc, #404]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e0:	430b      	orrs	r3, r1
 80040e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040e4:	e003      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80040fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004104:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004108:	460b      	mov	r3, r1
 800410a:	4313      	orrs	r3, r2
 800410c:	d051      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004118:	d035      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800411a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800411e:	d82e      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004120:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004124:	d031      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004126:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800412a:	d828      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800412c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004130:	d01a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004136:	d822      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800413c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004140:	d007      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004142:	e01c      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004144:	4b4b      	ldr	r3, [pc, #300]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004148:	4a4a      	ldr	r2, [pc, #296]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800414a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004150:	e01c      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	3308      	adds	r3, #8
 8004158:	2100      	movs	r1, #0
 800415a:	4618      	mov	r0, r3
 800415c:	f002 f940 	bl	80063e0 <RCCEx_PLL2_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004166:	e011      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416c:	3328      	adds	r3, #40	@ 0x28
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f002 f9e7 	bl	8006544 <RCCEx_PLL3_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800417c:	e006      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004184:	e002      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800418a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004194:	4b37      	ldr	r3, [pc, #220]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004198:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a2:	4a34      	ldr	r2, [pc, #208]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80041be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80041c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80041cc:	460b      	mov	r3, r1
 80041ce:	4313      	orrs	r3, r2
 80041d0:	d056      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041dc:	d033      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80041de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041e2:	d82c      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041e8:	d02f      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80041ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041ee:	d826      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041f4:	d02b      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80041f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041fa:	d820      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004200:	d012      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004206:	d81a      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004208:	2b00      	cmp	r3, #0
 800420a:	d022      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004210:	d115      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004216:	3308      	adds	r3, #8
 8004218:	2101      	movs	r1, #1
 800421a:	4618      	mov	r0, r3
 800421c:	f002 f8e0 	bl	80063e0 <RCCEx_PLL2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004226:	e015      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422c:	3328      	adds	r3, #40	@ 0x28
 800422e:	2101      	movs	r1, #1
 8004230:	4618      	mov	r0, r3
 8004232:	f002 f987 	bl	8006544 <RCCEx_PLL3_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800423c:	e00a      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004244:	e006      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004246:	bf00      	nop
 8004248:	e004      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800424a:	bf00      	nop
 800424c:	e002      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800424e:	bf00      	nop
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10d      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800425c:	4b05      	ldr	r3, [pc, #20]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800425e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004260:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800426a:	4a02      	ldr	r2, [pc, #8]	@ (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800426c:	430b      	orrs	r3, r1
 800426e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004270:	e006      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004272:	bf00      	nop
 8004274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800428c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004296:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d055      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ac:	d033      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80042ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042b2:	d82c      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b8:	d02f      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042be:	d826      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042c4:	d02b      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80042c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042ca:	d820      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042d0:	d012      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80042d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042d6:	d81a      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d022      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80042dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042e0:	d115      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	3308      	adds	r3, #8
 80042e8:	2101      	movs	r1, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	f002 f878 	bl	80063e0 <RCCEx_PLL2_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042f6:	e015      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fc:	3328      	adds	r3, #40	@ 0x28
 80042fe:	2101      	movs	r1, #1
 8004300:	4618      	mov	r0, r3
 8004302:	f002 f91f 	bl	8006544 <RCCEx_PLL3_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800430c:	e00a      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004314:	e006      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004316:	bf00      	nop
 8004318:	e004      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800432c:	4ba3      	ldr	r3, [pc, #652]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800433c:	4a9f      	ldr	r2, [pc, #636]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800433e:	430b      	orrs	r3, r1
 8004340:	6593      	str	r3, [r2, #88]	@ 0x58
 8004342:	e003      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800435c:	2300      	movs	r3, #0
 800435e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004366:	460b      	mov	r3, r1
 8004368:	4313      	orrs	r3, r2
 800436a:	d037      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004376:	d00e      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004378:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800437c:	d816      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d018      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004382:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004386:	d111      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004388:	4b8c      	ldr	r3, [pc, #560]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	4a8b      	ldr	r2, [pc, #556]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800438e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004394:	e00f      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	3308      	adds	r3, #8
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f002 f81e 	bl	80063e0 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80043b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043be:	4b7f      	ldr	r3, [pc, #508]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	4a7b      	ldr	r2, [pc, #492]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ce:	430b      	orrs	r3, r1
 80043d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80043d2:	e003      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80043e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043ec:	2300      	movs	r3, #0
 80043ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80043f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4313      	orrs	r3, r2
 80043fa:	d039      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80043fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004402:	2b03      	cmp	r3, #3
 8004404:	d81c      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004406:	a201      	add	r2, pc, #4	@ (adr r2, 800440c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004449 	.word	0x08004449
 8004410:	0800441d 	.word	0x0800441d
 8004414:	0800442b 	.word	0x0800442b
 8004418:	08004449 	.word	0x08004449
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800441c:	4b67      	ldr	r3, [pc, #412]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	4a66      	ldr	r2, [pc, #408]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004428:	e00f      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442e:	3308      	adds	r3, #8
 8004430:	2102      	movs	r1, #2
 8004432:	4618      	mov	r0, r3
 8004434:	f001 ffd4 	bl	80063e0 <RCCEx_PLL2_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800443e:	e004      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004446:	e000      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004452:	4b5a      	ldr	r3, [pc, #360]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004456:	f023 0103 	bic.w	r1, r3, #3
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004460:	4a56      	ldr	r2, [pc, #344]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004462:	430b      	orrs	r3, r1
 8004464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004466:	e003      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800447c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004486:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800448a:	460b      	mov	r3, r1
 800448c:	4313      	orrs	r3, r2
 800448e:	f000 809f 	beq.w	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004492:	4b4b      	ldr	r3, [pc, #300]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a4a      	ldr	r2, [pc, #296]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800449e:	f7fd f91b 	bl	80016d8 <HAL_GetTick>
 80044a2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a6:	e00b      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a8:	f7fd f916 	bl	80016d8 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	@ 0x64
 80044b6:	d903      	bls.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044be:	e005      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044c0:	4b3f      	ldr	r3, [pc, #252]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0ed      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80044cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d179      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80044d4:	4b39      	ldr	r3, [pc, #228]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044e0:	4053      	eors	r3, r2
 80044e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d015      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ea:	4b34      	ldr	r3, [pc, #208]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f6:	4b31      	ldr	r3, [pc, #196]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fa:	4a30      	ldr	r2, [pc, #192]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004502:	4b2e      	ldr	r3, [pc, #184]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004506:	4a2d      	ldr	r2, [pc, #180]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800450e:	4a2b      	ldr	r2, [pc, #172]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004514:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800451e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004522:	d118      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd f8d8 	bl	80016d8 <HAL_GetTick>
 8004528:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800452c:	e00d      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fd f8d3 	bl	80016d8 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004538:	1ad2      	subs	r2, r2, r3
 800453a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800453e:	429a      	cmp	r2, r3
 8004540:	d903      	bls.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004548:	e005      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800454a:	4b1c      	ldr	r3, [pc, #112]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0eb      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455a:	2b00      	cmp	r3, #0
 800455c:	d129      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800456e:	d10e      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004570:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004580:	091a      	lsrs	r2, r3, #4
 8004582:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004584:	4013      	ands	r3, r2
 8004586:	4a0d      	ldr	r2, [pc, #52]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004588:	430b      	orrs	r3, r1
 800458a:	6113      	str	r3, [r2, #16]
 800458c:	e005      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800458e:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	4a0a      	ldr	r2, [pc, #40]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004594:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004598:	6113      	str	r3, [r2, #16]
 800459a:	4b08      	ldr	r3, [pc, #32]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800459c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045aa:	4a04      	ldr	r2, [pc, #16]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b0:	e00e      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80045ba:	e009      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80045bc:	58024400 	.word	0x58024400
 80045c0:	58024800 	.word	0x58024800
 80045c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f002 0301 	and.w	r3, r2, #1
 80045dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f000 8089 	beq.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045f8:	2b28      	cmp	r3, #40	@ 0x28
 80045fa:	d86b      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80045fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	080046dd 	.word	0x080046dd
 8004608:	080046d5 	.word	0x080046d5
 800460c:	080046d5 	.word	0x080046d5
 8004610:	080046d5 	.word	0x080046d5
 8004614:	080046d5 	.word	0x080046d5
 8004618:	080046d5 	.word	0x080046d5
 800461c:	080046d5 	.word	0x080046d5
 8004620:	080046d5 	.word	0x080046d5
 8004624:	080046a9 	.word	0x080046a9
 8004628:	080046d5 	.word	0x080046d5
 800462c:	080046d5 	.word	0x080046d5
 8004630:	080046d5 	.word	0x080046d5
 8004634:	080046d5 	.word	0x080046d5
 8004638:	080046d5 	.word	0x080046d5
 800463c:	080046d5 	.word	0x080046d5
 8004640:	080046d5 	.word	0x080046d5
 8004644:	080046bf 	.word	0x080046bf
 8004648:	080046d5 	.word	0x080046d5
 800464c:	080046d5 	.word	0x080046d5
 8004650:	080046d5 	.word	0x080046d5
 8004654:	080046d5 	.word	0x080046d5
 8004658:	080046d5 	.word	0x080046d5
 800465c:	080046d5 	.word	0x080046d5
 8004660:	080046d5 	.word	0x080046d5
 8004664:	080046dd 	.word	0x080046dd
 8004668:	080046d5 	.word	0x080046d5
 800466c:	080046d5 	.word	0x080046d5
 8004670:	080046d5 	.word	0x080046d5
 8004674:	080046d5 	.word	0x080046d5
 8004678:	080046d5 	.word	0x080046d5
 800467c:	080046d5 	.word	0x080046d5
 8004680:	080046d5 	.word	0x080046d5
 8004684:	080046dd 	.word	0x080046dd
 8004688:	080046d5 	.word	0x080046d5
 800468c:	080046d5 	.word	0x080046d5
 8004690:	080046d5 	.word	0x080046d5
 8004694:	080046d5 	.word	0x080046d5
 8004698:	080046d5 	.word	0x080046d5
 800469c:	080046d5 	.word	0x080046d5
 80046a0:	080046d5 	.word	0x080046d5
 80046a4:	080046dd 	.word	0x080046dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ac:	3308      	adds	r3, #8
 80046ae:	2101      	movs	r1, #1
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 fe95 	bl	80063e0 <RCCEx_PLL2_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046bc:	e00f      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c2:	3328      	adds	r3, #40	@ 0x28
 80046c4:	2101      	movs	r1, #1
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 ff3c 	bl	8006544 <RCCEx_PLL3_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80046d2:	e004      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046da:	e000      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80046dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046e6:	4bbf      	ldr	r3, [pc, #764]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f4:	4abb      	ldr	r2, [pc, #748]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046f6:	430b      	orrs	r3, r1
 80046f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80046fa:	e003      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f002 0302 	and.w	r3, r2, #2
 8004710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004714:	2300      	movs	r3, #0
 8004716:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800471a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800471e:	460b      	mov	r3, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	d041      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800472a:	2b05      	cmp	r3, #5
 800472c:	d824      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800472e:	a201      	add	r2, pc, #4	@ (adr r2, 8004734 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004781 	.word	0x08004781
 8004738:	0800474d 	.word	0x0800474d
 800473c:	08004763 	.word	0x08004763
 8004740:	08004781 	.word	0x08004781
 8004744:	08004781 	.word	0x08004781
 8004748:	08004781 	.word	0x08004781
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004750:	3308      	adds	r3, #8
 8004752:	2101      	movs	r1, #1
 8004754:	4618      	mov	r0, r3
 8004756:	f001 fe43 	bl	80063e0 <RCCEx_PLL2_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004760:	e00f      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	3328      	adds	r3, #40	@ 0x28
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f001 feea 	bl	8006544 <RCCEx_PLL3_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004776:	e004      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800478a:	4b96      	ldr	r3, [pc, #600]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800478c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478e:	f023 0107 	bic.w	r1, r3, #7
 8004792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004796:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004798:	4a92      	ldr	r2, [pc, #584]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800479a:	430b      	orrs	r3, r1
 800479c:	6553      	str	r3, [r2, #84]	@ 0x54
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f002 0304 	and.w	r3, r2, #4
 80047b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d044      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d0:	2b05      	cmp	r3, #5
 80047d2:	d825      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80047d4:	a201      	add	r2, pc, #4	@ (adr r2, 80047dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004829 	.word	0x08004829
 80047e0:	080047f5 	.word	0x080047f5
 80047e4:	0800480b 	.word	0x0800480b
 80047e8:	08004829 	.word	0x08004829
 80047ec:	08004829 	.word	0x08004829
 80047f0:	08004829 	.word	0x08004829
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f8:	3308      	adds	r3, #8
 80047fa:	2101      	movs	r1, #1
 80047fc:	4618      	mov	r0, r3
 80047fe:	f001 fdef 	bl	80063e0 <RCCEx_PLL2_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004808:	e00f      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	3328      	adds	r3, #40	@ 0x28
 8004810:	2101      	movs	r1, #1
 8004812:	4618      	mov	r0, r3
 8004814:	f001 fe96 	bl	8006544 <RCCEx_PLL3_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800481e:	e004      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004826:	e000      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800482a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004832:	4b6c      	ldr	r3, [pc, #432]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004836:	f023 0107 	bic.w	r1, r3, #7
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004842:	4a68      	ldr	r2, [pc, #416]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004844:	430b      	orrs	r3, r1
 8004846:	6593      	str	r3, [r2, #88]	@ 0x58
 8004848:	e003      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	f002 0320 	and.w	r3, r2, #32
 800485e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004862:	2300      	movs	r3, #0
 8004864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800486c:	460b      	mov	r3, r1
 800486e:	4313      	orrs	r3, r2
 8004870:	d055      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800487e:	d033      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004884:	d82c      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488a:	d02f      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004890:	d826      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004892:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004896:	d02b      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004898:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800489c:	d820      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800489e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048a2:	d012      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80048a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048a8:	d81a      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d022      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80048ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048b2:	d115      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b8:	3308      	adds	r3, #8
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 fd8f 	bl	80063e0 <RCCEx_PLL2_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048c8:	e015      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	3328      	adds	r3, #40	@ 0x28
 80048d0:	2102      	movs	r1, #2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 fe36 	bl	8006544 <RCCEx_PLL3_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80048de:	e00a      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048e6:	e006      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048e8:	bf00      	nop
 80048ea:	e004      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048ec:	bf00      	nop
 80048ee:	e002      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048f0:	bf00      	nop
 80048f2:	e000      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10b      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048fe:	4b39      	ldr	r3, [pc, #228]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004902:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490e:	4a35      	ldr	r2, [pc, #212]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004910:	430b      	orrs	r3, r1
 8004912:	6553      	str	r3, [r2, #84]	@ 0x54
 8004914:	e003      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800492a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800492e:	2300      	movs	r3, #0
 8004930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004934:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004938:	460b      	mov	r3, r1
 800493a:	4313      	orrs	r3, r2
 800493c:	d058      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004946:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800494a:	d033      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800494c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004950:	d82c      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004956:	d02f      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495c:	d826      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800495e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004962:	d02b      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004964:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004968:	d820      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800496a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800496e:	d012      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004974:	d81a      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d022      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497e:	d115      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004984:	3308      	adds	r3, #8
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f001 fd29 	bl	80063e0 <RCCEx_PLL2_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004994:	e015      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499a:	3328      	adds	r3, #40	@ 0x28
 800499c:	2102      	movs	r1, #2
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 fdd0 	bl	8006544 <RCCEx_PLL3_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049aa:	e00a      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049b2:	e006      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049b4:	bf00      	nop
 80049b6:	e004      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049b8:	bf00      	nop
 80049ba:	e002      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049bc:	bf00      	nop
 80049be:	e000      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80049c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10e      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049da:	4a02      	ldr	r2, [pc, #8]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049dc:	430b      	orrs	r3, r1
 80049de:	6593      	str	r3, [r2, #88]	@ 0x58
 80049e0:	e006      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80049e2:	bf00      	nop
 80049e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80049fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a06:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	d055      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a1c:	d033      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004a1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004a22:	d82c      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a28:	d02f      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004a2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2e:	d826      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a34:	d02b      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004a36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004a3a:	d820      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a40:	d012      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004a42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a46:	d81a      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d022      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a50:	d115      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a56:	3308      	adds	r3, #8
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fcc0 	bl	80063e0 <RCCEx_PLL2_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a66:	e015      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6c:	3328      	adds	r3, #40	@ 0x28
 8004a6e:	2102      	movs	r1, #2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 fd67 	bl	8006544 <RCCEx_PLL3_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a7c:	e00a      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a84:	e006      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a86:	bf00      	nop
 8004a88:	e004      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a8a:	bf00      	nop
 8004a8c:	e002      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004aac:	4a9d      	ldr	r2, [pc, #628]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ab2:	e003      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	f002 0308 	and.w	r3, r2, #8
 8004ac8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004acc:	2300      	movs	r3, #0
 8004ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ad2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	d01e      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae8:	d10c      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aee:	3328      	adds	r3, #40	@ 0x28
 8004af0:	2102      	movs	r1, #2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f001 fd26 	bl	8006544 <RCCEx_PLL3_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b04:	4b87      	ldr	r3, [pc, #540]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b14:	4a83      	ldr	r2, [pc, #524]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b16:	430b      	orrs	r3, r1
 8004b18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f002 0310 	and.w	r3, r2, #16
 8004b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b30:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b34:	460b      	mov	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	d01e      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b46:	d10c      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4c:	3328      	adds	r3, #40	@ 0x28
 8004b4e:	2102      	movs	r1, #2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f001 fcf7 	bl	8006544 <RCCEx_PLL3_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b62:	4b70      	ldr	r3, [pc, #448]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b72:	4a6c      	ldr	r2, [pc, #432]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b92:	460b      	mov	r3, r1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	d03e      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ba0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ba4:	d022      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004ba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004baa:	d81b      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb4:	d00b      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004bb6:	e015      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 fc0d 	bl	80063e0 <RCCEx_PLL2_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004bcc:	e00f      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd2:	3328      	adds	r3, #40	@ 0x28
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f001 fcb4 	bl	8006544 <RCCEx_PLL3_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004be2:	e004      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bea:	e000      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c06:	4a47      	ldr	r2, [pc, #284]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c0c:	e003      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004c22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c24:	2300      	movs	r3, #0
 8004c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d03b      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c3e:	d01f      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004c40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c44:	d818      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c4a:	d003      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c50:	d007      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004c52:	e011      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c54:	4b33      	ldr	r3, [pc, #204]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	4a32      	ldr	r2, [pc, #200]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c60:	e00f      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c66:	3328      	adds	r3, #40	@ 0x28
 8004c68:	2101      	movs	r1, #1
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fc6a 	bl	8006544 <RCCEx_PLL3_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c76:	e004      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c7e:	e000      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10b      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c8a:	4b26      	ldr	r3, [pc, #152]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9a:	4a22      	ldr	r2, [pc, #136]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ca0:	e003      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004cb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cb8:	2300      	movs	r3, #0
 8004cba:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cbc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	d034      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd4:	d007      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004cd6:	e011      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cd8:	4b12      	ldr	r3, [pc, #72]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	4a11      	ldr	r2, [pc, #68]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ce4:	e00e      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cea:	3308      	adds	r3, #8
 8004cec:	2102      	movs	r1, #2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 fb76 	bl	80063e0 <RCCEx_PLL2_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004cfa:	e003      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d1a:	4a02      	ldr	r2, [pc, #8]	@ (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d20:	e006      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004d22:	bf00      	nop
 8004d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d3e:	2300      	movs	r3, #0
 8004d40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d46:	460b      	mov	r3, r1
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	d00c      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d50:	3328      	adds	r3, #40	@ 0x28
 8004d52:	2102      	movs	r1, #2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 fbf5 	bl	8006544 <RCCEx_PLL3_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004d72:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d74:	2300      	movs	r3, #0
 8004d76:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	d038      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d8e:	d018      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004d90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d94:	d811      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d9a:	d014      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da0:	d80b      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d011      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004daa:	d106      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dac:	4bc3      	ldr	r3, [pc, #780]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	4ac2      	ldr	r2, [pc, #776]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004db8:	e008      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dc0:	e004      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dc2:	bf00      	nop
 8004dc4:	e002      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dd4:	4bb9      	ldr	r3, [pc, #740]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004de4:	4ab5      	ldr	r2, [pc, #724]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004de6:	430b      	orrs	r3, r1
 8004de8:	6553      	str	r3, [r2, #84]	@ 0x54
 8004dea:	e003      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004e00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e02:	2300      	movs	r3, #0
 8004e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e10:	4baa      	ldr	r3, [pc, #680]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1e:	4aa7      	ldr	r2, [pc, #668]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e20:	430b      	orrs	r3, r1
 8004e22:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004e30:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e32:	2300      	movs	r3, #0
 8004e34:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e40:	4b9e      	ldr	r3, [pc, #632]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004e50:	4a9a      	ldr	r2, [pc, #616]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e52:	430b      	orrs	r3, r1
 8004e54:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e64:	2300      	movs	r3, #0
 8004e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e72:	4b92      	ldr	r3, [pc, #584]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e76:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e80:	4a8e      	ldr	r2, [pc, #568]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e82:	430b      	orrs	r3, r1
 8004e84:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004e92:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e94:	2300      	movs	r3, #0
 8004e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e98:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	d00e      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ea2:	4b86      	ldr	r3, [pc, #536]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	4a85      	ldr	r2, [pc, #532]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ea8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004eac:	6113      	str	r3, [r2, #16]
 8004eae:	4b83      	ldr	r3, [pc, #524]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eb0:	6919      	ldr	r1, [r3, #16]
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004eba:	4a80      	ldr	r2, [pc, #512]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ece:	2300      	movs	r3, #0
 8004ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ed2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004edc:	4b77      	ldr	r3, [pc, #476]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eea:	4a74      	ldr	r2, [pc, #464]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eec:	430b      	orrs	r3, r1
 8004eee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004efe:	2300      	movs	r3, #0
 8004f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004f06:	460b      	mov	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	d00a      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f10:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f1c:	4a67      	ldr	r2, [pc, #412]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	d011      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f42:	3308      	adds	r3, #8
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 fa4a 	bl	80063e0 <RCCEx_PLL2_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	6239      	str	r1, [r7, #32]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	d011      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f82:	3308      	adds	r3, #8
 8004f84:	2101      	movs	r1, #1
 8004f86:	4618      	mov	r0, r3
 8004f88:	f001 fa2a 	bl	80063e0 <RCCEx_PLL2_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	2100      	movs	r1, #0
 8004fac:	61b9      	str	r1, [r7, #24]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	d011      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 fa0a 	bl	80063e0 <RCCEx_PLL2_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	2100      	movs	r1, #0
 8004fec:	6139      	str	r1, [r7, #16]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	d011      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005002:	3328      	adds	r3, #40	@ 0x28
 8005004:	2100      	movs	r1, #0
 8005006:	4618      	mov	r0, r3
 8005008:	f001 fa9c 	bl	8006544 <RCCEx_PLL3_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800501e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	2100      	movs	r1, #0
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005038:	460b      	mov	r3, r1
 800503a:	4313      	orrs	r3, r2
 800503c:	d011      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005042:	3328      	adds	r3, #40	@ 0x28
 8005044:	2101      	movs	r1, #1
 8005046:	4618      	mov	r0, r3
 8005048:	f001 fa7c 	bl	8006544 <RCCEx_PLL3_Config>
 800504c:	4603      	mov	r3, r0
 800504e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	2100      	movs	r1, #0
 800506c:	6039      	str	r1, [r7, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005078:	460b      	mov	r3, r1
 800507a:	4313      	orrs	r3, r2
 800507c:	d011      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	3328      	adds	r3, #40	@ 0x28
 8005084:	2102      	movs	r1, #2
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fa5c 	bl	8006544 <RCCEx_PLL3_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800509e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80050a2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	e000      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80050b6:	46bd      	mov	sp, r7
 80050b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050bc:	58024400 	.word	0x58024400

080050c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b090      	sub	sp, #64	@ 0x40
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80050ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ce:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80050d2:	430b      	orrs	r3, r1
 80050d4:	f040 8094 	bne.w	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80050d8:	4b9e      	ldr	r3, [pc, #632]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80050da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	f200 8087 	bhi.w	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80050ea:	a201      	add	r2, pc, #4	@ (adr r2, 80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f0:	08005105 	.word	0x08005105
 80050f4:	0800512d 	.word	0x0800512d
 80050f8:	08005155 	.word	0x08005155
 80050fc:	080051f1 	.word	0x080051f1
 8005100:	0800517d 	.word	0x0800517d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005104:	4b93      	ldr	r3, [pc, #588]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005110:	d108      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005116:	4618      	mov	r0, r3
 8005118:	f001 f810 	bl	800613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005120:	f000 bd45 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005128:	f000 bd41 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800512c:	4b89      	ldr	r3, [pc, #548]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005138:	d108      	bne.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800513a:	f107 0318 	add.w	r3, r7, #24
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fd54 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005148:	f000 bd31 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005150:	f000 bd2d 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005154:	4b7f      	ldr	r3, [pc, #508]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800515c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005160:	d108      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005162:	f107 030c 	add.w	r3, r7, #12
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fe94 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005170:	f000 bd1d 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005178:	f000 bd19 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800517c:	4b75      	ldr	r3, [pc, #468]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800517e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005180:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005184:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005186:	4b73      	ldr	r3, [pc, #460]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b04      	cmp	r3, #4
 8005190:	d10c      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005194:	2b00      	cmp	r3, #0
 8005196:	d109      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005198:	4b6e      	ldr	r3, [pc, #440]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	08db      	lsrs	r3, r3, #3
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	4a6d      	ldr	r2, [pc, #436]	@ (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80051a4:	fa22 f303 	lsr.w	r3, r2, r3
 80051a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051aa:	e01f      	b.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051ac:	4b69      	ldr	r3, [pc, #420]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b8:	d106      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80051ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051c0:	d102      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051c2:	4b66      	ldr	r3, [pc, #408]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80051c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051c6:	e011      	b.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051c8:	4b62      	ldr	r3, [pc, #392]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051d4:	d106      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80051d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051dc:	d102      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051de:	4b60      	ldr	r3, [pc, #384]	@ (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80051e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051e2:	e003      	b.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80051e8:	f000 bce1 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80051ec:	f000 bcdf 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80051f0:	4b5c      	ldr	r3, [pc, #368]	@ (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80051f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051f4:	f000 bcdb 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051fc:	f000 bcd7 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005204:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005208:	430b      	orrs	r3, r1
 800520a:	f040 80ad 	bne.w	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800520e:	4b51      	ldr	r3, [pc, #324]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005212:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005216:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800521e:	d056      	beq.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005226:	f200 8090 	bhi.w	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800522a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522c:	2bc0      	cmp	r3, #192	@ 0xc0
 800522e:	f000 8088 	beq.w	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	2bc0      	cmp	r3, #192	@ 0xc0
 8005236:	f200 8088 	bhi.w	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	2b80      	cmp	r3, #128	@ 0x80
 800523e:	d032      	beq.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005242:	2b80      	cmp	r3, #128	@ 0x80
 8005244:	f200 8081 	bhi.w	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800524e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005250:	2b40      	cmp	r3, #64	@ 0x40
 8005252:	d014      	beq.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005254:	e079      	b.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005256:	4b3f      	ldr	r3, [pc, #252]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005262:	d108      	bne.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005268:	4618      	mov	r0, r3
 800526a:	f000 ff67 	bl	800613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800526e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005272:	f000 bc9c 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800527a:	f000 bc98 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800527e:	4b35      	ldr	r3, [pc, #212]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005286:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800528a:	d108      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800528c:	f107 0318 	add.w	r3, r7, #24
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fcab 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800529a:	f000 bc88 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052a2:	f000 bc84 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052b2:	d108      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052b4:	f107 030c 	add.w	r3, r7, #12
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fdeb 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052c2:	f000 bc74 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052ca:	f000 bc70 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052ce:	4b21      	ldr	r3, [pc, #132]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d10c      	bne.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80052e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	08db      	lsrs	r3, r3, #3
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	4a18      	ldr	r2, [pc, #96]	@ (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80052f6:	fa22 f303 	lsr.w	r3, r2, r3
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052fc:	e01f      	b.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052fe:	4b15      	ldr	r3, [pc, #84]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800530a:	d106      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800530c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005312:	d102      	bne.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005314:	4b11      	ldr	r3, [pc, #68]	@ (800535c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005316:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005318:	e011      	b.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800531a:	4b0e      	ldr	r3, [pc, #56]	@ (8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005326:	d106      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800532a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800532e:	d102      	bne.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005330:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005334:	e003      	b.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800533a:	f000 bc38 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800533e:	f000 bc36 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005342:	4b08      	ldr	r3, [pc, #32]	@ (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005346:	f000 bc32 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800534e:	f000 bc2e 	b.w	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005352:	bf00      	nop
 8005354:	58024400 	.word	0x58024400
 8005358:	03d09000 	.word	0x03d09000
 800535c:	003d0900 	.word	0x003d0900
 8005360:	017d7840 	.word	0x017d7840
 8005364:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800536c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8005370:	430b      	orrs	r3, r1
 8005372:	f040 809c 	bne.w	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005376:	4b9e      	ldr	r3, [pc, #632]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800537e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005382:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005386:	d054      	beq.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800538e:	f200 808b 	bhi.w	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005398:	f000 8083 	beq.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800539c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80053a2:	f200 8081 	bhi.w	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053ac:	d02f      	beq.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053b4:	d878      	bhi.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d004      	beq.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053c2:	d012      	beq.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80053c4:	e070      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053c6:	4b8a      	ldr	r3, [pc, #552]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053d2:	d107      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 feaf 	bl	800613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053e2:	e3e4      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053e8:	e3e1      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053ea:	4b81      	ldr	r3, [pc, #516]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053f6:	d107      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053f8:	f107 0318 	add.w	r3, r7, #24
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fbf5 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005406:	e3d2      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800540c:	e3cf      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800540e:	4b78      	ldr	r3, [pc, #480]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800541a:	d107      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fd37 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800542a:	e3c0      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005430:	e3bd      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005432:	4b6f      	ldr	r3, [pc, #444]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005436:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800543a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800543c:	4b6c      	ldr	r3, [pc, #432]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b04      	cmp	r3, #4
 8005446:	d10c      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800544e:	4b68      	ldr	r3, [pc, #416]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	08db      	lsrs	r3, r3, #3
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	4a66      	ldr	r2, [pc, #408]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800545a:	fa22 f303 	lsr.w	r3, r2, r3
 800545e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005460:	e01e      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005462:	4b63      	ldr	r3, [pc, #396]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800546e:	d106      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005472:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005476:	d102      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005478:	4b5f      	ldr	r3, [pc, #380]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800547a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800547c:	e010      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800547e:	4b5c      	ldr	r3, [pc, #368]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800548a:	d106      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800548c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005492:	d102      	bne.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005494:	4b59      	ldr	r3, [pc, #356]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005498:	e002      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800549e:	e386      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80054a0:	e385      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80054a2:	4b57      	ldr	r3, [pc, #348]	@ (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80054a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a6:	e382      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054ac:	e37f      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80054ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80054b6:	430b      	orrs	r3, r1
 80054b8:	f040 80a7 	bne.w	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80054bc:	4b4c      	ldr	r3, [pc, #304]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80054c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054cc:	d055      	beq.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054d4:	f200 8096 	bhi.w	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054de:	f000 8084 	beq.w	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054e8:	f200 808c 	bhi.w	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054f2:	d030      	beq.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054fa:	f200 8083 	bhi.w	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	2b00      	cmp	r3, #0
 8005502:	d004      	beq.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800550a:	d012      	beq.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800550c:	e07a      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800550e:	4b38      	ldr	r3, [pc, #224]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800551a:	d107      	bne.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800551c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fe0b 	bl	800613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800552a:	e340      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005530:	e33d      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005532:	4b2f      	ldr	r3, [pc, #188]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800553a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800553e:	d107      	bne.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005540:	f107 0318 	add.w	r3, r7, #24
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fb51 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800554e:	e32e      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005554:	e32b      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005556:	4b26      	ldr	r3, [pc, #152]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800555e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005562:	d107      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005564:	f107 030c 	add.w	r3, r7, #12
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fc93 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005572:	e31c      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005578:	e319      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800557a:	4b1d      	ldr	r3, [pc, #116]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800557c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005582:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005584:	4b1a      	ldr	r3, [pc, #104]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d10c      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005596:	4b16      	ldr	r3, [pc, #88]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	08db      	lsrs	r3, r3, #3
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	4a14      	ldr	r2, [pc, #80]	@ (80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80055a2:	fa22 f303 	lsr.w	r3, r2, r3
 80055a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055a8:	e01e      	b.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055aa:	4b11      	ldr	r3, [pc, #68]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b6:	d106      	bne.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80055b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055be:	d102      	bne.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80055c0:	4b0d      	ldr	r3, [pc, #52]	@ (80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80055c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055c4:	e010      	b.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055c6:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d2:	d106      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80055d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055da:	d102      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055dc:	4b07      	ldr	r3, [pc, #28]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80055de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055e0:	e002      	b.n	80055e8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80055e6:	e2e2      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80055e8:	e2e1      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055ea:	4b05      	ldr	r3, [pc, #20]	@ (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80055ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055ee:	e2de      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80055f0:	58024400 	.word	0x58024400
 80055f4:	03d09000 	.word	0x03d09000
 80055f8:	003d0900 	.word	0x003d0900
 80055fc:	017d7840 	.word	0x017d7840
 8005600:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005608:	e2d1      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800560a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800560e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005612:	430b      	orrs	r3, r1
 8005614:	f040 809c 	bne.w	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005618:	4b93      	ldr	r3, [pc, #588]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800561a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005620:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005624:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005628:	d054      	beq.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800562a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005630:	f200 808b 	bhi.w	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800563a:	f000 8083 	beq.w	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005644:	f200 8081 	bhi.w	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800564e:	d02f      	beq.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005656:	d878      	bhi.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800565e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005664:	d012      	beq.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005666:	e070      	b.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005668:	4b7f      	ldr	r3, [pc, #508]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005674:	d107      	bne.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fd5e 	bl	800613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005684:	e293      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005686:	2300      	movs	r3, #0
 8005688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800568a:	e290      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800568c:	4b76      	ldr	r3, [pc, #472]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005698:	d107      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800569a:	f107 0318 	add.w	r3, r7, #24
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 faa4 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056a8:	e281      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ae:	e27e      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056b0:	4b6d      	ldr	r3, [pc, #436]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056bc:	d107      	bne.n	80056ce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056be:	f107 030c 	add.w	r3, r7, #12
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fbe6 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056cc:	e26f      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056d2:	e26c      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056d4:	4b64      	ldr	r3, [pc, #400]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80056d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056de:	4b62      	ldr	r3, [pc, #392]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d10c      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80056ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056f0:	4b5d      	ldr	r3, [pc, #372]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	08db      	lsrs	r3, r3, #3
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	4a5c      	ldr	r2, [pc, #368]	@ (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005702:	e01e      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005704:	4b58      	ldr	r3, [pc, #352]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005710:	d106      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005718:	d102      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800571a:	4b55      	ldr	r3, [pc, #340]	@ (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800571c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800571e:	e010      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005720:	4b51      	ldr	r3, [pc, #324]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800572c:	d106      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005734:	d102      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005736:	4b4f      	ldr	r3, [pc, #316]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800573a:	e002      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005740:	e235      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005742:	e234      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005744:	4b4c      	ldr	r3, [pc, #304]	@ (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005748:	e231      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800574e:	e22e      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005754:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005758:	430b      	orrs	r3, r1
 800575a:	f040 808f 	bne.w	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800575e:	4b42      	ldr	r3, [pc, #264]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005762:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005766:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800576e:	d06b      	beq.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005772:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005776:	d874      	bhi.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800577e:	d056      	beq.n	800582e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005782:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005786:	d86c      	bhi.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800578e:	d03b      	beq.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005792:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005796:	d864      	bhi.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800579e:	d021      	beq.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80057a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057a6:	d85c      	bhi.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d004      	beq.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80057ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b4:	d004      	beq.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80057b6:	e054      	b.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80057b8:	f7fe fa4c 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 80057bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057be:	e1f6      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057c0:	4b29      	ldr	r3, [pc, #164]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057cc:	d107      	bne.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ce:	f107 0318 	add.w	r3, r7, #24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fa0a 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057dc:	e1e7      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e2:	e1e4      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057e4:	4b20      	ldr	r3, [pc, #128]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057f0:	d107      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057f2:	f107 030c 	add.w	r3, r7, #12
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fb4c 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005800:	e1d5      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005806:	e1d2      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005808:	4b17      	ldr	r3, [pc, #92]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b04      	cmp	r3, #4
 8005812:	d109      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005814:	4b14      	ldr	r3, [pc, #80]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	08db      	lsrs	r3, r3, #3
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	4a13      	ldr	r2, [pc, #76]	@ (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005826:	e1c2      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582c:	e1bf      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800582e:	4b0e      	ldr	r3, [pc, #56]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800583a:	d102      	bne.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800583c:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800583e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005840:	e1b5      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005846:	e1b2      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005848:	4b07      	ldr	r3, [pc, #28]	@ (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005850:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005854:	d102      	bne.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005856:	4b07      	ldr	r3, [pc, #28]	@ (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800585a:	e1a8      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005860:	e1a5      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005866:	e1a2      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005868:	58024400 	.word	0x58024400
 800586c:	03d09000 	.word	0x03d09000
 8005870:	003d0900 	.word	0x003d0900
 8005874:	017d7840 	.word	0x017d7840
 8005878:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800587c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005880:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005884:	430b      	orrs	r3, r1
 8005886:	d173      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005888:	4b9c      	ldr	r3, [pc, #624]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800588a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005890:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005898:	d02f      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058a0:	d863      	bhi.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d004      	beq.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80058a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ae:	d012      	beq.n	80058d6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80058b0:	e05b      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058b2:	4b92      	ldr	r3, [pc, #584]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058be:	d107      	bne.n	80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058c0:	f107 0318 	add.w	r3, r7, #24
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 f991 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058ce:	e16e      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d4:	e16b      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058d6:	4b89      	ldr	r3, [pc, #548]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058e2:	d107      	bne.n	80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058e4:	f107 030c 	add.w	r3, r7, #12
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fad3 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058f2:	e15c      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058f8:	e159      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058fa:	4b80      	ldr	r3, [pc, #512]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005902:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005904:	4b7d      	ldr	r3, [pc, #500]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b04      	cmp	r3, #4
 800590e:	d10c      	bne.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005916:	4b79      	ldr	r3, [pc, #484]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	08db      	lsrs	r3, r3, #3
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	4a77      	ldr	r2, [pc, #476]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005922:	fa22 f303 	lsr.w	r3, r2, r3
 8005926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005928:	e01e      	b.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800592a:	4b74      	ldr	r3, [pc, #464]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005936:	d106      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800593e:	d102      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005940:	4b70      	ldr	r3, [pc, #448]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005944:	e010      	b.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005946:	4b6d      	ldr	r3, [pc, #436]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005952:	d106      	bne.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800595a:	d102      	bne.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800595c:	4b6a      	ldr	r3, [pc, #424]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800595e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005960:	e002      	b.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005962:	2300      	movs	r3, #0
 8005964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005966:	e122      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005968:	e121      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800596e:	e11e      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005974:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005978:	430b      	orrs	r3, r1
 800597a:	d133      	bne.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800597c:	4b5f      	ldr	r3, [pc, #380]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800597e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005984:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005992:	d012      	beq.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005994:	e023      	b.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005996:	4b59      	ldr	r3, [pc, #356]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800599e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059a2:	d107      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fbc7 	bl	800613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059b2:	e0fc      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b8:	e0f9      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059ba:	4b50      	ldr	r3, [pc, #320]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059c6:	d107      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c8:	f107 0318 	add.w	r3, r7, #24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 f90d 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059d6:	e0ea      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059dc:	e0e7      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059e2:	e0e4      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80059e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80059ec:	430b      	orrs	r3, r1
 80059ee:	f040 808d 	bne.w	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80059f2:	4b42      	ldr	r3, [pc, #264]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80059fa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80059fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a02:	d06b      	beq.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a0a:	d874      	bhi.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a12:	d056      	beq.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a1a:	d86c      	bhi.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a22:	d03b      	beq.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a2a:	d864      	bhi.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a32:	d021      	beq.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a3a:	d85c      	bhi.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d004      	beq.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a48:	d004      	beq.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005a4a:	e054      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005a4c:	f000 f8b8 	bl	8005bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a52:	e0ac      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a54:	4b29      	ldr	r3, [pc, #164]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a60:	d107      	bne.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a62:	f107 0318 	add.w	r3, r7, #24
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f8c0 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a70:	e09d      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a76:	e09a      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a78:	4b20      	ldr	r3, [pc, #128]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a84:	d107      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a86:	f107 030c 	add.w	r3, r7, #12
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fa02 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a94:	e08b      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a9a:	e088      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a9c:	4b17      	ldr	r3, [pc, #92]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d109      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aa8:	4b14      	ldr	r3, [pc, #80]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	08db      	lsrs	r3, r3, #3
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	4a13      	ldr	r2, [pc, #76]	@ (8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aba:	e078      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac0:	e075      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ace:	d102      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ad4:	e06b      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ada:	e068      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005adc:	4b07      	ldr	r3, [pc, #28]	@ (8005afc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ae4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ae8:	d102      	bne.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005aea:	4b07      	ldr	r3, [pc, #28]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aee:	e05e      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af4:	e05b      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005afa:	e058      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005afc:	58024400 	.word	0x58024400
 8005b00:	03d09000 	.word	0x03d09000
 8005b04:	003d0900 	.word	0x003d0900
 8005b08:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b10:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005b14:	430b      	orrs	r3, r1
 8005b16:	d148      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005b18:	4b27      	ldr	r3, [pc, #156]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b28:	d02a      	beq.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b30:	d838      	bhi.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b3e:	d00d      	beq.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005b40:	e030      	b.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b42:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b4e:	d102      	bne.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005b50:	4b1a      	ldr	r3, [pc, #104]	@ (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b54:	e02b      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b5a:	e028      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b5c:	4b16      	ldr	r3, [pc, #88]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b68:	d107      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fae4 	bl	800613c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b78:	e019      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b7e:	e016      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b80:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b8e:	f107 0318 	add.w	r3, r7, #24
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f82a 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b9c:	e007      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba2:	e004      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ba8:	e001      	b.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3740      	adds	r7, #64	@ 0x40
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	58024400 	.word	0x58024400
 8005bbc:	017d7840 	.word	0x017d7840

08005bc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bc4:	f7fe f816 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	4904      	ldr	r1, [pc, #16]	@ (8005be8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bd6:	5ccb      	ldrb	r3, [r1, r3]
 8005bd8:	f003 031f 	and.w	r3, r3, #31
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	58024400 	.word	0x58024400
 8005be8:	0800db88 	.word	0x0800db88

08005bec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	@ 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bf4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	0b1b      	lsrs	r3, r3, #12
 8005c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	091b      	lsrs	r3, r3, #4
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c16:	4b99      	ldr	r3, [pc, #612]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8111 	beq.w	8005e5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	f000 8083 	beq.w	8005d48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	f200 80a1 	bhi.w	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d056      	beq.n	8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c56:	e099      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c58:	4b88      	ldr	r3, [pc, #544]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02d      	beq.n	8005cc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c64:	4b85      	ldr	r3, [pc, #532]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	08db      	lsrs	r3, r3, #3
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	4a84      	ldr	r2, [pc, #528]	@ (8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cbe:	e087      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d02:	e065      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d16:	4b59      	ldr	r3, [pc, #356]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d46:	e043      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b48      	ldr	r3, [pc, #288]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8a:	e021      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b37      	ldr	r3, [pc, #220]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df6:	ee17 2a90 	vmov	r2, s15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e24:	ee17 2a90 	vmov	r2, s15
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e2c:	4b13      	ldr	r3, [pc, #76]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	0e1b      	lsrs	r3, r3, #24
 8005e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e52:	ee17 2a90 	vmov	r2, s15
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e5a:	e008      	b.n	8005e6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	609a      	str	r2, [r3, #8]
}
 8005e6e:	bf00      	nop
 8005e70:	3724      	adds	r7, #36	@ 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	03d09000 	.word	0x03d09000
 8005e84:	46000000 	.word	0x46000000
 8005e88:	4c742400 	.word	0x4c742400
 8005e8c:	4a742400 	.word	0x4a742400
 8005e90:	4bbebc20 	.word	0x4bbebc20

08005e94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b089      	sub	sp, #36	@ 0x24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e9c:	4ba1      	ldr	r3, [pc, #644]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005ea6:	4b9f      	ldr	r3, [pc, #636]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eaa:	0d1b      	lsrs	r3, r3, #20
 8005eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005ebe:	4b99      	ldr	r3, [pc, #612]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec2:	08db      	lsrs	r3, r3, #3
 8005ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8111 	beq.w	8006104 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	f000 8083 	beq.w	8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	f200 80a1 	bhi.w	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d056      	beq.n	8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005efe:	e099      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f00:	4b88      	ldr	r3, [pc, #544]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02d      	beq.n	8005f68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f0c:	4b85      	ldr	r3, [pc, #532]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	4a84      	ldr	r2, [pc, #528]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b7b      	ldr	r3, [pc, #492]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f66:	e087      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006130 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005faa:	e065      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b59      	ldr	r3, [pc, #356]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fee:	e043      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b48      	ldr	r3, [pc, #288]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a03 	vldr	s12, [r7, #12]
 8006016:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006032:	e021      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006046:	4b37      	ldr	r3, [pc, #220]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006056:	ed97 6a03 	vldr	s12, [r7, #12]
 800605a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006076:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006078:	4b2a      	ldr	r3, [pc, #168]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	0a5b      	lsrs	r3, r3, #9
 800607e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800608e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006092:	edd7 6a07 	vldr	s13, [r7, #28]
 8006096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609e:	ee17 2a90 	vmov	r2, s15
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80060a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060aa:	0c1b      	lsrs	r3, r3, #16
 80060ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060cc:	ee17 2a90 	vmov	r2, s15
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80060d4:	4b13      	ldr	r3, [pc, #76]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d8:	0e1b      	lsrs	r3, r3, #24
 80060da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fa:	ee17 2a90 	vmov	r2, s15
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006102:	e008      	b.n	8006116 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	609a      	str	r2, [r3, #8]
}
 8006116:	bf00      	nop
 8006118:	3724      	adds	r7, #36	@ 0x24
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
 8006128:	03d09000 	.word	0x03d09000
 800612c:	46000000 	.word	0x46000000
 8006130:	4c742400 	.word	0x4c742400
 8006134:	4a742400 	.word	0x4a742400
 8006138:	4bbebc20 	.word	0x4bbebc20

0800613c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800613c:	b480      	push	{r7}
 800613e:	b089      	sub	sp, #36	@ 0x24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006144:	4ba0      	ldr	r3, [pc, #640]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800614e:	4b9e      	ldr	r3, [pc, #632]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006158:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800615a:	4b9b      	ldr	r3, [pc, #620]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006164:	4b98      	ldr	r3, [pc, #608]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006168:	08db      	lsrs	r3, r3, #3
 800616a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	fb02 f303 	mul.w	r3, r2, r3
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8111 	beq.w	80063aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2b02      	cmp	r3, #2
 800618c:	f000 8083 	beq.w	8006296 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2b02      	cmp	r3, #2
 8006194:	f200 80a1 	bhi.w	80062da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d056      	beq.n	8006252 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80061a4:	e099      	b.n	80062da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061a6:	4b88      	ldr	r3, [pc, #544]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d02d      	beq.n	800620e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061b2:	4b85      	ldr	r3, [pc, #532]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	08db      	lsrs	r3, r3, #3
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	4a83      	ldr	r2, [pc, #524]	@ (80063cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80061be:	fa22 f303 	lsr.w	r3, r2, r3
 80061c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	ee07 3a90 	vmov	s15, r3
 80061d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061dc:	4b7a      	ldr	r3, [pc, #488]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80061f0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006200:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006208:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800620c:	e087      	b.n	800631e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006218:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80063d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800621c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006220:	4b69      	ldr	r3, [pc, #420]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006230:	ed97 6a03 	vldr	s12, [r7, #12]
 8006234:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006250:	e065      	b.n	800631e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006264:	4b58      	ldr	r3, [pc, #352]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006274:	ed97 6a03 	vldr	s12, [r7, #12]
 8006278:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800627c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006284:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006294:	e043      	b.n	800631e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	ee07 3a90 	vmov	s15, r3
 800629c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80063dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80062a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a8:	4b47      	ldr	r3, [pc, #284]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80062bc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062d8:	e021      	b.n	800631e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80063d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80062e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ec:	4b36      	ldr	r3, [pc, #216]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006300:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006318:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800631c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800631e:	4b2a      	ldr	r3, [pc, #168]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006322:	0a5b      	lsrs	r3, r3, #9
 8006324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006330:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006334:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006338:	edd7 6a07 	vldr	s13, [r7, #28]
 800633c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006344:	ee17 2a90 	vmov	r2, s15
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800634c:	4b1e      	ldr	r3, [pc, #120]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800634e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006350:	0c1b      	lsrs	r3, r3, #16
 8006352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006362:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006366:	edd7 6a07 	vldr	s13, [r7, #28]
 800636a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800636e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006372:	ee17 2a90 	vmov	r2, s15
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800637a:	4b13      	ldr	r3, [pc, #76]	@ (80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637e:	0e1b      	lsrs	r3, r3, #24
 8006380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006384:	ee07 3a90 	vmov	s15, r3
 8006388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006390:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006394:	edd7 6a07 	vldr	s13, [r7, #28]
 8006398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800639c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a0:	ee17 2a90 	vmov	r2, s15
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80063a8:	e008      	b.n	80063bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	3724      	adds	r7, #36	@ 0x24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	58024400 	.word	0x58024400
 80063cc:	03d09000 	.word	0x03d09000
 80063d0:	46000000 	.word	0x46000000
 80063d4:	4c742400 	.word	0x4c742400
 80063d8:	4a742400 	.word	0x4a742400
 80063dc:	4bbebc20 	.word	0x4bbebc20

080063e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063ee:	4b53      	ldr	r3, [pc, #332]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80063f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d101      	bne.n	80063fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e099      	b.n	8006532 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063fe:	4b4f      	ldr	r3, [pc, #316]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a4e      	ldr	r2, [pc, #312]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 8006404:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800640a:	f7fb f965 	bl	80016d8 <HAL_GetTick>
 800640e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006410:	e008      	b.n	8006424 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006412:	f7fb f961 	bl	80016d8 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d901      	bls.n	8006424 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e086      	b.n	8006532 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006424:	4b45      	ldr	r3, [pc, #276]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1f0      	bne.n	8006412 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006430:	4b42      	ldr	r3, [pc, #264]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	031b      	lsls	r3, r3, #12
 800643e:	493f      	ldr	r1, [pc, #252]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 8006440:	4313      	orrs	r3, r2
 8006442:	628b      	str	r3, [r1, #40]	@ 0x28
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	3b01      	subs	r3, #1
 800644a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	3b01      	subs	r3, #1
 8006454:	025b      	lsls	r3, r3, #9
 8006456:	b29b      	uxth	r3, r3
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	3b01      	subs	r3, #1
 8006460:	041b      	lsls	r3, r3, #16
 8006462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	3b01      	subs	r3, #1
 800646e:	061b      	lsls	r3, r3, #24
 8006470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006474:	4931      	ldr	r1, [pc, #196]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 8006476:	4313      	orrs	r3, r2
 8006478:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800647a:	4b30      	ldr	r3, [pc, #192]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 800647c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	492d      	ldr	r1, [pc, #180]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 8006488:	4313      	orrs	r3, r2
 800648a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800648c:	4b2b      	ldr	r3, [pc, #172]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	f023 0220 	bic.w	r2, r3, #32
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	4928      	ldr	r1, [pc, #160]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 800649a:	4313      	orrs	r3, r2
 800649c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800649e:	4b27      	ldr	r3, [pc, #156]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	4a26      	ldr	r2, [pc, #152]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064a4:	f023 0310 	bic.w	r3, r3, #16
 80064a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80064aa:	4b24      	ldr	r3, [pc, #144]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064ae:	4b24      	ldr	r3, [pc, #144]	@ (8006540 <RCCEx_PLL2_Config+0x160>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	69d2      	ldr	r2, [r2, #28]
 80064b6:	00d2      	lsls	r2, r2, #3
 80064b8:	4920      	ldr	r1, [pc, #128]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80064be:	4b1f      	ldr	r3, [pc, #124]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c2:	4a1e      	ldr	r2, [pc, #120]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064c4:	f043 0310 	orr.w	r3, r3, #16
 80064c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d106      	bne.n	80064de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80064d0:	4b1a      	ldr	r3, [pc, #104]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	4a19      	ldr	r2, [pc, #100]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064dc:	e00f      	b.n	80064fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d106      	bne.n	80064f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80064e4:	4b15      	ldr	r3, [pc, #84]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e8:	4a14      	ldr	r2, [pc, #80]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064f0:	e005      	b.n	80064fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80064f2:	4b12      	ldr	r3, [pc, #72]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f6:	4a11      	ldr	r2, [pc, #68]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 80064f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064fe:	4b0f      	ldr	r3, [pc, #60]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a0e      	ldr	r2, [pc, #56]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 8006504:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800650a:	f7fb f8e5 	bl	80016d8 <HAL_GetTick>
 800650e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006510:	e008      	b.n	8006524 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006512:	f7fb f8e1 	bl	80016d8 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b02      	cmp	r3, #2
 800651e:	d901      	bls.n	8006524 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e006      	b.n	8006532 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006524:	4b05      	ldr	r3, [pc, #20]	@ (800653c <RCCEx_PLL2_Config+0x15c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d0f0      	beq.n	8006512 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	58024400 	.word	0x58024400
 8006540:	ffff0007 	.word	0xffff0007

08006544 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006552:	4b53      	ldr	r3, [pc, #332]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	2b03      	cmp	r3, #3
 800655c:	d101      	bne.n	8006562 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e099      	b.n	8006696 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006562:	4b4f      	ldr	r3, [pc, #316]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a4e      	ldr	r2, [pc, #312]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800656c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656e:	f7fb f8b3 	bl	80016d8 <HAL_GetTick>
 8006572:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006574:	e008      	b.n	8006588 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006576:	f7fb f8af 	bl	80016d8 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e086      	b.n	8006696 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006588:	4b45      	ldr	r3, [pc, #276]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1f0      	bne.n	8006576 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006594:	4b42      	ldr	r3, [pc, #264]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	051b      	lsls	r3, r3, #20
 80065a2:	493f      	ldr	r1, [pc, #252]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	025b      	lsls	r3, r3, #9
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	041b      	lsls	r3, r3, #16
 80065c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	061b      	lsls	r3, r3, #24
 80065d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065d8:	4931      	ldr	r1, [pc, #196]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80065de:	4b30      	ldr	r3, [pc, #192]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 80065e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	492d      	ldr	r1, [pc, #180]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80065f0:	4b2b      	ldr	r3, [pc, #172]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	4928      	ldr	r1, [pc, #160]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006602:	4b27      	ldr	r3, [pc, #156]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006606:	4a26      	ldr	r2, [pc, #152]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800660c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800660e:	4b24      	ldr	r3, [pc, #144]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006612:	4b24      	ldr	r3, [pc, #144]	@ (80066a4 <RCCEx_PLL3_Config+0x160>)
 8006614:	4013      	ands	r3, r2
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	69d2      	ldr	r2, [r2, #28]
 800661a:	00d2      	lsls	r2, r2, #3
 800661c:	4920      	ldr	r1, [pc, #128]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 800661e:	4313      	orrs	r3, r2
 8006620:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006622:	4b1f      	ldr	r3, [pc, #124]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006626:	4a1e      	ldr	r2, [pc, #120]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800662c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006634:	4b1a      	ldr	r3, [pc, #104]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	4a19      	ldr	r2, [pc, #100]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 800663a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800663e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006640:	e00f      	b.n	8006662 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d106      	bne.n	8006656 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006648:	4b15      	ldr	r3, [pc, #84]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	4a14      	ldr	r2, [pc, #80]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 800664e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006654:	e005      	b.n	8006662 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006656:	4b12      	ldr	r3, [pc, #72]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665a:	4a11      	ldr	r2, [pc, #68]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 800665c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006660:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006662:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a0e      	ldr	r2, [pc, #56]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 8006668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800666c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666e:	f7fb f833 	bl	80016d8 <HAL_GetTick>
 8006672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006674:	e008      	b.n	8006688 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006676:	f7fb f82f 	bl	80016d8 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d901      	bls.n	8006688 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e006      	b.n	8006696 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006688:	4b05      	ldr	r3, [pc, #20]	@ (80066a0 <RCCEx_PLL3_Config+0x15c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f0      	beq.n	8006676 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	58024400 	.word	0x58024400
 80066a4:	ffff0007 	.word	0xffff0007

080066a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	@ 0x28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e075      	b.n	80067a6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7fa fca9 	bl	8001024 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2204      	movs	r2, #4
 80066d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f868 	bl	80067b0 <HAL_SD_InitCard>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e05d      	b.n	80067a6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80066ea:	f107 0308 	add.w	r3, r7, #8
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fbed 	bl	8006ed0 <HAL_SD_GetCardStatus>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e052      	b.n	80067a6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006700:	7e3b      	ldrb	r3, [r7, #24]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006706:	7e7b      	ldrb	r3, [r7, #25]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006710:	2b01      	cmp	r3, #1
 8006712:	d10a      	bne.n	800672a <HAL_SD_Init+0x82>
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <HAL_SD_Init+0x78>
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006726:	659a      	str	r2, [r3, #88]	@ 0x58
 8006728:	e00b      	b.n	8006742 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672e:	2b01      	cmp	r3, #1
 8006730:	d104      	bne.n	800673c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006738:	659a      	str	r2, [r3, #88]	@ 0x58
 800673a:	e002      	b.n	8006742 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fcab 	bl	80070a4 <HAL_SD_ConfigWideBusOperation>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e026      	b.n	80067a6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006758:	f7fa ffbe 	bl	80016d8 <HAL_GetTick>
 800675c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800675e:	e011      	b.n	8006784 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006760:	f7fa ffba 	bl	80016d8 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800676e:	d109      	bne.n	8006784 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006776:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e010      	b.n	80067a6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fd9f 	bl	80072c8 <HAL_SD_GetCardState>
 800678a:	4603      	mov	r3, r0
 800678c:	2b04      	cmp	r3, #4
 800678e:	d1e7      	bne.n	8006760 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3728      	adds	r7, #40	@ 0x28
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067b0:	b590      	push	{r4, r7, lr}
 80067b2:	b08d      	sub	sp, #52	@ 0x34
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80067bc:	2300      	movs	r3, #0
 80067be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80067c0:	2300      	movs	r3, #0
 80067c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80067c8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80067cc:	f04f 0100 	mov.w	r1, #0
 80067d0:	f7fe fc76 	bl	80050c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80067d4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80067ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e070      	b.n	80068d2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	4a39      	ldr	r2, [pc, #228]	@ (80068dc <HAL_SD_InitCard+0x12c>)
 80067f6:	fba2 2303 	umull	r2, r3, r2, r3
 80067fa:	091b      	lsrs	r3, r3, #4
 80067fc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681c      	ldr	r4, [r3, #0]
 8006802:	466a      	mov	r2, sp
 8006804:	f107 0318 	add.w	r3, r7, #24
 8006808:	e893 0003 	ldmia.w	r3, {r0, r1}
 800680c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006810:	f107 030c 	add.w	r3, r7, #12
 8006814:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006816:	4620      	mov	r0, r4
 8006818:	f003 fa56 	bl	8009cc8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f003 fa88 	bl	8009d36 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006832:	fbb2 f3f3 	udiv	r3, r2, r3
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800683e:	4a28      	ldr	r2, [pc, #160]	@ (80068e0 <HAL_SD_InitCard+0x130>)
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	fbb2 f3f3 	udiv	r3, r2, r3
 8006846:	3301      	adds	r3, #1
 8006848:	4618      	mov	r0, r3
 800684a:	f7fa ff51 	bl	80016f0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fe28 	bl	80074a4 <SD_PowerON>
 8006854:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e02e      	b.n	80068d2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fd47 	bl	8007308 <SD_InitCard>
 800687a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e01b      	b.n	80068d2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068a2:	4618      	mov	r0, r3
 80068a4:	f003 fadc 	bl	8009e60 <SDMMC_CmdBlockLength>
 80068a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00f      	beq.n	80068d0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a0b      	ldr	r2, [pc, #44]	@ (80068e4 <HAL_SD_InitCard+0x134>)
 80068b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	431a      	orrs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	372c      	adds	r7, #44	@ 0x2c
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd90      	pop	{r4, r7, pc}
 80068da:	bf00      	nop
 80068dc:	014f8b59 	.word	0x014f8b59
 80068e0:	00012110 	.word	0x00012110
 80068e4:	1fe00fff 	.word	0x1fe00fff

080068e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08c      	sub	sp, #48	@ 0x30
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d107      	bne.n	8006910 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006904:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e08d      	b.n	8006a2c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	f040 8086 	bne.w	8006a2a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006924:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	441a      	add	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800692e:	429a      	cmp	r2, r3
 8006930:	d907      	bls.n	8006942 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006936:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e074      	b.n	8006a2c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2203      	movs	r2, #3
 8006946:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2200      	movs	r2, #0
 8006950:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	025a      	lsls	r2, r3, #9
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	2b01      	cmp	r3, #1
 8006966:	d002      	beq.n	800696e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8006968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696a:	025b      	lsls	r3, r3, #9
 800696c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800696e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006972:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	025b      	lsls	r3, r3, #9
 8006978:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800697a:	2390      	movs	r3, #144	@ 0x90
 800697c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800697e:	2302      	movs	r3, #2
 8006980:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006982:	2300      	movs	r3, #0
 8006984:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006986:	2300      	movs	r3, #0
 8006988:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f107 0210 	add.w	r2, r7, #16
 8006992:	4611      	mov	r1, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f003 fa37 	bl	8009e08 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069a8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2201      	movs	r2, #1
 80069b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d90a      	bls.n	80069d6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2282      	movs	r2, #130	@ 0x82
 80069c4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069cc:	4618      	mov	r0, r3
 80069ce:	f003 fa8d 	bl	8009eec <SDMMC_CmdReadMultiBlock>
 80069d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80069d4:	e009      	b.n	80069ea <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2281      	movs	r2, #129	@ 0x81
 80069da:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069e2:	4618      	mov	r0, r3
 80069e4:	f003 fa5f 	bl	8009ea6 <SDMMC_CmdReadSingleBlock>
 80069e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80069ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d012      	beq.n	8006a16 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006a34 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80069f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	431a      	orrs	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e00a      	b.n	8006a2c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8006a24:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006a2a:	2302      	movs	r3, #2
  }
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3730      	adds	r7, #48	@ 0x30
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	1fe00fff 	.word	0x1fe00fff

08006a38 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08c      	sub	sp, #48	@ 0x30
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d107      	bne.n	8006a60 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a54:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e08d      	b.n	8006b7c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	f040 8086 	bne.w	8006b7a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	441a      	add	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d907      	bls.n	8006a92 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a86:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e074      	b.n	8006b7c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2203      	movs	r2, #3
 8006a96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	025a      	lsls	r2, r3, #9
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d002      	beq.n	8006abe <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	025b      	lsls	r3, r3, #9
 8006abc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ac2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	025b      	lsls	r3, r3, #9
 8006ac8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006aca:	2390      	movs	r3, #144	@ 0x90
 8006acc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f107 0210 	add.w	r2, r7, #16
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f003 f98f 	bl	8009e08 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006af8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2201      	movs	r2, #1
 8006b08:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d90a      	bls.n	8006b26 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	22a0      	movs	r2, #160	@ 0xa0
 8006b14:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f003 fa2b 	bl	8009f78 <SDMMC_CmdWriteMultiBlock>
 8006b22:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006b24:	e009      	b.n	8006b3a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2290      	movs	r2, #144	@ 0x90
 8006b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b32:	4618      	mov	r0, r3
 8006b34:	f003 f9fd 	bl	8009f32 <SDMMC_CmdWriteSingleBlock>
 8006b38:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d012      	beq.n	8006b66 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a0f      	ldr	r2, [pc, #60]	@ (8006b84 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006b46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e00a      	b.n	8006b7c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8006b74:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	e000      	b.n	8006b7c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006b7a:	2302      	movs	r3, #2
  }
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3730      	adds	r7, #48	@ 0x30
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	1fe00fff 	.word	0x1fe00fff

08006b88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b96:	0f9b      	lsrs	r3, r3, #30
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba2:	0e9b      	lsrs	r3, r3, #26
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb4:	0e1b      	lsrs	r3, r3, #24
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc6:	0c1b      	lsrs	r3, r3, #16
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd2:	0a1b      	lsrs	r3, r3, #8
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be8:	0d1b      	lsrs	r3, r3, #20
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c06:	0bdb      	lsrs	r3, r3, #15
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c18:	0b9b      	lsrs	r3, r3, #14
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c2a:	0b5b      	lsrs	r3, r3, #13
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c3c:	0b1b      	lsrs	r3, r3, #12
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d163      	bne.n	8006d20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c5c:	009a      	lsls	r2, r3, #2
 8006c5e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006c62:	4013      	ands	r3, r2
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8006c68:	0f92      	lsrs	r2, r2, #30
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c74:	0edb      	lsrs	r3, r3, #27
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c86:	0e1b      	lsrs	r3, r3, #24
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c98:	0d5b      	lsrs	r3, r3, #21
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006caa:	0c9b      	lsrs	r3, r3, #18
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cbc:	0bdb      	lsrs	r3, r3, #15
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	7e1b      	ldrb	r3, [r3, #24]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	3302      	adds	r3, #2
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006cea:	fb03 f202 	mul.w	r2, r3, r2
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	7a1b      	ldrb	r3, [r3, #8]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	409a      	lsls	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006d0c:	0a52      	lsrs	r2, r2, #9
 8006d0e:	fb03 f202 	mul.w	r2, r3, r2
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8006d1e:	e031      	b.n	8006d84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d11d      	bne.n	8006d64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d2c:	041b      	lsls	r3, r3, #16
 8006d2e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d36:	0c1b      	lsrs	r3, r3, #16
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	3301      	adds	r3, #1
 8006d44:	029a      	lsls	r2, r3, #10
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d58:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	655a      	str	r2, [r3, #84]	@ 0x54
 8006d62:	e00f      	b.n	8006d84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a58      	ldr	r2, [pc, #352]	@ (8006ecc <HAL_SD_GetCardCSD+0x344>)
 8006d6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e09d      	b.n	8006ec0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d88:	0b9b      	lsrs	r3, r3, #14
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d9a:	09db      	lsrs	r3, r3, #7
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dbc:	0fdb      	lsrs	r3, r3, #31
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dc8:	0f5b      	lsrs	r3, r3, #29
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dda:	0e9b      	lsrs	r3, r3, #26
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dec:	0d9b      	lsrs	r3, r3, #22
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	f003 030f 	and.w	r3, r3, #15
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dfe:	0d5b      	lsrs	r3, r3, #21
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e1a:	0c1b      	lsrs	r3, r3, #16
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e2e:	0bdb      	lsrs	r3, r3, #15
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e42:	0b9b      	lsrs	r3, r3, #14
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e56:	0b5b      	lsrs	r3, r3, #13
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e6a:	0b1b      	lsrs	r3, r3, #12
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e7e:	0a9b      	lsrs	r3, r3, #10
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e92:	0a1b      	lsrs	r3, r3, #8
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	1fe00fff 	.word	0x1fe00fff

08006ed0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b094      	sub	sp, #80	@ 0x50
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d101      	bne.n	8006ef0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0a7      	b.n	8007040 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006ef0:	f107 0308 	add.w	r3, r7, #8
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fb62 	bl	80075c0 <SD_SendSDStatus>
 8006efc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d011      	beq.n	8006f28 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a4f      	ldr	r2, [pc, #316]	@ (8007048 <HAL_SD_GetCardStatus+0x178>)
 8006f0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006f26:	e070      	b.n	800700a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	099b      	lsrs	r3, r3, #6
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	0a1b      	lsrs	r3, r3, #8
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	0e1b      	lsrs	r3, r3, #24
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	061a      	lsls	r2, r3, #24
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	021b      	lsls	r3, r3, #8
 8006f6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f6e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006f78:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	0e1b      	lsrs	r3, r3, #24
 8006f7e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	0d1b      	lsrs	r3, r3, #20
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	0c1b      	lsrs	r3, r3, #16
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	0a9b      	lsrs	r3, r3, #10
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	0a1b      	lsrs	r3, r3, #8
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	091b      	lsrs	r3, r3, #4
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	0e1b      	lsrs	r3, r3, #24
 8007004:	b2da      	uxtb	r2, r3
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007012:	4618      	mov	r0, r3
 8007014:	f002 ff24 	bl	8009e60 <SDMMC_CmdBlockLength>
 8007018:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800701a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00d      	beq.n	800703c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a08      	ldr	r2, [pc, #32]	@ (8007048 <HAL_SD_GetCardStatus+0x178>)
 8007026:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800702c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800703c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007040:	4618      	mov	r0, r3
 8007042:	3750      	adds	r7, #80	@ 0x50
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	1fe00fff 	.word	0x1fe00fff

0800704c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b08d      	sub	sp, #52	@ 0x34
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2203      	movs	r2, #3
 80070b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d02e      	beq.n	8007122 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ca:	d106      	bne.n	80070da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80070d8:	e029      	b.n	800712e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070e0:	d10a      	bne.n	80070f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fb64 	bl	80077b0 <SD_WideBus_Enable>
 80070e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	431a      	orrs	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80070f6:	e01a      	b.n	800712e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10a      	bne.n	8007114 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fba1 	bl	8007846 <SD_WideBus_Disable>
 8007104:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	635a      	str	r2, [r3, #52]	@ 0x34
 8007112:	e00c      	b.n	800712e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007118:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	635a      	str	r2, [r3, #52]	@ 0x34
 8007120:	e005      	b.n	800712e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007126:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007132:	2b00      	cmp	r3, #0
 8007134:	d007      	beq.n	8007146 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a5f      	ldr	r2, [pc, #380]	@ (80072b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800713c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007144:	e096      	b.n	8007274 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007146:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800714a:	f04f 0100 	mov.w	r1, #0
 800714e:	f7fd ffb7 	bl	80050c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007152:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 8083 	beq.w	8007262 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695a      	ldr	r2, [r3, #20]
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4950      	ldr	r1, [pc, #320]	@ (80072bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800717a:	fba1 1303 	umull	r1, r3, r1, r3
 800717e:	0e1b      	lsrs	r3, r3, #24
 8007180:	429a      	cmp	r2, r3
 8007182:	d303      	bcc.n	800718c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	61bb      	str	r3, [r7, #24]
 800718a:	e05a      	b.n	8007242 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007194:	d103      	bne.n	800719e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	61bb      	str	r3, [r7, #24]
 800719c:	e051      	b.n	8007242 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a6:	d126      	bne.n	80071f6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10e      	bne.n	80071ce <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4a43      	ldr	r2, [pc, #268]	@ (80072c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d906      	bls.n	80071c6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	4a40      	ldr	r2, [pc, #256]	@ (80072bc <HAL_SD_ConfigWideBusOperation+0x218>)
 80071bc:	fba2 2303 	umull	r2, r3, r2, r3
 80071c0:	0e5b      	lsrs	r3, r3, #25
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	e03d      	b.n	8007242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	61bb      	str	r3, [r7, #24]
 80071cc:	e039      	b.n	8007242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	69fa      	ldr	r2, [r7, #28]
 80071d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071da:	4a39      	ldr	r2, [pc, #228]	@ (80072c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d906      	bls.n	80071ee <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	4a36      	ldr	r2, [pc, #216]	@ (80072bc <HAL_SD_ConfigWideBusOperation+0x218>)
 80071e4:	fba2 2303 	umull	r2, r3, r2, r3
 80071e8:	0e5b      	lsrs	r3, r3, #25
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	e029      	b.n	8007242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	61bb      	str	r3, [r7, #24]
 80071f4:	e025      	b.n	8007242 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10e      	bne.n	800721c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4a30      	ldr	r2, [pc, #192]	@ (80072c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d906      	bls.n	8007214 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4a2c      	ldr	r2, [pc, #176]	@ (80072bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	0e1b      	lsrs	r3, r3, #24
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	e016      	b.n	8007242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	e012      	b.n	8007242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	fbb2 f3f3 	udiv	r3, r2, r3
 8007228:	4a26      	ldr	r2, [pc, #152]	@ (80072c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d906      	bls.n	800723c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4a22      	ldr	r2, [pc, #136]	@ (80072bc <HAL_SD_ConfigWideBusOperation+0x218>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	0e1b      	lsrs	r3, r3, #24
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e002      	b.n	8007242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681c      	ldr	r4, [r3, #0]
 8007246:	466a      	mov	r2, sp
 8007248:	f107 0314 	add.w	r3, r7, #20
 800724c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007250:	e882 0003 	stmia.w	r2, {r0, r1}
 8007254:	f107 0308 	add.w	r3, r7, #8
 8007258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800725a:	4620      	mov	r0, r4
 800725c:	f002 fd34 	bl	8009cc8 <SDMMC_Init>
 8007260:	e008      	b.n	8007274 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007266:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800727c:	4618      	mov	r0, r3
 800727e:	f002 fdef 	bl	8009e60 <SDMMC_CmdBlockLength>
 8007282:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00c      	beq.n	80072a4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a0a      	ldr	r2, [pc, #40]	@ (80072b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007290:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80072ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	372c      	adds	r7, #44	@ 0x2c
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd90      	pop	{r4, r7, pc}
 80072b8:	1fe00fff 	.word	0x1fe00fff
 80072bc:	55e63b89 	.word	0x55e63b89
 80072c0:	02faf080 	.word	0x02faf080
 80072c4:	017d7840 	.word	0x017d7840

080072c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80072d4:	f107 030c 	add.w	r3, r7, #12
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa40 	bl	8007760 <SD_SendStatus>
 80072e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	0a5b      	lsrs	r3, r3, #9
 80072f8:	f003 030f 	and.w	r3, r3, #15
 80072fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80072fe:	693b      	ldr	r3, [r7, #16]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b090      	sub	sp, #64	@ 0x40
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007314:	f7fa f9e0 	bl	80016d8 <HAL_GetTick>
 8007318:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f002 fd1a 	bl	8009d58 <SDMMC_GetPowerState>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800732a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800732e:	e0b5      	b.n	800749c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007334:	2b03      	cmp	r3, #3
 8007336:	d02e      	beq.n	8007396 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f002 ff27 	bl	800a190 <SDMMC_CmdSendCID>
 8007342:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <SD_InitCard+0x46>
    {
      return errorstate;
 800734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800734c:	e0a6      	b.n	800749c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2100      	movs	r1, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f002 fd44 	bl	8009de2 <SDMMC_GetResponse>
 800735a:	4602      	mov	r2, r0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2104      	movs	r1, #4
 8007366:	4618      	mov	r0, r3
 8007368:	f002 fd3b 	bl	8009de2 <SDMMC_GetResponse>
 800736c:	4602      	mov	r2, r0
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2108      	movs	r1, #8
 8007378:	4618      	mov	r0, r3
 800737a:	f002 fd32 	bl	8009de2 <SDMMC_GetResponse>
 800737e:	4602      	mov	r2, r0
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	210c      	movs	r1, #12
 800738a:	4618      	mov	r0, r3
 800738c:	f002 fd29 	bl	8009de2 <SDMMC_GetResponse>
 8007390:	4602      	mov	r2, r0
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739a:	2b03      	cmp	r3, #3
 800739c:	d01d      	beq.n	80073da <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800739e:	e019      	b.n	80073d4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f107 020a 	add.w	r2, r7, #10
 80073a8:	4611      	mov	r1, r2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f002 ff2f 	bl	800a20e <SDMMC_CmdSetRelAdd>
 80073b0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80073b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <SD_InitCard+0xb4>
      {
        return errorstate;
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	e06f      	b.n	800749c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80073bc:	f7fa f98c 	bl	80016d8 <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d902      	bls.n	80073d4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80073ce:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80073d2:	e063      	b.n	800749c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80073d4:	897b      	ldrh	r3, [r7, #10]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0e2      	beq.n	80073a0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d036      	beq.n	8007450 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80073e2:	897b      	ldrh	r3, [r7, #10]
 80073e4:	461a      	mov	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073f2:	041b      	lsls	r3, r3, #16
 80073f4:	4619      	mov	r1, r3
 80073f6:	4610      	mov	r0, r2
 80073f8:	f002 fee9 	bl	800a1ce <SDMMC_CmdSendCSD>
 80073fc:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <SD_InitCard+0x100>
    {
      return errorstate;
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	e049      	b.n	800749c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f002 fce7 	bl	8009de2 <SDMMC_GetResponse>
 8007414:	4602      	mov	r2, r0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2104      	movs	r1, #4
 8007420:	4618      	mov	r0, r3
 8007422:	f002 fcde 	bl	8009de2 <SDMMC_GetResponse>
 8007426:	4602      	mov	r2, r0
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2108      	movs	r1, #8
 8007432:	4618      	mov	r0, r3
 8007434:	f002 fcd5 	bl	8009de2 <SDMMC_GetResponse>
 8007438:	4602      	mov	r2, r0
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	210c      	movs	r1, #12
 8007444:	4618      	mov	r0, r3
 8007446:	f002 fccc 	bl	8009de2 <SDMMC_GetResponse>
 800744a:	4602      	mov	r2, r0
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2104      	movs	r1, #4
 8007456:	4618      	mov	r0, r3
 8007458:	f002 fcc3 	bl	8009de2 <SDMMC_GetResponse>
 800745c:	4603      	mov	r3, r0
 800745e:	0d1a      	lsrs	r2, r3, #20
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007464:	f107 030c 	add.w	r3, r7, #12
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff fb8c 	bl	8006b88 <HAL_SD_GetCardCSD>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007476:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800747a:	e00f      	b.n	800749c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007484:	041b      	lsls	r3, r3, #16
 8007486:	4619      	mov	r1, r3
 8007488:	4610      	mov	r0, r2
 800748a:	f002 fd98 	bl	8009fbe <SDMMC_CmdSelDesel>
 800748e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <SD_InitCard+0x192>
  {
    return errorstate;
 8007496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007498:	e000      	b.n	800749c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3740      	adds	r7, #64	@ 0x40
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4618      	mov	r0, r3
 80074be:	f002 fda1 	bl	800a004 <SDMMC_CmdGoIdleState>
 80074c2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <SD_PowerON+0x2a>
  {
    return errorstate;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	e072      	b.n	80075b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f002 fdb4 	bl	800a040 <SDMMC_CmdOperCond>
 80074d8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074e0:	d10d      	bne.n	80074fe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f002 fd89 	bl	800a004 <SDMMC_CmdGoIdleState>
 80074f2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <SD_PowerON+0x60>
    {
      return errorstate;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	e05a      	b.n	80075b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d137      	bne.n	800757c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2100      	movs	r1, #0
 8007512:	4618      	mov	r0, r3
 8007514:	f002 fdb4 	bl	800a080 <SDMMC_CmdAppCommand>
 8007518:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d02d      	beq.n	800757c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007520:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007524:	e046      	b.n	80075b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2100      	movs	r1, #0
 800752c:	4618      	mov	r0, r3
 800752e:	f002 fda7 	bl	800a080 <SDMMC_CmdAppCommand>
 8007532:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <SD_PowerON+0x9a>
    {
      return errorstate;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	e03a      	b.n	80075b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	491e      	ldr	r1, [pc, #120]	@ (80075bc <SD_PowerON+0x118>)
 8007544:	4618      	mov	r0, r3
 8007546:	f002 fdbe 	bl	800a0c6 <SDMMC_CmdAppOperCommand>
 800754a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007552:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007556:	e02d      	b.n	80075b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2100      	movs	r1, #0
 800755e:	4618      	mov	r0, r3
 8007560:	f002 fc3f 	bl	8009de2 <SDMMC_GetResponse>
 8007564:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	0fdb      	lsrs	r3, r3, #31
 800756a:	2b01      	cmp	r3, #1
 800756c:	d101      	bne.n	8007572 <SD_PowerON+0xce>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <SD_PowerON+0xd0>
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]

    count++;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	3301      	adds	r3, #1
 800757a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007582:	4293      	cmp	r3, r2
 8007584:	d802      	bhi.n	800758c <SD_PowerON+0xe8>
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0cc      	beq.n	8007526 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007592:	4293      	cmp	r3, r2
 8007594:	d902      	bls.n	800759c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007596:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800759a:	e00b      	b.n	80075b4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	c1100000 	.word	0xc1100000

080075c0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08c      	sub	sp, #48	@ 0x30
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80075ca:	f7fa f885 	bl	80016d8 <HAL_GetTick>
 80075ce:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f002 fc01 	bl	8009de2 <SDMMC_GetResponse>
 80075e0:	4603      	mov	r3, r0
 80075e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075ea:	d102      	bne.n	80075f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80075ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80075f0:	e0b0      	b.n	8007754 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2140      	movs	r1, #64	@ 0x40
 80075f8:	4618      	mov	r0, r3
 80075fa:	f002 fc31 	bl	8009e60 <SDMMC_CmdBlockLength>
 80075fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	e0a0      	b.n	8007754 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f002 fd2e 	bl	800a080 <SDMMC_CmdAppCommand>
 8007624:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	e08d      	b.n	8007754 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007638:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800763c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800763e:	2340      	movs	r3, #64	@ 0x40
 8007640:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007642:	2360      	movs	r3, #96	@ 0x60
 8007644:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007646:	2302      	movs	r3, #2
 8007648:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800764a:	2300      	movs	r3, #0
 800764c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800764e:	2301      	movs	r3, #1
 8007650:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f107 0208 	add.w	r2, r7, #8
 800765a:	4611      	mov	r1, r2
 800765c:	4618      	mov	r0, r3
 800765e:	f002 fbd3 	bl	8009e08 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f002 fe16 	bl	800a298 <SDMMC_CmdStatusRegister>
 800766c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d02b      	beq.n	80076cc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	e069      	b.n	8007754 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007686:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d013      	beq.n	80076b6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800768e:	2300      	movs	r3, #0
 8007690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007692:	e00d      	b.n	80076b0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4618      	mov	r0, r3
 800769a:	f002 fb3f 	bl	8009d1c <SDMMC_ReadFIFO>
 800769e:	4602      	mov	r2, r0
 80076a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a2:	601a      	str	r2, [r3, #0]
        pData++;
 80076a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a6:	3304      	adds	r3, #4
 80076a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80076aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ac:	3301      	adds	r3, #1
 80076ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b2:	2b07      	cmp	r3, #7
 80076b4:	d9ee      	bls.n	8007694 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80076b6:	f7fa f80f 	bl	80016d8 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076c4:	d102      	bne.n	80076cc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80076c6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80076ca:	e043      	b.n	8007754 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d0d2      	beq.n	8007680 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80076e8:	2308      	movs	r3, #8
 80076ea:	e033      	b.n	8007754 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80076fa:	2302      	movs	r3, #2
 80076fc:	e02a      	b.n	8007754 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b00      	cmp	r3, #0
 800770a:	d017      	beq.n	800773c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800770c:	2320      	movs	r3, #32
 800770e:	e021      	b.n	8007754 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4618      	mov	r0, r3
 8007716:	f002 fb01 	bl	8009d1c <SDMMC_ReadFIFO>
 800771a:	4602      	mov	r2, r0
 800771c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771e:	601a      	str	r2, [r3, #0]
    pData++;
 8007720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007722:	3304      	adds	r3, #4
 8007724:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007726:	f7f9 ffd7 	bl	80016d8 <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007734:	d102      	bne.n	800773c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007736:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800773a:	e00b      	b.n	8007754 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e2      	bne.n	8007710 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a03      	ldr	r2, [pc, #12]	@ (800775c <SD_SendSDStatus+0x19c>)
 8007750:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3730      	adds	r7, #48	@ 0x30
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	18000f3a 	.word	0x18000f3a

08007760 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007770:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007774:	e018      	b.n	80077a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777e:	041b      	lsls	r3, r3, #16
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f002 fd65 	bl	800a252 <SDMMC_CmdSendStatus>
 8007788:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	e009      	b.n	80077a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2100      	movs	r1, #0
 800779a:	4618      	mov	r0, r3
 800779c:	f002 fb21 	bl	8009de2 <SDMMC_GetResponse>
 80077a0:	4602      	mov	r2, r0
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f002 fb0b 	bl	8009de2 <SDMMC_GetResponse>
 80077cc:	4603      	mov	r3, r0
 80077ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077d6:	d102      	bne.n	80077de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80077d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80077dc:	e02f      	b.n	800783e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80077de:	f107 030c 	add.w	r3, r7, #12
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f879 	bl	80078dc <SD_FindSCR>
 80077ea:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	e023      	b.n	800783e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01c      	beq.n	800783a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007808:	041b      	lsls	r3, r3, #16
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f002 fc37 	bl	800a080 <SDMMC_CmdAppCommand>
 8007812:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	e00f      	b.n	800783e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2102      	movs	r1, #2
 8007824:	4618      	mov	r0, r3
 8007826:	f002 fc6e 	bl	800a106 <SDMMC_CmdBusWidth>
 800782a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	e003      	b.n	800783e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007836:	2300      	movs	r3, #0
 8007838:	e001      	b.n	800783e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800783a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800784e:	2300      	movs	r3, #0
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	2300      	movs	r3, #0
 8007854:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2100      	movs	r1, #0
 800785c:	4618      	mov	r0, r3
 800785e:	f002 fac0 	bl	8009de2 <SDMMC_GetResponse>
 8007862:	4603      	mov	r3, r0
 8007864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007868:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800786c:	d102      	bne.n	8007874 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800786e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007872:	e02f      	b.n	80078d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007874:	f107 030c 	add.w	r3, r7, #12
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f82e 	bl	80078dc <SD_FindSCR>
 8007880:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	e023      	b.n	80078d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d01c      	beq.n	80078d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800789e:	041b      	lsls	r3, r3, #16
 80078a0:	4619      	mov	r1, r3
 80078a2:	4610      	mov	r0, r2
 80078a4:	f002 fbec 	bl	800a080 <SDMMC_CmdAppCommand>
 80078a8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	e00f      	b.n	80078d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f002 fc23 	bl	800a106 <SDMMC_CmdBusWidth>
 80078c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	e003      	b.n	80078d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e001      	b.n	80078d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078d0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08e      	sub	sp, #56	@ 0x38
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80078e6:	f7f9 fef7 	bl	80016d8 <HAL_GetTick>
 80078ea:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80078f0:	2300      	movs	r3, #0
 80078f2:	60bb      	str	r3, [r7, #8]
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2108      	movs	r1, #8
 8007902:	4618      	mov	r0, r3
 8007904:	f002 faac 	bl	8009e60 <SDMMC_CmdBlockLength>
 8007908:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007912:	e0ad      	b.n	8007a70 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800791c:	041b      	lsls	r3, r3, #16
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f002 fbad 	bl	800a080 <SDMMC_CmdAppCommand>
 8007926:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <SD_FindSCR+0x56>
  {
    return errorstate;
 800792e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007930:	e09e      	b.n	8007a70 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007936:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007938:	2308      	movs	r3, #8
 800793a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800793c:	2330      	movs	r3, #48	@ 0x30
 800793e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007940:	2302      	movs	r3, #2
 8007942:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007944:	2300      	movs	r3, #0
 8007946:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007948:	2301      	movs	r3, #1
 800794a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f107 0210 	add.w	r2, r7, #16
 8007954:	4611      	mov	r1, r2
 8007956:	4618      	mov	r0, r3
 8007958:	f002 fa56 	bl	8009e08 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f002 fbf3 	bl	800a14c <SDMMC_CmdSendSCR>
 8007966:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796a:	2b00      	cmp	r3, #0
 800796c:	d027      	beq.n	80079be <SD_FindSCR+0xe2>
  {
    return errorstate;
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	e07e      	b.n	8007a70 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007978:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d113      	bne.n	80079a8 <SD_FindSCR+0xcc>
 8007980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007982:	2b00      	cmp	r3, #0
 8007984:	d110      	bne.n	80079a8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f002 f9c6 	bl	8009d1c <SDMMC_ReadFIFO>
 8007990:	4603      	mov	r3, r0
 8007992:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4618      	mov	r0, r3
 800799a:	f002 f9bf 	bl	8009d1c <SDMMC_ReadFIFO>
 800799e:	4603      	mov	r3, r0
 80079a0:	60fb      	str	r3, [r7, #12]
      index++;
 80079a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a4:	3301      	adds	r3, #1
 80079a6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80079a8:	f7f9 fe96 	bl	80016d8 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079b6:	d102      	bne.n	80079be <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80079b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80079bc:	e058      	b.n	8007a70 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079c4:	f240 532a 	movw	r3, #1322	@ 0x52a
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0d1      	beq.n	8007972 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d4:	f003 0308 	and.w	r3, r3, #8
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2208      	movs	r2, #8
 80079e2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80079e4:	2308      	movs	r3, #8
 80079e6:	e043      	b.n	8007a70 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d005      	beq.n	8007a02 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2202      	movs	r2, #2
 80079fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80079fe:	2302      	movs	r3, #2
 8007a00:	e036      	b.n	8007a70 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2220      	movs	r2, #32
 8007a16:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007a18:	2320      	movs	r3, #32
 8007a1a:	e029      	b.n	8007a70 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a15      	ldr	r2, [pc, #84]	@ (8007a78 <SD_FindSCR+0x19c>)
 8007a22:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	061a      	lsls	r2, r3, #24
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a30:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8007a3a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	0e1b      	lsrs	r3, r3, #24
 8007a40:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8007a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a44:	601a      	str	r2, [r3, #0]
    scr++;
 8007a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a48:	3304      	adds	r3, #4
 8007a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	061a      	lsls	r2, r3, #24
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	021b      	lsls	r3, r3, #8
 8007a54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a58:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	0a1b      	lsrs	r3, r3, #8
 8007a5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8007a62:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	0e1b      	lsrs	r3, r3, #24
 8007a68:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8007a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3738      	adds	r7, #56	@ 0x38
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	18000f3a 	.word	0x18000f3a

08007a7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e10f      	b.n	8007cae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a87      	ldr	r2, [pc, #540]	@ (8007cb8 <HAL_SPI_Init+0x23c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00f      	beq.n	8007abe <HAL_SPI_Init+0x42>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a86      	ldr	r2, [pc, #536]	@ (8007cbc <HAL_SPI_Init+0x240>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00a      	beq.n	8007abe <HAL_SPI_Init+0x42>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a84      	ldr	r2, [pc, #528]	@ (8007cc0 <HAL_SPI_Init+0x244>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d005      	beq.n	8007abe <HAL_SPI_Init+0x42>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2b0f      	cmp	r3, #15
 8007ab8:	d901      	bls.n	8007abe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e0f7      	b.n	8007cae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fbba 	bl	8008238 <SPI_GetPacketSize>
 8007ac4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a7b      	ldr	r2, [pc, #492]	@ (8007cb8 <HAL_SPI_Init+0x23c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d00c      	beq.n	8007aea <HAL_SPI_Init+0x6e>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a79      	ldr	r2, [pc, #484]	@ (8007cbc <HAL_SPI_Init+0x240>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d007      	beq.n	8007aea <HAL_SPI_Init+0x6e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a78      	ldr	r2, [pc, #480]	@ (8007cc0 <HAL_SPI_Init+0x244>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d002      	beq.n	8007aea <HAL_SPI_Init+0x6e>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d811      	bhi.n	8007b0e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007aee:	4a72      	ldr	r2, [pc, #456]	@ (8007cb8 <HAL_SPI_Init+0x23c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a70      	ldr	r2, [pc, #448]	@ (8007cbc <HAL_SPI_Init+0x240>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_SPI_Init+0x8c>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a6f      	ldr	r2, [pc, #444]	@ (8007cc0 <HAL_SPI_Init+0x244>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d104      	bne.n	8007b12 <HAL_SPI_Init+0x96>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b10      	cmp	r3, #16
 8007b0c:	d901      	bls.n	8007b12 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e0cd      	b.n	8007cae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7f9 fb1c 	bl	8001164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0201 	bic.w	r2, r2, #1
 8007b42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007b4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b58:	d119      	bne.n	8007b8e <HAL_SPI_Init+0x112>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b62:	d103      	bne.n	8007b6c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10c      	bne.n	8007b8e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b7c:	d107      	bne.n	8007b8e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00f      	beq.n	8007bba <HAL_SPI_Init+0x13e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	2b06      	cmp	r3, #6
 8007ba0:	d90b      	bls.n	8007bba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	e007      	b.n	8007bca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	69da      	ldr	r2, [r3, #28]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bdc:	ea42 0103 	orr.w	r1, r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	431a      	orrs	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c2a:	ea42 0103 	orr.w	r1, r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d113      	bne.n	8007c6a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0201 	bic.w	r2, r2, #1
 8007c78:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40013000 	.word	0x40013000
 8007cbc:	40003800 	.word	0x40003800
 8007cc0:	40003c00 	.word	0x40003c00

08007cc4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	@ 0x28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007cdc:	6a3a      	ldr	r2, [r7, #32]
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007cec:	2300      	movs	r3, #0
 8007cee:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007cf6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3330      	adds	r3, #48	@ 0x30
 8007cfe:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d010      	beq.n	8007d2c <HAL_SPI_IRQHandler+0x68>
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00b      	beq.n	8007d2c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d22:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f9c3 	bl	80080b0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007d2a:	e192      	b.n	8008052 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d113      	bne.n	8007d5e <HAL_SPI_IRQHandler+0x9a>
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10e      	bne.n	8007d5e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	4798      	blx	r3
    handled = 1UL;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10f      	bne.n	8007d88 <HAL_SPI_IRQHandler+0xc4>
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d105      	bne.n	8007d88 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
    handled = 1UL;
 8007d84:	2301      	movs	r3, #1
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10f      	bne.n	8007db2 <HAL_SPI_IRQHandler+0xee>
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00a      	beq.n	8007db2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d105      	bne.n	8007db2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
    handled = 1UL;
 8007dae:	2301      	movs	r3, #1
 8007db0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f040 8147 	bne.w	8008048 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 808b 	beq.w	8007edc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	699a      	ldr	r2, [r3, #24]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0208 	orr.w	r2, r2, #8
 8007dd4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0210 	orr.w	r2, r2, #16
 8007de4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	699a      	ldr	r2, [r3, #24]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007df4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0208 	bic.w	r2, r2, #8
 8007e04:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d13d      	bne.n	8007e90 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007e14:	e036      	b.n	8007e84 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	2b0f      	cmp	r3, #15
 8007e1c:	d90b      	bls.n	8007e36 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e26:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e28:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e2e:	1d1a      	adds	r2, r3, #4
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	665a      	str	r2, [r3, #100]	@ 0x64
 8007e34:	e01d      	b.n	8007e72 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2b07      	cmp	r3, #7
 8007e3c:	d90b      	bls.n	8007e56 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	8812      	ldrh	r2, [r2, #0]
 8007e46:	b292      	uxth	r2, r2
 8007e48:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e4e:	1c9a      	adds	r2, r3, #2
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	665a      	str	r2, [r3, #100]	@ 0x64
 8007e54:	e00d      	b.n	8007e72 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e62:	7812      	ldrb	r2, [r2, #0]
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1c2      	bne.n	8007e16 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f931 	bl	80080f8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f8f7 	bl	800809c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007eae:	e0d0      	b.n	8008052 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007eb0:	7cfb      	ldrb	r3, [r7, #19]
 8007eb2:	2b05      	cmp	r3, #5
 8007eb4:	d103      	bne.n	8007ebe <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f8e6 	bl	8008088 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007ebc:	e0c6      	b.n	800804c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007ebe:	7cfb      	ldrb	r3, [r7, #19]
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d103      	bne.n	8007ecc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f8d5 	bl	8008074 <HAL_SPI_RxCpltCallback>
    return;
 8007eca:	e0bf      	b.n	800804c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007ecc:	7cfb      	ldrb	r3, [r7, #19]
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	f040 80bc 	bne.w	800804c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8c3 	bl	8008060 <HAL_SPI_TxCpltCallback>
    return;
 8007eda:	e0b7      	b.n	800804c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 80b5 	beq.w	8008052 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00f      	beq.n	8007f12 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ef8:	f043 0204 	orr.w	r2, r3, #4
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	699a      	ldr	r2, [r3, #24]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f10:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00f      	beq.n	8007f3c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f22:	f043 0201 	orr.w	r2, r3, #1
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	699a      	ldr	r2, [r3, #24]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f3a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00f      	beq.n	8007f66 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f4c:	f043 0208 	orr.w	r2, r3, #8
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699a      	ldr	r2, [r3, #24]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f64:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00f      	beq.n	8007f90 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0220 	orr.w	r2, r2, #32
 8007f8e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d05a      	beq.n	8008050 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f022 0201 	bic.w	r2, r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6919      	ldr	r1, [r3, #16]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	4b28      	ldr	r3, [pc, #160]	@ (8008058 <HAL_SPI_IRQHandler+0x394>)
 8007fb6:	400b      	ands	r3, r1
 8007fb8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007fc0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007fc4:	d138      	bne.n	8008038 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007fd4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d013      	beq.n	8008006 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800805c <HAL_SPI_IRQHandler+0x398>)
 8007fe4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fa f856 	bl	800209c <HAL_DMA_Abort_IT>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d007      	beq.n	8008006 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ffc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800800a:	2b00      	cmp	r3, #0
 800800c:	d020      	beq.n	8008050 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008012:	4a12      	ldr	r2, [pc, #72]	@ (800805c <HAL_SPI_IRQHandler+0x398>)
 8008014:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800801a:	4618      	mov	r0, r3
 800801c:	f7fa f83e 	bl	800209c <HAL_DMA_Abort_IT>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d014      	beq.n	8008050 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800802c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008036:	e00b      	b.n	8008050 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f82b 	bl	800809c <HAL_SPI_ErrorCallback>
    return;
 8008046:	e003      	b.n	8008050 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008048:	bf00      	nop
 800804a:	e002      	b.n	8008052 <HAL_SPI_IRQHandler+0x38e>
    return;
 800804c:	bf00      	nop
 800804e:	e000      	b.n	8008052 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008050:	bf00      	nop
  }
}
 8008052:	3728      	adds	r7, #40	@ 0x28
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	fffffc94 	.word	0xfffffc94
 800805c:	080080c5 	.word	0x080080c5

08008060 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7ff ffd6 	bl	800809c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699a      	ldr	r2, [r3, #24]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0208 	orr.w	r2, r2, #8
 8008116:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0210 	orr.w	r2, r2, #16
 8008126:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6919      	ldr	r1, [r3, #16]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b3c      	ldr	r3, [pc, #240]	@ (8008234 <SPI_CloseTransfer+0x13c>)
 8008144:	400b      	ands	r3, r1
 8008146:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008156:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b04      	cmp	r3, #4
 8008162:	d014      	beq.n	800818e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00f      	beq.n	800818e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008174:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0220 	orr.w	r2, r2, #32
 800818c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b03      	cmp	r3, #3
 8008198:	d014      	beq.n	80081c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00f      	beq.n	80081c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081aa:	f043 0204 	orr.w	r2, r3, #4
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699a      	ldr	r2, [r3, #24]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00f      	beq.n	80081ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081d4:	f043 0201 	orr.w	r2, r3, #1
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699a      	ldr	r2, [r3, #24]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00f      	beq.n	8008218 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081fe:	f043 0208 	orr.w	r2, r3, #8
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699a      	ldr	r2, [r3, #24]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008216:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008228:	bf00      	nop
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	fffffc90 	.word	0xfffffc90

08008238 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008244:	095b      	lsrs	r3, r3, #5
 8008246:	3301      	adds	r3, #1
 8008248:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	3307      	adds	r3, #7
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e042      	b.n	8008306 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7f8 fffc 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2224      	movs	r2, #36	@ 0x24
 800829c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0201 	bic.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 f987 	bl	80095cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fc1c 	bl	8008afc <UART_SetConfig>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d101      	bne.n	80082ce <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e01b      	b.n	8008306 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082dc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082ec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f042 0201 	orr.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fa06 	bl	8009710 <UART_CheckIdleState>
 8008304:	4603      	mov	r3, r0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b0ba      	sub	sp, #232	@ 0xe8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008336:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800833a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800833e:	4013      	ands	r3, r2
 8008340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008348:	2b00      	cmp	r3, #0
 800834a:	d11b      	bne.n	8008384 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800834c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	d015      	beq.n	8008384 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800835c:	f003 0320 	and.w	r3, r3, #32
 8008360:	2b00      	cmp	r3, #0
 8008362:	d105      	bne.n	8008370 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d009      	beq.n	8008384 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 8393 	beq.w	8008aa0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
      }
      return;
 8008382:	e38d      	b.n	8008aa0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8123 	beq.w	80085d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800838e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008392:	4b8d      	ldr	r3, [pc, #564]	@ (80085c8 <HAL_UART_IRQHandler+0x2b8>)
 8008394:	4013      	ands	r3, r2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d106      	bne.n	80083a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800839a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800839e:	4b8b      	ldr	r3, [pc, #556]	@ (80085cc <HAL_UART_IRQHandler+0x2bc>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 8116 	beq.w	80085d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d011      	beq.n	80083d8 <HAL_UART_IRQHandler+0xc8>
 80083b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2201      	movs	r2, #1
 80083c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083ce:	f043 0201 	orr.w	r2, r3, #1
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d011      	beq.n	8008408 <HAL_UART_IRQHandler+0xf8>
 80083e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2202      	movs	r2, #2
 80083f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083fe:	f043 0204 	orr.w	r2, r3, #4
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b00      	cmp	r3, #0
 8008412:	d011      	beq.n	8008438 <HAL_UART_IRQHandler+0x128>
 8008414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2204      	movs	r2, #4
 8008426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800842e:	f043 0202 	orr.w	r2, r3, #2
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	2b00      	cmp	r3, #0
 8008442:	d017      	beq.n	8008474 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b00      	cmp	r3, #0
 800844e:	d105      	bne.n	800845c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008450:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008454:	4b5c      	ldr	r3, [pc, #368]	@ (80085c8 <HAL_UART_IRQHandler+0x2b8>)
 8008456:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00b      	beq.n	8008474 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2208      	movs	r2, #8
 8008462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800846a:	f043 0208 	orr.w	r2, r3, #8
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800847c:	2b00      	cmp	r3, #0
 800847e:	d012      	beq.n	80084a6 <HAL_UART_IRQHandler+0x196>
 8008480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008484:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00c      	beq.n	80084a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800849c:	f043 0220 	orr.w	r2, r3, #32
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 82f9 	beq.w	8008aa4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d013      	beq.n	80084e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d105      	bne.n	80084d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084fa:	2b40      	cmp	r3, #64	@ 0x40
 80084fc:	d005      	beq.n	800850a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008502:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008506:	2b00      	cmp	r3, #0
 8008508:	d054      	beq.n	80085b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f001 fa18 	bl	8009940 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800851a:	2b40      	cmp	r3, #64	@ 0x40
 800851c:	d146      	bne.n	80085ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008534:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800853c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3308      	adds	r3, #8
 8008546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800854a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800854e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1d9      	bne.n	800851e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008570:	2b00      	cmp	r3, #0
 8008572:	d017      	beq.n	80085a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800857a:	4a15      	ldr	r2, [pc, #84]	@ (80085d0 <HAL_UART_IRQHandler+0x2c0>)
 800857c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008584:	4618      	mov	r0, r3
 8008586:	f7f9 fd89 	bl	800209c <HAL_DMA_Abort_IT>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d019      	beq.n	80085c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800859e:	4610      	mov	r0, r2
 80085a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a2:	e00f      	b.n	80085c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fa93 	bl	8008ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085aa:	e00b      	b.n	80085c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fa8f 	bl	8008ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b2:	e007      	b.n	80085c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa8b 	bl	8008ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80085c2:	e26f      	b.n	8008aa4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c4:	bf00      	nop
    return;
 80085c6:	e26d      	b.n	8008aa4 <HAL_UART_IRQHandler+0x794>
 80085c8:	10000001 	.word	0x10000001
 80085cc:	04000120 	.word	0x04000120
 80085d0:	08009a0d 	.word	0x08009a0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d8:	2b01      	cmp	r3, #1
 80085da:	f040 8203 	bne.w	80089e4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e2:	f003 0310 	and.w	r3, r3, #16
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 81fc 	beq.w	80089e4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f0:	f003 0310 	and.w	r3, r3, #16
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 81f5 	beq.w	80089e4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2210      	movs	r2, #16
 8008600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800860c:	2b40      	cmp	r3, #64	@ 0x40
 800860e:	f040 816d 	bne.w	80088ec <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4aa4      	ldr	r2, [pc, #656]	@ (80088ac <HAL_UART_IRQHandler+0x59c>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d068      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4aa1      	ldr	r2, [pc, #644]	@ (80088b0 <HAL_UART_IRQHandler+0x5a0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d061      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a9f      	ldr	r2, [pc, #636]	@ (80088b4 <HAL_UART_IRQHandler+0x5a4>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d05a      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a9c      	ldr	r2, [pc, #624]	@ (80088b8 <HAL_UART_IRQHandler+0x5a8>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d053      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a9a      	ldr	r2, [pc, #616]	@ (80088bc <HAL_UART_IRQHandler+0x5ac>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d04c      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a97      	ldr	r2, [pc, #604]	@ (80088c0 <HAL_UART_IRQHandler+0x5b0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d045      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a95      	ldr	r2, [pc, #596]	@ (80088c4 <HAL_UART_IRQHandler+0x5b4>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d03e      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a92      	ldr	r2, [pc, #584]	@ (80088c8 <HAL_UART_IRQHandler+0x5b8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d037      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a90      	ldr	r2, [pc, #576]	@ (80088cc <HAL_UART_IRQHandler+0x5bc>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d030      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a8d      	ldr	r2, [pc, #564]	@ (80088d0 <HAL_UART_IRQHandler+0x5c0>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d029      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a8b      	ldr	r2, [pc, #556]	@ (80088d4 <HAL_UART_IRQHandler+0x5c4>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d022      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a88      	ldr	r2, [pc, #544]	@ (80088d8 <HAL_UART_IRQHandler+0x5c8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d01b      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a86      	ldr	r2, [pc, #536]	@ (80088dc <HAL_UART_IRQHandler+0x5cc>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d014      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a83      	ldr	r2, [pc, #524]	@ (80088e0 <HAL_UART_IRQHandler+0x5d0>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d00d      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a81      	ldr	r2, [pc, #516]	@ (80088e4 <HAL_UART_IRQHandler+0x5d4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d006      	beq.n	80086f2 <HAL_UART_IRQHandler+0x3e2>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a7e      	ldr	r2, [pc, #504]	@ (80088e8 <HAL_UART_IRQHandler+0x5d8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d106      	bne.n	8008700 <HAL_UART_IRQHandler+0x3f0>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	e005      	b.n	800870c <HAL_UART_IRQHandler+0x3fc>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	b29b      	uxth	r3, r3
 800870c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 80ad 	beq.w	8008874 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008720:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008724:	429a      	cmp	r2, r3
 8008726:	f080 80a5 	bcs.w	8008874 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008730:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008740:	f000 8087 	beq.w	8008852 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008758:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800875c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008760:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800876e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008772:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008776:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800877a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1da      	bne.n	8008744 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800879e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087a0:	f023 0301 	bic.w	r3, r3, #1
 80087a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1e1      	bne.n	800878e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3308      	adds	r3, #8
 80087d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3308      	adds	r3, #8
 80087ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80087ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80087f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80087fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e3      	bne.n	80087ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2220      	movs	r2, #32
 8008806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800881e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008820:	f023 0310 	bic.w	r3, r3, #16
 8008824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008832:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008834:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e4      	bne.n	8008810 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800884c:	4618      	mov	r0, r3
 800884e:	f7f9 f907 	bl	8001a60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008864:	b29b      	uxth	r3, r3
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	b29b      	uxth	r3, r3
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f939 	bl	8008ae4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008872:	e119      	b.n	8008aa8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800887a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800887e:	429a      	cmp	r2, r3
 8008880:	f040 8112 	bne.w	8008aa8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008890:	f040 810a 	bne.w	8008aa8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f91e 	bl	8008ae4 <HAL_UARTEx_RxEventCallback>
      return;
 80088a8:	e0fe      	b.n	8008aa8 <HAL_UART_IRQHandler+0x798>
 80088aa:	bf00      	nop
 80088ac:	40020010 	.word	0x40020010
 80088b0:	40020028 	.word	0x40020028
 80088b4:	40020040 	.word	0x40020040
 80088b8:	40020058 	.word	0x40020058
 80088bc:	40020070 	.word	0x40020070
 80088c0:	40020088 	.word	0x40020088
 80088c4:	400200a0 	.word	0x400200a0
 80088c8:	400200b8 	.word	0x400200b8
 80088cc:	40020410 	.word	0x40020410
 80088d0:	40020428 	.word	0x40020428
 80088d4:	40020440 	.word	0x40020440
 80088d8:	40020458 	.word	0x40020458
 80088dc:	40020470 	.word	0x40020470
 80088e0:	40020488 	.word	0x40020488
 80088e4:	400204a0 	.word	0x400204a0
 80088e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008906:	b29b      	uxth	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 80cf 	beq.w	8008aac <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800890e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 80ca 	beq.w	8008aac <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800892c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800893a:	647b      	str	r3, [r7, #68]	@ 0x44
 800893c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008940:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1e4      	bne.n	8008918 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3308      	adds	r3, #8
 8008954:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	623b      	str	r3, [r7, #32]
   return(result);
 800895e:	6a3a      	ldr	r2, [r7, #32]
 8008960:	4b55      	ldr	r3, [pc, #340]	@ (8008ab8 <HAL_UART_IRQHandler+0x7a8>)
 8008962:	4013      	ands	r3, r2
 8008964:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3308      	adds	r3, #8
 800896e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008972:	633a      	str	r2, [r7, #48]	@ 0x30
 8008974:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e3      	bne.n	800894e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2220      	movs	r2, #32
 800898a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 0310 	bic.w	r3, r3, #16
 80089ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80089bc:	61fb      	str	r3, [r7, #28]
 80089be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	69b9      	ldr	r1, [r7, #24]
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	617b      	str	r3, [r7, #20]
   return(result);
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e4      	bne.n	800899a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f881 	bl	8008ae4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089e2:	e063      	b.n	8008aac <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00e      	beq.n	8008a0e <HAL_UART_IRQHandler+0x6fe>
 80089f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d008      	beq.n	8008a0e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 f83d 	bl	8009a86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a0c:	e051      	b.n	8008ab2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d014      	beq.n	8008a44 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d105      	bne.n	8008a32 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d008      	beq.n	8008a44 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d03a      	beq.n	8008ab0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	4798      	blx	r3
    }
    return;
 8008a42:	e035      	b.n	8008ab0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d009      	beq.n	8008a64 <HAL_UART_IRQHandler+0x754>
 8008a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 ffe7 	bl	8009a30 <UART_EndTransmit_IT>
    return;
 8008a62:	e026      	b.n	8008ab2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d009      	beq.n	8008a84 <HAL_UART_IRQHandler+0x774>
 8008a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 f816 	bl	8009aae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a82:	e016      	b.n	8008ab2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d010      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x7a2>
 8008a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	da0c      	bge.n	8008ab2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 fffe 	bl	8009a9a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a9e:	e008      	b.n	8008ab2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008aa0:	bf00      	nop
 8008aa2:	e006      	b.n	8008ab2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008aa4:	bf00      	nop
 8008aa6:	e004      	b.n	8008ab2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008aa8:	bf00      	nop
 8008aaa:	e002      	b.n	8008ab2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8008aac:	bf00      	nop
 8008aae:	e000      	b.n	8008ab2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8008ab0:	bf00      	nop
  }
}
 8008ab2:	37e8      	adds	r7, #232	@ 0xe8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	effffffe 	.word	0xeffffffe

08008abc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b00:	b092      	sub	sp, #72	@ 0x48
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	4bbe      	ldr	r3, [pc, #760]	@ (8008e24 <UART_SetConfig+0x328>)
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b34:	430b      	orrs	r3, r1
 8008b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4ab3      	ldr	r2, [pc, #716]	@ (8008e28 <UART_SetConfig+0x32c>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d004      	beq.n	8008b68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b64:	4313      	orrs	r3, r2
 8008b66:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689a      	ldr	r2, [r3, #8]
 8008b6e:	4baf      	ldr	r3, [pc, #700]	@ (8008e2c <UART_SetConfig+0x330>)
 8008b70:	4013      	ands	r3, r2
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	6812      	ldr	r2, [r2, #0]
 8008b76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b82:	f023 010f 	bic.w	r1, r3, #15
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4aa6      	ldr	r2, [pc, #664]	@ (8008e30 <UART_SetConfig+0x334>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d177      	bne.n	8008c8c <UART_SetConfig+0x190>
 8008b9c:	4ba5      	ldr	r3, [pc, #660]	@ (8008e34 <UART_SetConfig+0x338>)
 8008b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ba4:	2b28      	cmp	r3, #40	@ 0x28
 8008ba6:	d86d      	bhi.n	8008c84 <UART_SetConfig+0x188>
 8008ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb0 <UART_SetConfig+0xb4>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008c55 	.word	0x08008c55
 8008bb4:	08008c85 	.word	0x08008c85
 8008bb8:	08008c85 	.word	0x08008c85
 8008bbc:	08008c85 	.word	0x08008c85
 8008bc0:	08008c85 	.word	0x08008c85
 8008bc4:	08008c85 	.word	0x08008c85
 8008bc8:	08008c85 	.word	0x08008c85
 8008bcc:	08008c85 	.word	0x08008c85
 8008bd0:	08008c5d 	.word	0x08008c5d
 8008bd4:	08008c85 	.word	0x08008c85
 8008bd8:	08008c85 	.word	0x08008c85
 8008bdc:	08008c85 	.word	0x08008c85
 8008be0:	08008c85 	.word	0x08008c85
 8008be4:	08008c85 	.word	0x08008c85
 8008be8:	08008c85 	.word	0x08008c85
 8008bec:	08008c85 	.word	0x08008c85
 8008bf0:	08008c65 	.word	0x08008c65
 8008bf4:	08008c85 	.word	0x08008c85
 8008bf8:	08008c85 	.word	0x08008c85
 8008bfc:	08008c85 	.word	0x08008c85
 8008c00:	08008c85 	.word	0x08008c85
 8008c04:	08008c85 	.word	0x08008c85
 8008c08:	08008c85 	.word	0x08008c85
 8008c0c:	08008c85 	.word	0x08008c85
 8008c10:	08008c6d 	.word	0x08008c6d
 8008c14:	08008c85 	.word	0x08008c85
 8008c18:	08008c85 	.word	0x08008c85
 8008c1c:	08008c85 	.word	0x08008c85
 8008c20:	08008c85 	.word	0x08008c85
 8008c24:	08008c85 	.word	0x08008c85
 8008c28:	08008c85 	.word	0x08008c85
 8008c2c:	08008c85 	.word	0x08008c85
 8008c30:	08008c75 	.word	0x08008c75
 8008c34:	08008c85 	.word	0x08008c85
 8008c38:	08008c85 	.word	0x08008c85
 8008c3c:	08008c85 	.word	0x08008c85
 8008c40:	08008c85 	.word	0x08008c85
 8008c44:	08008c85 	.word	0x08008c85
 8008c48:	08008c85 	.word	0x08008c85
 8008c4c:	08008c85 	.word	0x08008c85
 8008c50:	08008c7d 	.word	0x08008c7d
 8008c54:	2301      	movs	r3, #1
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e222      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e21e      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008c64:	2308      	movs	r3, #8
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6a:	e21a      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c72:	e216      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008c74:	2320      	movs	r3, #32
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7a:	e212      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008c7c:	2340      	movs	r3, #64	@ 0x40
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c82:	e20e      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008c84:	2380      	movs	r3, #128	@ 0x80
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8a:	e20a      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a69      	ldr	r2, [pc, #420]	@ (8008e38 <UART_SetConfig+0x33c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d130      	bne.n	8008cf8 <UART_SetConfig+0x1fc>
 8008c96:	4b67      	ldr	r3, [pc, #412]	@ (8008e34 <UART_SetConfig+0x338>)
 8008c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d826      	bhi.n	8008cf0 <UART_SetConfig+0x1f4>
 8008ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca8 <UART_SetConfig+0x1ac>)
 8008ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca8:	08008cc1 	.word	0x08008cc1
 8008cac:	08008cc9 	.word	0x08008cc9
 8008cb0:	08008cd1 	.word	0x08008cd1
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008ce1 	.word	0x08008ce1
 8008cbc:	08008ce9 	.word	0x08008ce9
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e1ec      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e1e8      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e1e4      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e1e0      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce6:	e1dc      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008ce8:	2340      	movs	r3, #64	@ 0x40
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cee:	e1d8      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008cf0:	2380      	movs	r3, #128	@ 0x80
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf6:	e1d4      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a4f      	ldr	r2, [pc, #316]	@ (8008e3c <UART_SetConfig+0x340>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d130      	bne.n	8008d64 <UART_SetConfig+0x268>
 8008d02:	4b4c      	ldr	r3, [pc, #304]	@ (8008e34 <UART_SetConfig+0x338>)
 8008d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	d826      	bhi.n	8008d5c <UART_SetConfig+0x260>
 8008d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d14 <UART_SetConfig+0x218>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d2d 	.word	0x08008d2d
 8008d18:	08008d35 	.word	0x08008d35
 8008d1c:	08008d3d 	.word	0x08008d3d
 8008d20:	08008d45 	.word	0x08008d45
 8008d24:	08008d4d 	.word	0x08008d4d
 8008d28:	08008d55 	.word	0x08008d55
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e1b6      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008d34:	2304      	movs	r3, #4
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e1b2      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e1ae      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008d44:	2310      	movs	r3, #16
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e1aa      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d52:	e1a6      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008d54:	2340      	movs	r3, #64	@ 0x40
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	e1a2      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008d5c:	2380      	movs	r3, #128	@ 0x80
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d62:	e19e      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a35      	ldr	r2, [pc, #212]	@ (8008e40 <UART_SetConfig+0x344>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d130      	bne.n	8008dd0 <UART_SetConfig+0x2d4>
 8008d6e:	4b31      	ldr	r3, [pc, #196]	@ (8008e34 <UART_SetConfig+0x338>)
 8008d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b05      	cmp	r3, #5
 8008d78:	d826      	bhi.n	8008dc8 <UART_SetConfig+0x2cc>
 8008d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d80 <UART_SetConfig+0x284>)
 8008d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d80:	08008d99 	.word	0x08008d99
 8008d84:	08008da1 	.word	0x08008da1
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008db9 	.word	0x08008db9
 8008d94:	08008dc1 	.word	0x08008dc1
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e180      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008da0:	2304      	movs	r3, #4
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e17c      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008da8:	2308      	movs	r3, #8
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e178      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008db0:	2310      	movs	r3, #16
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e174      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008db8:	2320      	movs	r3, #32
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e170      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008dc0:	2340      	movs	r3, #64	@ 0x40
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e16c      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008dc8:	2380      	movs	r3, #128	@ 0x80
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dce:	e168      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8008e44 <UART_SetConfig+0x348>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d142      	bne.n	8008e60 <UART_SetConfig+0x364>
 8008dda:	4b16      	ldr	r3, [pc, #88]	@ (8008e34 <UART_SetConfig+0x338>)
 8008ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d838      	bhi.n	8008e58 <UART_SetConfig+0x35c>
 8008de6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dec <UART_SetConfig+0x2f0>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e05 	.word	0x08008e05
 8008df0:	08008e0d 	.word	0x08008e0d
 8008df4:	08008e15 	.word	0x08008e15
 8008df8:	08008e1d 	.word	0x08008e1d
 8008dfc:	08008e49 	.word	0x08008e49
 8008e00:	08008e51 	.word	0x08008e51
 8008e04:	2300      	movs	r3, #0
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e14a      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e146      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008e14:	2308      	movs	r3, #8
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e142      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e13e      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008e24:	cfff69f3 	.word	0xcfff69f3
 8008e28:	58000c00 	.word	0x58000c00
 8008e2c:	11fff4ff 	.word	0x11fff4ff
 8008e30:	40011000 	.word	0x40011000
 8008e34:	58024400 	.word	0x58024400
 8008e38:	40004400 	.word	0x40004400
 8008e3c:	40004800 	.word	0x40004800
 8008e40:	40004c00 	.word	0x40004c00
 8008e44:	40005000 	.word	0x40005000
 8008e48:	2320      	movs	r3, #32
 8008e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4e:	e128      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008e50:	2340      	movs	r3, #64	@ 0x40
 8008e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e56:	e124      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008e58:	2380      	movs	r3, #128	@ 0x80
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5e:	e120      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4acb      	ldr	r2, [pc, #812]	@ (8009194 <UART_SetConfig+0x698>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d176      	bne.n	8008f58 <UART_SetConfig+0x45c>
 8008e6a:	4bcb      	ldr	r3, [pc, #812]	@ (8009198 <UART_SetConfig+0x69c>)
 8008e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e72:	2b28      	cmp	r3, #40	@ 0x28
 8008e74:	d86c      	bhi.n	8008f50 <UART_SetConfig+0x454>
 8008e76:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <UART_SetConfig+0x380>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008f21 	.word	0x08008f21
 8008e80:	08008f51 	.word	0x08008f51
 8008e84:	08008f51 	.word	0x08008f51
 8008e88:	08008f51 	.word	0x08008f51
 8008e8c:	08008f51 	.word	0x08008f51
 8008e90:	08008f51 	.word	0x08008f51
 8008e94:	08008f51 	.word	0x08008f51
 8008e98:	08008f51 	.word	0x08008f51
 8008e9c:	08008f29 	.word	0x08008f29
 8008ea0:	08008f51 	.word	0x08008f51
 8008ea4:	08008f51 	.word	0x08008f51
 8008ea8:	08008f51 	.word	0x08008f51
 8008eac:	08008f51 	.word	0x08008f51
 8008eb0:	08008f51 	.word	0x08008f51
 8008eb4:	08008f51 	.word	0x08008f51
 8008eb8:	08008f51 	.word	0x08008f51
 8008ebc:	08008f31 	.word	0x08008f31
 8008ec0:	08008f51 	.word	0x08008f51
 8008ec4:	08008f51 	.word	0x08008f51
 8008ec8:	08008f51 	.word	0x08008f51
 8008ecc:	08008f51 	.word	0x08008f51
 8008ed0:	08008f51 	.word	0x08008f51
 8008ed4:	08008f51 	.word	0x08008f51
 8008ed8:	08008f51 	.word	0x08008f51
 8008edc:	08008f39 	.word	0x08008f39
 8008ee0:	08008f51 	.word	0x08008f51
 8008ee4:	08008f51 	.word	0x08008f51
 8008ee8:	08008f51 	.word	0x08008f51
 8008eec:	08008f51 	.word	0x08008f51
 8008ef0:	08008f51 	.word	0x08008f51
 8008ef4:	08008f51 	.word	0x08008f51
 8008ef8:	08008f51 	.word	0x08008f51
 8008efc:	08008f41 	.word	0x08008f41
 8008f00:	08008f51 	.word	0x08008f51
 8008f04:	08008f51 	.word	0x08008f51
 8008f08:	08008f51 	.word	0x08008f51
 8008f0c:	08008f51 	.word	0x08008f51
 8008f10:	08008f51 	.word	0x08008f51
 8008f14:	08008f51 	.word	0x08008f51
 8008f18:	08008f51 	.word	0x08008f51
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	2301      	movs	r3, #1
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f26:	e0bc      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008f28:	2304      	movs	r3, #4
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e0b8      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008f30:	2308      	movs	r3, #8
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f36:	e0b4      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008f38:	2310      	movs	r3, #16
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e0b0      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008f40:	2320      	movs	r3, #32
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e0ac      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008f48:	2340      	movs	r3, #64	@ 0x40
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e0a8      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008f50:	2380      	movs	r3, #128	@ 0x80
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e0a4      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a8f      	ldr	r2, [pc, #572]	@ (800919c <UART_SetConfig+0x6a0>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d130      	bne.n	8008fc4 <UART_SetConfig+0x4c8>
 8008f62:	4b8d      	ldr	r3, [pc, #564]	@ (8009198 <UART_SetConfig+0x69c>)
 8008f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	d826      	bhi.n	8008fbc <UART_SetConfig+0x4c0>
 8008f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <UART_SetConfig+0x478>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008f8d 	.word	0x08008f8d
 8008f78:	08008f95 	.word	0x08008f95
 8008f7c:	08008f9d 	.word	0x08008f9d
 8008f80:	08008fa5 	.word	0x08008fa5
 8008f84:	08008fad 	.word	0x08008fad
 8008f88:	08008fb5 	.word	0x08008fb5
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f92:	e086      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008f94:	2304      	movs	r3, #4
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e082      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008f9c:	2308      	movs	r3, #8
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa2:	e07e      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008fa4:	2310      	movs	r3, #16
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e07a      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008fac:	2320      	movs	r3, #32
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e076      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008fb4:	2340      	movs	r3, #64	@ 0x40
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e072      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008fbc:	2380      	movs	r3, #128	@ 0x80
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e06e      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a75      	ldr	r2, [pc, #468]	@ (80091a0 <UART_SetConfig+0x6a4>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d130      	bne.n	8009030 <UART_SetConfig+0x534>
 8008fce:	4b72      	ldr	r3, [pc, #456]	@ (8009198 <UART_SetConfig+0x69c>)
 8008fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	2b05      	cmp	r3, #5
 8008fd8:	d826      	bhi.n	8009028 <UART_SetConfig+0x52c>
 8008fda:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe0 <UART_SetConfig+0x4e4>)
 8008fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe0:	08008ff9 	.word	0x08008ff9
 8008fe4:	08009001 	.word	0x08009001
 8008fe8:	08009009 	.word	0x08009009
 8008fec:	08009011 	.word	0x08009011
 8008ff0:	08009019 	.word	0x08009019
 8008ff4:	08009021 	.word	0x08009021
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e050      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8009000:	2304      	movs	r3, #4
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e04c      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8009008:	2308      	movs	r3, #8
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900e:	e048      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8009010:	2310      	movs	r3, #16
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009016:	e044      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8009018:	2320      	movs	r3, #32
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901e:	e040      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8009020:	2340      	movs	r3, #64	@ 0x40
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009026:	e03c      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8009028:	2380      	movs	r3, #128	@ 0x80
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800902e:	e038      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a5b      	ldr	r2, [pc, #364]	@ (80091a4 <UART_SetConfig+0x6a8>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d130      	bne.n	800909c <UART_SetConfig+0x5a0>
 800903a:	4b57      	ldr	r3, [pc, #348]	@ (8009198 <UART_SetConfig+0x69c>)
 800903c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800903e:	f003 0307 	and.w	r3, r3, #7
 8009042:	2b05      	cmp	r3, #5
 8009044:	d826      	bhi.n	8009094 <UART_SetConfig+0x598>
 8009046:	a201      	add	r2, pc, #4	@ (adr r2, 800904c <UART_SetConfig+0x550>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	08009065 	.word	0x08009065
 8009050:	0800906d 	.word	0x0800906d
 8009054:	08009075 	.word	0x08009075
 8009058:	0800907d 	.word	0x0800907d
 800905c:	08009085 	.word	0x08009085
 8009060:	0800908d 	.word	0x0800908d
 8009064:	2302      	movs	r3, #2
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e01a      	b.n	80090a2 <UART_SetConfig+0x5a6>
 800906c:	2304      	movs	r3, #4
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e016      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8009074:	2308      	movs	r3, #8
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e012      	b.n	80090a2 <UART_SetConfig+0x5a6>
 800907c:	2310      	movs	r3, #16
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e00e      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8009084:	2320      	movs	r3, #32
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e00a      	b.n	80090a2 <UART_SetConfig+0x5a6>
 800908c:	2340      	movs	r3, #64	@ 0x40
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009092:	e006      	b.n	80090a2 <UART_SetConfig+0x5a6>
 8009094:	2380      	movs	r3, #128	@ 0x80
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800909a:	e002      	b.n	80090a2 <UART_SetConfig+0x5a6>
 800909c:	2380      	movs	r3, #128	@ 0x80
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a3f      	ldr	r2, [pc, #252]	@ (80091a4 <UART_SetConfig+0x6a8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	f040 80f8 	bne.w	800929e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090b2:	2b20      	cmp	r3, #32
 80090b4:	dc46      	bgt.n	8009144 <UART_SetConfig+0x648>
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	f2c0 8082 	blt.w	80091c0 <UART_SetConfig+0x6c4>
 80090bc:	3b02      	subs	r3, #2
 80090be:	2b1e      	cmp	r3, #30
 80090c0:	d87e      	bhi.n	80091c0 <UART_SetConfig+0x6c4>
 80090c2:	a201      	add	r2, pc, #4	@ (adr r2, 80090c8 <UART_SetConfig+0x5cc>)
 80090c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c8:	0800914b 	.word	0x0800914b
 80090cc:	080091c1 	.word	0x080091c1
 80090d0:	08009153 	.word	0x08009153
 80090d4:	080091c1 	.word	0x080091c1
 80090d8:	080091c1 	.word	0x080091c1
 80090dc:	080091c1 	.word	0x080091c1
 80090e0:	08009163 	.word	0x08009163
 80090e4:	080091c1 	.word	0x080091c1
 80090e8:	080091c1 	.word	0x080091c1
 80090ec:	080091c1 	.word	0x080091c1
 80090f0:	080091c1 	.word	0x080091c1
 80090f4:	080091c1 	.word	0x080091c1
 80090f8:	080091c1 	.word	0x080091c1
 80090fc:	080091c1 	.word	0x080091c1
 8009100:	08009173 	.word	0x08009173
 8009104:	080091c1 	.word	0x080091c1
 8009108:	080091c1 	.word	0x080091c1
 800910c:	080091c1 	.word	0x080091c1
 8009110:	080091c1 	.word	0x080091c1
 8009114:	080091c1 	.word	0x080091c1
 8009118:	080091c1 	.word	0x080091c1
 800911c:	080091c1 	.word	0x080091c1
 8009120:	080091c1 	.word	0x080091c1
 8009124:	080091c1 	.word	0x080091c1
 8009128:	080091c1 	.word	0x080091c1
 800912c:	080091c1 	.word	0x080091c1
 8009130:	080091c1 	.word	0x080091c1
 8009134:	080091c1 	.word	0x080091c1
 8009138:	080091c1 	.word	0x080091c1
 800913c:	080091c1 	.word	0x080091c1
 8009140:	080091b3 	.word	0x080091b3
 8009144:	2b40      	cmp	r3, #64	@ 0x40
 8009146:	d037      	beq.n	80091b8 <UART_SetConfig+0x6bc>
 8009148:	e03a      	b.n	80091c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800914a:	f7fc fd39 	bl	8005bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800914e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009150:	e03c      	b.n	80091cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009156:	4618      	mov	r0, r3
 8009158:	f7fc fd48 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800915c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009160:	e034      	b.n	80091cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009162:	f107 0318 	add.w	r3, r7, #24
 8009166:	4618      	mov	r0, r3
 8009168:	f7fc fe94 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009170:	e02c      	b.n	80091cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009172:	4b09      	ldr	r3, [pc, #36]	@ (8009198 <UART_SetConfig+0x69c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0320 	and.w	r3, r3, #32
 800917a:	2b00      	cmp	r3, #0
 800917c:	d016      	beq.n	80091ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800917e:	4b06      	ldr	r3, [pc, #24]	@ (8009198 <UART_SetConfig+0x69c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	08db      	lsrs	r3, r3, #3
 8009184:	f003 0303 	and.w	r3, r3, #3
 8009188:	4a07      	ldr	r2, [pc, #28]	@ (80091a8 <UART_SetConfig+0x6ac>)
 800918a:	fa22 f303 	lsr.w	r3, r2, r3
 800918e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009190:	e01c      	b.n	80091cc <UART_SetConfig+0x6d0>
 8009192:	bf00      	nop
 8009194:	40011400 	.word	0x40011400
 8009198:	58024400 	.word	0x58024400
 800919c:	40007800 	.word	0x40007800
 80091a0:	40007c00 	.word	0x40007c00
 80091a4:	58000c00 	.word	0x58000c00
 80091a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80091ac:	4b9d      	ldr	r3, [pc, #628]	@ (8009424 <UART_SetConfig+0x928>)
 80091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091b0:	e00c      	b.n	80091cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091b2:	4b9d      	ldr	r3, [pc, #628]	@ (8009428 <UART_SetConfig+0x92c>)
 80091b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091b6:	e009      	b.n	80091cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091be:	e005      	b.n	80091cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f000 81de 	beq.w	8009590 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d8:	4a94      	ldr	r2, [pc, #592]	@ (800942c <UART_SetConfig+0x930>)
 80091da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091de:	461a      	mov	r2, r3
 80091e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80091e6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	4613      	mov	r3, r2
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	4413      	add	r3, r2
 80091f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d305      	bcc.n	8009204 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009200:	429a      	cmp	r2, r3
 8009202:	d903      	bls.n	800920c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800920a:	e1c1      	b.n	8009590 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800920c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800920e:	2200      	movs	r2, #0
 8009210:	60bb      	str	r3, [r7, #8]
 8009212:	60fa      	str	r2, [r7, #12]
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009218:	4a84      	ldr	r2, [pc, #528]	@ (800942c <UART_SetConfig+0x930>)
 800921a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800921e:	b29b      	uxth	r3, r3
 8009220:	2200      	movs	r2, #0
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	607a      	str	r2, [r7, #4]
 8009226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800922a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800922e:	f7f7 f8a7 	bl	8000380 <__aeabi_uldivmod>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	4610      	mov	r0, r2
 8009238:	4619      	mov	r1, r3
 800923a:	f04f 0200 	mov.w	r2, #0
 800923e:	f04f 0300 	mov.w	r3, #0
 8009242:	020b      	lsls	r3, r1, #8
 8009244:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009248:	0202      	lsls	r2, r0, #8
 800924a:	6979      	ldr	r1, [r7, #20]
 800924c:	6849      	ldr	r1, [r1, #4]
 800924e:	0849      	lsrs	r1, r1, #1
 8009250:	2000      	movs	r0, #0
 8009252:	460c      	mov	r4, r1
 8009254:	4605      	mov	r5, r0
 8009256:	eb12 0804 	adds.w	r8, r2, r4
 800925a:	eb43 0905 	adc.w	r9, r3, r5
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	469a      	mov	sl, r3
 8009266:	4693      	mov	fp, r2
 8009268:	4652      	mov	r2, sl
 800926a:	465b      	mov	r3, fp
 800926c:	4640      	mov	r0, r8
 800926e:	4649      	mov	r1, r9
 8009270:	f7f7 f886 	bl	8000380 <__aeabi_uldivmod>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4613      	mov	r3, r2
 800927a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800927c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009282:	d308      	bcc.n	8009296 <UART_SetConfig+0x79a>
 8009284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800928a:	d204      	bcs.n	8009296 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009292:	60da      	str	r2, [r3, #12]
 8009294:	e17c      	b.n	8009590 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800929c:	e178      	b.n	8009590 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092a6:	f040 80c5 	bne.w	8009434 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80092aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	dc48      	bgt.n	8009344 <UART_SetConfig+0x848>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	db7b      	blt.n	80093ae <UART_SetConfig+0x8b2>
 80092b6:	2b20      	cmp	r3, #32
 80092b8:	d879      	bhi.n	80093ae <UART_SetConfig+0x8b2>
 80092ba:	a201      	add	r2, pc, #4	@ (adr r2, 80092c0 <UART_SetConfig+0x7c4>)
 80092bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c0:	0800934b 	.word	0x0800934b
 80092c4:	08009353 	.word	0x08009353
 80092c8:	080093af 	.word	0x080093af
 80092cc:	080093af 	.word	0x080093af
 80092d0:	0800935b 	.word	0x0800935b
 80092d4:	080093af 	.word	0x080093af
 80092d8:	080093af 	.word	0x080093af
 80092dc:	080093af 	.word	0x080093af
 80092e0:	0800936b 	.word	0x0800936b
 80092e4:	080093af 	.word	0x080093af
 80092e8:	080093af 	.word	0x080093af
 80092ec:	080093af 	.word	0x080093af
 80092f0:	080093af 	.word	0x080093af
 80092f4:	080093af 	.word	0x080093af
 80092f8:	080093af 	.word	0x080093af
 80092fc:	080093af 	.word	0x080093af
 8009300:	0800937b 	.word	0x0800937b
 8009304:	080093af 	.word	0x080093af
 8009308:	080093af 	.word	0x080093af
 800930c:	080093af 	.word	0x080093af
 8009310:	080093af 	.word	0x080093af
 8009314:	080093af 	.word	0x080093af
 8009318:	080093af 	.word	0x080093af
 800931c:	080093af 	.word	0x080093af
 8009320:	080093af 	.word	0x080093af
 8009324:	080093af 	.word	0x080093af
 8009328:	080093af 	.word	0x080093af
 800932c:	080093af 	.word	0x080093af
 8009330:	080093af 	.word	0x080093af
 8009334:	080093af 	.word	0x080093af
 8009338:	080093af 	.word	0x080093af
 800933c:	080093af 	.word	0x080093af
 8009340:	080093a1 	.word	0x080093a1
 8009344:	2b40      	cmp	r3, #64	@ 0x40
 8009346:	d02e      	beq.n	80093a6 <UART_SetConfig+0x8aa>
 8009348:	e031      	b.n	80093ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800934a:	f7fa fc83 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 800934e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009350:	e033      	b.n	80093ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009352:	f7fa fc95 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8009356:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009358:	e02f      	b.n	80093ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800935a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800935e:	4618      	mov	r0, r3
 8009360:	f7fc fc44 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009368:	e027      	b.n	80093ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800936a:	f107 0318 	add.w	r3, r7, #24
 800936e:	4618      	mov	r0, r3
 8009370:	f7fc fd90 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009378:	e01f      	b.n	80093ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800937a:	4b2d      	ldr	r3, [pc, #180]	@ (8009430 <UART_SetConfig+0x934>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b00      	cmp	r3, #0
 8009384:	d009      	beq.n	800939a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009386:	4b2a      	ldr	r3, [pc, #168]	@ (8009430 <UART_SetConfig+0x934>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	08db      	lsrs	r3, r3, #3
 800938c:	f003 0303 	and.w	r3, r3, #3
 8009390:	4a24      	ldr	r2, [pc, #144]	@ (8009424 <UART_SetConfig+0x928>)
 8009392:	fa22 f303 	lsr.w	r3, r2, r3
 8009396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009398:	e00f      	b.n	80093ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800939a:	4b22      	ldr	r3, [pc, #136]	@ (8009424 <UART_SetConfig+0x928>)
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800939e:	e00c      	b.n	80093ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093a0:	4b21      	ldr	r3, [pc, #132]	@ (8009428 <UART_SetConfig+0x92c>)
 80093a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093a4:	e009      	b.n	80093ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ac:	e005      	b.n	80093ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 80e7 	beq.w	8009590 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c6:	4a19      	ldr	r2, [pc, #100]	@ (800942c <UART_SetConfig+0x930>)
 80093c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093cc:	461a      	mov	r2, r3
 80093ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80093d4:	005a      	lsls	r2, r3, #1
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	085b      	lsrs	r3, r3, #1
 80093dc:	441a      	add	r2, r3
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ea:	2b0f      	cmp	r3, #15
 80093ec:	d916      	bls.n	800941c <UART_SetConfig+0x920>
 80093ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093f4:	d212      	bcs.n	800941c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	f023 030f 	bic.w	r3, r3, #15
 80093fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	085b      	lsrs	r3, r3, #1
 8009404:	b29b      	uxth	r3, r3
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	b29a      	uxth	r2, r3
 800940c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800940e:	4313      	orrs	r3, r2
 8009410:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009418:	60da      	str	r2, [r3, #12]
 800941a:	e0b9      	b.n	8009590 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009422:	e0b5      	b.n	8009590 <UART_SetConfig+0xa94>
 8009424:	03d09000 	.word	0x03d09000
 8009428:	003d0900 	.word	0x003d0900
 800942c:	0800db98 	.word	0x0800db98
 8009430:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009434:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009438:	2b20      	cmp	r3, #32
 800943a:	dc49      	bgt.n	80094d0 <UART_SetConfig+0x9d4>
 800943c:	2b00      	cmp	r3, #0
 800943e:	db7c      	blt.n	800953a <UART_SetConfig+0xa3e>
 8009440:	2b20      	cmp	r3, #32
 8009442:	d87a      	bhi.n	800953a <UART_SetConfig+0xa3e>
 8009444:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <UART_SetConfig+0x950>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	080094d7 	.word	0x080094d7
 8009450:	080094df 	.word	0x080094df
 8009454:	0800953b 	.word	0x0800953b
 8009458:	0800953b 	.word	0x0800953b
 800945c:	080094e7 	.word	0x080094e7
 8009460:	0800953b 	.word	0x0800953b
 8009464:	0800953b 	.word	0x0800953b
 8009468:	0800953b 	.word	0x0800953b
 800946c:	080094f7 	.word	0x080094f7
 8009470:	0800953b 	.word	0x0800953b
 8009474:	0800953b 	.word	0x0800953b
 8009478:	0800953b 	.word	0x0800953b
 800947c:	0800953b 	.word	0x0800953b
 8009480:	0800953b 	.word	0x0800953b
 8009484:	0800953b 	.word	0x0800953b
 8009488:	0800953b 	.word	0x0800953b
 800948c:	08009507 	.word	0x08009507
 8009490:	0800953b 	.word	0x0800953b
 8009494:	0800953b 	.word	0x0800953b
 8009498:	0800953b 	.word	0x0800953b
 800949c:	0800953b 	.word	0x0800953b
 80094a0:	0800953b 	.word	0x0800953b
 80094a4:	0800953b 	.word	0x0800953b
 80094a8:	0800953b 	.word	0x0800953b
 80094ac:	0800953b 	.word	0x0800953b
 80094b0:	0800953b 	.word	0x0800953b
 80094b4:	0800953b 	.word	0x0800953b
 80094b8:	0800953b 	.word	0x0800953b
 80094bc:	0800953b 	.word	0x0800953b
 80094c0:	0800953b 	.word	0x0800953b
 80094c4:	0800953b 	.word	0x0800953b
 80094c8:	0800953b 	.word	0x0800953b
 80094cc:	0800952d 	.word	0x0800952d
 80094d0:	2b40      	cmp	r3, #64	@ 0x40
 80094d2:	d02e      	beq.n	8009532 <UART_SetConfig+0xa36>
 80094d4:	e031      	b.n	800953a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094d6:	f7fa fbbd 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 80094da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094dc:	e033      	b.n	8009546 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094de:	f7fa fbcf 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 80094e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094e4:	e02f      	b.n	8009546 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fc fb7e 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f4:	e027      	b.n	8009546 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094f6:	f107 0318 	add.w	r3, r7, #24
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fc fcca 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009504:	e01f      	b.n	8009546 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009506:	4b2d      	ldr	r3, [pc, #180]	@ (80095bc <UART_SetConfig+0xac0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0320 	and.w	r3, r3, #32
 800950e:	2b00      	cmp	r3, #0
 8009510:	d009      	beq.n	8009526 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009512:	4b2a      	ldr	r3, [pc, #168]	@ (80095bc <UART_SetConfig+0xac0>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	08db      	lsrs	r3, r3, #3
 8009518:	f003 0303 	and.w	r3, r3, #3
 800951c:	4a28      	ldr	r2, [pc, #160]	@ (80095c0 <UART_SetConfig+0xac4>)
 800951e:	fa22 f303 	lsr.w	r3, r2, r3
 8009522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009524:	e00f      	b.n	8009546 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009526:	4b26      	ldr	r3, [pc, #152]	@ (80095c0 <UART_SetConfig+0xac4>)
 8009528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800952a:	e00c      	b.n	8009546 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800952c:	4b25      	ldr	r3, [pc, #148]	@ (80095c4 <UART_SetConfig+0xac8>)
 800952e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009530:	e009      	b.n	8009546 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009538:	e005      	b.n	8009546 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800953a:	2300      	movs	r3, #0
 800953c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009544:	bf00      	nop
    }

    if (pclk != 0U)
 8009546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d021      	beq.n	8009590 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009550:	4a1d      	ldr	r2, [pc, #116]	@ (80095c8 <UART_SetConfig+0xacc>)
 8009552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009556:	461a      	mov	r2, r3
 8009558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800955a:	fbb3 f2f2 	udiv	r2, r3, r2
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	085b      	lsrs	r3, r3, #1
 8009564:	441a      	add	r2, r3
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	fbb2 f3f3 	udiv	r3, r2, r3
 800956e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009572:	2b0f      	cmp	r3, #15
 8009574:	d909      	bls.n	800958a <UART_SetConfig+0xa8e>
 8009576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800957c:	d205      	bcs.n	800958a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800957e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009580:	b29a      	uxth	r2, r3
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	60da      	str	r2, [r3, #12]
 8009588:	e002      	b.n	8009590 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	2201      	movs	r2, #1
 8009594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2201      	movs	r2, #1
 800959c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2200      	movs	r2, #0
 80095a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2200      	movs	r2, #0
 80095aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80095ac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3748      	adds	r7, #72	@ 0x48
 80095b4:	46bd      	mov	sp, r7
 80095b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095ba:	bf00      	nop
 80095bc:	58024400 	.word	0x58024400
 80095c0:	03d09000 	.word	0x03d09000
 80095c4:	003d0900 	.word	0x003d0900
 80095c8:	0800db98 	.word	0x0800db98

080095cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d8:	f003 0308 	and.w	r3, r3, #8
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00a      	beq.n	80095f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fa:	f003 0301 	and.w	r3, r3, #1
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00a      	beq.n	8009618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	430a      	orrs	r2, r1
 8009616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00a      	beq.n	800963a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	430a      	orrs	r2, r1
 8009638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963e:	f003 0304 	and.w	r3, r3, #4
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00a      	beq.n	800965c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	430a      	orrs	r2, r1
 800965a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009660:	f003 0310 	and.w	r3, r3, #16
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00a      	beq.n	800967e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009682:	f003 0320 	and.w	r3, r3, #32
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	430a      	orrs	r2, r1
 800969e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d01a      	beq.n	80096e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096ca:	d10a      	bne.n	80096e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	430a      	orrs	r2, r1
 80096e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	430a      	orrs	r2, r1
 8009702:	605a      	str	r2, [r3, #4]
  }
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b098      	sub	sp, #96	@ 0x60
 8009714:	af02      	add	r7, sp, #8
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009720:	f7f7 ffda 	bl	80016d8 <HAL_GetTick>
 8009724:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b08      	cmp	r3, #8
 8009732:	d12f      	bne.n	8009794 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800973c:	2200      	movs	r2, #0
 800973e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f88e 	bl	8009864 <UART_WaitOnFlagUntilTimeout>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d022      	beq.n	8009794 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009756:	e853 3f00 	ldrex	r3, [r3]
 800975a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800975c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800975e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009762:	653b      	str	r3, [r7, #80]	@ 0x50
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	461a      	mov	r2, r3
 800976a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800976c:	647b      	str	r3, [r7, #68]	@ 0x44
 800976e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800977a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e6      	bne.n	800974e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e063      	b.n	800985c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d149      	bne.n	8009836 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097aa:	2200      	movs	r2, #0
 80097ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f857 	bl	8009864 <UART_WaitOnFlagUntilTimeout>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d03c      	beq.n	8009836 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	623b      	str	r3, [r7, #32]
   return(result);
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097da:	633b      	str	r3, [r7, #48]	@ 0x30
 80097dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e6      	bne.n	80097bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3308      	adds	r3, #8
 80097f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f023 0301 	bic.w	r3, r3, #1
 8009804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3308      	adds	r3, #8
 800980c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800980e:	61fa      	str	r2, [r7, #28]
 8009810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	69b9      	ldr	r1, [r7, #24]
 8009814:	69fa      	ldr	r2, [r7, #28]
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	617b      	str	r3, [r7, #20]
   return(result);
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e5      	bne.n	80097ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2220      	movs	r2, #32
 8009826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e012      	b.n	800985c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2220      	movs	r2, #32
 800983a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2220      	movs	r2, #32
 8009842:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3758      	adds	r7, #88	@ 0x58
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	4613      	mov	r3, r2
 8009872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009874:	e04f      	b.n	8009916 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800987c:	d04b      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800987e:	f7f7 ff2b 	bl	80016d8 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	429a      	cmp	r2, r3
 800988c:	d302      	bcc.n	8009894 <UART_WaitOnFlagUntilTimeout+0x30>
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e04e      	b.n	8009936 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0304 	and.w	r3, r3, #4
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d037      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0xb2>
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	2b80      	cmp	r3, #128	@ 0x80
 80098aa:	d034      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0xb2>
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b40      	cmp	r3, #64	@ 0x40
 80098b0:	d031      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d110      	bne.n	80098e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2208      	movs	r2, #8
 80098c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 f839 	bl	8009940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2208      	movs	r2, #8
 80098d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e029      	b.n	8009936 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098f0:	d111      	bne.n	8009916 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80098fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f81f 	bl	8009940 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2220      	movs	r2, #32
 8009906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e00f      	b.n	8009936 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69da      	ldr	r2, [r3, #28]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4013      	ands	r3, r2
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	429a      	cmp	r2, r3
 8009924:	bf0c      	ite	eq
 8009926:	2301      	moveq	r3, #1
 8009928:	2300      	movne	r3, #0
 800992a:	b2db      	uxtb	r3, r3
 800992c:	461a      	mov	r2, r3
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	429a      	cmp	r2, r3
 8009932:	d0a0      	beq.n	8009876 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009940:	b480      	push	{r7}
 8009942:	b095      	sub	sp, #84	@ 0x54
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800995c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009966:	643b      	str	r3, [r7, #64]	@ 0x40
 8009968:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800996c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800996e:	e841 2300 	strex	r3, r2, [r1]
 8009972:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e6      	bne.n	8009948 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	3308      	adds	r3, #8
 8009980:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	6a3b      	ldr	r3, [r7, #32]
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	61fb      	str	r3, [r7, #28]
   return(result);
 800998a:	69fa      	ldr	r2, [r7, #28]
 800998c:	4b1e      	ldr	r3, [pc, #120]	@ (8009a08 <UART_EndRxTransfer+0xc8>)
 800998e:	4013      	ands	r3, r2
 8009990:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3308      	adds	r3, #8
 8009998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800999a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800999c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099a2:	e841 2300 	strex	r3, r2, [r1]
 80099a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e5      	bne.n	800997a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d118      	bne.n	80099e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f023 0310 	bic.w	r3, r3, #16
 80099ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
 80099d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099d4:	61bb      	str	r3, [r7, #24]
 80099d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6979      	ldr	r1, [r7, #20]
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	613b      	str	r3, [r7, #16]
   return(result);
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e6      	bne.n	80099b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80099fc:	bf00      	nop
 80099fe:	3754      	adds	r7, #84	@ 0x54
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	effffffe 	.word	0xeffffffe

08009a0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f7ff f854 	bl	8008ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a28:	bf00      	nop
 8009a2a:	3710      	adds	r7, #16
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	e853 3f00 	ldrex	r3, [r3]
 8009a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a4c:	61fb      	str	r3, [r7, #28]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	61bb      	str	r3, [r7, #24]
 8009a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5a:	6979      	ldr	r1, [r7, #20]
 8009a5c:	69ba      	ldr	r2, [r7, #24]
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	613b      	str	r3, [r7, #16]
   return(result);
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e6      	bne.n	8009a38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff f81f 	bl	8008abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a7e:	bf00      	nop
 8009a80:	3720      	adds	r7, #32
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b083      	sub	sp, #12
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a8e:	bf00      	nop
 8009a90:	370c      	adds	r7, #12
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009aa2:	bf00      	nop
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b083      	sub	sp, #12
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009ab6:	bf00      	nop
 8009ab8:	370c      	adds	r7, #12
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr

08009ac2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b085      	sub	sp, #20
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d101      	bne.n	8009ad8 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e027      	b.n	8009b28 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2224      	movs	r2, #36	@ 0x24
 8009ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f022 0201 	bic.w	r2, r2, #1
 8009afe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d101      	bne.n	8009b4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e02d      	b.n	8009ba8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2224      	movs	r2, #36	@ 0x24
 8009b58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f022 0201 	bic.w	r2, r2, #1
 8009b72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f84f 	bl	8009c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d101      	bne.n	8009bc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e02d      	b.n	8009c24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2224      	movs	r2, #36	@ 0x24
 8009bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0201 	bic.w	r2, r2, #1
 8009bee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f811 	bl	8009c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2220      	movs	r2, #32
 8009c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d108      	bne.n	8009c4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c4c:	e031      	b.n	8009cb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c4e:	2310      	movs	r3, #16
 8009c50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c52:	2310      	movs	r3, #16
 8009c54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	0e5b      	lsrs	r3, r3, #25
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	f003 0307 	and.w	r3, r3, #7
 8009c64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	0f5b      	lsrs	r3, r3, #29
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	7b3a      	ldrb	r2, [r7, #12]
 8009c7a:	4911      	ldr	r1, [pc, #68]	@ (8009cc0 <UARTEx_SetNbDataToProcess+0x94>)
 8009c7c:	5c8a      	ldrb	r2, [r1, r2]
 8009c7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c82:	7b3a      	ldrb	r2, [r7, #12]
 8009c84:	490f      	ldr	r1, [pc, #60]	@ (8009cc4 <UARTEx_SetNbDataToProcess+0x98>)
 8009c86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c88:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c94:	7bfb      	ldrb	r3, [r7, #15]
 8009c96:	7b7a      	ldrb	r2, [r7, #13]
 8009c98:	4909      	ldr	r1, [pc, #36]	@ (8009cc0 <UARTEx_SetNbDataToProcess+0x94>)
 8009c9a:	5c8a      	ldrb	r2, [r1, r2]
 8009c9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ca0:	7b7a      	ldrb	r2, [r7, #13]
 8009ca2:	4908      	ldr	r1, [pc, #32]	@ (8009cc4 <UARTEx_SetNbDataToProcess+0x98>)
 8009ca4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ca6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009cb2:	bf00      	nop
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	0800dbb0 	.word	0x0800dbb0
 8009cc4:	0800dbb8 	.word	0x0800dbb8

08009cc8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009cc8:	b084      	sub	sp, #16
 8009cca:	b480      	push	{r7}
 8009ccc:	b085      	sub	sp, #20
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	f107 001c 	add.w	r0, r7, #28
 8009cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009cde:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009ce2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8009ce6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8009cea:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8009cee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	4b07      	ldr	r3, [pc, #28]	@ (8009d18 <SDMMC_Init+0x50>)
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	431a      	orrs	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	b004      	add	sp, #16
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	ffc02c00 	.word	0xffc02c00

08009d1c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f043 0203 	orr.w	r2, r3, #3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0303 	and.w	r3, r3, #3
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009d92:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009d98:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009d9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68da      	ldr	r2, [r3, #12]
 8009daa:	4b06      	ldr	r3, [pc, #24]	@ (8009dc4 <SDMMC_SendCommand+0x50>)
 8009dac:	4013      	ands	r3, r2
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	431a      	orrs	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	fffee0c0 	.word	0xfffee0c0

08009dc8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	b2db      	uxtb	r3, r3
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b085      	sub	sp, #20
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3314      	adds	r3, #20
 8009df0:	461a      	mov	r2, r3
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	4413      	add	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009e2e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009e34:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009e3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0

}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009e6e:	2310      	movs	r3, #16
 8009e70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e82:	f107 0308 	add.w	r3, r7, #8
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff ff73 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e92:	2110      	movs	r1, #16
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fa21 	bl	800a2dc <SDMMC_GetCmdResp1>
 8009e9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e9c:	69fb      	ldr	r3, [r7, #28]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3720      	adds	r7, #32
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b088      	sub	sp, #32
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009eb4:	2311      	movs	r3, #17
 8009eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ec8:	f107 0308 	add.w	r3, r7, #8
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff ff50 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ed8:	2111      	movs	r1, #17
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f9fe 	bl	800a2dc <SDMMC_GetCmdResp1>
 8009ee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ee2:	69fb      	ldr	r3, [r7, #28]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3720      	adds	r7, #32
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009efa:	2312      	movs	r3, #18
 8009efc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009efe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f04:	2300      	movs	r3, #0
 8009f06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f0e:	f107 0308 	add.w	r3, r7, #8
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7ff ff2d 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f1e:	2112      	movs	r1, #18
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f9db 	bl	800a2dc <SDMMC_GetCmdResp1>
 8009f26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f28:	69fb      	ldr	r3, [r7, #28]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3720      	adds	r7, #32
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b088      	sub	sp, #32
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009f40:	2318      	movs	r3, #24
 8009f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f54:	f107 0308 	add.w	r3, r7, #8
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff ff0a 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f64:	2118      	movs	r1, #24
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f9b8 	bl	800a2dc <SDMMC_GetCmdResp1>
 8009f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f6e:	69fb      	ldr	r3, [r7, #28]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3720      	adds	r7, #32
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009f86:	2319      	movs	r3, #25
 8009f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f9a:	f107 0308 	add.w	r3, r7, #8
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f7ff fee7 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009faa:	2119      	movs	r1, #25
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f995 	bl	800a2dc <SDMMC_GetCmdResp1>
 8009fb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fb4:	69fb      	ldr	r3, [r7, #28]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3720      	adds	r7, #32
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b088      	sub	sp, #32
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009fcc:	2307      	movs	r3, #7
 8009fce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fe0:	f107 0308 	add.w	r3, r7, #8
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff fec4 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ff0:	2107      	movs	r1, #7
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f972 	bl	800a2dc <SDMMC_GetCmdResp1>
 8009ff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3720      	adds	r7, #32
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a010:	2300      	movs	r3, #0
 800a012:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a014:	2300      	movs	r3, #0
 800a016:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a018:	2300      	movs	r3, #0
 800a01a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a01c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a020:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a022:	f107 0308 	add.w	r3, r7, #8
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f7ff fea3 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fb96 	bl	800a760 <SDMMC_GetCmdError>
 800a034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a036:	69fb      	ldr	r3, [r7, #28]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3720      	adds	r7, #32
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a048:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a04e:	2308      	movs	r3, #8
 800a050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a05c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a060:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a062:	f107 0308 	add.w	r3, r7, #8
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7ff fe83 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fb28 	bl	800a6c4 <SDMMC_GetCmdResp7>
 800a074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a076:	69fb      	ldr	r3, [r7, #28]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b088      	sub	sp, #32
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a08e:	2337      	movs	r3, #55	@ 0x37
 800a090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a092:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a098:	2300      	movs	r3, #0
 800a09a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a09c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0a2:	f107 0308 	add.w	r3, r7, #8
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff fe63 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a0ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0b2:	2137      	movs	r1, #55	@ 0x37
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f911 	bl	800a2dc <SDMMC_GetCmdResp1>
 800a0ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0bc:	69fb      	ldr	r3, [r7, #28]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3720      	adds	r7, #32
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b088      	sub	sp, #32
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a0d4:	2329      	movs	r3, #41	@ 0x29
 800a0d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0e8:	f107 0308 	add.w	r3, r7, #8
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff fe40 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fa2d 	bl	800a554 <SDMMC_GetCmdResp3>
 800a0fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3720      	adds	r7, #32
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b088      	sub	sp, #32
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a114:	2306      	movs	r3, #6
 800a116:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a118:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a11c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a11e:	2300      	movs	r3, #0
 800a120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a126:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a128:	f107 0308 	add.w	r3, r7, #8
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff fe20 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a134:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a138:	2106      	movs	r1, #6
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f8ce 	bl	800a2dc <SDMMC_GetCmdResp1>
 800a140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a142:	69fb      	ldr	r3, [r7, #28]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3720      	adds	r7, #32
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b088      	sub	sp, #32
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a154:	2300      	movs	r3, #0
 800a156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a158:	2333      	movs	r3, #51	@ 0x33
 800a15a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a15c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a162:	2300      	movs	r3, #0
 800a164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a16a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a16c:	f107 0308 	add.w	r3, r7, #8
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff fdfe 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a17c:	2133      	movs	r1, #51	@ 0x33
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f8ac 	bl	800a2dc <SDMMC_GetCmdResp1>
 800a184:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a186:	69fb      	ldr	r3, [r7, #28]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3720      	adds	r7, #32
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b088      	sub	sp, #32
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a198:	2300      	movs	r3, #0
 800a19a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a19c:	2302      	movs	r3, #2
 800a19e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a1a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a1a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1b0:	f107 0308 	add.w	r3, r7, #8
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff fddc 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f97f 	bl	800a4c0 <SDMMC_GetCmdResp2>
 800a1c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1c4:	69fb      	ldr	r3, [r7, #28]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3720      	adds	r7, #32
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b088      	sub	sp, #32
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a1dc:	2309      	movs	r3, #9
 800a1de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a1e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a1e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1f0:	f107 0308 	add.w	r3, r7, #8
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7ff fdbc 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f95f 	bl	800a4c0 <SDMMC_GetCmdResp2>
 800a202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a204:	69fb      	ldr	r3, [r7, #28]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3720      	adds	r7, #32
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b088      	sub	sp, #32
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a218:	2300      	movs	r3, #0
 800a21a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a21c:	2303      	movs	r3, #3
 800a21e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a220:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a226:	2300      	movs	r3, #0
 800a228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a22a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a22e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a230:	f107 0308 	add.w	r3, r7, #8
 800a234:	4619      	mov	r1, r3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff fd9c 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	2103      	movs	r1, #3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f9c7 	bl	800a5d4 <SDMMC_GetCmdResp6>
 800a246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a248:	69fb      	ldr	r3, [r7, #28]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b088      	sub	sp, #32
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a260:	230d      	movs	r3, #13
 800a262:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a26e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a272:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a274:	f107 0308 	add.w	r3, r7, #8
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff fd7a 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a280:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a284:	210d      	movs	r1, #13
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f828 	bl	800a2dc <SDMMC_GetCmdResp1>
 800a28c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a28e:	69fb      	ldr	r3, [r7, #28]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3720      	adds	r7, #32
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b088      	sub	sp, #32
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a2a4:	230d      	movs	r3, #13
 800a2a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2b8:	f107 0308 	add.w	r3, r7, #8
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7ff fd58 	bl	8009d74 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a2c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2c8:	210d      	movs	r1, #13
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f806 	bl	800a2dc <SDMMC_GetCmdResp1>
 800a2d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2d2:	69fb      	ldr	r3, [r7, #28]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3720      	adds	r7, #32
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a2ea:	4b70      	ldr	r3, [pc, #448]	@ (800a4ac <SDMMC_GetCmdResp1+0x1d0>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a70      	ldr	r2, [pc, #448]	@ (800a4b0 <SDMMC_GetCmdResp1+0x1d4>)
 800a2f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f4:	0a5a      	lsrs	r2, r3, #9
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	fb02 f303 	mul.w	r3, r2, r3
 800a2fc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	1e5a      	subs	r2, r3, #1
 800a302:	61fa      	str	r2, [r7, #28]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d102      	bne.n	800a30e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a308:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a30c:	e0c9      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a312:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a314:	69ba      	ldr	r2, [r7, #24]
 800a316:	4b67      	ldr	r3, [pc, #412]	@ (800a4b4 <SDMMC_GetCmdResp1+0x1d8>)
 800a318:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0ef      	beq.n	800a2fe <SDMMC_GetCmdResp1+0x22>
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1ea      	bne.n	800a2fe <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a32c:	f003 0304 	and.w	r3, r3, #4
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2204      	movs	r2, #4
 800a338:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a33a:	2304      	movs	r3, #4
 800a33c:	e0b1      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2201      	movs	r2, #1
 800a34e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a350:	2301      	movs	r3, #1
 800a352:	e0a6      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4a58      	ldr	r2, [pc, #352]	@ (800a4b8 <SDMMC_GetCmdResp1+0x1dc>)
 800a358:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff fd34 	bl	8009dc8 <SDMMC_GetCommandResponse>
 800a360:	4603      	mov	r3, r0
 800a362:	461a      	mov	r2, r3
 800a364:	7afb      	ldrb	r3, [r7, #11]
 800a366:	4293      	cmp	r3, r2
 800a368:	d001      	beq.n	800a36e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e099      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a36e:	2100      	movs	r1, #0
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f7ff fd36 	bl	8009de2 <SDMMC_GetResponse>
 800a376:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	4b50      	ldr	r3, [pc, #320]	@ (800a4bc <SDMMC_GetCmdResp1+0x1e0>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a382:	2300      	movs	r3, #0
 800a384:	e08d      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	da02      	bge.n	800a392 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a38c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a390:	e087      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a39c:	2340      	movs	r3, #64	@ 0x40
 800a39e:	e080      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a3aa:	2380      	movs	r3, #128	@ 0x80
 800a3ac:	e079      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a3b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a3bc:	e071      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a3c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3cc:	e069      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a3d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3dc:	e061      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a3e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a3ec:	e059      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3fc:	e051      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a408:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a40c:	e049      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a418:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a41c:	e041      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a42c:	e039      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a438:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a43c:	e031      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a448:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a44c:	e029      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a458:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a45c:	e021      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a468:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a46c:	e019      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a478:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a47c:	e011      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d002      	beq.n	800a48e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a488:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a48c:	e009      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a498:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a49c:	e001      	b.n	800a4a2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a49e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3720      	adds	r7, #32
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	24000000 	.word	0x24000000
 800a4b0:	10624dd3 	.word	0x10624dd3
 800a4b4:	00200045 	.word	0x00200045
 800a4b8:	002000c5 	.word	0x002000c5
 800a4bc:	fdffe008 	.word	0xfdffe008

0800a4c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a4c8:	4b1f      	ldr	r3, [pc, #124]	@ (800a548 <SDMMC_GetCmdResp2+0x88>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a1f      	ldr	r2, [pc, #124]	@ (800a54c <SDMMC_GetCmdResp2+0x8c>)
 800a4ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a4d2:	0a5b      	lsrs	r3, r3, #9
 800a4d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4d8:	fb02 f303 	mul.w	r3, r2, r3
 800a4dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	1e5a      	subs	r2, r3, #1
 800a4e2:	60fa      	str	r2, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d102      	bne.n	800a4ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4ec:	e026      	b.n	800a53c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0ef      	beq.n	800a4de <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1ea      	bne.n	800a4de <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d004      	beq.n	800a51e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2204      	movs	r2, #4
 800a518:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a51a:	2304      	movs	r3, #4
 800a51c:	e00e      	b.n	800a53c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d004      	beq.n	800a534 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a530:	2301      	movs	r3, #1
 800a532:	e003      	b.n	800a53c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a06      	ldr	r2, [pc, #24]	@ (800a550 <SDMMC_GetCmdResp2+0x90>)
 800a538:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	24000000 	.word	0x24000000
 800a54c:	10624dd3 	.word	0x10624dd3
 800a550:	002000c5 	.word	0x002000c5

0800a554 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a55c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5c8 <SDMMC_GetCmdResp3+0x74>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1a      	ldr	r2, [pc, #104]	@ (800a5cc <SDMMC_GetCmdResp3+0x78>)
 800a562:	fba2 2303 	umull	r2, r3, r2, r3
 800a566:	0a5b      	lsrs	r3, r3, #9
 800a568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a56c:	fb02 f303 	mul.w	r3, r2, r3
 800a570:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	1e5a      	subs	r2, r3, #1
 800a576:	60fa      	str	r2, [r7, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d102      	bne.n	800a582 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a57c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a580:	e01b      	b.n	800a5ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a586:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0ef      	beq.n	800a572 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1ea      	bne.n	800a572 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d004      	beq.n	800a5b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2204      	movs	r2, #4
 800a5ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5ae:	2304      	movs	r3, #4
 800a5b0:	e003      	b.n	800a5ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a06      	ldr	r2, [pc, #24]	@ (800a5d0 <SDMMC_GetCmdResp3+0x7c>)
 800a5b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3714      	adds	r7, #20
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	24000000 	.word	0x24000000
 800a5cc:	10624dd3 	.word	0x10624dd3
 800a5d0:	002000c5 	.word	0x002000c5

0800a5d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	607a      	str	r2, [r7, #4]
 800a5e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a5e2:	4b35      	ldr	r3, [pc, #212]	@ (800a6b8 <SDMMC_GetCmdResp6+0xe4>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a35      	ldr	r2, [pc, #212]	@ (800a6bc <SDMMC_GetCmdResp6+0xe8>)
 800a5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ec:	0a5b      	lsrs	r3, r3, #9
 800a5ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5f2:	fb02 f303 	mul.w	r3, r2, r3
 800a5f6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	1e5a      	subs	r2, r3, #1
 800a5fc:	61fa      	str	r2, [r7, #28]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d102      	bne.n	800a608 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a602:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a606:	e052      	b.n	800a6ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a60c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a614:	2b00      	cmp	r3, #0
 800a616:	d0ef      	beq.n	800a5f8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1ea      	bne.n	800a5f8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a626:	f003 0304 	and.w	r3, r3, #4
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d004      	beq.n	800a638 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2204      	movs	r2, #4
 800a632:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a634:	2304      	movs	r3, #4
 800a636:	e03a      	b.n	800a6ae <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b00      	cmp	r3, #0
 800a642:	d004      	beq.n	800a64e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2201      	movs	r2, #1
 800a648:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e02f      	b.n	800a6ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f7ff fbba 	bl	8009dc8 <SDMMC_GetCommandResponse>
 800a654:	4603      	mov	r3, r0
 800a656:	461a      	mov	r2, r3
 800a658:	7afb      	ldrb	r3, [r7, #11]
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d001      	beq.n	800a662 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a65e:	2301      	movs	r3, #1
 800a660:	e025      	b.n	800a6ae <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4a16      	ldr	r2, [pc, #88]	@ (800a6c0 <SDMMC_GetCmdResp6+0xec>)
 800a666:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a668:	2100      	movs	r1, #0
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f7ff fbb9 	bl	8009de2 <SDMMC_GetResponse>
 800a670:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d106      	bne.n	800a68a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	0c1b      	lsrs	r3, r3, #16
 800a680:	b29a      	uxth	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a686:	2300      	movs	r3, #0
 800a688:	e011      	b.n	800a6ae <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d002      	beq.n	800a69a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a694:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a698:	e009      	b.n	800a6ae <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a6a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a6a8:	e001      	b.n	800a6ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3720      	adds	r7, #32
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	24000000 	.word	0x24000000
 800a6bc:	10624dd3 	.word	0x10624dd3
 800a6c0:	002000c5 	.word	0x002000c5

0800a6c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6cc:	4b22      	ldr	r3, [pc, #136]	@ (800a758 <SDMMC_GetCmdResp7+0x94>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a22      	ldr	r2, [pc, #136]	@ (800a75c <SDMMC_GetCmdResp7+0x98>)
 800a6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d6:	0a5b      	lsrs	r3, r3, #9
 800a6d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6dc:	fb02 f303 	mul.w	r3, r2, r3
 800a6e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	1e5a      	subs	r2, r3, #1
 800a6e6:	60fa      	str	r2, [r7, #12]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d102      	bne.n	800a6f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a6f0:	e02c      	b.n	800a74c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0ef      	beq.n	800a6e2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1ea      	bne.n	800a6e2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b00      	cmp	r3, #0
 800a716:	d004      	beq.n	800a722 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2204      	movs	r2, #4
 800a71c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a71e:	2304      	movs	r3, #4
 800a720:	e014      	b.n	800a74c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2201      	movs	r2, #1
 800a732:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a734:	2301      	movs	r3, #1
 800a736:	e009      	b.n	800a74c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2240      	movs	r2, #64	@ 0x40
 800a748:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a74a:	2300      	movs	r3, #0

}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	24000000 	.word	0x24000000
 800a75c:	10624dd3 	.word	0x10624dd3

0800a760 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a768:	4b11      	ldr	r3, [pc, #68]	@ (800a7b0 <SDMMC_GetCmdError+0x50>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a11      	ldr	r2, [pc, #68]	@ (800a7b4 <SDMMC_GetCmdError+0x54>)
 800a76e:	fba2 2303 	umull	r2, r3, r2, r3
 800a772:	0a5b      	lsrs	r3, r3, #9
 800a774:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a778:	fb02 f303 	mul.w	r3, r2, r3
 800a77c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	1e5a      	subs	r2, r3, #1
 800a782:	60fa      	str	r2, [r7, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a788:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a78c:	e009      	b.n	800a7a2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0f1      	beq.n	800a77e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a06      	ldr	r2, [pc, #24]	@ (800a7b8 <SDMMC_GetCmdError+0x58>)
 800a79e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	24000000 	.word	0x24000000
 800a7b4:	10624dd3 	.word	0x10624dd3
 800a7b8:	002000c5 	.word	0x002000c5

0800a7bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a7c0:	4904      	ldr	r1, [pc, #16]	@ (800a7d4 <MX_FATFS_Init+0x18>)
 800a7c2:	4805      	ldr	r0, [pc, #20]	@ (800a7d8 <MX_FATFS_Init+0x1c>)
 800a7c4:	f002 fa54 	bl	800cc70 <FATFS_LinkDriver>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	4b03      	ldr	r3, [pc, #12]	@ (800a7dc <MX_FATFS_Init+0x20>)
 800a7ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a7d0:	bf00      	nop
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	240006f4 	.word	0x240006f4
 800a7d8:	0800dbc0 	.word	0x0800dbc0
 800a7dc:	240006f0 	.word	0x240006f0

0800a7e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a7e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a7fa:	f000 f871 	bl	800a8e0 <BSP_SD_IsDetected>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b01      	cmp	r3, #1
 800a802:	d001      	beq.n	800a808 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a804:	2302      	movs	r3, #2
 800a806:	e012      	b.n	800a82e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a808:	480b      	ldr	r0, [pc, #44]	@ (800a838 <BSP_SD_Init+0x48>)
 800a80a:	f7fb ff4d 	bl	80066a8 <HAL_SD_Init>
 800a80e:	4603      	mov	r3, r0
 800a810:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a812:	79fb      	ldrb	r3, [r7, #7]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d109      	bne.n	800a82c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a818:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a81c:	4806      	ldr	r0, [pc, #24]	@ (800a838 <BSP_SD_Init+0x48>)
 800a81e:	f7fc fc41 	bl	80070a4 <HAL_SD_ConfigWideBusOperation>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d001      	beq.n	800a82c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a82c:	79fb      	ldrb	r3, [r7, #7]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	240000e8 	.word	0x240000e8

0800a83c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	68f9      	ldr	r1, [r7, #12]
 800a852:	4806      	ldr	r0, [pc, #24]	@ (800a86c <BSP_SD_ReadBlocks_DMA+0x30>)
 800a854:	f7fc f848 	bl	80068e8 <HAL_SD_ReadBlocks_DMA>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a862:	7dfb      	ldrb	r3, [r7, #23]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3718      	adds	r7, #24
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	240000e8 	.word	0x240000e8

0800a870 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	68f9      	ldr	r1, [r7, #12]
 800a886:	4806      	ldr	r0, [pc, #24]	@ (800a8a0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a888:	f7fc f8d6 	bl	8006a38 <HAL_SD_WriteBlocks_DMA>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a896:	7dfb      	ldrb	r3, [r7, #23]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3718      	adds	r7, #24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	240000e8 	.word	0x240000e8

0800a8a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a8a8:	4805      	ldr	r0, [pc, #20]	@ (800a8c0 <BSP_SD_GetCardState+0x1c>)
 800a8aa:	f7fc fd0d 	bl	80072c8 <HAL_SD_GetCardState>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b04      	cmp	r3, #4
 800a8b2:	bf14      	ite	ne
 800a8b4:	2301      	movne	r3, #1
 800a8b6:	2300      	moveq	r3, #0
 800a8b8:	b2db      	uxtb	r3, r3
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	240000e8 	.word	0x240000e8

0800a8c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a8cc:	6879      	ldr	r1, [r7, #4]
 800a8ce:	4803      	ldr	r0, [pc, #12]	@ (800a8dc <BSP_SD_GetCardInfo+0x18>)
 800a8d0:	f7fc fbbc 	bl	800704c <HAL_SD_GetCardInfo>
}
 800a8d4:	bf00      	nop
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	240000e8 	.word	0x240000e8

0800a8e0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a8ea:	f000 f80b 	bl	800a904 <BSP_PlatformIsDetected>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a8f8:	79fb      	ldrb	r3, [r7, #7]
 800a8fa:	b2db      	uxtb	r3, r3
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a90a:	2301      	movs	r3, #1
 800a90c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a90e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a912:	4806      	ldr	r0, [pc, #24]	@ (800a92c <BSP_PlatformIsDetected+0x28>)
 800a914:	f7f7 ffb8 	bl	8002888 <HAL_GPIO_ReadPin>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a91e:	2300      	movs	r3, #0
 800a920:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a922:	79fb      	ldrb	r3, [r7, #7]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	58021800 	.word	0x58021800

0800a930 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a938:	f7f6 fece 	bl	80016d8 <HAL_GetTick>
 800a93c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a93e:	e006      	b.n	800a94e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a940:	f7ff ffb0 	bl	800a8a4 <BSP_SD_GetCardState>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d101      	bne.n	800a94e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	e009      	b.n	800a962 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a94e:	f7f6 fec3 	bl	80016d8 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d8f0      	bhi.n	800a940 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
	...

0800a96c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	4603      	mov	r3, r0
 800a974:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a976:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a4 <SD_CheckStatus+0x38>)
 800a978:	2201      	movs	r2, #1
 800a97a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a97c:	f7ff ff92 	bl	800a8a4 <BSP_SD_GetCardState>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d107      	bne.n	800a996 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a986:	4b07      	ldr	r3, [pc, #28]	@ (800a9a4 <SD_CheckStatus+0x38>)
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	f023 0301 	bic.w	r3, r3, #1
 800a990:	b2da      	uxtb	r2, r3
 800a992:	4b04      	ldr	r3, [pc, #16]	@ (800a9a4 <SD_CheckStatus+0x38>)
 800a994:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a996:	4b03      	ldr	r3, [pc, #12]	@ (800a9a4 <SD_CheckStatus+0x38>)
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	b2db      	uxtb	r3, r3
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	24000019 	.word	0x24000019

0800a9a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a9b2:	f7ff ff1d 	bl	800a7f0 <BSP_SD_Init>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d107      	bne.n	800a9cc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a9bc:	79fb      	ldrb	r3, [r7, #7]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7ff ffd4 	bl	800a96c <SD_CheckStatus>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	4b04      	ldr	r3, [pc, #16]	@ (800a9dc <SD_initialize+0x34>)
 800a9ca:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a9cc:	4b03      	ldr	r3, [pc, #12]	@ (800a9dc <SD_initialize+0x34>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	b2db      	uxtb	r3, r3
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	24000019 	.word	0x24000019

0800a9e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7ff ffbd 	bl	800a96c <SD_CheckStatus>
 800a9f2:	4603      	mov	r3, r0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60b9      	str	r1, [r7, #8]
 800aa04:	607a      	str	r2, [r7, #4]
 800aa06:	603b      	str	r3, [r7, #0]
 800aa08:	4603      	mov	r3, r0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aa10:	f247 5030 	movw	r0, #30000	@ 0x7530
 800aa14:	f7ff ff8c 	bl	800a930 <SD_CheckStatusWithTimeout>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	da01      	bge.n	800aa22 <SD_read+0x26>
  {
    return res;
 800aa1e:	7dfb      	ldrb	r3, [r7, #23]
 800aa20:	e03b      	b.n	800aa9a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	68b8      	ldr	r0, [r7, #8]
 800aa28:	f7ff ff08 	bl	800a83c <BSP_SD_ReadBlocks_DMA>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d132      	bne.n	800aa98 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800aa32:	4b1c      	ldr	r3, [pc, #112]	@ (800aaa4 <SD_read+0xa8>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800aa38:	f7f6 fe4e 	bl	80016d8 <HAL_GetTick>
 800aa3c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aa3e:	bf00      	nop
 800aa40:	4b18      	ldr	r3, [pc, #96]	@ (800aaa4 <SD_read+0xa8>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d108      	bne.n	800aa5a <SD_read+0x5e>
 800aa48:	f7f6 fe46 	bl	80016d8 <HAL_GetTick>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	f247 522f 	movw	r2, #29999	@ 0x752f
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d9f2      	bls.n	800aa40 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800aa5a:	4b12      	ldr	r3, [pc, #72]	@ (800aaa4 <SD_read+0xa8>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d102      	bne.n	800aa68 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	75fb      	strb	r3, [r7, #23]
 800aa66:	e017      	b.n	800aa98 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800aa68:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa4 <SD_read+0xa8>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800aa6e:	f7f6 fe33 	bl	80016d8 <HAL_GetTick>
 800aa72:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa74:	e007      	b.n	800aa86 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aa76:	f7ff ff15 	bl	800a8a4 <BSP_SD_GetCardState>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d102      	bne.n	800aa86 <SD_read+0x8a>
          {
            res = RES_OK;
 800aa80:	2300      	movs	r3, #0
 800aa82:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800aa84:	e008      	b.n	800aa98 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800aa86:	f7f6 fe27 	bl	80016d8 <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	f247 522f 	movw	r2, #29999	@ 0x752f
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d9ee      	bls.n	800aa76 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800aa98:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	240006fc 	.word	0x240006fc

0800aaa8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60b9      	str	r1, [r7, #8]
 800aab0:	607a      	str	r2, [r7, #4]
 800aab2:	603b      	str	r3, [r7, #0]
 800aab4:	4603      	mov	r3, r0
 800aab6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800aabc:	4b24      	ldr	r3, [pc, #144]	@ (800ab50 <SD_write+0xa8>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aac2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800aac6:	f7ff ff33 	bl	800a930 <SD_CheckStatusWithTimeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	da01      	bge.n	800aad4 <SD_write+0x2c>
  {
    return res;
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
 800aad2:	e038      	b.n	800ab46 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	68b8      	ldr	r0, [r7, #8]
 800aada:	f7ff fec9 	bl	800a870 <BSP_SD_WriteBlocks_DMA>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d12f      	bne.n	800ab44 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800aae4:	f7f6 fdf8 	bl	80016d8 <HAL_GetTick>
 800aae8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aaea:	bf00      	nop
 800aaec:	4b18      	ldr	r3, [pc, #96]	@ (800ab50 <SD_write+0xa8>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d108      	bne.n	800ab06 <SD_write+0x5e>
 800aaf4:	f7f6 fdf0 	bl	80016d8 <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d9f2      	bls.n	800aaec <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ab06:	4b12      	ldr	r3, [pc, #72]	@ (800ab50 <SD_write+0xa8>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d102      	bne.n	800ab14 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	75fb      	strb	r3, [r7, #23]
 800ab12:	e017      	b.n	800ab44 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ab14:	4b0e      	ldr	r3, [pc, #56]	@ (800ab50 <SD_write+0xa8>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ab1a:	f7f6 fddd 	bl	80016d8 <HAL_GetTick>
 800ab1e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ab20:	e007      	b.n	800ab32 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ab22:	f7ff febf 	bl	800a8a4 <BSP_SD_GetCardState>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <SD_write+0x8a>
          {
            res = RES_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	75fb      	strb	r3, [r7, #23]
            break;
 800ab30:	e008      	b.n	800ab44 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ab32:	f7f6 fdd1 	bl	80016d8 <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d9ee      	bls.n	800ab22 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	240006f8 	.word	0x240006f8

0800ab54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08c      	sub	sp, #48	@ 0x30
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	603a      	str	r2, [r7, #0]
 800ab5e:	71fb      	strb	r3, [r7, #7]
 800ab60:	460b      	mov	r3, r1
 800ab62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ab6a:	4b25      	ldr	r3, [pc, #148]	@ (800ac00 <SD_ioctl+0xac>)
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d001      	beq.n	800ab7c <SD_ioctl+0x28>
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e03c      	b.n	800abf6 <SD_ioctl+0xa2>

  switch (cmd)
 800ab7c:	79bb      	ldrb	r3, [r7, #6]
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d834      	bhi.n	800abec <SD_ioctl+0x98>
 800ab82:	a201      	add	r2, pc, #4	@ (adr r2, 800ab88 <SD_ioctl+0x34>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800ab99 	.word	0x0800ab99
 800ab8c:	0800aba1 	.word	0x0800aba1
 800ab90:	0800abb9 	.word	0x0800abb9
 800ab94:	0800abd3 	.word	0x0800abd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ab9e:	e028      	b.n	800abf2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800aba0:	f107 0308 	add.w	r3, r7, #8
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff fe8d 	bl	800a8c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800abaa:	6a3a      	ldr	r2, [r7, #32]
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800abb6:	e01c      	b.n	800abf2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800abb8:	f107 0308 	add.w	r3, r7, #8
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7ff fe81 	bl	800a8c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800abc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800abd0:	e00f      	b.n	800abf2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800abd2:	f107 0308 	add.w	r3, r7, #8
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff fe74 	bl	800a8c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800abdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abde:	0a5a      	lsrs	r2, r3, #9
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800abea:	e002      	b.n	800abf2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800abec:	2304      	movs	r3, #4
 800abee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800abf2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3730      	adds	r7, #48	@ 0x30
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	24000019 	.word	0x24000019

0800ac04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	4a08      	ldr	r2, [pc, #32]	@ (800ac34 <disk_status+0x30>)
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	79fa      	ldrb	r2, [r7, #7]
 800ac1c:	4905      	ldr	r1, [pc, #20]	@ (800ac34 <disk_status+0x30>)
 800ac1e:	440a      	add	r2, r1
 800ac20:	7a12      	ldrb	r2, [r2, #8]
 800ac22:	4610      	mov	r0, r2
 800ac24:	4798      	blx	r3
 800ac26:	4603      	mov	r3, r0
 800ac28:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	24000728 	.word	0x24000728

0800ac38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	4603      	mov	r3, r0
 800ac40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ac46:	79fb      	ldrb	r3, [r7, #7]
 800ac48:	4a0e      	ldr	r2, [pc, #56]	@ (800ac84 <disk_initialize+0x4c>)
 800ac4a:	5cd3      	ldrb	r3, [r2, r3]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d114      	bne.n	800ac7a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	4a0c      	ldr	r2, [pc, #48]	@ (800ac84 <disk_initialize+0x4c>)
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	79fa      	ldrb	r2, [r7, #7]
 800ac5e:	4909      	ldr	r1, [pc, #36]	@ (800ac84 <disk_initialize+0x4c>)
 800ac60:	440a      	add	r2, r1
 800ac62:	7a12      	ldrb	r2, [r2, #8]
 800ac64:	4610      	mov	r0, r2
 800ac66:	4798      	blx	r3
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d103      	bne.n	800ac7a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	4a03      	ldr	r2, [pc, #12]	@ (800ac84 <disk_initialize+0x4c>)
 800ac76:	2101      	movs	r1, #1
 800ac78:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	24000728 	.word	0x24000728

0800ac88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ac88:	b590      	push	{r4, r7, lr}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60b9      	str	r1, [r7, #8]
 800ac90:	607a      	str	r2, [r7, #4]
 800ac92:	603b      	str	r3, [r7, #0]
 800ac94:	4603      	mov	r3, r0
 800ac96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
 800ac9a:	4a0a      	ldr	r2, [pc, #40]	@ (800acc4 <disk_read+0x3c>)
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4413      	add	r3, r2
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	689c      	ldr	r4, [r3, #8]
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	4a07      	ldr	r2, [pc, #28]	@ (800acc4 <disk_read+0x3c>)
 800aca8:	4413      	add	r3, r2
 800acaa:	7a18      	ldrb	r0, [r3, #8]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	68b9      	ldr	r1, [r7, #8]
 800acb2:	47a0      	blx	r4
 800acb4:	4603      	mov	r3, r0
 800acb6:	75fb      	strb	r3, [r7, #23]
  return res;
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	371c      	adds	r7, #28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd90      	pop	{r4, r7, pc}
 800acc2:	bf00      	nop
 800acc4:	24000728 	.word	0x24000728

0800acc8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800acc8:	b590      	push	{r4, r7, lr}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	607a      	str	r2, [r7, #4]
 800acd2:	603b      	str	r3, [r7, #0]
 800acd4:	4603      	mov	r3, r0
 800acd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
 800acda:	4a0a      	ldr	r2, [pc, #40]	@ (800ad04 <disk_write+0x3c>)
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	68dc      	ldr	r4, [r3, #12]
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
 800ace6:	4a07      	ldr	r2, [pc, #28]	@ (800ad04 <disk_write+0x3c>)
 800ace8:	4413      	add	r3, r2
 800acea:	7a18      	ldrb	r0, [r3, #8]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	68b9      	ldr	r1, [r7, #8]
 800acf2:	47a0      	blx	r4
 800acf4:	4603      	mov	r3, r0
 800acf6:	75fb      	strb	r3, [r7, #23]
  return res;
 800acf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	371c      	adds	r7, #28
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd90      	pop	{r4, r7, pc}
 800ad02:	bf00      	nop
 800ad04:	24000728 	.word	0x24000728

0800ad08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3301      	adds	r3, #1
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ad18:	89fb      	ldrh	r3, [r7, #14]
 800ad1a:	021b      	lsls	r3, r3, #8
 800ad1c:	b21a      	sxth	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	b21b      	sxth	r3, r3
 800ad24:	4313      	orrs	r3, r2
 800ad26:	b21b      	sxth	r3, r3
 800ad28:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ad2a:	89fb      	ldrh	r3, [r7, #14]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3303      	adds	r3, #3
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	021b      	lsls	r3, r3, #8
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	3202      	adds	r2, #2
 800ad50:	7812      	ldrb	r2, [r2, #0]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	021b      	lsls	r3, r3, #8
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	3201      	adds	r2, #1
 800ad5e:	7812      	ldrb	r2, [r2, #0]
 800ad60:	4313      	orrs	r3, r2
 800ad62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	7812      	ldrb	r2, [r2, #0]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ad70:	68fb      	ldr	r3, [r7, #12]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	460b      	mov	r3, r1
 800ad88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	1c5a      	adds	r2, r3, #1
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	887a      	ldrh	r2, [r7, #2]
 800ad92:	b2d2      	uxtb	r2, r2
 800ad94:	701a      	strb	r2, [r3, #0]
 800ad96:	887b      	ldrh	r3, [r7, #2]
 800ad98:	0a1b      	lsrs	r3, r3, #8
 800ad9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	1c5a      	adds	r2, r3, #1
 800ada0:	607a      	str	r2, [r7, #4]
 800ada2:	887a      	ldrh	r2, [r7, #2]
 800ada4:	b2d2      	uxtb	r2, r2
 800ada6:	701a      	strb	r2, [r3, #0]
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	1c5a      	adds	r2, r3, #1
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	b2d2      	uxtb	r2, r2
 800adc8:	701a      	strb	r2, [r3, #0]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	0a1b      	lsrs	r3, r3, #8
 800adce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	607a      	str	r2, [r7, #4]
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	b2d2      	uxtb	r2, r2
 800adda:	701a      	strb	r2, [r3, #0]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	0a1b      	lsrs	r3, r3, #8
 800ade0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	1c5a      	adds	r2, r3, #1
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	b2d2      	uxtb	r2, r2
 800adec:	701a      	strb	r2, [r3, #0]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	0a1b      	lsrs	r3, r3, #8
 800adf2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	607a      	str	r2, [r7, #4]
 800adfa:	683a      	ldr	r2, [r7, #0]
 800adfc:	b2d2      	uxtb	r2, r2
 800adfe:	701a      	strb	r2, [r3, #0]
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00d      	beq.n	800ae42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	1c53      	adds	r3, r2, #1
 800ae2a:	613b      	str	r3, [r7, #16]
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	1c59      	adds	r1, r3, #1
 800ae30:	6179      	str	r1, [r7, #20]
 800ae32:	7812      	ldrb	r2, [r2, #0]
 800ae34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	607b      	str	r3, [r7, #4]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1f1      	bne.n	800ae26 <mem_cpy+0x1a>
	}
}
 800ae42:	bf00      	nop
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ae4e:	b480      	push	{r7}
 800ae50:	b087      	sub	sp, #28
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	60f8      	str	r0, [r7, #12]
 800ae56:	60b9      	str	r1, [r7, #8]
 800ae58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	1c5a      	adds	r2, r3, #1
 800ae62:	617a      	str	r2, [r7, #20]
 800ae64:	68ba      	ldr	r2, [r7, #8]
 800ae66:	b2d2      	uxtb	r2, r2
 800ae68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	607b      	str	r3, [r7, #4]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1f3      	bne.n	800ae5e <mem_set+0x10>
}
 800ae76:	bf00      	nop
 800ae78:	bf00      	nop
 800ae7a:	371c      	adds	r7, #28
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ae84:	b480      	push	{r7}
 800ae86:	b089      	sub	sp, #36	@ 0x24
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	61fb      	str	r3, [r7, #28]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	61fa      	str	r2, [r7, #28]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	4619      	mov	r1, r3
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	1c5a      	adds	r2, r3, #1
 800aeaa:	61ba      	str	r2, [r7, #24]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	1acb      	subs	r3, r1, r3
 800aeb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	607b      	str	r3, [r7, #4]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d002      	beq.n	800aec4 <mem_cmp+0x40>
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d0eb      	beq.n	800ae9c <mem_cmp+0x18>

	return r;
 800aec4:	697b      	ldr	r3, [r7, #20]
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3724      	adds	r7, #36	@ 0x24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aed2:	b480      	push	{r7}
 800aed4:	b083      	sub	sp, #12
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aedc:	e002      	b.n	800aee4 <chk_chr+0x12>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3301      	adds	r3, #1
 800aee2:	607b      	str	r3, [r7, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	781b      	ldrb	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d005      	beq.n	800aef8 <chk_chr+0x26>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	461a      	mov	r2, r3
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d1f2      	bne.n	800aede <chk_chr+0xc>
	return *str;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	781b      	ldrb	r3, [r3, #0]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af12:	2300      	movs	r3, #0
 800af14:	60bb      	str	r3, [r7, #8]
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	e029      	b.n	800af70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800af1c:	4a27      	ldr	r2, [pc, #156]	@ (800afbc <chk_lock+0xb4>)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	4413      	add	r3, r2
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d01d      	beq.n	800af66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800af2a:	4a24      	ldr	r2, [pc, #144]	@ (800afbc <chk_lock+0xb4>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	4413      	add	r3, r2
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d116      	bne.n	800af6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800af3c:	4a1f      	ldr	r2, [pc, #124]	@ (800afbc <chk_lock+0xb4>)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	4413      	add	r3, r2
 800af44:	3304      	adds	r3, #4
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d10c      	bne.n	800af6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800af50:	4a1a      	ldr	r2, [pc, #104]	@ (800afbc <chk_lock+0xb4>)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	4413      	add	r3, r2
 800af58:	3308      	adds	r3, #8
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800af60:	429a      	cmp	r2, r3
 800af62:	d102      	bne.n	800af6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800af64:	e007      	b.n	800af76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800af66:	2301      	movs	r3, #1
 800af68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3301      	adds	r3, #1
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2b01      	cmp	r3, #1
 800af74:	d9d2      	bls.n	800af1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d109      	bne.n	800af90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d102      	bne.n	800af88 <chk_lock+0x80>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b02      	cmp	r3, #2
 800af86:	d101      	bne.n	800af8c <chk_lock+0x84>
 800af88:	2300      	movs	r3, #0
 800af8a:	e010      	b.n	800afae <chk_lock+0xa6>
 800af8c:	2312      	movs	r3, #18
 800af8e:	e00e      	b.n	800afae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d108      	bne.n	800afa8 <chk_lock+0xa0>
 800af96:	4a09      	ldr	r2, [pc, #36]	@ (800afbc <chk_lock+0xb4>)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	011b      	lsls	r3, r3, #4
 800af9c:	4413      	add	r3, r2
 800af9e:	330c      	adds	r3, #12
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afa6:	d101      	bne.n	800afac <chk_lock+0xa4>
 800afa8:	2310      	movs	r3, #16
 800afaa:	e000      	b.n	800afae <chk_lock+0xa6>
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	24000708 	.word	0x24000708

0800afc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afc6:	2300      	movs	r3, #0
 800afc8:	607b      	str	r3, [r7, #4]
 800afca:	e002      	b.n	800afd2 <enq_lock+0x12>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3301      	adds	r3, #1
 800afd0:	607b      	str	r3, [r7, #4]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d806      	bhi.n	800afe6 <enq_lock+0x26>
 800afd8:	4a09      	ldr	r2, [pc, #36]	@ (800b000 <enq_lock+0x40>)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	011b      	lsls	r3, r3, #4
 800afde:	4413      	add	r3, r2
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1f2      	bne.n	800afcc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	bf14      	ite	ne
 800afec:	2301      	movne	r3, #1
 800afee:	2300      	moveq	r3, #0
 800aff0:	b2db      	uxtb	r3, r3
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	24000708 	.word	0x24000708

0800b004 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b00e:	2300      	movs	r3, #0
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	e01f      	b.n	800b054 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b014:	4a41      	ldr	r2, [pc, #260]	@ (800b11c <inc_lock+0x118>)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	4413      	add	r3, r2
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	429a      	cmp	r2, r3
 800b024:	d113      	bne.n	800b04e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b026:	4a3d      	ldr	r2, [pc, #244]	@ (800b11c <inc_lock+0x118>)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	011b      	lsls	r3, r3, #4
 800b02c:	4413      	add	r3, r2
 800b02e:	3304      	adds	r3, #4
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b036:	429a      	cmp	r2, r3
 800b038:	d109      	bne.n	800b04e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b03a:	4a38      	ldr	r2, [pc, #224]	@ (800b11c <inc_lock+0x118>)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	011b      	lsls	r3, r3, #4
 800b040:	4413      	add	r3, r2
 800b042:	3308      	adds	r3, #8
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d006      	beq.n	800b05c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3301      	adds	r3, #1
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d9dc      	bls.n	800b014 <inc_lock+0x10>
 800b05a:	e000      	b.n	800b05e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b05c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b02      	cmp	r3, #2
 800b062:	d132      	bne.n	800b0ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	e002      	b.n	800b070 <inc_lock+0x6c>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3301      	adds	r3, #1
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d806      	bhi.n	800b084 <inc_lock+0x80>
 800b076:	4a29      	ldr	r2, [pc, #164]	@ (800b11c <inc_lock+0x118>)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	4413      	add	r3, r2
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1f2      	bne.n	800b06a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b02      	cmp	r3, #2
 800b088:	d101      	bne.n	800b08e <inc_lock+0x8a>
 800b08a:	2300      	movs	r3, #0
 800b08c:	e040      	b.n	800b110 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	4922      	ldr	r1, [pc, #136]	@ (800b11c <inc_lock+0x118>)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	011b      	lsls	r3, r3, #4
 800b098:	440b      	add	r3, r1
 800b09a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	689a      	ldr	r2, [r3, #8]
 800b0a0:	491e      	ldr	r1, [pc, #120]	@ (800b11c <inc_lock+0x118>)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	440b      	add	r3, r1
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	695a      	ldr	r2, [r3, #20]
 800b0b0:	491a      	ldr	r1, [pc, #104]	@ (800b11c <inc_lock+0x118>)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	011b      	lsls	r3, r3, #4
 800b0b6:	440b      	add	r3, r1
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b0bc:	4a17      	ldr	r2, [pc, #92]	@ (800b11c <inc_lock+0x118>)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	011b      	lsls	r3, r3, #4
 800b0c2:	4413      	add	r3, r2
 800b0c4:	330c      	adds	r3, #12
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d009      	beq.n	800b0e4 <inc_lock+0xe0>
 800b0d0:	4a12      	ldr	r2, [pc, #72]	@ (800b11c <inc_lock+0x118>)
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	011b      	lsls	r3, r3, #4
 800b0d6:	4413      	add	r3, r2
 800b0d8:	330c      	adds	r3, #12
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <inc_lock+0xe0>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e015      	b.n	800b110 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d108      	bne.n	800b0fc <inc_lock+0xf8>
 800b0ea:	4a0c      	ldr	r2, [pc, #48]	@ (800b11c <inc_lock+0x118>)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	4413      	add	r3, r2
 800b0f2:	330c      	adds	r3, #12
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	e001      	b.n	800b100 <inc_lock+0xfc>
 800b0fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b100:	4906      	ldr	r1, [pc, #24]	@ (800b11c <inc_lock+0x118>)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	011b      	lsls	r3, r3, #4
 800b106:	440b      	add	r3, r1
 800b108:	330c      	adds	r3, #12
 800b10a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3301      	adds	r3, #1
}
 800b110:	4618      	mov	r0, r3
 800b112:	3714      	adds	r7, #20
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	24000708 	.word	0x24000708

0800b120 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b128:	2300      	movs	r3, #0
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	e010      	b.n	800b150 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b12e:	4a0d      	ldr	r2, [pc, #52]	@ (800b164 <clear_lock+0x44>)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	011b      	lsls	r3, r3, #4
 800b134:	4413      	add	r3, r2
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d105      	bne.n	800b14a <clear_lock+0x2a>
 800b13e:	4a09      	ldr	r2, [pc, #36]	@ (800b164 <clear_lock+0x44>)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	011b      	lsls	r3, r3, #4
 800b144:	4413      	add	r3, r2
 800b146:	2200      	movs	r2, #0
 800b148:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3301      	adds	r3, #1
 800b14e:	60fb      	str	r3, [r7, #12]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d9eb      	bls.n	800b12e <clear_lock+0xe>
	}
}
 800b156:	bf00      	nop
 800b158:	bf00      	nop
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	24000708 	.word	0x24000708

0800b168 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	78db      	ldrb	r3, [r3, #3]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d034      	beq.n	800b1e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b180:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	7858      	ldrb	r0, [r3, #1]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b18c:	2301      	movs	r3, #1
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	f7ff fd9a 	bl	800acc8 <disk_write>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b19a:	2301      	movs	r3, #1
 800b19c:	73fb      	strb	r3, [r7, #15]
 800b19e:	e022      	b.n	800b1e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	1ad2      	subs	r2, r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d217      	bcs.n	800b1e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	789b      	ldrb	r3, [r3, #2]
 800b1ba:	613b      	str	r3, [r7, #16]
 800b1bc:	e010      	b.n	800b1e0 <sync_window+0x78>
					wsect += fs->fsize;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	699b      	ldr	r3, [r3, #24]
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	7858      	ldrb	r0, [r3, #1]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	f7ff fd77 	bl	800acc8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	613b      	str	r3, [r7, #16]
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d8eb      	bhi.n	800b1be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	429a      	cmp	r2, r3
 800b206:	d01b      	beq.n	800b240 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7ff ffad 	bl	800b168 <sync_window>
 800b20e:	4603      	mov	r3, r0
 800b210:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d113      	bne.n	800b240 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	7858      	ldrb	r0, [r3, #1]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b222:	2301      	movs	r3, #1
 800b224:	683a      	ldr	r2, [r7, #0]
 800b226:	f7ff fd2f 	bl	800ac88 <disk_read>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d004      	beq.n	800b23a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b234:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b236:	2301      	movs	r3, #1
 800b238:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b240:	7bfb      	ldrb	r3, [r7, #15]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b24a:	b480      	push	{r7}
 800b24c:	b083      	sub	sp, #12
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	3b02      	subs	r3, #2
 800b258:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	3b02      	subs	r3, #2
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	429a      	cmp	r2, r3
 800b264:	d301      	bcc.n	800b26a <clust2sect+0x20>
 800b266:	2300      	movs	r3, #0
 800b268:	e008      	b.n	800b27c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	895b      	ldrh	r3, [r3, #10]
 800b26e:	461a      	mov	r2, r3
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	fb03 f202 	mul.w	r2, r3, r2
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b27a:	4413      	add	r3, r2
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d904      	bls.n	800b2a8 <get_fat+0x20>
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d302      	bcc.n	800b2ae <get_fat+0x26>
		val = 1;	/* Internal error */
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	e08e      	b.n	800b3cc <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b2ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2b2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	2b03      	cmp	r3, #3
 800b2ba:	d061      	beq.n	800b380 <get_fat+0xf8>
 800b2bc:	2b03      	cmp	r3, #3
 800b2be:	dc7b      	bgt.n	800b3b8 <get_fat+0x130>
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d002      	beq.n	800b2ca <get_fat+0x42>
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d041      	beq.n	800b34c <get_fat+0xc4>
 800b2c8:	e076      	b.n	800b3b8 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	60fb      	str	r3, [r7, #12]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	085b      	lsrs	r3, r3, #1
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	6a1a      	ldr	r2, [r3, #32]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	0a5b      	lsrs	r3, r3, #9
 800b2e0:	4413      	add	r3, r2
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	6938      	ldr	r0, [r7, #16]
 800b2e6:	f7ff ff83 	bl	800b1f0 <move_window>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d166      	bne.n	800b3be <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	60fa      	str	r2, [r7, #12]
 800b2f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b302:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	6a1a      	ldr	r2, [r3, #32]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	0a5b      	lsrs	r3, r3, #9
 800b30c:	4413      	add	r3, r2
 800b30e:	4619      	mov	r1, r3
 800b310:	6938      	ldr	r0, [r7, #16]
 800b312:	f7ff ff6d 	bl	800b1f0 <move_window>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d152      	bne.n	800b3c2 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	4413      	add	r3, r2
 800b326:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b32a:	021b      	lsls	r3, r3, #8
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	f003 0301 	and.w	r3, r3, #1
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <get_fat+0xba>
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	091b      	lsrs	r3, r3, #4
 800b340:	e002      	b.n	800b348 <get_fat+0xc0>
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b348:	617b      	str	r3, [r7, #20]
			break;
 800b34a:	e03f      	b.n	800b3cc <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	6a1a      	ldr	r2, [r3, #32]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	0a1b      	lsrs	r3, r3, #8
 800b354:	4413      	add	r3, r2
 800b356:	4619      	mov	r1, r3
 800b358:	6938      	ldr	r0, [r7, #16]
 800b35a:	f7ff ff49 	bl	800b1f0 <move_window>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d130      	bne.n	800b3c6 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	005b      	lsls	r3, r3, #1
 800b36e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b372:	4413      	add	r3, r2
 800b374:	4618      	mov	r0, r3
 800b376:	f7ff fcc7 	bl	800ad08 <ld_word>
 800b37a:	4603      	mov	r3, r0
 800b37c:	617b      	str	r3, [r7, #20]
			break;
 800b37e:	e025      	b.n	800b3cc <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	6a1a      	ldr	r2, [r3, #32]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	09db      	lsrs	r3, r3, #7
 800b388:	4413      	add	r3, r2
 800b38a:	4619      	mov	r1, r3
 800b38c:	6938      	ldr	r0, [r7, #16]
 800b38e:	f7ff ff2f 	bl	800b1f0 <move_window>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d118      	bne.n	800b3ca <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b3a6:	4413      	add	r3, r2
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7ff fcc5 	bl	800ad38 <ld_dword>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b3b4:	617b      	str	r3, [r7, #20]
			break;
 800b3b6:	e009      	b.n	800b3cc <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	617b      	str	r3, [r7, #20]
 800b3bc:	e006      	b.n	800b3cc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3be:	bf00      	nop
 800b3c0:	e004      	b.n	800b3cc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3c2:	bf00      	nop
 800b3c4:	e002      	b.n	800b3cc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b3c6:	bf00      	nop
 800b3c8:	e000      	b.n	800b3cc <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b3ca:	bf00      	nop
		}
	}

	return val;
 800b3cc:	697b      	ldr	r3, [r7, #20]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b3d6:	b590      	push	{r4, r7, lr}
 800b3d8:	b089      	sub	sp, #36	@ 0x24
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	60f8      	str	r0, [r7, #12]
 800b3de:	60b9      	str	r1, [r7, #8]
 800b3e0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b3e2:	2302      	movs	r3, #2
 800b3e4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	f240 80d9 	bls.w	800b5a0 <put_fat+0x1ca>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	f080 80d3 	bcs.w	800b5a0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	f000 8096 	beq.w	800b530 <put_fat+0x15a>
 800b404:	2b03      	cmp	r3, #3
 800b406:	f300 80cb 	bgt.w	800b5a0 <put_fat+0x1ca>
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d002      	beq.n	800b414 <put_fat+0x3e>
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d06e      	beq.n	800b4f0 <put_fat+0x11a>
 800b412:	e0c5      	b.n	800b5a0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	61bb      	str	r3, [r7, #24]
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	085b      	lsrs	r3, r3, #1
 800b41c:	69ba      	ldr	r2, [r7, #24]
 800b41e:	4413      	add	r3, r2
 800b420:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a1a      	ldr	r2, [r3, #32]
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	0a5b      	lsrs	r3, r3, #9
 800b42a:	4413      	add	r3, r2
 800b42c:	4619      	mov	r1, r3
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f7ff fede 	bl	800b1f0 <move_window>
 800b434:	4603      	mov	r3, r0
 800b436:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b438:	7ffb      	ldrb	r3, [r7, #31]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f040 80a9 	bne.w	800b592 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	1c59      	adds	r1, r3, #1
 800b44a:	61b9      	str	r1, [r7, #24]
 800b44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b450:	4413      	add	r3, r2
 800b452:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00d      	beq.n	800b47a <put_fat+0xa4>
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	b25b      	sxtb	r3, r3
 800b464:	f003 030f 	and.w	r3, r3, #15
 800b468:	b25a      	sxtb	r2, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	011b      	lsls	r3, r3, #4
 800b470:	b25b      	sxtb	r3, r3
 800b472:	4313      	orrs	r3, r2
 800b474:	b25b      	sxtb	r3, r3
 800b476:	b2db      	uxtb	r3, r3
 800b478:	e001      	b.n	800b47e <put_fat+0xa8>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2201      	movs	r2, #1
 800b486:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6a1a      	ldr	r2, [r3, #32]
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	0a5b      	lsrs	r3, r3, #9
 800b490:	4413      	add	r3, r2
 800b492:	4619      	mov	r1, r3
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f7ff feab 	bl	800b1f0 <move_window>
 800b49a:	4603      	mov	r3, r0
 800b49c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b49e:	7ffb      	ldrb	r3, [r7, #31]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d178      	bne.n	800b596 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b0:	4413      	add	r3, r2
 800b4b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d003      	beq.n	800b4c6 <put_fat+0xf0>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	091b      	lsrs	r3, r3, #4
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	e00e      	b.n	800b4e4 <put_fat+0x10e>
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	b25b      	sxtb	r3, r3
 800b4cc:	f023 030f 	bic.w	r3, r3, #15
 800b4d0:	b25a      	sxtb	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	0a1b      	lsrs	r3, r3, #8
 800b4d6:	b25b      	sxtb	r3, r3
 800b4d8:	f003 030f 	and.w	r3, r3, #15
 800b4dc:	b25b      	sxtb	r3, r3
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	b25b      	sxtb	r3, r3
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	70da      	strb	r2, [r3, #3]
			break;
 800b4ee:	e057      	b.n	800b5a0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6a1a      	ldr	r2, [r3, #32]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	0a1b      	lsrs	r3, r3, #8
 800b4f8:	4413      	add	r3, r2
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f7ff fe77 	bl	800b1f0 <move_window>
 800b502:	4603      	mov	r3, r0
 800b504:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b506:	7ffb      	ldrb	r3, [r7, #31]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d146      	bne.n	800b59a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b51a:	4413      	add	r3, r2
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	b292      	uxth	r2, r2
 800b520:	4611      	mov	r1, r2
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff fc2b 	bl	800ad7e <st_word>
			fs->wflag = 1;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2201      	movs	r2, #1
 800b52c:	70da      	strb	r2, [r3, #3]
			break;
 800b52e:	e037      	b.n	800b5a0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a1a      	ldr	r2, [r3, #32]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	09db      	lsrs	r3, r3, #7
 800b538:	4413      	add	r3, r2
 800b53a:	4619      	mov	r1, r3
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f7ff fe57 	bl	800b1f0 <move_window>
 800b542:	4603      	mov	r3, r0
 800b544:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b546:	7ffb      	ldrb	r3, [r7, #31]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d128      	bne.n	800b59e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b560:	4413      	add	r3, r2
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff fbe8 	bl	800ad38 <ld_dword>
 800b568:	4603      	mov	r3, r0
 800b56a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b56e:	4323      	orrs	r3, r4
 800b570:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b580:	4413      	add	r3, r2
 800b582:	6879      	ldr	r1, [r7, #4]
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff fc15 	bl	800adb4 <st_dword>
			fs->wflag = 1;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2201      	movs	r2, #1
 800b58e:	70da      	strb	r2, [r3, #3]
			break;
 800b590:	e006      	b.n	800b5a0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b592:	bf00      	nop
 800b594:	e004      	b.n	800b5a0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b596:	bf00      	nop
 800b598:	e002      	b.n	800b5a0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b59a:	bf00      	nop
 800b59c:	e000      	b.n	800b5a0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b59e:	bf00      	nop
		}
	}
	return res;
 800b5a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3724      	adds	r7, #36	@ 0x24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd90      	pop	{r4, r7, pc}

0800b5aa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b088      	sub	sp, #32
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d904      	bls.n	800b5d0 <remove_chain+0x26>
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	695b      	ldr	r3, [r3, #20]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d301      	bcc.n	800b5d4 <remove_chain+0x2a>
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	e04b      	b.n	800b66c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00c      	beq.n	800b5f4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b5da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	69b8      	ldr	r0, [r7, #24]
 800b5e2:	f7ff fef8 	bl	800b3d6 <put_fat>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b5ea:	7ffb      	ldrb	r3, [r7, #31]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <remove_chain+0x4a>
 800b5f0:	7ffb      	ldrb	r3, [r7, #31]
 800b5f2:	e03b      	b.n	800b66c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b5f4:	68b9      	ldr	r1, [r7, #8]
 800b5f6:	68f8      	ldr	r0, [r7, #12]
 800b5f8:	f7ff fe46 	bl	800b288 <get_fat>
 800b5fc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d031      	beq.n	800b668 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	2b01      	cmp	r3, #1
 800b608:	d101      	bne.n	800b60e <remove_chain+0x64>
 800b60a:	2302      	movs	r3, #2
 800b60c:	e02e      	b.n	800b66c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b614:	d101      	bne.n	800b61a <remove_chain+0x70>
 800b616:	2301      	movs	r3, #1
 800b618:	e028      	b.n	800b66c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b61a:	2200      	movs	r2, #0
 800b61c:	68b9      	ldr	r1, [r7, #8]
 800b61e:	69b8      	ldr	r0, [r7, #24]
 800b620:	f7ff fed9 	bl	800b3d6 <put_fat>
 800b624:	4603      	mov	r3, r0
 800b626:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b628:	7ffb      	ldrb	r3, [r7, #31]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <remove_chain+0x88>
 800b62e:	7ffb      	ldrb	r3, [r7, #31]
 800b630:	e01c      	b.n	800b66c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	691a      	ldr	r2, [r3, #16]
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	3b02      	subs	r3, #2
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d20b      	bcs.n	800b658 <remove_chain+0xae>
			fs->free_clst++;
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	791b      	ldrb	r3, [r3, #4]
 800b64e:	f043 0301 	orr.w	r3, r3, #1
 800b652:	b2da      	uxtb	r2, r3
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	429a      	cmp	r2, r3
 800b664:	d3c6      	bcc.n	800b5f4 <remove_chain+0x4a>
 800b666:	e000      	b.n	800b66a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b668:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3720      	adds	r7, #32
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10d      	bne.n	800b6a6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d004      	beq.n	800b6a0 <create_chain+0x2c>
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	69ba      	ldr	r2, [r7, #24]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d31b      	bcc.n	800b6d8 <create_chain+0x64>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	61bb      	str	r3, [r7, #24]
 800b6a4:	e018      	b.n	800b6d8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff fded 	bl	800b288 <get_fat>
 800b6ae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d801      	bhi.n	800b6ba <create_chain+0x46>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e070      	b.n	800b79c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6c0:	d101      	bne.n	800b6c6 <create_chain+0x52>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	e06a      	b.n	800b79c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d201      	bcs.n	800b6d4 <create_chain+0x60>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	e063      	b.n	800b79c <create_chain+0x128>
		scl = clst;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	69fa      	ldr	r2, [r7, #28]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d307      	bcc.n	800b6fc <create_chain+0x88>
				ncl = 2;
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b6f0:	69fa      	ldr	r2, [r7, #28]
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d901      	bls.n	800b6fc <create_chain+0x88>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	e04f      	b.n	800b79c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b6fc:	69f9      	ldr	r1, [r7, #28]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7ff fdc2 	bl	800b288 <get_fat>
 800b704:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00e      	beq.n	800b72a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d003      	beq.n	800b71a <create_chain+0xa6>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b718:	d101      	bne.n	800b71e <create_chain+0xaa>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	e03e      	b.n	800b79c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b71e:	69fa      	ldr	r2, [r7, #28]
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	429a      	cmp	r2, r3
 800b724:	d1da      	bne.n	800b6dc <create_chain+0x68>
 800b726:	2300      	movs	r3, #0
 800b728:	e038      	b.n	800b79c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b72a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b72c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b730:	69f9      	ldr	r1, [r7, #28]
 800b732:	6938      	ldr	r0, [r7, #16]
 800b734:	f7ff fe4f 	bl	800b3d6 <put_fat>
 800b738:	4603      	mov	r3, r0
 800b73a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b73c:	7dfb      	ldrb	r3, [r7, #23]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d109      	bne.n	800b756 <create_chain+0xe2>
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d006      	beq.n	800b756 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b748:	69fa      	ldr	r2, [r7, #28]
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6938      	ldr	r0, [r7, #16]
 800b74e:	f7ff fe42 	bl	800b3d6 <put_fat>
 800b752:	4603      	mov	r3, r0
 800b754:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b756:	7dfb      	ldrb	r3, [r7, #23]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d116      	bne.n	800b78a <create_chain+0x116>
		fs->last_clst = ncl;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	69fa      	ldr	r2, [r7, #28]
 800b760:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	691a      	ldr	r2, [r3, #16]
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	3b02      	subs	r3, #2
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d804      	bhi.n	800b77a <create_chain+0x106>
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	1e5a      	subs	r2, r3, #1
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	791b      	ldrb	r3, [r3, #4]
 800b77e:	f043 0301 	orr.w	r3, r3, #1
 800b782:	b2da      	uxtb	r2, r3
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	711a      	strb	r2, [r3, #4]
 800b788:	e007      	b.n	800b79a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d102      	bne.n	800b796 <create_chain+0x122>
 800b790:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b794:	e000      	b.n	800b798 <create_chain+0x124>
 800b796:	2301      	movs	r3, #1
 800b798:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b79a:	69fb      	ldr	r3, [r7, #28]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3720      	adds	r7, #32
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b087      	sub	sp, #28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	0a5b      	lsrs	r3, r3, #9
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	8952      	ldrh	r2, [r2, #10]
 800b7c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	1d1a      	adds	r2, r3, #4
 800b7ce:	613a      	str	r2, [r7, #16]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <clmt_clust+0x3a>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	e010      	b.n	800b800 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d307      	bcc.n	800b7f6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	617b      	str	r3, [r7, #20]
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b7f4:	e7e9      	b.n	800b7ca <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b7f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	4413      	add	r3, r2
}
 800b800:	4618      	mov	r0, r3
 800b802:	371c      	adds	r7, #28
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b822:	d204      	bcs.n	800b82e <dir_sdi+0x22>
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	f003 031f 	and.w	r3, r3, #31
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d001      	beq.n	800b832 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b82e:	2302      	movs	r3, #2
 800b830:	e063      	b.n	800b8fa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	683a      	ldr	r2, [r7, #0]
 800b836:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d106      	bne.n	800b852 <dir_sdi+0x46>
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d902      	bls.n	800b852 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b850:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10c      	bne.n	800b872 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	095b      	lsrs	r3, r3, #5
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	8912      	ldrh	r2, [r2, #8]
 800b860:	4293      	cmp	r3, r2
 800b862:	d301      	bcc.n	800b868 <dir_sdi+0x5c>
 800b864:	2302      	movs	r3, #2
 800b866:	e048      	b.n	800b8fa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	61da      	str	r2, [r3, #28]
 800b870:	e029      	b.n	800b8c6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	895b      	ldrh	r3, [r3, #10]
 800b876:	025b      	lsls	r3, r3, #9
 800b878:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b87a:	e019      	b.n	800b8b0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6979      	ldr	r1, [r7, #20]
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff fd01 	bl	800b288 <get_fat>
 800b886:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b88e:	d101      	bne.n	800b894 <dir_sdi+0x88>
 800b890:	2301      	movs	r3, #1
 800b892:	e032      	b.n	800b8fa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	2b01      	cmp	r3, #1
 800b898:	d904      	bls.n	800b8a4 <dir_sdi+0x98>
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d301      	bcc.n	800b8a8 <dir_sdi+0x9c>
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	e028      	b.n	800b8fa <dir_sdi+0xee>
			ofs -= csz;
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b8b0:	683a      	ldr	r2, [r7, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d2e1      	bcs.n	800b87c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b8b8:	6979      	ldr	r1, [r7, #20]
 800b8ba:	6938      	ldr	r0, [r7, #16]
 800b8bc:	f7ff fcc5 	bl	800b24a <clust2sect>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <dir_sdi+0xcc>
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	e010      	b.n	800b8fa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	69da      	ldr	r2, [r3, #28]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	0a5b      	lsrs	r3, r3, #9
 800b8e0:	441a      	add	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f2:	441a      	add	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3718      	adds	r7, #24
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b086      	sub	sp, #24
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	3320      	adds	r3, #32
 800b918:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	69db      	ldr	r3, [r3, #28]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d003      	beq.n	800b92a <dir_next+0x28>
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b928:	d301      	bcc.n	800b92e <dir_next+0x2c>
 800b92a:	2304      	movs	r3, #4
 800b92c:	e0aa      	b.n	800ba84 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b934:	2b00      	cmp	r3, #0
 800b936:	f040 8098 	bne.w	800ba6a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	69db      	ldr	r3, [r3, #28]
 800b93e:	1c5a      	adds	r2, r3, #1
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10b      	bne.n	800b964 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	095b      	lsrs	r3, r3, #5
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	8912      	ldrh	r2, [r2, #8]
 800b954:	4293      	cmp	r3, r2
 800b956:	f0c0 8088 	bcc.w	800ba6a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	61da      	str	r2, [r3, #28]
 800b960:	2304      	movs	r3, #4
 800b962:	e08f      	b.n	800ba84 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	0a5b      	lsrs	r3, r3, #9
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	8952      	ldrh	r2, [r2, #10]
 800b96c:	3a01      	subs	r2, #1
 800b96e:	4013      	ands	r3, r2
 800b970:	2b00      	cmp	r3, #0
 800b972:	d17a      	bne.n	800ba6a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	4619      	mov	r1, r3
 800b97c:	4610      	mov	r0, r2
 800b97e:	f7ff fc83 	bl	800b288 <get_fat>
 800b982:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d801      	bhi.n	800b98e <dir_next+0x8c>
 800b98a:	2302      	movs	r3, #2
 800b98c:	e07a      	b.n	800ba84 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b994:	d101      	bne.n	800b99a <dir_next+0x98>
 800b996:	2301      	movs	r3, #1
 800b998:	e074      	b.n	800ba84 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d358      	bcc.n	800ba56 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d104      	bne.n	800b9b4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	61da      	str	r2, [r3, #28]
 800b9b0:	2304      	movs	r3, #4
 800b9b2:	e067      	b.n	800ba84 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4610      	mov	r0, r2
 800b9be:	f7ff fe59 	bl	800b674 <create_chain>
 800b9c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <dir_next+0xcc>
 800b9ca:	2307      	movs	r3, #7
 800b9cc:	e05a      	b.n	800ba84 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d101      	bne.n	800b9d8 <dir_next+0xd6>
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e055      	b.n	800ba84 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b9de:	d101      	bne.n	800b9e4 <dir_next+0xe2>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e04f      	b.n	800ba84 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7ff fbbf 	bl	800b168 <sync_window>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d001      	beq.n	800b9f4 <dir_next+0xf2>
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e047      	b.n	800ba84 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	3330      	adds	r3, #48	@ 0x30
 800b9f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7ff fa25 	bl	800ae4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba04:	2300      	movs	r3, #0
 800ba06:	613b      	str	r3, [r7, #16]
 800ba08:	6979      	ldr	r1, [r7, #20]
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f7ff fc1d 	bl	800b24a <clust2sect>
 800ba10:	4602      	mov	r2, r0
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ba16:	e012      	b.n	800ba3e <dir_next+0x13c>
						fs->wflag = 1;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f7ff fba2 	bl	800b168 <sync_window>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <dir_next+0x12c>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e02a      	b.n	800ba84 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	3301      	adds	r3, #1
 800ba32:	613b      	str	r3, [r7, #16]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	895b      	ldrh	r3, [r3, #10]
 800ba42:	461a      	mov	r2, r3
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d3e6      	bcc.n	800ba18 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	1ad2      	subs	r2, r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ba5c:	6979      	ldr	r1, [r7, #20]
 800ba5e:	68f8      	ldr	r0, [r7, #12]
 800ba60:	f7ff fbf3 	bl	800b24a <clust2sect>
 800ba64:	4602      	mov	r2, r0
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	68ba      	ldr	r2, [r7, #8]
 800ba6e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7c:	441a      	add	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff feb4 	bl	800b80c <dir_sdi>
 800baa4:	4603      	mov	r3, r0
 800baa6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d12b      	bne.n	800bb06 <dir_alloc+0x7a>
		n = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	69db      	ldr	r3, [r3, #28]
 800bab6:	4619      	mov	r1, r3
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f7ff fb99 	bl	800b1f0 <move_window>
 800babe:	4603      	mov	r3, r0
 800bac0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d11d      	bne.n	800bb04 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6a1b      	ldr	r3, [r3, #32]
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	2be5      	cmp	r3, #229	@ 0xe5
 800bad0:	d004      	beq.n	800badc <dir_alloc+0x50>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d107      	bne.n	800baec <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	3301      	adds	r3, #1
 800bae0:	613b      	str	r3, [r7, #16]
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d102      	bne.n	800baf0 <dir_alloc+0x64>
 800baea:	e00c      	b.n	800bb06 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800baec:	2300      	movs	r3, #0
 800baee:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800baf0:	2101      	movs	r1, #1
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7ff ff05 	bl	800b902 <dir_next>
 800baf8:	4603      	mov	r3, r0
 800bafa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bafc:	7dfb      	ldrb	r3, [r7, #23]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d0d7      	beq.n	800bab2 <dir_alloc+0x26>
 800bb02:	e000      	b.n	800bb06 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bb04:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
 800bb08:	2b04      	cmp	r3, #4
 800bb0a:	d101      	bne.n	800bb10 <dir_alloc+0x84>
 800bb0c:	2307      	movs	r3, #7
 800bb0e:	75fb      	strb	r3, [r7, #23]
	return res;
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3718      	adds	r7, #24
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	331a      	adds	r3, #26
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff f8ed 	bl	800ad08 <ld_word>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b03      	cmp	r3, #3
 800bb38:	d109      	bne.n	800bb4e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	3314      	adds	r3, #20
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7ff f8e2 	bl	800ad08 <ld_word>
 800bb44:	4603      	mov	r3, r0
 800bb46:	041b      	lsls	r3, r3, #16
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	331a      	adds	r3, #26
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	b292      	uxth	r2, r2
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff f905 	bl	800ad7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d109      	bne.n	800bb90 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	f103 0214 	add.w	r2, r3, #20
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	0c1b      	lsrs	r3, r3, #16
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	f7ff f8f7 	bl	800ad7e <st_word>
	}
}
 800bb90:	bf00      	nop
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bba6:	2100      	movs	r1, #0
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff fe2f 	bl	800b80c <dir_sdi>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bbb2:	7dfb      	ldrb	r3, [r7, #23]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <dir_find+0x24>
 800bbb8:	7dfb      	ldrb	r3, [r7, #23]
 800bbba:	e03e      	b.n	800bc3a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6938      	ldr	r0, [r7, #16]
 800bbc4:	f7ff fb14 	bl	800b1f0 <move_window>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d12f      	bne.n	800bc32 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <dir_find+0x4e>
 800bbe0:	2304      	movs	r3, #4
 800bbe2:	75fb      	strb	r3, [r7, #23]
 800bbe4:	e028      	b.n	800bc38 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	330b      	adds	r3, #11
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6a1b      	ldr	r3, [r3, #32]
 800bbfc:	330b      	adds	r3, #11
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	f003 0308 	and.w	r3, r3, #8
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10a      	bne.n	800bc1e <dir_find+0x86>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a18      	ldr	r0, [r3, #32]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	3324      	adds	r3, #36	@ 0x24
 800bc10:	220b      	movs	r2, #11
 800bc12:	4619      	mov	r1, r3
 800bc14:	f7ff f936 	bl	800ae84 <mem_cmp>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00b      	beq.n	800bc36 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bc1e:	2100      	movs	r1, #0
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff fe6e 	bl	800b902 <dir_next>
 800bc26:	4603      	mov	r3, r0
 800bc28:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d0c5      	beq.n	800bbbc <dir_find+0x24>
 800bc30:	e002      	b.n	800bc38 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bc32:	bf00      	nop
 800bc34:	e000      	b.n	800bc38 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bc36:	bf00      	nop

	return res;
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b084      	sub	sp, #16
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bc50:	2101      	movs	r1, #1
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff ff1a 	bl	800ba8c <dir_alloc>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d11c      	bne.n	800bc9c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	4619      	mov	r1, r3
 800bc68:	68b8      	ldr	r0, [r7, #8]
 800bc6a:	f7ff fac1 	bl	800b1f0 <move_window>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d111      	bne.n	800bc9c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	2100      	movs	r1, #0
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7ff f8e4 	bl	800ae4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a18      	ldr	r0, [r3, #32]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	3324      	adds	r3, #36	@ 0x24
 800bc8e:	220b      	movs	r2, #11
 800bc90:	4619      	mov	r1, r3
 800bc92:	f7ff f8bb 	bl	800ae0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
	...

0800bca8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b088      	sub	sp, #32
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	3324      	adds	r3, #36	@ 0x24
 800bcbc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bcbe:	220b      	movs	r2, #11
 800bcc0:	2120      	movs	r1, #32
 800bcc2:	68b8      	ldr	r0, [r7, #8]
 800bcc4:	f7ff f8c3 	bl	800ae4e <mem_set>
	si = i = 0; ni = 8;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	613b      	str	r3, [r7, #16]
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	61fb      	str	r3, [r7, #28]
 800bcd0:	2308      	movs	r3, #8
 800bcd2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	1c5a      	adds	r2, r3, #1
 800bcd8:	61fa      	str	r2, [r7, #28]
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	4413      	add	r3, r2
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bce2:	7efb      	ldrb	r3, [r7, #27]
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	d94e      	bls.n	800bd86 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bce8:	7efb      	ldrb	r3, [r7, #27]
 800bcea:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcec:	d006      	beq.n	800bcfc <create_name+0x54>
 800bcee:	7efb      	ldrb	r3, [r7, #27]
 800bcf0:	2b5c      	cmp	r3, #92	@ 0x5c
 800bcf2:	d110      	bne.n	800bd16 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bcf4:	e002      	b.n	800bcfc <create_name+0x54>
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	61fb      	str	r3, [r7, #28]
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	4413      	add	r3, r2
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd06:	d0f6      	beq.n	800bcf6 <create_name+0x4e>
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	2b5c      	cmp	r3, #92	@ 0x5c
 800bd12:	d0f0      	beq.n	800bcf6 <create_name+0x4e>
			break;
 800bd14:	e038      	b.n	800bd88 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bd16:	7efb      	ldrb	r3, [r7, #27]
 800bd18:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd1a:	d003      	beq.n	800bd24 <create_name+0x7c>
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d30c      	bcc.n	800bd3e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	2b0b      	cmp	r3, #11
 800bd28:	d002      	beq.n	800bd30 <create_name+0x88>
 800bd2a:	7efb      	ldrb	r3, [r7, #27]
 800bd2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd2e:	d001      	beq.n	800bd34 <create_name+0x8c>
 800bd30:	2306      	movs	r3, #6
 800bd32:	e044      	b.n	800bdbe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bd34:	2308      	movs	r3, #8
 800bd36:	613b      	str	r3, [r7, #16]
 800bd38:	230b      	movs	r3, #11
 800bd3a:	617b      	str	r3, [r7, #20]
			continue;
 800bd3c:	e022      	b.n	800bd84 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bd3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	da04      	bge.n	800bd50 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bd46:	7efb      	ldrb	r3, [r7, #27]
 800bd48:	3b80      	subs	r3, #128	@ 0x80
 800bd4a:	4a1f      	ldr	r2, [pc, #124]	@ (800bdc8 <create_name+0x120>)
 800bd4c:	5cd3      	ldrb	r3, [r2, r3]
 800bd4e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bd50:	7efb      	ldrb	r3, [r7, #27]
 800bd52:	4619      	mov	r1, r3
 800bd54:	481d      	ldr	r0, [pc, #116]	@ (800bdcc <create_name+0x124>)
 800bd56:	f7ff f8bc 	bl	800aed2 <chk_chr>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <create_name+0xbc>
 800bd60:	2306      	movs	r3, #6
 800bd62:	e02c      	b.n	800bdbe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bd64:	7efb      	ldrb	r3, [r7, #27]
 800bd66:	2b60      	cmp	r3, #96	@ 0x60
 800bd68:	d905      	bls.n	800bd76 <create_name+0xce>
 800bd6a:	7efb      	ldrb	r3, [r7, #27]
 800bd6c:	2b7a      	cmp	r3, #122	@ 0x7a
 800bd6e:	d802      	bhi.n	800bd76 <create_name+0xce>
 800bd70:	7efb      	ldrb	r3, [r7, #27]
 800bd72:	3b20      	subs	r3, #32
 800bd74:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	1c5a      	adds	r2, r3, #1
 800bd7a:	613a      	str	r2, [r7, #16]
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	4413      	add	r3, r2
 800bd80:	7efa      	ldrb	r2, [r7, #27]
 800bd82:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bd84:	e7a6      	b.n	800bcd4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bd86:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	441a      	add	r2, r3
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d101      	bne.n	800bd9c <create_name+0xf4>
 800bd98:	2306      	movs	r3, #6
 800bd9a:	e010      	b.n	800bdbe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2be5      	cmp	r3, #229	@ 0xe5
 800bda2:	d102      	bne.n	800bdaa <create_name+0x102>
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2205      	movs	r2, #5
 800bda8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bdaa:	7efb      	ldrb	r3, [r7, #27]
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	d801      	bhi.n	800bdb4 <create_name+0x10c>
 800bdb0:	2204      	movs	r2, #4
 800bdb2:	e000      	b.n	800bdb6 <create_name+0x10e>
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	330b      	adds	r3, #11
 800bdba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bdbc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3720      	adds	r7, #32
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	0800dbd4 	.word	0x0800dbd4
 800bdcc:	0800db44 	.word	0x0800db44

0800bdd0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bde4:	e002      	b.n	800bdec <follow_path+0x1c>
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	3301      	adds	r3, #1
 800bdea:	603b      	str	r3, [r7, #0]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	2b2f      	cmp	r3, #47	@ 0x2f
 800bdf2:	d0f8      	beq.n	800bde6 <follow_path+0x16>
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	2b5c      	cmp	r3, #92	@ 0x5c
 800bdfa:	d0f4      	beq.n	800bde6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	2200      	movs	r2, #0
 800be00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2b1f      	cmp	r3, #31
 800be08:	d80a      	bhi.n	800be20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2280      	movs	r2, #128	@ 0x80
 800be0e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800be12:	2100      	movs	r1, #0
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f7ff fcf9 	bl	800b80c <dir_sdi>
 800be1a:	4603      	mov	r3, r0
 800be1c:	75fb      	strb	r3, [r7, #23]
 800be1e:	e043      	b.n	800bea8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800be20:	463b      	mov	r3, r7
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7ff ff3f 	bl	800bca8 <create_name>
 800be2a:	4603      	mov	r3, r0
 800be2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d134      	bne.n	800be9e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff feaf 	bl	800bb98 <dir_find>
 800be3a:	4603      	mov	r3, r0
 800be3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800be44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d00a      	beq.n	800be62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
 800be4e:	2b04      	cmp	r3, #4
 800be50:	d127      	bne.n	800bea2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800be52:	7afb      	ldrb	r3, [r7, #11]
 800be54:	f003 0304 	and.w	r3, r3, #4
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d122      	bne.n	800bea2 <follow_path+0xd2>
 800be5c:	2305      	movs	r3, #5
 800be5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800be60:	e01f      	b.n	800bea2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800be62:	7afb      	ldrb	r3, [r7, #11]
 800be64:	f003 0304 	and.w	r3, r3, #4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d11c      	bne.n	800bea6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	799b      	ldrb	r3, [r3, #6]
 800be70:	f003 0310 	and.w	r3, r3, #16
 800be74:	2b00      	cmp	r3, #0
 800be76:	d102      	bne.n	800be7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800be78:	2305      	movs	r3, #5
 800be7a:	75fb      	strb	r3, [r7, #23]
 800be7c:	e014      	b.n	800bea8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be8c:	4413      	add	r3, r2
 800be8e:	4619      	mov	r1, r3
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff fe42 	bl	800bb1a <ld_clust>
 800be96:	4602      	mov	r2, r0
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800be9c:	e7c0      	b.n	800be20 <follow_path+0x50>
			if (res != FR_OK) break;
 800be9e:	bf00      	nop
 800bea0:	e002      	b.n	800bea8 <follow_path+0xd8>
				break;
 800bea2:	bf00      	nop
 800bea4:	e000      	b.n	800bea8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bea6:	bf00      	nop
			}
		}
	}

	return res;
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b087      	sub	sp, #28
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800beba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bebe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d031      	beq.n	800bf2c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	617b      	str	r3, [r7, #20]
 800bece:	e002      	b.n	800bed6 <get_ldnumber+0x24>
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	3301      	adds	r3, #1
 800bed4:	617b      	str	r3, [r7, #20]
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	2b20      	cmp	r3, #32
 800bedc:	d903      	bls.n	800bee6 <get_ldnumber+0x34>
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	2b3a      	cmp	r3, #58	@ 0x3a
 800bee4:	d1f4      	bne.n	800bed0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	2b3a      	cmp	r3, #58	@ 0x3a
 800beec:	d11c      	bne.n	800bf28 <get_ldnumber+0x76>
			tp = *path;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	60fa      	str	r2, [r7, #12]
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	3b30      	subs	r3, #48	@ 0x30
 800befe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b09      	cmp	r3, #9
 800bf04:	d80e      	bhi.n	800bf24 <get_ldnumber+0x72>
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d10a      	bne.n	800bf24 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d107      	bne.n	800bf24 <get_ldnumber+0x72>
					vol = (int)i;
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	617b      	str	r3, [r7, #20]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	697a      	ldr	r2, [r7, #20]
 800bf22:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	e002      	b.n	800bf2e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bf28:	2300      	movs	r3, #0
 800bf2a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bf2c:	693b      	ldr	r3, [r7, #16]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	371c      	adds	r7, #28
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
	...

0800bf3c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	70da      	strb	r2, [r3, #3]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf52:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff f94a 	bl	800b1f0 <move_window>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <check_fs+0x2a>
 800bf62:	2304      	movs	r3, #4
 800bf64:	e038      	b.n	800bfd8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3330      	adds	r3, #48	@ 0x30
 800bf6a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7fe feca 	bl	800ad08 <ld_word>
 800bf74:	4603      	mov	r3, r0
 800bf76:	461a      	mov	r2, r3
 800bf78:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d001      	beq.n	800bf84 <check_fs+0x48>
 800bf80:	2303      	movs	r3, #3
 800bf82:	e029      	b.n	800bfd8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf8a:	2be9      	cmp	r3, #233	@ 0xe9
 800bf8c:	d009      	beq.n	800bfa2 <check_fs+0x66>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf94:	2beb      	cmp	r3, #235	@ 0xeb
 800bf96:	d11e      	bne.n	800bfd6 <check_fs+0x9a>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bf9e:	2b90      	cmp	r3, #144	@ 0x90
 800bfa0:	d119      	bne.n	800bfd6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	3330      	adds	r3, #48	@ 0x30
 800bfa6:	3336      	adds	r3, #54	@ 0x36
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7fe fec5 	bl	800ad38 <ld_dword>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bfb4:	4a0a      	ldr	r2, [pc, #40]	@ (800bfe0 <check_fs+0xa4>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d101      	bne.n	800bfbe <check_fs+0x82>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	e00c      	b.n	800bfd8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3330      	adds	r3, #48	@ 0x30
 800bfc2:	3352      	adds	r3, #82	@ 0x52
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe feb7 	bl	800ad38 <ld_dword>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	4a05      	ldr	r2, [pc, #20]	@ (800bfe4 <check_fs+0xa8>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d101      	bne.n	800bfd6 <check_fs+0x9a>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	e000      	b.n	800bfd8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bfd6:	2302      	movs	r3, #2
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	00544146 	.word	0x00544146
 800bfe4:	33544146 	.word	0x33544146

0800bfe8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b096      	sub	sp, #88	@ 0x58
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	4613      	mov	r3, r2
 800bff4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f7ff ff58 	bl	800beb2 <get_ldnumber>
 800c002:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c006:	2b00      	cmp	r3, #0
 800c008:	da01      	bge.n	800c00e <find_volume+0x26>
 800c00a:	230b      	movs	r3, #11
 800c00c:	e22d      	b.n	800c46a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c00e:	4aa1      	ldr	r2, [pc, #644]	@ (800c294 <find_volume+0x2ac>)
 800c010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c016:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d101      	bne.n	800c022 <find_volume+0x3a>
 800c01e:	230c      	movs	r3, #12
 800c020:	e223      	b.n	800c46a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c026:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c028:	79fb      	ldrb	r3, [r7, #7]
 800c02a:	f023 0301 	bic.w	r3, r3, #1
 800c02e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d01a      	beq.n	800c06e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c03a:	785b      	ldrb	r3, [r3, #1]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fe fde1 	bl	800ac04 <disk_status>
 800c042:	4603      	mov	r3, r0
 800c044:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c048:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10c      	bne.n	800c06e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c054:	79fb      	ldrb	r3, [r7, #7]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d007      	beq.n	800c06a <find_volume+0x82>
 800c05a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c05e:	f003 0304 	and.w	r3, r3, #4
 800c062:	2b00      	cmp	r3, #0
 800c064:	d001      	beq.n	800c06a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c066:	230a      	movs	r3, #10
 800c068:	e1ff      	b.n	800c46a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c06a:	2300      	movs	r3, #0
 800c06c:	e1fd      	b.n	800c46a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c070:	2200      	movs	r2, #0
 800c072:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c076:	b2da      	uxtb	r2, r3
 800c078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07e:	785b      	ldrb	r3, [r3, #1]
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe fdd9 	bl	800ac38 <disk_initialize>
 800c086:	4603      	mov	r3, r0
 800c088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c08c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	d001      	beq.n	800c09c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c098:	2303      	movs	r3, #3
 800c09a:	e1e6      	b.n	800c46a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c09c:	79fb      	ldrb	r3, [r7, #7]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d007      	beq.n	800c0b2 <find_volume+0xca>
 800c0a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c0a6:	f003 0304 	and.w	r3, r3, #4
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c0ae:	230a      	movs	r3, #10
 800c0b0:	e1db      	b.n	800c46a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c0b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c0b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c0ba:	f7ff ff3f 	bl	800bf3c <check_fs>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c0c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	d149      	bne.n	800c160 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0d0:	e01e      	b.n	800c110 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0da:	011b      	lsls	r3, r3, #4
 800c0dc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c0e0:	4413      	add	r3, r2
 800c0e2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d006      	beq.n	800c0fc <find_volume+0x114>
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe fe20 	bl	800ad38 <ld_dword>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	e000      	b.n	800c0fe <find_volume+0x116>
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	3358      	adds	r3, #88	@ 0x58
 800c104:	443b      	add	r3, r7
 800c106:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c10a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c10c:	3301      	adds	r3, #1
 800c10e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c112:	2b03      	cmp	r3, #3
 800c114:	d9dd      	bls.n	800c0d2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c116:	2300      	movs	r3, #0
 800c118:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c11a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d002      	beq.n	800c126 <find_volume+0x13e>
 800c120:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c122:	3b01      	subs	r3, #1
 800c124:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	3358      	adds	r3, #88	@ 0x58
 800c12c:	443b      	add	r3, r7
 800c12e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c132:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c136:	2b00      	cmp	r3, #0
 800c138:	d005      	beq.n	800c146 <find_volume+0x15e>
 800c13a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c13c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c13e:	f7ff fefd 	bl	800bf3c <check_fs>
 800c142:	4603      	mov	r3, r0
 800c144:	e000      	b.n	800c148 <find_volume+0x160>
 800c146:	2303      	movs	r3, #3
 800c148:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c14c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c150:	2b01      	cmp	r3, #1
 800c152:	d905      	bls.n	800c160 <find_volume+0x178>
 800c154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c156:	3301      	adds	r3, #1
 800c158:	643b      	str	r3, [r7, #64]	@ 0x40
 800c15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c15c:	2b03      	cmp	r3, #3
 800c15e:	d9e2      	bls.n	800c126 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c160:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c164:	2b04      	cmp	r3, #4
 800c166:	d101      	bne.n	800c16c <find_volume+0x184>
 800c168:	2301      	movs	r3, #1
 800c16a:	e17e      	b.n	800c46a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c16c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c170:	2b01      	cmp	r3, #1
 800c172:	d901      	bls.n	800c178 <find_volume+0x190>
 800c174:	230d      	movs	r3, #13
 800c176:	e178      	b.n	800c46a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17a:	3330      	adds	r3, #48	@ 0x30
 800c17c:	330b      	adds	r3, #11
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fe fdc2 	bl	800ad08 <ld_word>
 800c184:	4603      	mov	r3, r0
 800c186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c18a:	d001      	beq.n	800c190 <find_volume+0x1a8>
 800c18c:	230d      	movs	r3, #13
 800c18e:	e16c      	b.n	800c46a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c192:	3330      	adds	r3, #48	@ 0x30
 800c194:	3316      	adds	r3, #22
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe fdb6 	bl	800ad08 <ld_word>
 800c19c:	4603      	mov	r3, r0
 800c19e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c1a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d106      	bne.n	800c1b4 <find_volume+0x1cc>
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a8:	3330      	adds	r3, #48	@ 0x30
 800c1aa:	3324      	adds	r3, #36	@ 0x24
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fe fdc3 	bl	800ad38 <ld_dword>
 800c1b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c1b8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1bc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c6:	789b      	ldrb	r3, [r3, #2]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d005      	beq.n	800c1d8 <find_volume+0x1f0>
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ce:	789b      	ldrb	r3, [r3, #2]
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d001      	beq.n	800c1d8 <find_volume+0x1f0>
 800c1d4:	230d      	movs	r3, #13
 800c1d6:	e148      	b.n	800c46a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1da:	789b      	ldrb	r3, [r3, #2]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1e0:	fb02 f303 	mul.w	r3, r2, r3
 800c1e4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f4:	895b      	ldrh	r3, [r3, #10]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d008      	beq.n	800c20c <find_volume+0x224>
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fc:	895b      	ldrh	r3, [r3, #10]
 800c1fe:	461a      	mov	r2, r3
 800c200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c202:	895b      	ldrh	r3, [r3, #10]
 800c204:	3b01      	subs	r3, #1
 800c206:	4013      	ands	r3, r2
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d001      	beq.n	800c210 <find_volume+0x228>
 800c20c:	230d      	movs	r3, #13
 800c20e:	e12c      	b.n	800c46a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c212:	3330      	adds	r3, #48	@ 0x30
 800c214:	3311      	adds	r3, #17
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe fd76 	bl	800ad08 <ld_word>
 800c21c:	4603      	mov	r3, r0
 800c21e:	461a      	mov	r2, r3
 800c220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c222:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c226:	891b      	ldrh	r3, [r3, #8]
 800c228:	f003 030f 	and.w	r3, r3, #15
 800c22c:	b29b      	uxth	r3, r3
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d001      	beq.n	800c236 <find_volume+0x24e>
 800c232:	230d      	movs	r3, #13
 800c234:	e119      	b.n	800c46a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c238:	3330      	adds	r3, #48	@ 0x30
 800c23a:	3313      	adds	r3, #19
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fe fd63 	bl	800ad08 <ld_word>
 800c242:	4603      	mov	r3, r0
 800c244:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d106      	bne.n	800c25a <find_volume+0x272>
 800c24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24e:	3330      	adds	r3, #48	@ 0x30
 800c250:	3320      	adds	r3, #32
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe fd70 	bl	800ad38 <ld_dword>
 800c258:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25c:	3330      	adds	r3, #48	@ 0x30
 800c25e:	330e      	adds	r3, #14
 800c260:	4618      	mov	r0, r3
 800c262:	f7fe fd51 	bl	800ad08 <ld_word>
 800c266:	4603      	mov	r3, r0
 800c268:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c26a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d101      	bne.n	800c274 <find_volume+0x28c>
 800c270:	230d      	movs	r3, #13
 800c272:	e0fa      	b.n	800c46a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c274:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c278:	4413      	add	r3, r2
 800c27a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c27c:	8912      	ldrh	r2, [r2, #8]
 800c27e:	0912      	lsrs	r2, r2, #4
 800c280:	b292      	uxth	r2, r2
 800c282:	4413      	add	r3, r2
 800c284:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d204      	bcs.n	800c298 <find_volume+0x2b0>
 800c28e:	230d      	movs	r3, #13
 800c290:	e0eb      	b.n	800c46a <find_volume+0x482>
 800c292:	bf00      	nop
 800c294:	24000700 	.word	0x24000700
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c2a0:	8952      	ldrh	r2, [r2, #10]
 800c2a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2a6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <find_volume+0x2ca>
 800c2ae:	230d      	movs	r3, #13
 800c2b0:	e0db      	b.n	800c46a <find_volume+0x482>
		fmt = FS_FAT32;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ba:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d802      	bhi.n	800c2c8 <find_volume+0x2e0>
 800c2c2:	2302      	movs	r3, #2
 800c2c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ca:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d802      	bhi.n	800c2d8 <find_volume+0x2f0>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2da:	1c9a      	adds	r2, r3, #2
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2de:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2e4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c2e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c2e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2ea:	441a      	add	r2, r3
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ee:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c2f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f4:	441a      	add	r2, r3
 800c2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c2fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d11e      	bne.n	800c340 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c304:	3330      	adds	r3, #48	@ 0x30
 800c306:	332a      	adds	r3, #42	@ 0x2a
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fe fcfd 	bl	800ad08 <ld_word>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <find_volume+0x330>
 800c314:	230d      	movs	r3, #13
 800c316:	e0a8      	b.n	800c46a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31a:	891b      	ldrh	r3, [r3, #8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d001      	beq.n	800c324 <find_volume+0x33c>
 800c320:	230d      	movs	r3, #13
 800c322:	e0a2      	b.n	800c46a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c326:	3330      	adds	r3, #48	@ 0x30
 800c328:	332c      	adds	r3, #44	@ 0x2c
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe fd04 	bl	800ad38 <ld_dword>
 800c330:	4602      	mov	r2, r0
 800c332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c334:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c33e:	e01f      	b.n	800c380 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c342:	891b      	ldrh	r3, [r3, #8]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d101      	bne.n	800c34c <find_volume+0x364>
 800c348:	230d      	movs	r3, #13
 800c34a:	e08e      	b.n	800c46a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34e:	6a1a      	ldr	r2, [r3, #32]
 800c350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c352:	441a      	add	r2, r3
 800c354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c356:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c358:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d103      	bne.n	800c368 <find_volume+0x380>
 800c360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	e00a      	b.n	800c37e <find_volume+0x396>
 800c368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36a:	695a      	ldr	r2, [r3, #20]
 800c36c:	4613      	mov	r3, r2
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	4413      	add	r3, r2
 800c372:	085a      	lsrs	r2, r3, #1
 800c374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	f003 0301 	and.w	r3, r3, #1
 800c37c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c37e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c382:	699a      	ldr	r2, [r3, #24]
 800c384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c386:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c38a:	0a5b      	lsrs	r3, r3, #9
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d201      	bcs.n	800c394 <find_volume+0x3ac>
 800c390:	230d      	movs	r3, #13
 800c392:	e06a      	b.n	800c46a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c396:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c39a:	611a      	str	r2, [r3, #16]
 800c39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39e:	691a      	ldr	r2, [r3, #16]
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a6:	2280      	movs	r2, #128	@ 0x80
 800c3a8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c3aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d149      	bne.n	800c446 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b4:	3330      	adds	r3, #48	@ 0x30
 800c3b6:	3330      	adds	r3, #48	@ 0x30
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fe fca5 	bl	800ad08 <ld_word>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d140      	bne.n	800c446 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c3c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c3cc:	f7fe ff10 	bl	800b1f0 <move_window>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d137      	bne.n	800c446 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d8:	2200      	movs	r2, #0
 800c3da:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3de:	3330      	adds	r3, #48	@ 0x30
 800c3e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fe fc8f 	bl	800ad08 <ld_word>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d127      	bne.n	800c446 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f8:	3330      	adds	r3, #48	@ 0x30
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fe fc9c 	bl	800ad38 <ld_dword>
 800c400:	4603      	mov	r3, r0
 800c402:	4a1c      	ldr	r2, [pc, #112]	@ (800c474 <find_volume+0x48c>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d11e      	bne.n	800c446 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c40a:	3330      	adds	r3, #48	@ 0x30
 800c40c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c410:	4618      	mov	r0, r3
 800c412:	f7fe fc91 	bl	800ad38 <ld_dword>
 800c416:	4603      	mov	r3, r0
 800c418:	4a17      	ldr	r2, [pc, #92]	@ (800c478 <find_volume+0x490>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d113      	bne.n	800c446 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c420:	3330      	adds	r3, #48	@ 0x30
 800c422:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c426:	4618      	mov	r0, r3
 800c428:	f7fe fc86 	bl	800ad38 <ld_dword>
 800c42c:	4602      	mov	r2, r0
 800c42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c430:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c434:	3330      	adds	r3, #48	@ 0x30
 800c436:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe fc7c 	bl	800ad38 <ld_dword>
 800c440:	4602      	mov	r2, r0
 800c442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c444:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c448:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c44c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c44e:	4b0b      	ldr	r3, [pc, #44]	@ (800c47c <find_volume+0x494>)
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	3301      	adds	r3, #1
 800c454:	b29a      	uxth	r2, r3
 800c456:	4b09      	ldr	r3, [pc, #36]	@ (800c47c <find_volume+0x494>)
 800c458:	801a      	strh	r2, [r3, #0]
 800c45a:	4b08      	ldr	r3, [pc, #32]	@ (800c47c <find_volume+0x494>)
 800c45c:	881a      	ldrh	r2, [r3, #0]
 800c45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c460:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c462:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c464:	f7fe fe5c 	bl	800b120 <clear_lock>
#endif
	return FR_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3758      	adds	r7, #88	@ 0x58
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	41615252 	.word	0x41615252
 800c478:	61417272 	.word	0x61417272
 800c47c:	24000704 	.word	0x24000704

0800c480 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c48a:	2309      	movs	r3, #9
 800c48c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d01c      	beq.n	800c4ce <validate+0x4e>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d018      	beq.n	800c4ce <validate+0x4e>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d013      	beq.n	800c4ce <validate+0x4e>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	889a      	ldrh	r2, [r3, #4]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	88db      	ldrh	r3, [r3, #6]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d10c      	bne.n	800c4ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	785b      	ldrb	r3, [r3, #1]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fe fba2 	bl	800ac04 <disk_status>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d101      	bne.n	800c4ce <validate+0x4e>
			res = FR_OK;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d102      	bne.n	800c4da <validate+0x5a>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	e000      	b.n	800c4dc <validate+0x5c>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	6013      	str	r3, [r2, #0]
	return res;
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
	...

0800c4ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b088      	sub	sp, #32
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c4fe:	f107 0310 	add.w	r3, r7, #16
 800c502:	4618      	mov	r0, r3
 800c504:	f7ff fcd5 	bl	800beb2 <get_ldnumber>
 800c508:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	da01      	bge.n	800c514 <f_mount+0x28>
 800c510:	230b      	movs	r3, #11
 800c512:	e02b      	b.n	800c56c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c514:	4a17      	ldr	r2, [pc, #92]	@ (800c574 <f_mount+0x88>)
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c51c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d005      	beq.n	800c530 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c524:	69b8      	ldr	r0, [r7, #24]
 800c526:	f7fe fdfb 	bl	800b120 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	2200      	movs	r2, #0
 800c52e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d002      	beq.n	800c53c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	490d      	ldr	r1, [pc, #52]	@ (800c574 <f_mount+0x88>)
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <f_mount+0x66>
 800c54c:	79fb      	ldrb	r3, [r7, #7]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d001      	beq.n	800c556 <f_mount+0x6a>
 800c552:	2300      	movs	r3, #0
 800c554:	e00a      	b.n	800c56c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c556:	f107 010c 	add.w	r1, r7, #12
 800c55a:	f107 0308 	add.w	r3, r7, #8
 800c55e:	2200      	movs	r2, #0
 800c560:	4618      	mov	r0, r3
 800c562:	f7ff fd41 	bl	800bfe8 <find_volume>
 800c566:	4603      	mov	r3, r0
 800c568:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3720      	adds	r7, #32
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	24000700 	.word	0x24000700

0800c578 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b098      	sub	sp, #96	@ 0x60
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	4613      	mov	r3, r2
 800c584:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d101      	bne.n	800c590 <f_open+0x18>
 800c58c:	2309      	movs	r3, #9
 800c58e:	e1a9      	b.n	800c8e4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c590:	79fb      	ldrb	r3, [r7, #7]
 800c592:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c596:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c598:	79fa      	ldrb	r2, [r7, #7]
 800c59a:	f107 0110 	add.w	r1, r7, #16
 800c59e:	f107 0308 	add.w	r3, r7, #8
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7ff fd20 	bl	800bfe8 <find_volume>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c5ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f040 818d 	bne.w	800c8d2 <f_open+0x35a>
		dj.obj.fs = fs;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	f107 0314 	add.w	r3, r7, #20
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff fc03 	bl	800bdd0 <follow_path>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c5d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d118      	bne.n	800c60a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c5d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c5dc:	b25b      	sxtb	r3, r3
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	da03      	bge.n	800c5ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800c5e2:	2306      	movs	r3, #6
 800c5e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c5e8:	e00f      	b.n	800c60a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c5ea:	79fb      	ldrb	r3, [r7, #7]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	bf8c      	ite	hi
 800c5f0:	2301      	movhi	r3, #1
 800c5f2:	2300      	movls	r3, #0
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f107 0314 	add.w	r3, r7, #20
 800c5fc:	4611      	mov	r1, r2
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7fe fc82 	bl	800af08 <chk_lock>
 800c604:	4603      	mov	r3, r0
 800c606:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c60a:	79fb      	ldrb	r3, [r7, #7]
 800c60c:	f003 031c 	and.w	r3, r3, #28
 800c610:	2b00      	cmp	r3, #0
 800c612:	d07f      	beq.n	800c714 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c614:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d017      	beq.n	800c64c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c61c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c620:	2b04      	cmp	r3, #4
 800c622:	d10e      	bne.n	800c642 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c624:	f7fe fccc 	bl	800afc0 <enq_lock>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d006      	beq.n	800c63c <f_open+0xc4>
 800c62e:	f107 0314 	add.w	r3, r7, #20
 800c632:	4618      	mov	r0, r3
 800c634:	f7ff fb05 	bl	800bc42 <dir_register>
 800c638:	4603      	mov	r3, r0
 800c63a:	e000      	b.n	800c63e <f_open+0xc6>
 800c63c:	2312      	movs	r3, #18
 800c63e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c642:	79fb      	ldrb	r3, [r7, #7]
 800c644:	f043 0308 	orr.w	r3, r3, #8
 800c648:	71fb      	strb	r3, [r7, #7]
 800c64a:	e010      	b.n	800c66e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c64c:	7ebb      	ldrb	r3, [r7, #26]
 800c64e:	f003 0311 	and.w	r3, r3, #17
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <f_open+0xe6>
					res = FR_DENIED;
 800c656:	2307      	movs	r3, #7
 800c658:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c65c:	e007      	b.n	800c66e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c65e:	79fb      	ldrb	r3, [r7, #7]
 800c660:	f003 0304 	and.w	r3, r3, #4
 800c664:	2b00      	cmp	r3, #0
 800c666:	d002      	beq.n	800c66e <f_open+0xf6>
 800c668:	2308      	movs	r3, #8
 800c66a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c66e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c672:	2b00      	cmp	r3, #0
 800c674:	d168      	bne.n	800c748 <f_open+0x1d0>
 800c676:	79fb      	ldrb	r3, [r7, #7]
 800c678:	f003 0308 	and.w	r3, r3, #8
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d063      	beq.n	800c748 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c680:	f7fe f8ae 	bl	800a7e0 <get_fattime>
 800c684:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c688:	330e      	adds	r3, #14
 800c68a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fe fb91 	bl	800adb4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c694:	3316      	adds	r3, #22
 800c696:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c698:	4618      	mov	r0, r3
 800c69a:	f7fe fb8b 	bl	800adb4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6a0:	330b      	adds	r3, #11
 800c6a2:	2220      	movs	r2, #32
 800c6a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7ff fa34 	bl	800bb1a <ld_clust>
 800c6b2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7ff fa4c 	bl	800bb58 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c6c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6c2:	331c      	adds	r3, #28
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7fe fb74 	bl	800adb4 <st_dword>
					fs->wflag = 1;
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c6d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d037      	beq.n	800c748 <f_open+0x1d0>
						dw = fs->winsect;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6dc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c6de:	f107 0314 	add.w	r3, r7, #20
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fe ff5f 	bl	800b5aa <remove_chain>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c6f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d126      	bne.n	800c748 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe fd76 	bl	800b1f0 <move_window>
 800c704:	4603      	mov	r3, r0
 800c706:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c70e:	3a01      	subs	r2, #1
 800c710:	60da      	str	r2, [r3, #12]
 800c712:	e019      	b.n	800c748 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c714:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d115      	bne.n	800c748 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c71c:	7ebb      	ldrb	r3, [r7, #26]
 800c71e:	f003 0310 	and.w	r3, r3, #16
 800c722:	2b00      	cmp	r3, #0
 800c724:	d003      	beq.n	800c72e <f_open+0x1b6>
					res = FR_NO_FILE;
 800c726:	2304      	movs	r3, #4
 800c728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c72c:	e00c      	b.n	800c748 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	f003 0302 	and.w	r3, r3, #2
 800c734:	2b00      	cmp	r3, #0
 800c736:	d007      	beq.n	800c748 <f_open+0x1d0>
 800c738:	7ebb      	ldrb	r3, [r7, #26]
 800c73a:	f003 0301 	and.w	r3, r3, #1
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d002      	beq.n	800c748 <f_open+0x1d0>
						res = FR_DENIED;
 800c742:	2307      	movs	r3, #7
 800c744:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c748:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d126      	bne.n	800c79e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c750:	79fb      	ldrb	r3, [r7, #7]
 800c752:	f003 0308 	and.w	r3, r3, #8
 800c756:	2b00      	cmp	r3, #0
 800c758:	d003      	beq.n	800c762 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c75a:	79fb      	ldrb	r3, [r7, #7]
 800c75c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c760:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c76a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c770:	79fb      	ldrb	r3, [r7, #7]
 800c772:	2b01      	cmp	r3, #1
 800c774:	bf8c      	ite	hi
 800c776:	2301      	movhi	r3, #1
 800c778:	2300      	movls	r3, #0
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	461a      	mov	r2, r3
 800c77e:	f107 0314 	add.w	r3, r7, #20
 800c782:	4611      	mov	r1, r2
 800c784:	4618      	mov	r0, r3
 800c786:	f7fe fc3d 	bl	800b004 <inc_lock>
 800c78a:	4602      	mov	r2, r0
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d102      	bne.n	800c79e <f_open+0x226>
 800c798:	2302      	movs	r3, #2
 800c79a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c79e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	f040 8095 	bne.w	800c8d2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7ff f9b3 	bl	800bb1a <ld_clust>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7bc:	331c      	adds	r3, #28
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7fe faba 	bl	800ad38 <ld_dword>
 800c7c4:	4602      	mov	r2, r0
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c7d0:	693a      	ldr	r2, [r7, #16]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	88da      	ldrh	r2, [r3, #6]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	79fa      	ldrb	r2, [r7, #7]
 800c7e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	3330      	adds	r3, #48	@ 0x30
 800c7fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7fe:	2100      	movs	r1, #0
 800c800:	4618      	mov	r0, r3
 800c802:	f7fe fb24 	bl	800ae4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c806:	79fb      	ldrb	r3, [r7, #7]
 800c808:	f003 0320 	and.w	r3, r3, #32
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d060      	beq.n	800c8d2 <f_open+0x35a>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d05c      	beq.n	800c8d2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	68da      	ldr	r2, [r3, #12]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	895b      	ldrh	r3, [r3, #10]
 800c824:	025b      	lsls	r3, r3, #9
 800c826:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	657b      	str	r3, [r7, #84]	@ 0x54
 800c834:	e016      	b.n	800c864 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe fd24 	bl	800b288 <get_fat>
 800c840:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c842:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c844:	2b01      	cmp	r3, #1
 800c846:	d802      	bhi.n	800c84e <f_open+0x2d6>
 800c848:	2302      	movs	r3, #2
 800c84a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c84e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c850:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c854:	d102      	bne.n	800c85c <f_open+0x2e4>
 800c856:	2301      	movs	r3, #1
 800c858:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c85c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c85e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	657b      	str	r3, [r7, #84]	@ 0x54
 800c864:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d103      	bne.n	800c874 <f_open+0x2fc>
 800c86c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c86e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c870:	429a      	cmp	r2, r3
 800c872:	d8e0      	bhi.n	800c836 <f_open+0x2be>
				}
				fp->clust = clst;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c878:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c87a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d127      	bne.n	800c8d2 <f_open+0x35a>
 800c882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d022      	beq.n	800c8d2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c890:	4618      	mov	r0, r3
 800c892:	f7fe fcda 	bl	800b24a <clust2sect>
 800c896:	6478      	str	r0, [r7, #68]	@ 0x44
 800c898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d103      	bne.n	800c8a6 <f_open+0x32e>
						res = FR_INT_ERR;
 800c89e:	2302      	movs	r3, #2
 800c8a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c8a4:	e015      	b.n	800c8d2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c8a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8a8:	0a5a      	lsrs	r2, r3, #9
 800c8aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8ac:	441a      	add	r2, r3
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	7858      	ldrb	r0, [r3, #1]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6a1a      	ldr	r2, [r3, #32]
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	f7fe f9e1 	bl	800ac88 <disk_read>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <f_open+0x35a>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c8d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <f_open+0x368>
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c8e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3760      	adds	r7, #96	@ 0x60
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08c      	sub	sp, #48	@ 0x30
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2200      	movs	r2, #0
 800c902:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f107 0210 	add.w	r2, r7, #16
 800c90a:	4611      	mov	r1, r2
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7ff fdb7 	bl	800c480 <validate>
 800c912:	4603      	mov	r3, r0
 800c914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c918:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d107      	bne.n	800c930 <f_write+0x44>
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	7d5b      	ldrb	r3, [r3, #21]
 800c924:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c928:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d002      	beq.n	800c936 <f_write+0x4a>
 800c930:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c934:	e14b      	b.n	800cbce <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	7d1b      	ldrb	r3, [r3, #20]
 800c93a:	f003 0302 	and.w	r3, r3, #2
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d101      	bne.n	800c946 <f_write+0x5a>
 800c942:	2307      	movs	r3, #7
 800c944:	e143      	b.n	800cbce <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	699a      	ldr	r2, [r3, #24]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	441a      	add	r2, r3
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	699b      	ldr	r3, [r3, #24]
 800c952:	429a      	cmp	r2, r3
 800c954:	f080 812d 	bcs.w	800cbb2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	43db      	mvns	r3, r3
 800c95e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c960:	e127      	b.n	800cbb2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	699b      	ldr	r3, [r3, #24]
 800c966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f040 80e3 	bne.w	800cb36 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	699b      	ldr	r3, [r3, #24]
 800c974:	0a5b      	lsrs	r3, r3, #9
 800c976:	693a      	ldr	r2, [r7, #16]
 800c978:	8952      	ldrh	r2, [r2, #10]
 800c97a:	3a01      	subs	r2, #1
 800c97c:	4013      	ands	r3, r2
 800c97e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d143      	bne.n	800ca0e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10c      	bne.n	800c9a8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c996:	2b00      	cmp	r3, #0
 800c998:	d11a      	bne.n	800c9d0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2100      	movs	r1, #0
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fe fe68 	bl	800b674 <create_chain>
 800c9a4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c9a6:	e013      	b.n	800c9d0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d007      	beq.n	800c9c0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f7fe fef4 	bl	800b7a4 <clmt_clust>
 800c9bc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c9be:	e007      	b.n	800c9d0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	69db      	ldr	r3, [r3, #28]
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	f7fe fe53 	bl	800b674 <create_chain>
 800c9ce:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f000 80f2 	beq.w	800cbbc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d104      	bne.n	800c9e8 <f_write+0xfc>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2202      	movs	r2, #2
 800c9e2:	755a      	strb	r2, [r3, #21]
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	e0f2      	b.n	800cbce <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9ee:	d104      	bne.n	800c9fa <f_write+0x10e>
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	755a      	strb	r2, [r3, #21]
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	e0e9      	b.n	800cbce <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9fe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <f_write+0x122>
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca0c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	7d1b      	ldrb	r3, [r3, #20]
 800ca12:	b25b      	sxtb	r3, r3
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	da18      	bge.n	800ca4a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	7858      	ldrb	r0, [r3, #1]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6a1a      	ldr	r2, [r3, #32]
 800ca26:	2301      	movs	r3, #1
 800ca28:	f7fe f94e 	bl	800acc8 <disk_write>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d004      	beq.n	800ca3c <f_write+0x150>
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2201      	movs	r2, #1
 800ca36:	755a      	strb	r2, [r3, #21]
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e0c8      	b.n	800cbce <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	7d1b      	ldrb	r3, [r3, #20]
 800ca40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	69db      	ldr	r3, [r3, #28]
 800ca50:	4619      	mov	r1, r3
 800ca52:	4610      	mov	r0, r2
 800ca54:	f7fe fbf9 	bl	800b24a <clust2sect>
 800ca58:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d104      	bne.n	800ca6a <f_write+0x17e>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2202      	movs	r2, #2
 800ca64:	755a      	strb	r2, [r3, #21]
 800ca66:	2302      	movs	r3, #2
 800ca68:	e0b1      	b.n	800cbce <f_write+0x2e2>
			sect += csect;
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	4413      	add	r3, r2
 800ca70:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	0a5b      	lsrs	r3, r3, #9
 800ca76:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ca78:	6a3b      	ldr	r3, [r7, #32]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d03c      	beq.n	800caf8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ca7e:	69ba      	ldr	r2, [r7, #24]
 800ca80:	6a3b      	ldr	r3, [r7, #32]
 800ca82:	4413      	add	r3, r2
 800ca84:	693a      	ldr	r2, [r7, #16]
 800ca86:	8952      	ldrh	r2, [r2, #10]
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d905      	bls.n	800ca98 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	895b      	ldrh	r3, [r3, #10]
 800ca90:	461a      	mov	r2, r3
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	1ad3      	subs	r3, r2, r3
 800ca96:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	7858      	ldrb	r0, [r3, #1]
 800ca9c:	6a3b      	ldr	r3, [r7, #32]
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	69f9      	ldr	r1, [r7, #28]
 800caa2:	f7fe f911 	bl	800acc8 <disk_write>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d004      	beq.n	800cab6 <f_write+0x1ca>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2201      	movs	r2, #1
 800cab0:	755a      	strb	r2, [r3, #21]
 800cab2:	2301      	movs	r3, #1
 800cab4:	e08b      	b.n	800cbce <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6a1a      	ldr	r2, [r3, #32]
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	1ad3      	subs	r3, r2, r3
 800cabe:	6a3a      	ldr	r2, [r7, #32]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d915      	bls.n	800caf0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6a1a      	ldr	r2, [r3, #32]
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	025b      	lsls	r3, r3, #9
 800cad4:	69fa      	ldr	r2, [r7, #28]
 800cad6:	4413      	add	r3, r2
 800cad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cadc:	4619      	mov	r1, r3
 800cade:	f7fe f995 	bl	800ae0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	7d1b      	ldrb	r3, [r3, #20]
 800cae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800caea:	b2da      	uxtb	r2, r3
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800caf0:	6a3b      	ldr	r3, [r7, #32]
 800caf2:	025b      	lsls	r3, r3, #9
 800caf4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800caf6:	e03f      	b.n	800cb78 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6a1b      	ldr	r3, [r3, #32]
 800cafc:	697a      	ldr	r2, [r7, #20]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d016      	beq.n	800cb30 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	699a      	ldr	r2, [r3, #24]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d210      	bcs.n	800cb30 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	7858      	ldrb	r0, [r3, #1]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb18:	2301      	movs	r3, #1
 800cb1a:	697a      	ldr	r2, [r7, #20]
 800cb1c:	f7fe f8b4 	bl	800ac88 <disk_read>
 800cb20:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d004      	beq.n	800cb30 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	755a      	strb	r2, [r3, #21]
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e04e      	b.n	800cbce <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	699b      	ldr	r3, [r3, #24]
 800cb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb3e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cb42:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cb44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d901      	bls.n	800cb50 <f_write+0x264>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	699b      	ldr	r3, [r3, #24]
 800cb5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb5e:	4413      	add	r3, r2
 800cb60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb62:	69f9      	ldr	r1, [r7, #28]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7fe f951 	bl	800ae0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	7d1b      	ldrb	r3, [r3, #20]
 800cb6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cb78:	69fa      	ldr	r2, [r7, #28]
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7c:	4413      	add	r3, r2
 800cb7e:	61fb      	str	r3, [r7, #28]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	699a      	ldr	r2, [r3, #24]
 800cb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb86:	441a      	add	r2, r3
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	619a      	str	r2, [r3, #24]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	68da      	ldr	r2, [r3, #12]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	bf38      	it	cc
 800cb98:	461a      	movcc	r2, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	60da      	str	r2, [r3, #12]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba4:	441a      	add	r2, r3
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	601a      	str	r2, [r3, #0]
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	f47f aed4 	bne.w	800c962 <f_write+0x76>
 800cbba:	e000      	b.n	800cbbe <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cbbc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	7d1b      	ldrb	r3, [r3, #20]
 800cbc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3730      	adds	r7, #48	@ 0x30
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b087      	sub	sp, #28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cbea:	2300      	movs	r3, #0
 800cbec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cbee:	4b1f      	ldr	r3, [pc, #124]	@ (800cc6c <FATFS_LinkDriverEx+0x94>)
 800cbf0:	7a5b      	ldrb	r3, [r3, #9]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d131      	bne.n	800cc5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cbf8:	4b1c      	ldr	r3, [pc, #112]	@ (800cc6c <FATFS_LinkDriverEx+0x94>)
 800cbfa:	7a5b      	ldrb	r3, [r3, #9]
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	461a      	mov	r2, r3
 800cc00:	4b1a      	ldr	r3, [pc, #104]	@ (800cc6c <FATFS_LinkDriverEx+0x94>)
 800cc02:	2100      	movs	r1, #0
 800cc04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc06:	4b19      	ldr	r3, [pc, #100]	@ (800cc6c <FATFS_LinkDriverEx+0x94>)
 800cc08:	7a5b      	ldrb	r3, [r3, #9]
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	4a17      	ldr	r2, [pc, #92]	@ (800cc6c <FATFS_LinkDriverEx+0x94>)
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4413      	add	r3, r2
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc16:	4b15      	ldr	r3, [pc, #84]	@ (800cc6c <FATFS_LinkDriverEx+0x94>)
 800cc18:	7a5b      	ldrb	r3, [r3, #9]
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	4b13      	ldr	r3, [pc, #76]	@ (800cc6c <FATFS_LinkDriverEx+0x94>)
 800cc20:	4413      	add	r3, r2
 800cc22:	79fa      	ldrb	r2, [r7, #7]
 800cc24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc26:	4b11      	ldr	r3, [pc, #68]	@ (800cc6c <FATFS_LinkDriverEx+0x94>)
 800cc28:	7a5b      	ldrb	r3, [r3, #9]
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	1c5a      	adds	r2, r3, #1
 800cc2e:	b2d1      	uxtb	r1, r2
 800cc30:	4a0e      	ldr	r2, [pc, #56]	@ (800cc6c <FATFS_LinkDriverEx+0x94>)
 800cc32:	7251      	strb	r1, [r2, #9]
 800cc34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc36:	7dbb      	ldrb	r3, [r7, #22]
 800cc38:	3330      	adds	r3, #48	@ 0x30
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	3301      	adds	r3, #1
 800cc44:	223a      	movs	r2, #58	@ 0x3a
 800cc46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	3302      	adds	r3, #2
 800cc4c:	222f      	movs	r2, #47	@ 0x2f
 800cc4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	3303      	adds	r3, #3
 800cc54:	2200      	movs	r2, #0
 800cc56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	371c      	adds	r7, #28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	24000728 	.word	0x24000728

0800cc70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7ff ffaa 	bl	800cbd8 <FATFS_LinkDriverEx>
 800cc84:	4603      	mov	r3, r0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
	...

0800cc90 <std>:
 800cc90:	2300      	movs	r3, #0
 800cc92:	b510      	push	{r4, lr}
 800cc94:	4604      	mov	r4, r0
 800cc96:	e9c0 3300 	strd	r3, r3, [r0]
 800cc9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc9e:	6083      	str	r3, [r0, #8]
 800cca0:	8181      	strh	r1, [r0, #12]
 800cca2:	6643      	str	r3, [r0, #100]	@ 0x64
 800cca4:	81c2      	strh	r2, [r0, #14]
 800cca6:	6183      	str	r3, [r0, #24]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	2208      	movs	r2, #8
 800ccac:	305c      	adds	r0, #92	@ 0x5c
 800ccae:	f000 f906 	bl	800cebe <memset>
 800ccb2:	4b0d      	ldr	r3, [pc, #52]	@ (800cce8 <std+0x58>)
 800ccb4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ccb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ccec <std+0x5c>)
 800ccb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ccba:	4b0d      	ldr	r3, [pc, #52]	@ (800ccf0 <std+0x60>)
 800ccbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ccbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ccf4 <std+0x64>)
 800ccc0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ccc2:	4b0d      	ldr	r3, [pc, #52]	@ (800ccf8 <std+0x68>)
 800ccc4:	6224      	str	r4, [r4, #32]
 800ccc6:	429c      	cmp	r4, r3
 800ccc8:	d006      	beq.n	800ccd8 <std+0x48>
 800ccca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ccce:	4294      	cmp	r4, r2
 800ccd0:	d002      	beq.n	800ccd8 <std+0x48>
 800ccd2:	33d0      	adds	r3, #208	@ 0xd0
 800ccd4:	429c      	cmp	r4, r3
 800ccd6:	d105      	bne.n	800cce4 <std+0x54>
 800ccd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ccdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cce0:	f000 b966 	b.w	800cfb0 <__retarget_lock_init_recursive>
 800cce4:	bd10      	pop	{r4, pc}
 800cce6:	bf00      	nop
 800cce8:	0800ce39 	.word	0x0800ce39
 800ccec:	0800ce5b 	.word	0x0800ce5b
 800ccf0:	0800ce93 	.word	0x0800ce93
 800ccf4:	0800ceb7 	.word	0x0800ceb7
 800ccf8:	24000734 	.word	0x24000734

0800ccfc <stdio_exit_handler>:
 800ccfc:	4a02      	ldr	r2, [pc, #8]	@ (800cd08 <stdio_exit_handler+0xc>)
 800ccfe:	4903      	ldr	r1, [pc, #12]	@ (800cd0c <stdio_exit_handler+0x10>)
 800cd00:	4803      	ldr	r0, [pc, #12]	@ (800cd10 <stdio_exit_handler+0x14>)
 800cd02:	f000 b869 	b.w	800cdd8 <_fwalk_sglue>
 800cd06:	bf00      	nop
 800cd08:	2400001c 	.word	0x2400001c
 800cd0c:	0800d851 	.word	0x0800d851
 800cd10:	2400002c 	.word	0x2400002c

0800cd14 <cleanup_stdio>:
 800cd14:	6841      	ldr	r1, [r0, #4]
 800cd16:	4b0c      	ldr	r3, [pc, #48]	@ (800cd48 <cleanup_stdio+0x34>)
 800cd18:	4299      	cmp	r1, r3
 800cd1a:	b510      	push	{r4, lr}
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	d001      	beq.n	800cd24 <cleanup_stdio+0x10>
 800cd20:	f000 fd96 	bl	800d850 <_fflush_r>
 800cd24:	68a1      	ldr	r1, [r4, #8]
 800cd26:	4b09      	ldr	r3, [pc, #36]	@ (800cd4c <cleanup_stdio+0x38>)
 800cd28:	4299      	cmp	r1, r3
 800cd2a:	d002      	beq.n	800cd32 <cleanup_stdio+0x1e>
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	f000 fd8f 	bl	800d850 <_fflush_r>
 800cd32:	68e1      	ldr	r1, [r4, #12]
 800cd34:	4b06      	ldr	r3, [pc, #24]	@ (800cd50 <cleanup_stdio+0x3c>)
 800cd36:	4299      	cmp	r1, r3
 800cd38:	d004      	beq.n	800cd44 <cleanup_stdio+0x30>
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd40:	f000 bd86 	b.w	800d850 <_fflush_r>
 800cd44:	bd10      	pop	{r4, pc}
 800cd46:	bf00      	nop
 800cd48:	24000734 	.word	0x24000734
 800cd4c:	2400079c 	.word	0x2400079c
 800cd50:	24000804 	.word	0x24000804

0800cd54 <global_stdio_init.part.0>:
 800cd54:	b510      	push	{r4, lr}
 800cd56:	4b0b      	ldr	r3, [pc, #44]	@ (800cd84 <global_stdio_init.part.0+0x30>)
 800cd58:	4c0b      	ldr	r4, [pc, #44]	@ (800cd88 <global_stdio_init.part.0+0x34>)
 800cd5a:	4a0c      	ldr	r2, [pc, #48]	@ (800cd8c <global_stdio_init.part.0+0x38>)
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	4620      	mov	r0, r4
 800cd60:	2200      	movs	r2, #0
 800cd62:	2104      	movs	r1, #4
 800cd64:	f7ff ff94 	bl	800cc90 <std>
 800cd68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	2109      	movs	r1, #9
 800cd70:	f7ff ff8e 	bl	800cc90 <std>
 800cd74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd78:	2202      	movs	r2, #2
 800cd7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd7e:	2112      	movs	r1, #18
 800cd80:	f7ff bf86 	b.w	800cc90 <std>
 800cd84:	2400086c 	.word	0x2400086c
 800cd88:	24000734 	.word	0x24000734
 800cd8c:	0800ccfd 	.word	0x0800ccfd

0800cd90 <__sfp_lock_acquire>:
 800cd90:	4801      	ldr	r0, [pc, #4]	@ (800cd98 <__sfp_lock_acquire+0x8>)
 800cd92:	f000 b90e 	b.w	800cfb2 <__retarget_lock_acquire_recursive>
 800cd96:	bf00      	nop
 800cd98:	24000875 	.word	0x24000875

0800cd9c <__sfp_lock_release>:
 800cd9c:	4801      	ldr	r0, [pc, #4]	@ (800cda4 <__sfp_lock_release+0x8>)
 800cd9e:	f000 b909 	b.w	800cfb4 <__retarget_lock_release_recursive>
 800cda2:	bf00      	nop
 800cda4:	24000875 	.word	0x24000875

0800cda8 <__sinit>:
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	4604      	mov	r4, r0
 800cdac:	f7ff fff0 	bl	800cd90 <__sfp_lock_acquire>
 800cdb0:	6a23      	ldr	r3, [r4, #32]
 800cdb2:	b11b      	cbz	r3, 800cdbc <__sinit+0x14>
 800cdb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdb8:	f7ff bff0 	b.w	800cd9c <__sfp_lock_release>
 800cdbc:	4b04      	ldr	r3, [pc, #16]	@ (800cdd0 <__sinit+0x28>)
 800cdbe:	6223      	str	r3, [r4, #32]
 800cdc0:	4b04      	ldr	r3, [pc, #16]	@ (800cdd4 <__sinit+0x2c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1f5      	bne.n	800cdb4 <__sinit+0xc>
 800cdc8:	f7ff ffc4 	bl	800cd54 <global_stdio_init.part.0>
 800cdcc:	e7f2      	b.n	800cdb4 <__sinit+0xc>
 800cdce:	bf00      	nop
 800cdd0:	0800cd15 	.word	0x0800cd15
 800cdd4:	2400086c 	.word	0x2400086c

0800cdd8 <_fwalk_sglue>:
 800cdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cddc:	4607      	mov	r7, r0
 800cdde:	4688      	mov	r8, r1
 800cde0:	4614      	mov	r4, r2
 800cde2:	2600      	movs	r6, #0
 800cde4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cde8:	f1b9 0901 	subs.w	r9, r9, #1
 800cdec:	d505      	bpl.n	800cdfa <_fwalk_sglue+0x22>
 800cdee:	6824      	ldr	r4, [r4, #0]
 800cdf0:	2c00      	cmp	r4, #0
 800cdf2:	d1f7      	bne.n	800cde4 <_fwalk_sglue+0xc>
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdfa:	89ab      	ldrh	r3, [r5, #12]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d907      	bls.n	800ce10 <_fwalk_sglue+0x38>
 800ce00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce04:	3301      	adds	r3, #1
 800ce06:	d003      	beq.n	800ce10 <_fwalk_sglue+0x38>
 800ce08:	4629      	mov	r1, r5
 800ce0a:	4638      	mov	r0, r7
 800ce0c:	47c0      	blx	r8
 800ce0e:	4306      	orrs	r6, r0
 800ce10:	3568      	adds	r5, #104	@ 0x68
 800ce12:	e7e9      	b.n	800cde8 <_fwalk_sglue+0x10>

0800ce14 <iprintf>:
 800ce14:	b40f      	push	{r0, r1, r2, r3}
 800ce16:	b507      	push	{r0, r1, r2, lr}
 800ce18:	4906      	ldr	r1, [pc, #24]	@ (800ce34 <iprintf+0x20>)
 800ce1a:	ab04      	add	r3, sp, #16
 800ce1c:	6808      	ldr	r0, [r1, #0]
 800ce1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce22:	6881      	ldr	r1, [r0, #8]
 800ce24:	9301      	str	r3, [sp, #4]
 800ce26:	f000 f9e9 	bl	800d1fc <_vfiprintf_r>
 800ce2a:	b003      	add	sp, #12
 800ce2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce30:	b004      	add	sp, #16
 800ce32:	4770      	bx	lr
 800ce34:	24000028 	.word	0x24000028

0800ce38 <__sread>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce40:	f000 f868 	bl	800cf14 <_read_r>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	bfab      	itete	ge
 800ce48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce4c:	181b      	addge	r3, r3, r0
 800ce4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce52:	bfac      	ite	ge
 800ce54:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce56:	81a3      	strhlt	r3, [r4, #12]
 800ce58:	bd10      	pop	{r4, pc}

0800ce5a <__swrite>:
 800ce5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5e:	461f      	mov	r7, r3
 800ce60:	898b      	ldrh	r3, [r1, #12]
 800ce62:	05db      	lsls	r3, r3, #23
 800ce64:	4605      	mov	r5, r0
 800ce66:	460c      	mov	r4, r1
 800ce68:	4616      	mov	r6, r2
 800ce6a:	d505      	bpl.n	800ce78 <__swrite+0x1e>
 800ce6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce70:	2302      	movs	r3, #2
 800ce72:	2200      	movs	r2, #0
 800ce74:	f000 f83c 	bl	800cef0 <_lseek_r>
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ce82:	81a3      	strh	r3, [r4, #12]
 800ce84:	4632      	mov	r2, r6
 800ce86:	463b      	mov	r3, r7
 800ce88:	4628      	mov	r0, r5
 800ce8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce8e:	f000 b853 	b.w	800cf38 <_write_r>

0800ce92 <__sseek>:
 800ce92:	b510      	push	{r4, lr}
 800ce94:	460c      	mov	r4, r1
 800ce96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce9a:	f000 f829 	bl	800cef0 <_lseek_r>
 800ce9e:	1c43      	adds	r3, r0, #1
 800cea0:	89a3      	ldrh	r3, [r4, #12]
 800cea2:	bf15      	itete	ne
 800cea4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cea6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ceaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ceae:	81a3      	strheq	r3, [r4, #12]
 800ceb0:	bf18      	it	ne
 800ceb2:	81a3      	strhne	r3, [r4, #12]
 800ceb4:	bd10      	pop	{r4, pc}

0800ceb6 <__sclose>:
 800ceb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceba:	f000 b809 	b.w	800ced0 <_close_r>

0800cebe <memset>:
 800cebe:	4402      	add	r2, r0
 800cec0:	4603      	mov	r3, r0
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d100      	bne.n	800cec8 <memset+0xa>
 800cec6:	4770      	bx	lr
 800cec8:	f803 1b01 	strb.w	r1, [r3], #1
 800cecc:	e7f9      	b.n	800cec2 <memset+0x4>
	...

0800ced0 <_close_r>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	4d06      	ldr	r5, [pc, #24]	@ (800ceec <_close_r+0x1c>)
 800ced4:	2300      	movs	r3, #0
 800ced6:	4604      	mov	r4, r0
 800ced8:	4608      	mov	r0, r1
 800ceda:	602b      	str	r3, [r5, #0]
 800cedc:	f7f4 fadf 	bl	800149e <_close>
 800cee0:	1c43      	adds	r3, r0, #1
 800cee2:	d102      	bne.n	800ceea <_close_r+0x1a>
 800cee4:	682b      	ldr	r3, [r5, #0]
 800cee6:	b103      	cbz	r3, 800ceea <_close_r+0x1a>
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	24000870 	.word	0x24000870

0800cef0 <_lseek_r>:
 800cef0:	b538      	push	{r3, r4, r5, lr}
 800cef2:	4d07      	ldr	r5, [pc, #28]	@ (800cf10 <_lseek_r+0x20>)
 800cef4:	4604      	mov	r4, r0
 800cef6:	4608      	mov	r0, r1
 800cef8:	4611      	mov	r1, r2
 800cefa:	2200      	movs	r2, #0
 800cefc:	602a      	str	r2, [r5, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	f7f4 faf4 	bl	80014ec <_lseek>
 800cf04:	1c43      	adds	r3, r0, #1
 800cf06:	d102      	bne.n	800cf0e <_lseek_r+0x1e>
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	b103      	cbz	r3, 800cf0e <_lseek_r+0x1e>
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	bd38      	pop	{r3, r4, r5, pc}
 800cf10:	24000870 	.word	0x24000870

0800cf14 <_read_r>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4d07      	ldr	r5, [pc, #28]	@ (800cf34 <_read_r+0x20>)
 800cf18:	4604      	mov	r4, r0
 800cf1a:	4608      	mov	r0, r1
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	2200      	movs	r2, #0
 800cf20:	602a      	str	r2, [r5, #0]
 800cf22:	461a      	mov	r2, r3
 800cf24:	f7f4 fa82 	bl	800142c <_read>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	d102      	bne.n	800cf32 <_read_r+0x1e>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	b103      	cbz	r3, 800cf32 <_read_r+0x1e>
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	bd38      	pop	{r3, r4, r5, pc}
 800cf34:	24000870 	.word	0x24000870

0800cf38 <_write_r>:
 800cf38:	b538      	push	{r3, r4, r5, lr}
 800cf3a:	4d07      	ldr	r5, [pc, #28]	@ (800cf58 <_write_r+0x20>)
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	4608      	mov	r0, r1
 800cf40:	4611      	mov	r1, r2
 800cf42:	2200      	movs	r2, #0
 800cf44:	602a      	str	r2, [r5, #0]
 800cf46:	461a      	mov	r2, r3
 800cf48:	f7f4 fa8d 	bl	8001466 <_write>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d102      	bne.n	800cf56 <_write_r+0x1e>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	b103      	cbz	r3, 800cf56 <_write_r+0x1e>
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	24000870 	.word	0x24000870

0800cf5c <__errno>:
 800cf5c:	4b01      	ldr	r3, [pc, #4]	@ (800cf64 <__errno+0x8>)
 800cf5e:	6818      	ldr	r0, [r3, #0]
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	24000028 	.word	0x24000028

0800cf68 <__libc_init_array>:
 800cf68:	b570      	push	{r4, r5, r6, lr}
 800cf6a:	4d0d      	ldr	r5, [pc, #52]	@ (800cfa0 <__libc_init_array+0x38>)
 800cf6c:	4c0d      	ldr	r4, [pc, #52]	@ (800cfa4 <__libc_init_array+0x3c>)
 800cf6e:	1b64      	subs	r4, r4, r5
 800cf70:	10a4      	asrs	r4, r4, #2
 800cf72:	2600      	movs	r6, #0
 800cf74:	42a6      	cmp	r6, r4
 800cf76:	d109      	bne.n	800cf8c <__libc_init_array+0x24>
 800cf78:	4d0b      	ldr	r5, [pc, #44]	@ (800cfa8 <__libc_init_array+0x40>)
 800cf7a:	4c0c      	ldr	r4, [pc, #48]	@ (800cfac <__libc_init_array+0x44>)
 800cf7c:	f000 fdb8 	bl	800daf0 <_init>
 800cf80:	1b64      	subs	r4, r4, r5
 800cf82:	10a4      	asrs	r4, r4, #2
 800cf84:	2600      	movs	r6, #0
 800cf86:	42a6      	cmp	r6, r4
 800cf88:	d105      	bne.n	800cf96 <__libc_init_array+0x2e>
 800cf8a:	bd70      	pop	{r4, r5, r6, pc}
 800cf8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf90:	4798      	blx	r3
 800cf92:	3601      	adds	r6, #1
 800cf94:	e7ee      	b.n	800cf74 <__libc_init_array+0xc>
 800cf96:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf9a:	4798      	blx	r3
 800cf9c:	3601      	adds	r6, #1
 800cf9e:	e7f2      	b.n	800cf86 <__libc_init_array+0x1e>
 800cfa0:	0800dc90 	.word	0x0800dc90
 800cfa4:	0800dc90 	.word	0x0800dc90
 800cfa8:	0800dc90 	.word	0x0800dc90
 800cfac:	0800dc94 	.word	0x0800dc94

0800cfb0 <__retarget_lock_init_recursive>:
 800cfb0:	4770      	bx	lr

0800cfb2 <__retarget_lock_acquire_recursive>:
 800cfb2:	4770      	bx	lr

0800cfb4 <__retarget_lock_release_recursive>:
 800cfb4:	4770      	bx	lr
	...

0800cfb8 <_free_r>:
 800cfb8:	b538      	push	{r3, r4, r5, lr}
 800cfba:	4605      	mov	r5, r0
 800cfbc:	2900      	cmp	r1, #0
 800cfbe:	d041      	beq.n	800d044 <_free_r+0x8c>
 800cfc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfc4:	1f0c      	subs	r4, r1, #4
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	bfb8      	it	lt
 800cfca:	18e4      	addlt	r4, r4, r3
 800cfcc:	f000 f8e0 	bl	800d190 <__malloc_lock>
 800cfd0:	4a1d      	ldr	r2, [pc, #116]	@ (800d048 <_free_r+0x90>)
 800cfd2:	6813      	ldr	r3, [r2, #0]
 800cfd4:	b933      	cbnz	r3, 800cfe4 <_free_r+0x2c>
 800cfd6:	6063      	str	r3, [r4, #4]
 800cfd8:	6014      	str	r4, [r2, #0]
 800cfda:	4628      	mov	r0, r5
 800cfdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfe0:	f000 b8dc 	b.w	800d19c <__malloc_unlock>
 800cfe4:	42a3      	cmp	r3, r4
 800cfe6:	d908      	bls.n	800cffa <_free_r+0x42>
 800cfe8:	6820      	ldr	r0, [r4, #0]
 800cfea:	1821      	adds	r1, r4, r0
 800cfec:	428b      	cmp	r3, r1
 800cfee:	bf01      	itttt	eq
 800cff0:	6819      	ldreq	r1, [r3, #0]
 800cff2:	685b      	ldreq	r3, [r3, #4]
 800cff4:	1809      	addeq	r1, r1, r0
 800cff6:	6021      	streq	r1, [r4, #0]
 800cff8:	e7ed      	b.n	800cfd6 <_free_r+0x1e>
 800cffa:	461a      	mov	r2, r3
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	b10b      	cbz	r3, 800d004 <_free_r+0x4c>
 800d000:	42a3      	cmp	r3, r4
 800d002:	d9fa      	bls.n	800cffa <_free_r+0x42>
 800d004:	6811      	ldr	r1, [r2, #0]
 800d006:	1850      	adds	r0, r2, r1
 800d008:	42a0      	cmp	r0, r4
 800d00a:	d10b      	bne.n	800d024 <_free_r+0x6c>
 800d00c:	6820      	ldr	r0, [r4, #0]
 800d00e:	4401      	add	r1, r0
 800d010:	1850      	adds	r0, r2, r1
 800d012:	4283      	cmp	r3, r0
 800d014:	6011      	str	r1, [r2, #0]
 800d016:	d1e0      	bne.n	800cfda <_free_r+0x22>
 800d018:	6818      	ldr	r0, [r3, #0]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	6053      	str	r3, [r2, #4]
 800d01e:	4408      	add	r0, r1
 800d020:	6010      	str	r0, [r2, #0]
 800d022:	e7da      	b.n	800cfda <_free_r+0x22>
 800d024:	d902      	bls.n	800d02c <_free_r+0x74>
 800d026:	230c      	movs	r3, #12
 800d028:	602b      	str	r3, [r5, #0]
 800d02a:	e7d6      	b.n	800cfda <_free_r+0x22>
 800d02c:	6820      	ldr	r0, [r4, #0]
 800d02e:	1821      	adds	r1, r4, r0
 800d030:	428b      	cmp	r3, r1
 800d032:	bf04      	itt	eq
 800d034:	6819      	ldreq	r1, [r3, #0]
 800d036:	685b      	ldreq	r3, [r3, #4]
 800d038:	6063      	str	r3, [r4, #4]
 800d03a:	bf04      	itt	eq
 800d03c:	1809      	addeq	r1, r1, r0
 800d03e:	6021      	streq	r1, [r4, #0]
 800d040:	6054      	str	r4, [r2, #4]
 800d042:	e7ca      	b.n	800cfda <_free_r+0x22>
 800d044:	bd38      	pop	{r3, r4, r5, pc}
 800d046:	bf00      	nop
 800d048:	2400087c 	.word	0x2400087c

0800d04c <sbrk_aligned>:
 800d04c:	b570      	push	{r4, r5, r6, lr}
 800d04e:	4e0f      	ldr	r6, [pc, #60]	@ (800d08c <sbrk_aligned+0x40>)
 800d050:	460c      	mov	r4, r1
 800d052:	6831      	ldr	r1, [r6, #0]
 800d054:	4605      	mov	r5, r0
 800d056:	b911      	cbnz	r1, 800d05e <sbrk_aligned+0x12>
 800d058:	f000 fcb6 	bl	800d9c8 <_sbrk_r>
 800d05c:	6030      	str	r0, [r6, #0]
 800d05e:	4621      	mov	r1, r4
 800d060:	4628      	mov	r0, r5
 800d062:	f000 fcb1 	bl	800d9c8 <_sbrk_r>
 800d066:	1c43      	adds	r3, r0, #1
 800d068:	d103      	bne.n	800d072 <sbrk_aligned+0x26>
 800d06a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d06e:	4620      	mov	r0, r4
 800d070:	bd70      	pop	{r4, r5, r6, pc}
 800d072:	1cc4      	adds	r4, r0, #3
 800d074:	f024 0403 	bic.w	r4, r4, #3
 800d078:	42a0      	cmp	r0, r4
 800d07a:	d0f8      	beq.n	800d06e <sbrk_aligned+0x22>
 800d07c:	1a21      	subs	r1, r4, r0
 800d07e:	4628      	mov	r0, r5
 800d080:	f000 fca2 	bl	800d9c8 <_sbrk_r>
 800d084:	3001      	adds	r0, #1
 800d086:	d1f2      	bne.n	800d06e <sbrk_aligned+0x22>
 800d088:	e7ef      	b.n	800d06a <sbrk_aligned+0x1e>
 800d08a:	bf00      	nop
 800d08c:	24000878 	.word	0x24000878

0800d090 <_malloc_r>:
 800d090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d094:	1ccd      	adds	r5, r1, #3
 800d096:	f025 0503 	bic.w	r5, r5, #3
 800d09a:	3508      	adds	r5, #8
 800d09c:	2d0c      	cmp	r5, #12
 800d09e:	bf38      	it	cc
 800d0a0:	250c      	movcc	r5, #12
 800d0a2:	2d00      	cmp	r5, #0
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	db01      	blt.n	800d0ac <_malloc_r+0x1c>
 800d0a8:	42a9      	cmp	r1, r5
 800d0aa:	d904      	bls.n	800d0b6 <_malloc_r+0x26>
 800d0ac:	230c      	movs	r3, #12
 800d0ae:	6033      	str	r3, [r6, #0]
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d18c <_malloc_r+0xfc>
 800d0ba:	f000 f869 	bl	800d190 <__malloc_lock>
 800d0be:	f8d8 3000 	ldr.w	r3, [r8]
 800d0c2:	461c      	mov	r4, r3
 800d0c4:	bb44      	cbnz	r4, 800d118 <_malloc_r+0x88>
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	f7ff ffbf 	bl	800d04c <sbrk_aligned>
 800d0ce:	1c43      	adds	r3, r0, #1
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	d158      	bne.n	800d186 <_malloc_r+0xf6>
 800d0d4:	f8d8 4000 	ldr.w	r4, [r8]
 800d0d8:	4627      	mov	r7, r4
 800d0da:	2f00      	cmp	r7, #0
 800d0dc:	d143      	bne.n	800d166 <_malloc_r+0xd6>
 800d0de:	2c00      	cmp	r4, #0
 800d0e0:	d04b      	beq.n	800d17a <_malloc_r+0xea>
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	4639      	mov	r1, r7
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	eb04 0903 	add.w	r9, r4, r3
 800d0ec:	f000 fc6c 	bl	800d9c8 <_sbrk_r>
 800d0f0:	4581      	cmp	r9, r0
 800d0f2:	d142      	bne.n	800d17a <_malloc_r+0xea>
 800d0f4:	6821      	ldr	r1, [r4, #0]
 800d0f6:	1a6d      	subs	r5, r5, r1
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f7ff ffa6 	bl	800d04c <sbrk_aligned>
 800d100:	3001      	adds	r0, #1
 800d102:	d03a      	beq.n	800d17a <_malloc_r+0xea>
 800d104:	6823      	ldr	r3, [r4, #0]
 800d106:	442b      	add	r3, r5
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	f8d8 3000 	ldr.w	r3, [r8]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	bb62      	cbnz	r2, 800d16c <_malloc_r+0xdc>
 800d112:	f8c8 7000 	str.w	r7, [r8]
 800d116:	e00f      	b.n	800d138 <_malloc_r+0xa8>
 800d118:	6822      	ldr	r2, [r4, #0]
 800d11a:	1b52      	subs	r2, r2, r5
 800d11c:	d420      	bmi.n	800d160 <_malloc_r+0xd0>
 800d11e:	2a0b      	cmp	r2, #11
 800d120:	d917      	bls.n	800d152 <_malloc_r+0xc2>
 800d122:	1961      	adds	r1, r4, r5
 800d124:	42a3      	cmp	r3, r4
 800d126:	6025      	str	r5, [r4, #0]
 800d128:	bf18      	it	ne
 800d12a:	6059      	strne	r1, [r3, #4]
 800d12c:	6863      	ldr	r3, [r4, #4]
 800d12e:	bf08      	it	eq
 800d130:	f8c8 1000 	streq.w	r1, [r8]
 800d134:	5162      	str	r2, [r4, r5]
 800d136:	604b      	str	r3, [r1, #4]
 800d138:	4630      	mov	r0, r6
 800d13a:	f000 f82f 	bl	800d19c <__malloc_unlock>
 800d13e:	f104 000b 	add.w	r0, r4, #11
 800d142:	1d23      	adds	r3, r4, #4
 800d144:	f020 0007 	bic.w	r0, r0, #7
 800d148:	1ac2      	subs	r2, r0, r3
 800d14a:	bf1c      	itt	ne
 800d14c:	1a1b      	subne	r3, r3, r0
 800d14e:	50a3      	strne	r3, [r4, r2]
 800d150:	e7af      	b.n	800d0b2 <_malloc_r+0x22>
 800d152:	6862      	ldr	r2, [r4, #4]
 800d154:	42a3      	cmp	r3, r4
 800d156:	bf0c      	ite	eq
 800d158:	f8c8 2000 	streq.w	r2, [r8]
 800d15c:	605a      	strne	r2, [r3, #4]
 800d15e:	e7eb      	b.n	800d138 <_malloc_r+0xa8>
 800d160:	4623      	mov	r3, r4
 800d162:	6864      	ldr	r4, [r4, #4]
 800d164:	e7ae      	b.n	800d0c4 <_malloc_r+0x34>
 800d166:	463c      	mov	r4, r7
 800d168:	687f      	ldr	r7, [r7, #4]
 800d16a:	e7b6      	b.n	800d0da <_malloc_r+0x4a>
 800d16c:	461a      	mov	r2, r3
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	42a3      	cmp	r3, r4
 800d172:	d1fb      	bne.n	800d16c <_malloc_r+0xdc>
 800d174:	2300      	movs	r3, #0
 800d176:	6053      	str	r3, [r2, #4]
 800d178:	e7de      	b.n	800d138 <_malloc_r+0xa8>
 800d17a:	230c      	movs	r3, #12
 800d17c:	6033      	str	r3, [r6, #0]
 800d17e:	4630      	mov	r0, r6
 800d180:	f000 f80c 	bl	800d19c <__malloc_unlock>
 800d184:	e794      	b.n	800d0b0 <_malloc_r+0x20>
 800d186:	6005      	str	r5, [r0, #0]
 800d188:	e7d6      	b.n	800d138 <_malloc_r+0xa8>
 800d18a:	bf00      	nop
 800d18c:	2400087c 	.word	0x2400087c

0800d190 <__malloc_lock>:
 800d190:	4801      	ldr	r0, [pc, #4]	@ (800d198 <__malloc_lock+0x8>)
 800d192:	f7ff bf0e 	b.w	800cfb2 <__retarget_lock_acquire_recursive>
 800d196:	bf00      	nop
 800d198:	24000874 	.word	0x24000874

0800d19c <__malloc_unlock>:
 800d19c:	4801      	ldr	r0, [pc, #4]	@ (800d1a4 <__malloc_unlock+0x8>)
 800d19e:	f7ff bf09 	b.w	800cfb4 <__retarget_lock_release_recursive>
 800d1a2:	bf00      	nop
 800d1a4:	24000874 	.word	0x24000874

0800d1a8 <__sfputc_r>:
 800d1a8:	6893      	ldr	r3, [r2, #8]
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	b410      	push	{r4}
 800d1b0:	6093      	str	r3, [r2, #8]
 800d1b2:	da08      	bge.n	800d1c6 <__sfputc_r+0x1e>
 800d1b4:	6994      	ldr	r4, [r2, #24]
 800d1b6:	42a3      	cmp	r3, r4
 800d1b8:	db01      	blt.n	800d1be <__sfputc_r+0x16>
 800d1ba:	290a      	cmp	r1, #10
 800d1bc:	d103      	bne.n	800d1c6 <__sfputc_r+0x1e>
 800d1be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1c2:	f000 bb6d 	b.w	800d8a0 <__swbuf_r>
 800d1c6:	6813      	ldr	r3, [r2, #0]
 800d1c8:	1c58      	adds	r0, r3, #1
 800d1ca:	6010      	str	r0, [r2, #0]
 800d1cc:	7019      	strb	r1, [r3, #0]
 800d1ce:	4608      	mov	r0, r1
 800d1d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <__sfputs_r>:
 800d1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1d8:	4606      	mov	r6, r0
 800d1da:	460f      	mov	r7, r1
 800d1dc:	4614      	mov	r4, r2
 800d1de:	18d5      	adds	r5, r2, r3
 800d1e0:	42ac      	cmp	r4, r5
 800d1e2:	d101      	bne.n	800d1e8 <__sfputs_r+0x12>
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	e007      	b.n	800d1f8 <__sfputs_r+0x22>
 800d1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ec:	463a      	mov	r2, r7
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f7ff ffda 	bl	800d1a8 <__sfputc_r>
 800d1f4:	1c43      	adds	r3, r0, #1
 800d1f6:	d1f3      	bne.n	800d1e0 <__sfputs_r+0xa>
 800d1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1fc <_vfiprintf_r>:
 800d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d200:	460d      	mov	r5, r1
 800d202:	b09d      	sub	sp, #116	@ 0x74
 800d204:	4614      	mov	r4, r2
 800d206:	4698      	mov	r8, r3
 800d208:	4606      	mov	r6, r0
 800d20a:	b118      	cbz	r0, 800d214 <_vfiprintf_r+0x18>
 800d20c:	6a03      	ldr	r3, [r0, #32]
 800d20e:	b90b      	cbnz	r3, 800d214 <_vfiprintf_r+0x18>
 800d210:	f7ff fdca 	bl	800cda8 <__sinit>
 800d214:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d216:	07d9      	lsls	r1, r3, #31
 800d218:	d405      	bmi.n	800d226 <_vfiprintf_r+0x2a>
 800d21a:	89ab      	ldrh	r3, [r5, #12]
 800d21c:	059a      	lsls	r2, r3, #22
 800d21e:	d402      	bmi.n	800d226 <_vfiprintf_r+0x2a>
 800d220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d222:	f7ff fec6 	bl	800cfb2 <__retarget_lock_acquire_recursive>
 800d226:	89ab      	ldrh	r3, [r5, #12]
 800d228:	071b      	lsls	r3, r3, #28
 800d22a:	d501      	bpl.n	800d230 <_vfiprintf_r+0x34>
 800d22c:	692b      	ldr	r3, [r5, #16]
 800d22e:	b99b      	cbnz	r3, 800d258 <_vfiprintf_r+0x5c>
 800d230:	4629      	mov	r1, r5
 800d232:	4630      	mov	r0, r6
 800d234:	f000 fb72 	bl	800d91c <__swsetup_r>
 800d238:	b170      	cbz	r0, 800d258 <_vfiprintf_r+0x5c>
 800d23a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d23c:	07dc      	lsls	r4, r3, #31
 800d23e:	d504      	bpl.n	800d24a <_vfiprintf_r+0x4e>
 800d240:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d244:	b01d      	add	sp, #116	@ 0x74
 800d246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24a:	89ab      	ldrh	r3, [r5, #12]
 800d24c:	0598      	lsls	r0, r3, #22
 800d24e:	d4f7      	bmi.n	800d240 <_vfiprintf_r+0x44>
 800d250:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d252:	f7ff feaf 	bl	800cfb4 <__retarget_lock_release_recursive>
 800d256:	e7f3      	b.n	800d240 <_vfiprintf_r+0x44>
 800d258:	2300      	movs	r3, #0
 800d25a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d25c:	2320      	movs	r3, #32
 800d25e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d262:	f8cd 800c 	str.w	r8, [sp, #12]
 800d266:	2330      	movs	r3, #48	@ 0x30
 800d268:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d418 <_vfiprintf_r+0x21c>
 800d26c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d270:	f04f 0901 	mov.w	r9, #1
 800d274:	4623      	mov	r3, r4
 800d276:	469a      	mov	sl, r3
 800d278:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d27c:	b10a      	cbz	r2, 800d282 <_vfiprintf_r+0x86>
 800d27e:	2a25      	cmp	r2, #37	@ 0x25
 800d280:	d1f9      	bne.n	800d276 <_vfiprintf_r+0x7a>
 800d282:	ebba 0b04 	subs.w	fp, sl, r4
 800d286:	d00b      	beq.n	800d2a0 <_vfiprintf_r+0xa4>
 800d288:	465b      	mov	r3, fp
 800d28a:	4622      	mov	r2, r4
 800d28c:	4629      	mov	r1, r5
 800d28e:	4630      	mov	r0, r6
 800d290:	f7ff ffa1 	bl	800d1d6 <__sfputs_r>
 800d294:	3001      	adds	r0, #1
 800d296:	f000 80a7 	beq.w	800d3e8 <_vfiprintf_r+0x1ec>
 800d29a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d29c:	445a      	add	r2, fp
 800d29e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	f000 809f 	beq.w	800d3e8 <_vfiprintf_r+0x1ec>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d2b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2b4:	f10a 0a01 	add.w	sl, sl, #1
 800d2b8:	9304      	str	r3, [sp, #16]
 800d2ba:	9307      	str	r3, [sp, #28]
 800d2bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2c2:	4654      	mov	r4, sl
 800d2c4:	2205      	movs	r2, #5
 800d2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ca:	4853      	ldr	r0, [pc, #332]	@ (800d418 <_vfiprintf_r+0x21c>)
 800d2cc:	f7f3 f808 	bl	80002e0 <memchr>
 800d2d0:	9a04      	ldr	r2, [sp, #16]
 800d2d2:	b9d8      	cbnz	r0, 800d30c <_vfiprintf_r+0x110>
 800d2d4:	06d1      	lsls	r1, r2, #27
 800d2d6:	bf44      	itt	mi
 800d2d8:	2320      	movmi	r3, #32
 800d2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2de:	0713      	lsls	r3, r2, #28
 800d2e0:	bf44      	itt	mi
 800d2e2:	232b      	movmi	r3, #43	@ 0x2b
 800d2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2ee:	d015      	beq.n	800d31c <_vfiprintf_r+0x120>
 800d2f0:	9a07      	ldr	r2, [sp, #28]
 800d2f2:	4654      	mov	r4, sl
 800d2f4:	2000      	movs	r0, #0
 800d2f6:	f04f 0c0a 	mov.w	ip, #10
 800d2fa:	4621      	mov	r1, r4
 800d2fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d300:	3b30      	subs	r3, #48	@ 0x30
 800d302:	2b09      	cmp	r3, #9
 800d304:	d94b      	bls.n	800d39e <_vfiprintf_r+0x1a2>
 800d306:	b1b0      	cbz	r0, 800d336 <_vfiprintf_r+0x13a>
 800d308:	9207      	str	r2, [sp, #28]
 800d30a:	e014      	b.n	800d336 <_vfiprintf_r+0x13a>
 800d30c:	eba0 0308 	sub.w	r3, r0, r8
 800d310:	fa09 f303 	lsl.w	r3, r9, r3
 800d314:	4313      	orrs	r3, r2
 800d316:	9304      	str	r3, [sp, #16]
 800d318:	46a2      	mov	sl, r4
 800d31a:	e7d2      	b.n	800d2c2 <_vfiprintf_r+0xc6>
 800d31c:	9b03      	ldr	r3, [sp, #12]
 800d31e:	1d19      	adds	r1, r3, #4
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	9103      	str	r1, [sp, #12]
 800d324:	2b00      	cmp	r3, #0
 800d326:	bfbb      	ittet	lt
 800d328:	425b      	neglt	r3, r3
 800d32a:	f042 0202 	orrlt.w	r2, r2, #2
 800d32e:	9307      	strge	r3, [sp, #28]
 800d330:	9307      	strlt	r3, [sp, #28]
 800d332:	bfb8      	it	lt
 800d334:	9204      	strlt	r2, [sp, #16]
 800d336:	7823      	ldrb	r3, [r4, #0]
 800d338:	2b2e      	cmp	r3, #46	@ 0x2e
 800d33a:	d10a      	bne.n	800d352 <_vfiprintf_r+0x156>
 800d33c:	7863      	ldrb	r3, [r4, #1]
 800d33e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d340:	d132      	bne.n	800d3a8 <_vfiprintf_r+0x1ac>
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	1d1a      	adds	r2, r3, #4
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	9203      	str	r2, [sp, #12]
 800d34a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d34e:	3402      	adds	r4, #2
 800d350:	9305      	str	r3, [sp, #20]
 800d352:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d428 <_vfiprintf_r+0x22c>
 800d356:	7821      	ldrb	r1, [r4, #0]
 800d358:	2203      	movs	r2, #3
 800d35a:	4650      	mov	r0, sl
 800d35c:	f7f2 ffc0 	bl	80002e0 <memchr>
 800d360:	b138      	cbz	r0, 800d372 <_vfiprintf_r+0x176>
 800d362:	9b04      	ldr	r3, [sp, #16]
 800d364:	eba0 000a 	sub.w	r0, r0, sl
 800d368:	2240      	movs	r2, #64	@ 0x40
 800d36a:	4082      	lsls	r2, r0
 800d36c:	4313      	orrs	r3, r2
 800d36e:	3401      	adds	r4, #1
 800d370:	9304      	str	r3, [sp, #16]
 800d372:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d376:	4829      	ldr	r0, [pc, #164]	@ (800d41c <_vfiprintf_r+0x220>)
 800d378:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d37c:	2206      	movs	r2, #6
 800d37e:	f7f2 ffaf 	bl	80002e0 <memchr>
 800d382:	2800      	cmp	r0, #0
 800d384:	d03f      	beq.n	800d406 <_vfiprintf_r+0x20a>
 800d386:	4b26      	ldr	r3, [pc, #152]	@ (800d420 <_vfiprintf_r+0x224>)
 800d388:	bb1b      	cbnz	r3, 800d3d2 <_vfiprintf_r+0x1d6>
 800d38a:	9b03      	ldr	r3, [sp, #12]
 800d38c:	3307      	adds	r3, #7
 800d38e:	f023 0307 	bic.w	r3, r3, #7
 800d392:	3308      	adds	r3, #8
 800d394:	9303      	str	r3, [sp, #12]
 800d396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d398:	443b      	add	r3, r7
 800d39a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d39c:	e76a      	b.n	800d274 <_vfiprintf_r+0x78>
 800d39e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3a2:	460c      	mov	r4, r1
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	e7a8      	b.n	800d2fa <_vfiprintf_r+0xfe>
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	3401      	adds	r4, #1
 800d3ac:	9305      	str	r3, [sp, #20]
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	f04f 0c0a 	mov.w	ip, #10
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3ba:	3a30      	subs	r2, #48	@ 0x30
 800d3bc:	2a09      	cmp	r2, #9
 800d3be:	d903      	bls.n	800d3c8 <_vfiprintf_r+0x1cc>
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d0c6      	beq.n	800d352 <_vfiprintf_r+0x156>
 800d3c4:	9105      	str	r1, [sp, #20]
 800d3c6:	e7c4      	b.n	800d352 <_vfiprintf_r+0x156>
 800d3c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e7f0      	b.n	800d3b4 <_vfiprintf_r+0x1b8>
 800d3d2:	ab03      	add	r3, sp, #12
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	462a      	mov	r2, r5
 800d3d8:	4b12      	ldr	r3, [pc, #72]	@ (800d424 <_vfiprintf_r+0x228>)
 800d3da:	a904      	add	r1, sp, #16
 800d3dc:	4630      	mov	r0, r6
 800d3de:	f3af 8000 	nop.w
 800d3e2:	4607      	mov	r7, r0
 800d3e4:	1c78      	adds	r0, r7, #1
 800d3e6:	d1d6      	bne.n	800d396 <_vfiprintf_r+0x19a>
 800d3e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3ea:	07d9      	lsls	r1, r3, #31
 800d3ec:	d405      	bmi.n	800d3fa <_vfiprintf_r+0x1fe>
 800d3ee:	89ab      	ldrh	r3, [r5, #12]
 800d3f0:	059a      	lsls	r2, r3, #22
 800d3f2:	d402      	bmi.n	800d3fa <_vfiprintf_r+0x1fe>
 800d3f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3f6:	f7ff fddd 	bl	800cfb4 <__retarget_lock_release_recursive>
 800d3fa:	89ab      	ldrh	r3, [r5, #12]
 800d3fc:	065b      	lsls	r3, r3, #25
 800d3fe:	f53f af1f 	bmi.w	800d240 <_vfiprintf_r+0x44>
 800d402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d404:	e71e      	b.n	800d244 <_vfiprintf_r+0x48>
 800d406:	ab03      	add	r3, sp, #12
 800d408:	9300      	str	r3, [sp, #0]
 800d40a:	462a      	mov	r2, r5
 800d40c:	4b05      	ldr	r3, [pc, #20]	@ (800d424 <_vfiprintf_r+0x228>)
 800d40e:	a904      	add	r1, sp, #16
 800d410:	4630      	mov	r0, r6
 800d412:	f000 f879 	bl	800d508 <_printf_i>
 800d416:	e7e4      	b.n	800d3e2 <_vfiprintf_r+0x1e6>
 800d418:	0800dc54 	.word	0x0800dc54
 800d41c:	0800dc5e 	.word	0x0800dc5e
 800d420:	00000000 	.word	0x00000000
 800d424:	0800d1d7 	.word	0x0800d1d7
 800d428:	0800dc5a 	.word	0x0800dc5a

0800d42c <_printf_common>:
 800d42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d430:	4616      	mov	r6, r2
 800d432:	4698      	mov	r8, r3
 800d434:	688a      	ldr	r2, [r1, #8]
 800d436:	690b      	ldr	r3, [r1, #16]
 800d438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d43c:	4293      	cmp	r3, r2
 800d43e:	bfb8      	it	lt
 800d440:	4613      	movlt	r3, r2
 800d442:	6033      	str	r3, [r6, #0]
 800d444:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d448:	4607      	mov	r7, r0
 800d44a:	460c      	mov	r4, r1
 800d44c:	b10a      	cbz	r2, 800d452 <_printf_common+0x26>
 800d44e:	3301      	adds	r3, #1
 800d450:	6033      	str	r3, [r6, #0]
 800d452:	6823      	ldr	r3, [r4, #0]
 800d454:	0699      	lsls	r1, r3, #26
 800d456:	bf42      	ittt	mi
 800d458:	6833      	ldrmi	r3, [r6, #0]
 800d45a:	3302      	addmi	r3, #2
 800d45c:	6033      	strmi	r3, [r6, #0]
 800d45e:	6825      	ldr	r5, [r4, #0]
 800d460:	f015 0506 	ands.w	r5, r5, #6
 800d464:	d106      	bne.n	800d474 <_printf_common+0x48>
 800d466:	f104 0a19 	add.w	sl, r4, #25
 800d46a:	68e3      	ldr	r3, [r4, #12]
 800d46c:	6832      	ldr	r2, [r6, #0]
 800d46e:	1a9b      	subs	r3, r3, r2
 800d470:	42ab      	cmp	r3, r5
 800d472:	dc26      	bgt.n	800d4c2 <_printf_common+0x96>
 800d474:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d478:	6822      	ldr	r2, [r4, #0]
 800d47a:	3b00      	subs	r3, #0
 800d47c:	bf18      	it	ne
 800d47e:	2301      	movne	r3, #1
 800d480:	0692      	lsls	r2, r2, #26
 800d482:	d42b      	bmi.n	800d4dc <_printf_common+0xb0>
 800d484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d488:	4641      	mov	r1, r8
 800d48a:	4638      	mov	r0, r7
 800d48c:	47c8      	blx	r9
 800d48e:	3001      	adds	r0, #1
 800d490:	d01e      	beq.n	800d4d0 <_printf_common+0xa4>
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	6922      	ldr	r2, [r4, #16]
 800d496:	f003 0306 	and.w	r3, r3, #6
 800d49a:	2b04      	cmp	r3, #4
 800d49c:	bf02      	ittt	eq
 800d49e:	68e5      	ldreq	r5, [r4, #12]
 800d4a0:	6833      	ldreq	r3, [r6, #0]
 800d4a2:	1aed      	subeq	r5, r5, r3
 800d4a4:	68a3      	ldr	r3, [r4, #8]
 800d4a6:	bf0c      	ite	eq
 800d4a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4ac:	2500      	movne	r5, #0
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	bfc4      	itt	gt
 800d4b2:	1a9b      	subgt	r3, r3, r2
 800d4b4:	18ed      	addgt	r5, r5, r3
 800d4b6:	2600      	movs	r6, #0
 800d4b8:	341a      	adds	r4, #26
 800d4ba:	42b5      	cmp	r5, r6
 800d4bc:	d11a      	bne.n	800d4f4 <_printf_common+0xc8>
 800d4be:	2000      	movs	r0, #0
 800d4c0:	e008      	b.n	800d4d4 <_printf_common+0xa8>
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	4652      	mov	r2, sl
 800d4c6:	4641      	mov	r1, r8
 800d4c8:	4638      	mov	r0, r7
 800d4ca:	47c8      	blx	r9
 800d4cc:	3001      	adds	r0, #1
 800d4ce:	d103      	bne.n	800d4d8 <_printf_common+0xac>
 800d4d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4d8:	3501      	adds	r5, #1
 800d4da:	e7c6      	b.n	800d46a <_printf_common+0x3e>
 800d4dc:	18e1      	adds	r1, r4, r3
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	2030      	movs	r0, #48	@ 0x30
 800d4e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d4e6:	4422      	add	r2, r4
 800d4e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d4ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d4f0:	3302      	adds	r3, #2
 800d4f2:	e7c7      	b.n	800d484 <_printf_common+0x58>
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	4641      	mov	r1, r8
 800d4fa:	4638      	mov	r0, r7
 800d4fc:	47c8      	blx	r9
 800d4fe:	3001      	adds	r0, #1
 800d500:	d0e6      	beq.n	800d4d0 <_printf_common+0xa4>
 800d502:	3601      	adds	r6, #1
 800d504:	e7d9      	b.n	800d4ba <_printf_common+0x8e>
	...

0800d508 <_printf_i>:
 800d508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d50c:	7e0f      	ldrb	r7, [r1, #24]
 800d50e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d510:	2f78      	cmp	r7, #120	@ 0x78
 800d512:	4691      	mov	r9, r2
 800d514:	4680      	mov	r8, r0
 800d516:	460c      	mov	r4, r1
 800d518:	469a      	mov	sl, r3
 800d51a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d51e:	d807      	bhi.n	800d530 <_printf_i+0x28>
 800d520:	2f62      	cmp	r7, #98	@ 0x62
 800d522:	d80a      	bhi.n	800d53a <_printf_i+0x32>
 800d524:	2f00      	cmp	r7, #0
 800d526:	f000 80d2 	beq.w	800d6ce <_printf_i+0x1c6>
 800d52a:	2f58      	cmp	r7, #88	@ 0x58
 800d52c:	f000 80b9 	beq.w	800d6a2 <_printf_i+0x19a>
 800d530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d534:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d538:	e03a      	b.n	800d5b0 <_printf_i+0xa8>
 800d53a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d53e:	2b15      	cmp	r3, #21
 800d540:	d8f6      	bhi.n	800d530 <_printf_i+0x28>
 800d542:	a101      	add	r1, pc, #4	@ (adr r1, 800d548 <_printf_i+0x40>)
 800d544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d548:	0800d5a1 	.word	0x0800d5a1
 800d54c:	0800d5b5 	.word	0x0800d5b5
 800d550:	0800d531 	.word	0x0800d531
 800d554:	0800d531 	.word	0x0800d531
 800d558:	0800d531 	.word	0x0800d531
 800d55c:	0800d531 	.word	0x0800d531
 800d560:	0800d5b5 	.word	0x0800d5b5
 800d564:	0800d531 	.word	0x0800d531
 800d568:	0800d531 	.word	0x0800d531
 800d56c:	0800d531 	.word	0x0800d531
 800d570:	0800d531 	.word	0x0800d531
 800d574:	0800d6b5 	.word	0x0800d6b5
 800d578:	0800d5df 	.word	0x0800d5df
 800d57c:	0800d66f 	.word	0x0800d66f
 800d580:	0800d531 	.word	0x0800d531
 800d584:	0800d531 	.word	0x0800d531
 800d588:	0800d6d7 	.word	0x0800d6d7
 800d58c:	0800d531 	.word	0x0800d531
 800d590:	0800d5df 	.word	0x0800d5df
 800d594:	0800d531 	.word	0x0800d531
 800d598:	0800d531 	.word	0x0800d531
 800d59c:	0800d677 	.word	0x0800d677
 800d5a0:	6833      	ldr	r3, [r6, #0]
 800d5a2:	1d1a      	adds	r2, r3, #4
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6032      	str	r2, [r6, #0]
 800d5a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e09d      	b.n	800d6f0 <_printf_i+0x1e8>
 800d5b4:	6833      	ldr	r3, [r6, #0]
 800d5b6:	6820      	ldr	r0, [r4, #0]
 800d5b8:	1d19      	adds	r1, r3, #4
 800d5ba:	6031      	str	r1, [r6, #0]
 800d5bc:	0606      	lsls	r6, r0, #24
 800d5be:	d501      	bpl.n	800d5c4 <_printf_i+0xbc>
 800d5c0:	681d      	ldr	r5, [r3, #0]
 800d5c2:	e003      	b.n	800d5cc <_printf_i+0xc4>
 800d5c4:	0645      	lsls	r5, r0, #25
 800d5c6:	d5fb      	bpl.n	800d5c0 <_printf_i+0xb8>
 800d5c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5cc:	2d00      	cmp	r5, #0
 800d5ce:	da03      	bge.n	800d5d8 <_printf_i+0xd0>
 800d5d0:	232d      	movs	r3, #45	@ 0x2d
 800d5d2:	426d      	negs	r5, r5
 800d5d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5d8:	4859      	ldr	r0, [pc, #356]	@ (800d740 <_printf_i+0x238>)
 800d5da:	230a      	movs	r3, #10
 800d5dc:	e011      	b.n	800d602 <_printf_i+0xfa>
 800d5de:	6821      	ldr	r1, [r4, #0]
 800d5e0:	6833      	ldr	r3, [r6, #0]
 800d5e2:	0608      	lsls	r0, r1, #24
 800d5e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d5e8:	d402      	bmi.n	800d5f0 <_printf_i+0xe8>
 800d5ea:	0649      	lsls	r1, r1, #25
 800d5ec:	bf48      	it	mi
 800d5ee:	b2ad      	uxthmi	r5, r5
 800d5f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d5f2:	4853      	ldr	r0, [pc, #332]	@ (800d740 <_printf_i+0x238>)
 800d5f4:	6033      	str	r3, [r6, #0]
 800d5f6:	bf14      	ite	ne
 800d5f8:	230a      	movne	r3, #10
 800d5fa:	2308      	moveq	r3, #8
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d602:	6866      	ldr	r6, [r4, #4]
 800d604:	60a6      	str	r6, [r4, #8]
 800d606:	2e00      	cmp	r6, #0
 800d608:	bfa2      	ittt	ge
 800d60a:	6821      	ldrge	r1, [r4, #0]
 800d60c:	f021 0104 	bicge.w	r1, r1, #4
 800d610:	6021      	strge	r1, [r4, #0]
 800d612:	b90d      	cbnz	r5, 800d618 <_printf_i+0x110>
 800d614:	2e00      	cmp	r6, #0
 800d616:	d04b      	beq.n	800d6b0 <_printf_i+0x1a8>
 800d618:	4616      	mov	r6, r2
 800d61a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d61e:	fb03 5711 	mls	r7, r3, r1, r5
 800d622:	5dc7      	ldrb	r7, [r0, r7]
 800d624:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d628:	462f      	mov	r7, r5
 800d62a:	42bb      	cmp	r3, r7
 800d62c:	460d      	mov	r5, r1
 800d62e:	d9f4      	bls.n	800d61a <_printf_i+0x112>
 800d630:	2b08      	cmp	r3, #8
 800d632:	d10b      	bne.n	800d64c <_printf_i+0x144>
 800d634:	6823      	ldr	r3, [r4, #0]
 800d636:	07df      	lsls	r7, r3, #31
 800d638:	d508      	bpl.n	800d64c <_printf_i+0x144>
 800d63a:	6923      	ldr	r3, [r4, #16]
 800d63c:	6861      	ldr	r1, [r4, #4]
 800d63e:	4299      	cmp	r1, r3
 800d640:	bfde      	ittt	le
 800d642:	2330      	movle	r3, #48	@ 0x30
 800d644:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d648:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d64c:	1b92      	subs	r2, r2, r6
 800d64e:	6122      	str	r2, [r4, #16]
 800d650:	f8cd a000 	str.w	sl, [sp]
 800d654:	464b      	mov	r3, r9
 800d656:	aa03      	add	r2, sp, #12
 800d658:	4621      	mov	r1, r4
 800d65a:	4640      	mov	r0, r8
 800d65c:	f7ff fee6 	bl	800d42c <_printf_common>
 800d660:	3001      	adds	r0, #1
 800d662:	d14a      	bne.n	800d6fa <_printf_i+0x1f2>
 800d664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d668:	b004      	add	sp, #16
 800d66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	f043 0320 	orr.w	r3, r3, #32
 800d674:	6023      	str	r3, [r4, #0]
 800d676:	4833      	ldr	r0, [pc, #204]	@ (800d744 <_printf_i+0x23c>)
 800d678:	2778      	movs	r7, #120	@ 0x78
 800d67a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	6831      	ldr	r1, [r6, #0]
 800d682:	061f      	lsls	r7, r3, #24
 800d684:	f851 5b04 	ldr.w	r5, [r1], #4
 800d688:	d402      	bmi.n	800d690 <_printf_i+0x188>
 800d68a:	065f      	lsls	r7, r3, #25
 800d68c:	bf48      	it	mi
 800d68e:	b2ad      	uxthmi	r5, r5
 800d690:	6031      	str	r1, [r6, #0]
 800d692:	07d9      	lsls	r1, r3, #31
 800d694:	bf44      	itt	mi
 800d696:	f043 0320 	orrmi.w	r3, r3, #32
 800d69a:	6023      	strmi	r3, [r4, #0]
 800d69c:	b11d      	cbz	r5, 800d6a6 <_printf_i+0x19e>
 800d69e:	2310      	movs	r3, #16
 800d6a0:	e7ac      	b.n	800d5fc <_printf_i+0xf4>
 800d6a2:	4827      	ldr	r0, [pc, #156]	@ (800d740 <_printf_i+0x238>)
 800d6a4:	e7e9      	b.n	800d67a <_printf_i+0x172>
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	f023 0320 	bic.w	r3, r3, #32
 800d6ac:	6023      	str	r3, [r4, #0]
 800d6ae:	e7f6      	b.n	800d69e <_printf_i+0x196>
 800d6b0:	4616      	mov	r6, r2
 800d6b2:	e7bd      	b.n	800d630 <_printf_i+0x128>
 800d6b4:	6833      	ldr	r3, [r6, #0]
 800d6b6:	6825      	ldr	r5, [r4, #0]
 800d6b8:	6961      	ldr	r1, [r4, #20]
 800d6ba:	1d18      	adds	r0, r3, #4
 800d6bc:	6030      	str	r0, [r6, #0]
 800d6be:	062e      	lsls	r6, r5, #24
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	d501      	bpl.n	800d6c8 <_printf_i+0x1c0>
 800d6c4:	6019      	str	r1, [r3, #0]
 800d6c6:	e002      	b.n	800d6ce <_printf_i+0x1c6>
 800d6c8:	0668      	lsls	r0, r5, #25
 800d6ca:	d5fb      	bpl.n	800d6c4 <_printf_i+0x1bc>
 800d6cc:	8019      	strh	r1, [r3, #0]
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	6123      	str	r3, [r4, #16]
 800d6d2:	4616      	mov	r6, r2
 800d6d4:	e7bc      	b.n	800d650 <_printf_i+0x148>
 800d6d6:	6833      	ldr	r3, [r6, #0]
 800d6d8:	1d1a      	adds	r2, r3, #4
 800d6da:	6032      	str	r2, [r6, #0]
 800d6dc:	681e      	ldr	r6, [r3, #0]
 800d6de:	6862      	ldr	r2, [r4, #4]
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f7f2 fdfc 	bl	80002e0 <memchr>
 800d6e8:	b108      	cbz	r0, 800d6ee <_printf_i+0x1e6>
 800d6ea:	1b80      	subs	r0, r0, r6
 800d6ec:	6060      	str	r0, [r4, #4]
 800d6ee:	6863      	ldr	r3, [r4, #4]
 800d6f0:	6123      	str	r3, [r4, #16]
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6f8:	e7aa      	b.n	800d650 <_printf_i+0x148>
 800d6fa:	6923      	ldr	r3, [r4, #16]
 800d6fc:	4632      	mov	r2, r6
 800d6fe:	4649      	mov	r1, r9
 800d700:	4640      	mov	r0, r8
 800d702:	47d0      	blx	sl
 800d704:	3001      	adds	r0, #1
 800d706:	d0ad      	beq.n	800d664 <_printf_i+0x15c>
 800d708:	6823      	ldr	r3, [r4, #0]
 800d70a:	079b      	lsls	r3, r3, #30
 800d70c:	d413      	bmi.n	800d736 <_printf_i+0x22e>
 800d70e:	68e0      	ldr	r0, [r4, #12]
 800d710:	9b03      	ldr	r3, [sp, #12]
 800d712:	4298      	cmp	r0, r3
 800d714:	bfb8      	it	lt
 800d716:	4618      	movlt	r0, r3
 800d718:	e7a6      	b.n	800d668 <_printf_i+0x160>
 800d71a:	2301      	movs	r3, #1
 800d71c:	4632      	mov	r2, r6
 800d71e:	4649      	mov	r1, r9
 800d720:	4640      	mov	r0, r8
 800d722:	47d0      	blx	sl
 800d724:	3001      	adds	r0, #1
 800d726:	d09d      	beq.n	800d664 <_printf_i+0x15c>
 800d728:	3501      	adds	r5, #1
 800d72a:	68e3      	ldr	r3, [r4, #12]
 800d72c:	9903      	ldr	r1, [sp, #12]
 800d72e:	1a5b      	subs	r3, r3, r1
 800d730:	42ab      	cmp	r3, r5
 800d732:	dcf2      	bgt.n	800d71a <_printf_i+0x212>
 800d734:	e7eb      	b.n	800d70e <_printf_i+0x206>
 800d736:	2500      	movs	r5, #0
 800d738:	f104 0619 	add.w	r6, r4, #25
 800d73c:	e7f5      	b.n	800d72a <_printf_i+0x222>
 800d73e:	bf00      	nop
 800d740:	0800dc65 	.word	0x0800dc65
 800d744:	0800dc76 	.word	0x0800dc76

0800d748 <__sflush_r>:
 800d748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d750:	0716      	lsls	r6, r2, #28
 800d752:	4605      	mov	r5, r0
 800d754:	460c      	mov	r4, r1
 800d756:	d454      	bmi.n	800d802 <__sflush_r+0xba>
 800d758:	684b      	ldr	r3, [r1, #4]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	dc02      	bgt.n	800d764 <__sflush_r+0x1c>
 800d75e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d760:	2b00      	cmp	r3, #0
 800d762:	dd48      	ble.n	800d7f6 <__sflush_r+0xae>
 800d764:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d766:	2e00      	cmp	r6, #0
 800d768:	d045      	beq.n	800d7f6 <__sflush_r+0xae>
 800d76a:	2300      	movs	r3, #0
 800d76c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d770:	682f      	ldr	r7, [r5, #0]
 800d772:	6a21      	ldr	r1, [r4, #32]
 800d774:	602b      	str	r3, [r5, #0]
 800d776:	d030      	beq.n	800d7da <__sflush_r+0x92>
 800d778:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	0759      	lsls	r1, r3, #29
 800d77e:	d505      	bpl.n	800d78c <__sflush_r+0x44>
 800d780:	6863      	ldr	r3, [r4, #4]
 800d782:	1ad2      	subs	r2, r2, r3
 800d784:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d786:	b10b      	cbz	r3, 800d78c <__sflush_r+0x44>
 800d788:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d78a:	1ad2      	subs	r2, r2, r3
 800d78c:	2300      	movs	r3, #0
 800d78e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d790:	6a21      	ldr	r1, [r4, #32]
 800d792:	4628      	mov	r0, r5
 800d794:	47b0      	blx	r6
 800d796:	1c43      	adds	r3, r0, #1
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	d106      	bne.n	800d7aa <__sflush_r+0x62>
 800d79c:	6829      	ldr	r1, [r5, #0]
 800d79e:	291d      	cmp	r1, #29
 800d7a0:	d82b      	bhi.n	800d7fa <__sflush_r+0xb2>
 800d7a2:	4a2a      	ldr	r2, [pc, #168]	@ (800d84c <__sflush_r+0x104>)
 800d7a4:	410a      	asrs	r2, r1
 800d7a6:	07d6      	lsls	r6, r2, #31
 800d7a8:	d427      	bmi.n	800d7fa <__sflush_r+0xb2>
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	6062      	str	r2, [r4, #4]
 800d7ae:	04d9      	lsls	r1, r3, #19
 800d7b0:	6922      	ldr	r2, [r4, #16]
 800d7b2:	6022      	str	r2, [r4, #0]
 800d7b4:	d504      	bpl.n	800d7c0 <__sflush_r+0x78>
 800d7b6:	1c42      	adds	r2, r0, #1
 800d7b8:	d101      	bne.n	800d7be <__sflush_r+0x76>
 800d7ba:	682b      	ldr	r3, [r5, #0]
 800d7bc:	b903      	cbnz	r3, 800d7c0 <__sflush_r+0x78>
 800d7be:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7c2:	602f      	str	r7, [r5, #0]
 800d7c4:	b1b9      	cbz	r1, 800d7f6 <__sflush_r+0xae>
 800d7c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7ca:	4299      	cmp	r1, r3
 800d7cc:	d002      	beq.n	800d7d4 <__sflush_r+0x8c>
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f7ff fbf2 	bl	800cfb8 <_free_r>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7d8:	e00d      	b.n	800d7f6 <__sflush_r+0xae>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	4628      	mov	r0, r5
 800d7de:	47b0      	blx	r6
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	1c50      	adds	r0, r2, #1
 800d7e4:	d1c9      	bne.n	800d77a <__sflush_r+0x32>
 800d7e6:	682b      	ldr	r3, [r5, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d0c6      	beq.n	800d77a <__sflush_r+0x32>
 800d7ec:	2b1d      	cmp	r3, #29
 800d7ee:	d001      	beq.n	800d7f4 <__sflush_r+0xac>
 800d7f0:	2b16      	cmp	r3, #22
 800d7f2:	d11e      	bne.n	800d832 <__sflush_r+0xea>
 800d7f4:	602f      	str	r7, [r5, #0]
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	e022      	b.n	800d840 <__sflush_r+0xf8>
 800d7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7fe:	b21b      	sxth	r3, r3
 800d800:	e01b      	b.n	800d83a <__sflush_r+0xf2>
 800d802:	690f      	ldr	r7, [r1, #16]
 800d804:	2f00      	cmp	r7, #0
 800d806:	d0f6      	beq.n	800d7f6 <__sflush_r+0xae>
 800d808:	0793      	lsls	r3, r2, #30
 800d80a:	680e      	ldr	r6, [r1, #0]
 800d80c:	bf08      	it	eq
 800d80e:	694b      	ldreq	r3, [r1, #20]
 800d810:	600f      	str	r7, [r1, #0]
 800d812:	bf18      	it	ne
 800d814:	2300      	movne	r3, #0
 800d816:	eba6 0807 	sub.w	r8, r6, r7
 800d81a:	608b      	str	r3, [r1, #8]
 800d81c:	f1b8 0f00 	cmp.w	r8, #0
 800d820:	dde9      	ble.n	800d7f6 <__sflush_r+0xae>
 800d822:	6a21      	ldr	r1, [r4, #32]
 800d824:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d826:	4643      	mov	r3, r8
 800d828:	463a      	mov	r2, r7
 800d82a:	4628      	mov	r0, r5
 800d82c:	47b0      	blx	r6
 800d82e:	2800      	cmp	r0, #0
 800d830:	dc08      	bgt.n	800d844 <__sflush_r+0xfc>
 800d832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d83a:	81a3      	strh	r3, [r4, #12]
 800d83c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d844:	4407      	add	r7, r0
 800d846:	eba8 0800 	sub.w	r8, r8, r0
 800d84a:	e7e7      	b.n	800d81c <__sflush_r+0xd4>
 800d84c:	dfbffffe 	.word	0xdfbffffe

0800d850 <_fflush_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	690b      	ldr	r3, [r1, #16]
 800d854:	4605      	mov	r5, r0
 800d856:	460c      	mov	r4, r1
 800d858:	b913      	cbnz	r3, 800d860 <_fflush_r+0x10>
 800d85a:	2500      	movs	r5, #0
 800d85c:	4628      	mov	r0, r5
 800d85e:	bd38      	pop	{r3, r4, r5, pc}
 800d860:	b118      	cbz	r0, 800d86a <_fflush_r+0x1a>
 800d862:	6a03      	ldr	r3, [r0, #32]
 800d864:	b90b      	cbnz	r3, 800d86a <_fflush_r+0x1a>
 800d866:	f7ff fa9f 	bl	800cda8 <__sinit>
 800d86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d0f3      	beq.n	800d85a <_fflush_r+0xa>
 800d872:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d874:	07d0      	lsls	r0, r2, #31
 800d876:	d404      	bmi.n	800d882 <_fflush_r+0x32>
 800d878:	0599      	lsls	r1, r3, #22
 800d87a:	d402      	bmi.n	800d882 <_fflush_r+0x32>
 800d87c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d87e:	f7ff fb98 	bl	800cfb2 <__retarget_lock_acquire_recursive>
 800d882:	4628      	mov	r0, r5
 800d884:	4621      	mov	r1, r4
 800d886:	f7ff ff5f 	bl	800d748 <__sflush_r>
 800d88a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d88c:	07da      	lsls	r2, r3, #31
 800d88e:	4605      	mov	r5, r0
 800d890:	d4e4      	bmi.n	800d85c <_fflush_r+0xc>
 800d892:	89a3      	ldrh	r3, [r4, #12]
 800d894:	059b      	lsls	r3, r3, #22
 800d896:	d4e1      	bmi.n	800d85c <_fflush_r+0xc>
 800d898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d89a:	f7ff fb8b 	bl	800cfb4 <__retarget_lock_release_recursive>
 800d89e:	e7dd      	b.n	800d85c <_fflush_r+0xc>

0800d8a0 <__swbuf_r>:
 800d8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a2:	460e      	mov	r6, r1
 800d8a4:	4614      	mov	r4, r2
 800d8a6:	4605      	mov	r5, r0
 800d8a8:	b118      	cbz	r0, 800d8b2 <__swbuf_r+0x12>
 800d8aa:	6a03      	ldr	r3, [r0, #32]
 800d8ac:	b90b      	cbnz	r3, 800d8b2 <__swbuf_r+0x12>
 800d8ae:	f7ff fa7b 	bl	800cda8 <__sinit>
 800d8b2:	69a3      	ldr	r3, [r4, #24]
 800d8b4:	60a3      	str	r3, [r4, #8]
 800d8b6:	89a3      	ldrh	r3, [r4, #12]
 800d8b8:	071a      	lsls	r2, r3, #28
 800d8ba:	d501      	bpl.n	800d8c0 <__swbuf_r+0x20>
 800d8bc:	6923      	ldr	r3, [r4, #16]
 800d8be:	b943      	cbnz	r3, 800d8d2 <__swbuf_r+0x32>
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	f000 f82a 	bl	800d91c <__swsetup_r>
 800d8c8:	b118      	cbz	r0, 800d8d2 <__swbuf_r+0x32>
 800d8ca:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d8ce:	4638      	mov	r0, r7
 800d8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	6922      	ldr	r2, [r4, #16]
 800d8d6:	1a98      	subs	r0, r3, r2
 800d8d8:	6963      	ldr	r3, [r4, #20]
 800d8da:	b2f6      	uxtb	r6, r6
 800d8dc:	4283      	cmp	r3, r0
 800d8de:	4637      	mov	r7, r6
 800d8e0:	dc05      	bgt.n	800d8ee <__swbuf_r+0x4e>
 800d8e2:	4621      	mov	r1, r4
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	f7ff ffb3 	bl	800d850 <_fflush_r>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d1ed      	bne.n	800d8ca <__swbuf_r+0x2a>
 800d8ee:	68a3      	ldr	r3, [r4, #8]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	60a3      	str	r3, [r4, #8]
 800d8f4:	6823      	ldr	r3, [r4, #0]
 800d8f6:	1c5a      	adds	r2, r3, #1
 800d8f8:	6022      	str	r2, [r4, #0]
 800d8fa:	701e      	strb	r6, [r3, #0]
 800d8fc:	6962      	ldr	r2, [r4, #20]
 800d8fe:	1c43      	adds	r3, r0, #1
 800d900:	429a      	cmp	r2, r3
 800d902:	d004      	beq.n	800d90e <__swbuf_r+0x6e>
 800d904:	89a3      	ldrh	r3, [r4, #12]
 800d906:	07db      	lsls	r3, r3, #31
 800d908:	d5e1      	bpl.n	800d8ce <__swbuf_r+0x2e>
 800d90a:	2e0a      	cmp	r6, #10
 800d90c:	d1df      	bne.n	800d8ce <__swbuf_r+0x2e>
 800d90e:	4621      	mov	r1, r4
 800d910:	4628      	mov	r0, r5
 800d912:	f7ff ff9d 	bl	800d850 <_fflush_r>
 800d916:	2800      	cmp	r0, #0
 800d918:	d0d9      	beq.n	800d8ce <__swbuf_r+0x2e>
 800d91a:	e7d6      	b.n	800d8ca <__swbuf_r+0x2a>

0800d91c <__swsetup_r>:
 800d91c:	b538      	push	{r3, r4, r5, lr}
 800d91e:	4b29      	ldr	r3, [pc, #164]	@ (800d9c4 <__swsetup_r+0xa8>)
 800d920:	4605      	mov	r5, r0
 800d922:	6818      	ldr	r0, [r3, #0]
 800d924:	460c      	mov	r4, r1
 800d926:	b118      	cbz	r0, 800d930 <__swsetup_r+0x14>
 800d928:	6a03      	ldr	r3, [r0, #32]
 800d92a:	b90b      	cbnz	r3, 800d930 <__swsetup_r+0x14>
 800d92c:	f7ff fa3c 	bl	800cda8 <__sinit>
 800d930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d934:	0719      	lsls	r1, r3, #28
 800d936:	d422      	bmi.n	800d97e <__swsetup_r+0x62>
 800d938:	06da      	lsls	r2, r3, #27
 800d93a:	d407      	bmi.n	800d94c <__swsetup_r+0x30>
 800d93c:	2209      	movs	r2, #9
 800d93e:	602a      	str	r2, [r5, #0]
 800d940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d944:	81a3      	strh	r3, [r4, #12]
 800d946:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d94a:	e033      	b.n	800d9b4 <__swsetup_r+0x98>
 800d94c:	0758      	lsls	r0, r3, #29
 800d94e:	d512      	bpl.n	800d976 <__swsetup_r+0x5a>
 800d950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d952:	b141      	cbz	r1, 800d966 <__swsetup_r+0x4a>
 800d954:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d958:	4299      	cmp	r1, r3
 800d95a:	d002      	beq.n	800d962 <__swsetup_r+0x46>
 800d95c:	4628      	mov	r0, r5
 800d95e:	f7ff fb2b 	bl	800cfb8 <_free_r>
 800d962:	2300      	movs	r3, #0
 800d964:	6363      	str	r3, [r4, #52]	@ 0x34
 800d966:	89a3      	ldrh	r3, [r4, #12]
 800d968:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d96c:	81a3      	strh	r3, [r4, #12]
 800d96e:	2300      	movs	r3, #0
 800d970:	6063      	str	r3, [r4, #4]
 800d972:	6923      	ldr	r3, [r4, #16]
 800d974:	6023      	str	r3, [r4, #0]
 800d976:	89a3      	ldrh	r3, [r4, #12]
 800d978:	f043 0308 	orr.w	r3, r3, #8
 800d97c:	81a3      	strh	r3, [r4, #12]
 800d97e:	6923      	ldr	r3, [r4, #16]
 800d980:	b94b      	cbnz	r3, 800d996 <__swsetup_r+0x7a>
 800d982:	89a3      	ldrh	r3, [r4, #12]
 800d984:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d98c:	d003      	beq.n	800d996 <__swsetup_r+0x7a>
 800d98e:	4621      	mov	r1, r4
 800d990:	4628      	mov	r0, r5
 800d992:	f000 f84f 	bl	800da34 <__smakebuf_r>
 800d996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d99a:	f013 0201 	ands.w	r2, r3, #1
 800d99e:	d00a      	beq.n	800d9b6 <__swsetup_r+0x9a>
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	60a2      	str	r2, [r4, #8]
 800d9a4:	6962      	ldr	r2, [r4, #20]
 800d9a6:	4252      	negs	r2, r2
 800d9a8:	61a2      	str	r2, [r4, #24]
 800d9aa:	6922      	ldr	r2, [r4, #16]
 800d9ac:	b942      	cbnz	r2, 800d9c0 <__swsetup_r+0xa4>
 800d9ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9b2:	d1c5      	bne.n	800d940 <__swsetup_r+0x24>
 800d9b4:	bd38      	pop	{r3, r4, r5, pc}
 800d9b6:	0799      	lsls	r1, r3, #30
 800d9b8:	bf58      	it	pl
 800d9ba:	6962      	ldrpl	r2, [r4, #20]
 800d9bc:	60a2      	str	r2, [r4, #8]
 800d9be:	e7f4      	b.n	800d9aa <__swsetup_r+0x8e>
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	e7f7      	b.n	800d9b4 <__swsetup_r+0x98>
 800d9c4:	24000028 	.word	0x24000028

0800d9c8 <_sbrk_r>:
 800d9c8:	b538      	push	{r3, r4, r5, lr}
 800d9ca:	4d06      	ldr	r5, [pc, #24]	@ (800d9e4 <_sbrk_r+0x1c>)
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	4608      	mov	r0, r1
 800d9d2:	602b      	str	r3, [r5, #0]
 800d9d4:	f7f3 fd98 	bl	8001508 <_sbrk>
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	d102      	bne.n	800d9e2 <_sbrk_r+0x1a>
 800d9dc:	682b      	ldr	r3, [r5, #0]
 800d9de:	b103      	cbz	r3, 800d9e2 <_sbrk_r+0x1a>
 800d9e0:	6023      	str	r3, [r4, #0]
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	24000870 	.word	0x24000870

0800d9e8 <__swhatbuf_r>:
 800d9e8:	b570      	push	{r4, r5, r6, lr}
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f0:	2900      	cmp	r1, #0
 800d9f2:	b096      	sub	sp, #88	@ 0x58
 800d9f4:	4615      	mov	r5, r2
 800d9f6:	461e      	mov	r6, r3
 800d9f8:	da0d      	bge.n	800da16 <__swhatbuf_r+0x2e>
 800d9fa:	89a3      	ldrh	r3, [r4, #12]
 800d9fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da00:	f04f 0100 	mov.w	r1, #0
 800da04:	bf14      	ite	ne
 800da06:	2340      	movne	r3, #64	@ 0x40
 800da08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da0c:	2000      	movs	r0, #0
 800da0e:	6031      	str	r1, [r6, #0]
 800da10:	602b      	str	r3, [r5, #0]
 800da12:	b016      	add	sp, #88	@ 0x58
 800da14:	bd70      	pop	{r4, r5, r6, pc}
 800da16:	466a      	mov	r2, sp
 800da18:	f000 f848 	bl	800daac <_fstat_r>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	dbec      	blt.n	800d9fa <__swhatbuf_r+0x12>
 800da20:	9901      	ldr	r1, [sp, #4]
 800da22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da2a:	4259      	negs	r1, r3
 800da2c:	4159      	adcs	r1, r3
 800da2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da32:	e7eb      	b.n	800da0c <__swhatbuf_r+0x24>

0800da34 <__smakebuf_r>:
 800da34:	898b      	ldrh	r3, [r1, #12]
 800da36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da38:	079d      	lsls	r5, r3, #30
 800da3a:	4606      	mov	r6, r0
 800da3c:	460c      	mov	r4, r1
 800da3e:	d507      	bpl.n	800da50 <__smakebuf_r+0x1c>
 800da40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	6123      	str	r3, [r4, #16]
 800da48:	2301      	movs	r3, #1
 800da4a:	6163      	str	r3, [r4, #20]
 800da4c:	b003      	add	sp, #12
 800da4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da50:	ab01      	add	r3, sp, #4
 800da52:	466a      	mov	r2, sp
 800da54:	f7ff ffc8 	bl	800d9e8 <__swhatbuf_r>
 800da58:	9f00      	ldr	r7, [sp, #0]
 800da5a:	4605      	mov	r5, r0
 800da5c:	4639      	mov	r1, r7
 800da5e:	4630      	mov	r0, r6
 800da60:	f7ff fb16 	bl	800d090 <_malloc_r>
 800da64:	b948      	cbnz	r0, 800da7a <__smakebuf_r+0x46>
 800da66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da6a:	059a      	lsls	r2, r3, #22
 800da6c:	d4ee      	bmi.n	800da4c <__smakebuf_r+0x18>
 800da6e:	f023 0303 	bic.w	r3, r3, #3
 800da72:	f043 0302 	orr.w	r3, r3, #2
 800da76:	81a3      	strh	r3, [r4, #12]
 800da78:	e7e2      	b.n	800da40 <__smakebuf_r+0xc>
 800da7a:	89a3      	ldrh	r3, [r4, #12]
 800da7c:	6020      	str	r0, [r4, #0]
 800da7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da82:	81a3      	strh	r3, [r4, #12]
 800da84:	9b01      	ldr	r3, [sp, #4]
 800da86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da8a:	b15b      	cbz	r3, 800daa4 <__smakebuf_r+0x70>
 800da8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da90:	4630      	mov	r0, r6
 800da92:	f000 f81d 	bl	800dad0 <_isatty_r>
 800da96:	b128      	cbz	r0, 800daa4 <__smakebuf_r+0x70>
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	f023 0303 	bic.w	r3, r3, #3
 800da9e:	f043 0301 	orr.w	r3, r3, #1
 800daa2:	81a3      	strh	r3, [r4, #12]
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	431d      	orrs	r5, r3
 800daa8:	81a5      	strh	r5, [r4, #12]
 800daaa:	e7cf      	b.n	800da4c <__smakebuf_r+0x18>

0800daac <_fstat_r>:
 800daac:	b538      	push	{r3, r4, r5, lr}
 800daae:	4d07      	ldr	r5, [pc, #28]	@ (800dacc <_fstat_r+0x20>)
 800dab0:	2300      	movs	r3, #0
 800dab2:	4604      	mov	r4, r0
 800dab4:	4608      	mov	r0, r1
 800dab6:	4611      	mov	r1, r2
 800dab8:	602b      	str	r3, [r5, #0]
 800daba:	f7f3 fcfc 	bl	80014b6 <_fstat>
 800dabe:	1c43      	adds	r3, r0, #1
 800dac0:	d102      	bne.n	800dac8 <_fstat_r+0x1c>
 800dac2:	682b      	ldr	r3, [r5, #0]
 800dac4:	b103      	cbz	r3, 800dac8 <_fstat_r+0x1c>
 800dac6:	6023      	str	r3, [r4, #0]
 800dac8:	bd38      	pop	{r3, r4, r5, pc}
 800daca:	bf00      	nop
 800dacc:	24000870 	.word	0x24000870

0800dad0 <_isatty_r>:
 800dad0:	b538      	push	{r3, r4, r5, lr}
 800dad2:	4d06      	ldr	r5, [pc, #24]	@ (800daec <_isatty_r+0x1c>)
 800dad4:	2300      	movs	r3, #0
 800dad6:	4604      	mov	r4, r0
 800dad8:	4608      	mov	r0, r1
 800dada:	602b      	str	r3, [r5, #0]
 800dadc:	f7f3 fcfb 	bl	80014d6 <_isatty>
 800dae0:	1c43      	adds	r3, r0, #1
 800dae2:	d102      	bne.n	800daea <_isatty_r+0x1a>
 800dae4:	682b      	ldr	r3, [r5, #0]
 800dae6:	b103      	cbz	r3, 800daea <_isatty_r+0x1a>
 800dae8:	6023      	str	r3, [r4, #0]
 800daea:	bd38      	pop	{r3, r4, r5, pc}
 800daec:	24000870 	.word	0x24000870

0800daf0 <_init>:
 800daf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daf2:	bf00      	nop
 800daf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daf6:	bc08      	pop	{r3}
 800daf8:	469e      	mov	lr, r3
 800dafa:	4770      	bx	lr

0800dafc <_fini>:
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafe:	bf00      	nop
 800db00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db02:	bc08      	pop	{r3}
 800db04:	469e      	mov	lr, r3
 800db06:	4770      	bx	lr
