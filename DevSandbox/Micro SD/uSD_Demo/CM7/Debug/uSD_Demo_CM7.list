
uSD_Demo_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a77c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800aa14  0800aa14  0000ba14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa60  0800aa60  0000c010  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa60  0800aa60  0000ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa68  0800aa68  0000c010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa68  0800aa68  0000ba68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa6c  0800aa6c  0000ba6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800aa70  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  24000010  0800aa80  0000c010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000238  0800aa80  0000c238  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c36a  00000000  00000000  0000c03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c9  00000000  00000000  000283a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0002b978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001083  00000000  00000000  0002ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cc68  00000000  00000000  0002df53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e99c  00000000  00000000  0006abbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00187dc2  00000000  00000000  00089557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00211319  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f0  00000000  00000000  0021135c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00216d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a9fc 	.word	0x0800a9fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800a9fc 	.word	0x0800a9fc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b49      	ldr	r3, [pc, #292]	@ (80006f4 <SystemInit+0x12c>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a48      	ldr	r2, [pc, #288]	@ (80006f4 <SystemInit+0x12c>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b45      	ldr	r3, [pc, #276]	@ (80006f4 <SystemInit+0x12c>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a44      	ldr	r2, [pc, #272]	@ (80006f4 <SystemInit+0x12c>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b43      	ldr	r3, [pc, #268]	@ (80006f8 <SystemInit+0x130>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <SystemInit+0x130>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a3e      	ldr	r2, [pc, #248]	@ (80006f8 <SystemInit+0x130>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b3d      	ldr	r3, [pc, #244]	@ (80006fc <SystemInit+0x134>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a3c      	ldr	r2, [pc, #240]	@ (80006fc <SystemInit+0x134>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b3a      	ldr	r3, [pc, #232]	@ (80006fc <SystemInit+0x134>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b39      	ldr	r3, [pc, #228]	@ (80006fc <SystemInit+0x134>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4938      	ldr	r1, [pc, #224]	@ (80006fc <SystemInit+0x134>)
 800061c:	4b38      	ldr	r3, [pc, #224]	@ (8000700 <SystemInit+0x138>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <SystemInit+0x130>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <SystemInit+0x130>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a30      	ldr	r2, [pc, #192]	@ (80006f8 <SystemInit+0x130>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b2f      	ldr	r3, [pc, #188]	@ (80006fc <SystemInit+0x134>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <SystemInit+0x134>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <SystemInit+0x134>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <SystemInit+0x134>)
 8000652:	4a2c      	ldr	r2, [pc, #176]	@ (8000704 <SystemInit+0x13c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemInit+0x134>)
 8000658:	4a2b      	ldr	r2, [pc, #172]	@ (8000708 <SystemInit+0x140>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <SystemInit+0x134>)
 800065e:	4a2b      	ldr	r2, [pc, #172]	@ (800070c <SystemInit+0x144>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemInit+0x134>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <SystemInit+0x134>)
 800066a:	4a28      	ldr	r2, [pc, #160]	@ (800070c <SystemInit+0x144>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemInit+0x134>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <SystemInit+0x134>)
 8000676:	4a25      	ldr	r2, [pc, #148]	@ (800070c <SystemInit+0x144>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <SystemInit+0x134>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1d      	ldr	r2, [pc, #116]	@ (80006fc <SystemInit+0x134>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <SystemInit+0x134>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemInit+0x148>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <SystemInit+0x148>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <SystemInit+0x14c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <SystemInit+0x150>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <SystemInit+0x154>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <SystemInit+0x134>)
 80006b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d113      	bne.n	80006e8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <SystemInit+0x134>)
 80006c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006c6:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <SystemInit+0x134>)
 80006c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <SystemInit+0x158>)
 80006d2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006d6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <SystemInit+0x134>)
 80006da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <SystemInit+0x134>)
 80006e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	52002000 	.word	0x52002000
 80006fc:	58024400 	.word	0x58024400
 8000700:	eaf6ed7f 	.word	0xeaf6ed7f
 8000704:	02020200 	.word	0x02020200
 8000708:	01ff0000 	.word	0x01ff0000
 800070c:	01010280 	.word	0x01010280
 8000710:	580000c0 	.word	0x580000c0
 8000714:	5c001000 	.word	0x5c001000
 8000718:	ffff0000 	.word	0xffff0000
 800071c:	51008108 	.word	0x51008108
 8000720:	52004000 	.word	0x52004000

08000724 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <ExitRun0Mode+0x30>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	f023 0306 	bic.w	r3, r3, #6
 8000730:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <ExitRun0Mode+0x30>)
 8000732:	f043 0302 	orr.w	r3, r3, #2
 8000736:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000738:	bf00      	nop
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <ExitRun0Mode+0x30>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f9      	beq.n	800073a <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	58024800 	.word	0x58024800

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800075e:	f000 faf7 	bl	8000d50 <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000766:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <main+0xb0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <main+0x28>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x12>
  if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x32>
  {
  Error_Handler();
 8000786:	f000 fb0f 	bl	8000da8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fdcf 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f83d 	bl	800080c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000792:	f000 f8b1 	bl	80008f8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000796:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <main+0xb0>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	4a1a      	ldr	r2, [pc, #104]	@ (8000808 <main+0xb0>)
 800079e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a6:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <main+0xb0>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f001 ff55 	bl	8002664 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ba:	2100      	movs	r1, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	f001 ff6b 	bl	8002698 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007c6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007c8:	bf00      	nop
 80007ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <main+0xb0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d104      	bne.n	80007e0 <main+0x88>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	1e5a      	subs	r2, r3, #1
 80007da:	607a      	str	r2, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dcf4      	bgt.n	80007ca <main+0x72>
if ( timeout < 0 )
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	da01      	bge.n	80007ea <main+0x92>
{
Error_Handler();
 80007e6:	f000 fadf 	bl	8000da8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f000 f9a9 	bl	8000b40 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ee:	f000 f8a1 	bl	8000934 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007f2:	f000 f901 	bl	80009f8 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 80007f6:	f000 f8db 	bl	80009b0 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 80007fa:	f000 f955 	bl	8000aa8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80007fe:	f009 fe75 	bl	800a4ec <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000802:	bf00      	nop
 8000804:	e7fd      	b.n	8000802 <main+0xaa>
 8000806:	bf00      	nop
 8000808:	58024400 	.word	0x58024400

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09c      	sub	sp, #112	@ 0x70
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000816:	224c      	movs	r2, #76	@ 0x4c
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f00a f8c1 	bl	800a9a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2220      	movs	r2, #32
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f00a f8bb 	bl	800a9a2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800082c:	2004      	movs	r0, #4
 800082e:	f002 f895 	bl	800295c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <SystemClock_Config+0xe0>)
 8000838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800083a:	4a2c      	ldr	r2, [pc, #176]	@ (80008ec <SystemClock_Config+0xe0>)
 800083c:	f023 0301 	bic.w	r3, r3, #1
 8000840:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000842:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <SystemClock_Config+0xe0>)
 8000844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <SystemClock_Config+0xe4>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000854:	4a26      	ldr	r2, [pc, #152]	@ (80008f0 <SystemClock_Config+0xe4>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <SystemClock_Config+0xe4>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000868:	bf00      	nop
 800086a:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <SystemClock_Config+0xe4>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000876:	d1f8      	bne.n	800086a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <SystemClock_Config+0xe8>)
 800087a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800087c:	4a1d      	ldr	r2, [pc, #116]	@ (80008f4 <SystemClock_Config+0xe8>)
 800087e:	f023 0303 	bic.w	r3, r3, #3
 8000882:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 8000884:	2312      	movs	r3, #18
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000888:	2301      	movs	r3, #1
 800088a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088c:	2340      	movs	r3, #64	@ 0x40
 800088e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000894:	2320      	movs	r3, #32
 8000896:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000898:	2300      	movs	r3, #0
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 f8b5 	bl	8002a10 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008ac:	f000 fa7c 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	233f      	movs	r3, #63	@ 0x3f
 80008b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2101      	movs	r1, #1
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fcf5 	bl	80032c4 <HAL_RCC_ClockConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80008e0:	f000 fa62 	bl	8000da8 <Error_Handler>
  }
}
 80008e4:	bf00      	nop
 80008e6:	3770      	adds	r7, #112	@ 0x70
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58000400 	.word	0x58000400
 80008f0:	58024800 	.word	0x58024800
 80008f4:	58024400 	.word	0x58024400

080008f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0b0      	sub	sp, #192	@ 0xc0
 80008fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	22c0      	movs	r2, #192	@ 0xc0
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f00a f84c 	bl	800a9a2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800090a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800090e:	f04f 0300 	mov.w	r3, #0
 8000912:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000916:	2300      	movs	r3, #0
 8000918:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	4618      	mov	r0, r3
 800091e:	f003 f85d 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000928:	f000 fa3e 	bl	8000da8 <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	37c0      	adds	r7, #192	@ 0xc0
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ac <MX_I2C1_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000940:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000944:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800094e:	2201      	movs	r2, #1
 8000950:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000958:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000964:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_I2C1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000970:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000972:	f001 fea5 	bl	80026c0 <HAL_I2C_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800097c:	f000 fa14 	bl	8000da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	4809      	ldr	r0, [pc, #36]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000984:	f001 ff52 	bl	800282c <HAL_I2CEx_ConfigAnalogFilter>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800098e:	f000 fa0b 	bl	8000da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_I2C1_Init+0x74>)
 8000996:	f001 ff94 	bl	80028c2 <HAL_I2CEx_ConfigDigitalFilter>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80009a0:	f000 fa02 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2400002c 	.word	0x2400002c
 80009ac:	40005400 	.word	0x40005400

080009b0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_SDMMC1_SD_Init+0x40>)
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <MX_SDMMC1_SD_Init+0x44>)
 80009b8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	@ (80009f0 <MX_SDMMC1_SD_Init+0x40>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009c0:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_SDMMC1_SD_Init+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <MX_SDMMC1_SD_Init+0x40>)
 80009c8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009cc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_SDMMC1_SD_Init+0x40>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_SDMMC1_SD_Init+0x40>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_SDMMC1_SD_Init+0x40>)
 80009dc:	f005 fcfc 	bl	80063d8 <HAL_SD_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80009e6:	f000 f9df 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	24000080 	.word	0x24000080
 80009f4:	52007000 	.word	0x52007000

080009f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009fc:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 80009fe:	4a29      	ldr	r2, [pc, #164]	@ (8000aa4 <MX_SPI1_Init+0xac>)
 8000a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a02:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a04:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a10:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a12:	2207      	movs	r2, #7
 8000a14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a16:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a1c:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a1e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a26:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a2e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a40:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a46:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a52:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_SPI1_Init+0xa8>)
 8000a8c:	f006 fe8e 	bl	80077ac <HAL_SPI_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000a96:	f000 f987 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	240000fc 	.word	0x240000fc
 8000aa4:	40013000 	.word	0x40013000

08000aa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aac:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	@ (8000b3c <MX_USART3_UART_Init+0x94>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af0:	4811      	ldr	r0, [pc, #68]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000af2:	f007 fa54 	bl	8007f9e <HAL_UART_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000afc:	f000 f954 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b04:	f008 feae 	bl	8009864 <HAL_UARTEx_SetTxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f000 f94b 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b16:	f008 fee3 	bl	80098e0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b20:	f000 f942 	bl	8000da8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b26:	f008 fe64 	bl	80097f2 <HAL_UARTEx_DisableFifoMode>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f000 f93a 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	24000184 	.word	0x24000184
 8000b3c:	40004800 	.word	0x40004800

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	@ 0x30
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b77      	ldr	r3, [pc, #476]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a75      	ldr	r2, [pc, #468]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b73      	ldr	r3, [pc, #460]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b74:	4b6f      	ldr	r3, [pc, #444]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b84:	4b6b      	ldr	r3, [pc, #428]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b68      	ldr	r3, [pc, #416]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	4a66      	ldr	r2, [pc, #408]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba2:	4b64      	ldr	r3, [pc, #400]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb0:	4b60      	ldr	r3, [pc, #384]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	4a5f      	ldr	r2, [pc, #380]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000bb8:	f043 0320 	orr.w	r3, r3, #32
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc0:	4b5c      	ldr	r3, [pc, #368]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	f003 0320 	and.w	r3, r3, #32
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bce:	4b59      	ldr	r3, [pc, #356]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd4:	4a57      	ldr	r2, [pc, #348]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000bd6:	f043 0308 	orr.w	r3, r3, #8
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bde:	4b55      	ldr	r3, [pc, #340]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bec:	4b51      	ldr	r3, [pc, #324]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf2:	4a50      	ldr	r2, [pc, #320]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8000d34 <MX_GPIO_Init+0x1f4>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_TF_Pin|LED4_TV_Pin|LED2_TB_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210d      	movs	r1, #13
 8000c0e:	484a      	ldr	r0, [pc, #296]	@ (8000d38 <MX_GPIO_Init+0x1f8>)
 8000c10:	f001 fcea 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_TA_GPIO_Port, LED3_TA_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2102      	movs	r1, #2
 8000c18:	4848      	ldr	r0, [pc, #288]	@ (8000d3c <MX_GPIO_Init+0x1fc>)
 8000c1a:	f001 fce5 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED5_AP2P_GPIO_Port, LED5_AP2P_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c24:	4846      	ldr	r0, [pc, #280]	@ (8000d40 <MX_GPIO_Init+0x200>)
 8000c26:	f001 fcdf 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c30:	4844      	ldr	r0, [pc, #272]	@ (8000d44 <MX_GPIO_Init+0x204>)
 8000c32:	f001 fcd9 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_TX_GPIO_Port, LED6_TX_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3c:	4842      	ldr	r0, [pc, #264]	@ (8000d48 <MX_GPIO_Init+0x208>)
 8000c3e:	f001 fcd3 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4837      	ldr	r0, [pc, #220]	@ (8000d38 <MX_GPIO_Init+0x1f8>)
 8000c5a:	f001 fb15 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_TF_Pin LED4_TV_Pin LED2_TB_Pin */
  GPIO_InitStruct.Pin = LED1_TF_Pin|LED4_TV_Pin|LED2_TB_Pin;
 8000c5e:	230d      	movs	r3, #13
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4830      	ldr	r0, [pc, #192]	@ (8000d38 <MX_GPIO_Init+0x1f8>)
 8000c76:	f001 fb07 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_INT_Pin */
  GPIO_InitStruct.Pin = NFC_INT_Pin;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(NFC_INT_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	482f      	ldr	r0, [pc, #188]	@ (8000d4c <MX_GPIO_Init+0x20c>)
 8000c90:	f001 fafa 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_TA_Pin */
  GPIO_InitStruct.Pin = LED3_TA_Pin;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED3_TA_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <MX_GPIO_Init+0x1fc>)
 8000cac:	f001 faec 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED5_AP2P_Pin */
  GPIO_InitStruct.Pin = LED5_AP2P_Pin;
 8000cb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED5_AP2P_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481d      	ldr	r0, [pc, #116]	@ (8000d40 <MX_GPIO_Init+0x200>)
 8000cca:	f001 fadd 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000cce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4817      	ldr	r0, [pc, #92]	@ (8000d44 <MX_GPIO_Init+0x204>)
 8000ce8:	f001 face 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_TX_Pin */
  GPIO_InitStruct.Pin = LED6_TX_Pin;
 8000cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED6_TX_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4810      	ldr	r0, [pc, #64]	@ (8000d48 <MX_GPIO_Init+0x208>)
 8000d06:	f001 fabf 	bl	8002288 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(NFC_INT_EXTI_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2009      	movs	r0, #9
 8000d10:	f000 fca9 	bl	8001666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(NFC_INT_EXTI_IRQn);
 8000d14:	2009      	movs	r0, #9
 8000d16:	f000 fcc0 	bl	800169a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(USER_BUTTON_EXTI_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2028      	movs	r0, #40	@ 0x28
 8000d20:	f000 fca1 	bl	8001666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USER_BUTTON_EXTI_IRQn);
 8000d24:	2028      	movs	r0, #40	@ 0x28
 8000d26:	f000 fcb8 	bl	800169a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d2a:	bf00      	nop
 8000d2c:	3730      	adds	r7, #48	@ 0x30
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	58024400 	.word	0x58024400
 8000d38:	58020800 	.word	0x58020800
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	58021400 	.word	0x58021400
 8000d44:	58020c00 	.word	0x58020c00
 8000d48:	58021800 	.word	0x58021800
 8000d4c:	58020000 	.word	0x58020000

08000d50 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d62:	f000 fcb5 	bl	80016d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d72:	231f      	movs	r3, #31
 8000d74:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d76:	2387      	movs	r3, #135	@ 0x87
 8000d78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d82:	2301      	movs	r3, #1
 8000d84:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d86:	2301      	movs	r3, #1
 8000d88:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d92:	463b      	mov	r3, r7
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fcd3 	bl	8001740 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d9a:	2004      	movs	r0, #4
 8000d9c:	f000 fcb0 	bl	8001700 <HAL_MPU_Enable>

}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_MspInit+0x30>)
 8000dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dc0:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_MspInit+0x30>)
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_MspInit+0x30>)
 8000dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	58024400 	.word	0x58024400

08000de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0ba      	sub	sp, #232	@ 0xe8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	22c0      	movs	r2, #192	@ 0xc0
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f009 fdca 	bl	800a9a2 <memset>
  if(hi2c->Instance==I2C1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2b      	ldr	r2, [pc, #172]	@ (8000ec0 <HAL_I2C_MspInit+0xd8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d14f      	bne.n	8000eb8 <HAL_I2C_MspInit+0xd0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e18:	f04f 0208 	mov.w	r2, #8
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_CSI;
 8000e24:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 fdd3 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000e3c:	f7ff ffb4 	bl	8000da8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <HAL_I2C_MspInit+0xdc>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e46:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec4 <HAL_I2C_MspInit+0xdc>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <HAL_I2C_MspInit+0xdc>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e66:	2312      	movs	r3, #18
 8000e68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4810      	ldr	r0, [pc, #64]	@ (8000ec8 <HAL_I2C_MspInit+0xe0>)
 8000e86:	f001 f9ff 	bl	8002288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_I2C_MspInit+0xdc>)
 8000e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e90:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec4 <HAL_I2C_MspInit+0xdc>)
 8000e92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_I2C_MspInit+0xdc>)
 8000e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2100      	movs	r1, #0
 8000eac:	201f      	movs	r0, #31
 8000eae:	f000 fbda 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000eb2:	201f      	movs	r0, #31
 8000eb4:	f000 fbf1 	bl	800169a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eb8:	bf00      	nop
 8000eba:	37e8      	adds	r7, #232	@ 0xe8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58020400 	.word	0x58020400

08000ecc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0bc      	sub	sp, #240	@ 0xf0
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	22c0      	movs	r2, #192	@ 0xc0
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f009 fd58 	bl	800a9a2 <memset>
  if(hsd->Instance==SDMMC1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a41      	ldr	r2, [pc, #260]	@ (8000ffc <HAL_SD_MspInit+0x130>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d17a      	bne.n	8000ff2 <HAL_SD_MspInit+0x126>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000efc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000f08:	2320      	movs	r3, #32
 8000f0a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 96;
 8000f0c:	2360      	movs	r3, #96	@ 0x60
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000f1c:	2340      	movs	r3, #64	@ 0x40
 8000f1e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000f28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fd52 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_SD_MspInit+0x76>
    {
      Error_Handler();
 8000f3e:	f7ff ff33 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f42:	4b2f      	ldr	r3, [pc, #188]	@ (8001000 <HAL_SD_MspInit+0x134>)
 8000f44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f48:	4a2d      	ldr	r2, [pc, #180]	@ (8001000 <HAL_SD_MspInit+0x134>)
 8000f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f4e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000f52:	4b2b      	ldr	r3, [pc, #172]	@ (8001000 <HAL_SD_MspInit+0x134>)
 8000f54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	4b27      	ldr	r3, [pc, #156]	@ (8001000 <HAL_SD_MspInit+0x134>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f66:	4a26      	ldr	r2, [pc, #152]	@ (8001000 <HAL_SD_MspInit+0x134>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <HAL_SD_MspInit+0x134>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <HAL_SD_MspInit+0x134>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f84:	4a1e      	ldr	r2, [pc, #120]	@ (8001000 <HAL_SD_MspInit+0x134>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_SD_MspInit+0x134>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f9c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000fa0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4810      	ldr	r0, [pc, #64]	@ (8001004 <HAL_SD_MspInit+0x138>)
 8000fc4:	f001 f960 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fea:	4619      	mov	r1, r3
 8000fec:	4806      	ldr	r0, [pc, #24]	@ (8001008 <HAL_SD_MspInit+0x13c>)
 8000fee:	f001 f94b 	bl	8002288 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8000ff2:	bf00      	nop
 8000ff4:	37f0      	adds	r7, #240	@ 0xf0
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	52007000 	.word	0x52007000
 8001000:	58024400 	.word	0x58024400
 8001004:	58020800 	.word	0x58020800
 8001008:	58020c00 	.word	0x58020c00

0800100c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0bc      	sub	sp, #240	@ 0xf0
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	f107 0318 	add.w	r3, r7, #24
 8001028:	22c0      	movs	r2, #192	@ 0xc0
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f009 fcb8 	bl	800a9a2 <memset>
  if(hspi->Instance==SPI1)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a3c      	ldr	r2, [pc, #240]	@ (8001128 <HAL_SPI_MspInit+0x11c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d171      	bne.n	8001120 <HAL_SPI_MspInit+0x114>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800103c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001048:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800104c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fcc2 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800105e:	f7ff fea3 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001062:	4b32      	ldr	r3, [pc, #200]	@ (800112c <HAL_SPI_MspInit+0x120>)
 8001064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001068:	4a30      	ldr	r2, [pc, #192]	@ (800112c <HAL_SPI_MspInit+0x120>)
 800106a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800106e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001072:	4b2e      	ldr	r3, [pc, #184]	@ (800112c <HAL_SPI_MspInit+0x120>)
 8001074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b2a      	ldr	r3, [pc, #168]	@ (800112c <HAL_SPI_MspInit+0x120>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001086:	4a29      	ldr	r2, [pc, #164]	@ (800112c <HAL_SPI_MspInit+0x120>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001090:	4b26      	ldr	r3, [pc, #152]	@ (800112c <HAL_SPI_MspInit+0x120>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b23      	ldr	r3, [pc, #140]	@ (800112c <HAL_SPI_MspInit+0x120>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a4:	4a21      	ldr	r2, [pc, #132]	@ (800112c <HAL_SPI_MspInit+0x120>)
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ae:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <HAL_SPI_MspInit+0x120>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010bc:	2360      	movs	r3, #96	@ 0x60
 80010be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d4:	2305      	movs	r3, #5
 80010d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010de:	4619      	mov	r1, r3
 80010e0:	4813      	ldr	r0, [pc, #76]	@ (8001130 <HAL_SPI_MspInit+0x124>)
 80010e2:	f001 f8d1 	bl	8002288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010e6:	2320      	movs	r3, #32
 80010e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010fe:	2305      	movs	r3, #5
 8001100:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001108:	4619      	mov	r1, r3
 800110a:	480a      	ldr	r0, [pc, #40]	@ (8001134 <HAL_SPI_MspInit+0x128>)
 800110c:	f001 f8bc 	bl	8002288 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	2023      	movs	r0, #35	@ 0x23
 8001116:	f000 faa6 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800111a:	2023      	movs	r0, #35	@ 0x23
 800111c:	f000 fabd 	bl	800169a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001120:	bf00      	nop
 8001122:	37f0      	adds	r7, #240	@ 0xf0
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40013000 	.word	0x40013000
 800112c:	58024400 	.word	0x58024400
 8001130:	58020000 	.word	0x58020000
 8001134:	58020400 	.word	0x58020400

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0ba      	sub	sp, #232	@ 0xe8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	22c0      	movs	r2, #192	@ 0xc0
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f009 fc22 	bl	800a9a2 <memset>
  if(huart->Instance==USART3)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a2b      	ldr	r2, [pc, #172]	@ (8001210 <HAL_UART_MspInit+0xd8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d14e      	bne.n	8001206 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001168:	f04f 0202 	mov.w	r2, #2
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_CSI;
 8001174:	2304      	movs	r3, #4
 8001176:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4618      	mov	r0, r3
 8001180:	f002 fc2c 	bl	80039dc <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800118a:	f7ff fe0d 	bl	8000da8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <HAL_UART_MspInit+0xdc>)
 8001190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001194:	4a1f      	ldr	r2, [pc, #124]	@ (8001214 <HAL_UART_MspInit+0xdc>)
 8001196:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800119a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800119e:	4b1d      	ldr	r3, [pc, #116]	@ (8001214 <HAL_UART_MspInit+0xdc>)
 80011a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ac:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <HAL_UART_MspInit+0xdc>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b2:	4a18      	ldr	r2, [pc, #96]	@ (8001214 <HAL_UART_MspInit+0xdc>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011bc:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_UART_MspInit+0xdc>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e4:	2307      	movs	r3, #7
 80011e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <HAL_UART_MspInit+0xe0>)
 80011f2:	f001 f849 	bl	8002288 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2027      	movs	r0, #39	@ 0x27
 80011fc:	f000 fa33 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001200:	2027      	movs	r0, #39	@ 0x27
 8001202:	f000 fa4a 	bl	800169a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001206:	bf00      	nop
 8001208:	37e8      	adds	r7, #232	@ 0xe8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40004800 	.word	0x40004800
 8001214:	58024400 	.word	0x58024400
 8001218:	58020c00 	.word	0x58020c00

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <NMI_Handler+0x4>

08001224 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <MemManage_Handler+0x4>

08001234 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <UsageFault_Handler+0x4>

08001244 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001272:	f000 f8cd 	bl	8001410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}

0800127a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NFC_INT_Pin);
 800127e:	2008      	movs	r0, #8
 8001280:	f001 f9cb 	bl	800261a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <I2C1_EV_IRQHandler+0x10>)
 800128e:	f001 fab3 	bl	80027f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2400002c 	.word	0x2400002c

0800129c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <SPI1_IRQHandler+0x10>)
 80012a2:	f006 fba7 	bl	80079f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	240000fc 	.word	0x240000fc

080012b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <USART3_IRQHandler+0x10>)
 80012b6:	f006 fec3 	bl	8008040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000184 	.word	0x24000184

080012c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80012c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80012cc:	f001 f9a5 	bl	800261a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012d4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001310 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80012d8:	f7ff fa24 	bl	8000724 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012dc:	f7ff f974 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	@ (8001314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	@ (8001318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f009 fb55 	bl	800a9b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff fa25 	bl	8000758 <main>
  bx  lr
 800130e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001310:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001314:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001318:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800131c:	0800aa70 	.word	0x0800aa70
  ldr r2, =_sbss
 8001320:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001324:	24000238 	.word	0x24000238

08001328 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC3_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001332:	2003      	movs	r0, #3
 8001334:	f000 f98c 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001338:	f002 f97a 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 800133c:	4602      	mov	r2, r0
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_Init+0x68>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	4913      	ldr	r1, [pc, #76]	@ (8001398 <HAL_Init+0x6c>)
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <HAL_Init+0x68>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <HAL_Init+0x6c>)
 8001360:	5cd3      	ldrb	r3, [r2, r3]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	4a0b      	ldr	r2, [pc, #44]	@ (800139c <HAL_Init+0x70>)
 800136e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001370:	4a0b      	ldr	r2, [pc, #44]	@ (80013a0 <HAL_Init+0x74>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001376:	200f      	movs	r0, #15
 8001378:	f000 f814 	bl	80013a4 <HAL_InitTick>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e002      	b.n	800138c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001386:	f7ff fd15 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	58024400 	.word	0x58024400
 8001398:	0800aa14 	.word	0x0800aa14
 800139c:	24000004 	.word	0x24000004
 80013a0:	24000000 	.word	0x24000000

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013ac:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <HAL_InitTick+0x60>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e021      	b.n	80013fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <HAL_InitTick+0x64>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_InitTick+0x60>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f971 	bl	80016b6 <HAL_SYSTICK_Config>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e00e      	b.n	80013fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b0f      	cmp	r3, #15
 80013e2:	d80a      	bhi.n	80013fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013ec:	f000 f93b 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4a06      	ldr	r2, [pc, #24]	@ (800140c <HAL_InitTick+0x68>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2400000c 	.word	0x2400000c
 8001408:	24000000 	.word	0x24000000
 800140c:	24000008 	.word	0x24000008

08001410 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_IncTick+0x20>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_IncTick+0x24>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4413      	add	r3, r2
 8001420:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <HAL_IncTick+0x24>)
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2400000c 	.word	0x2400000c
 8001434:	24000218 	.word	0x24000218

08001438 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return uwTick;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <HAL_GetTick+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	24000218 	.word	0x24000218

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4413      	add	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001476:	bf00      	nop
 8001478:	f7ff ffde 	bl	8001438 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2400000c 	.word	0x2400000c

08001498 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800149c:	4b03      	ldr	r3, [pc, #12]	@ (80014ac <HAL_GetREVID+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0c1b      	lsrs	r3, r3, #16
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	5c001000 	.word	0x5c001000

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x40>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014de:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x40>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	60d3      	str	r3, [r2, #12]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000ed00 	.word	0xe000ed00
 80014f4:	05fa0000 	.word	0x05fa0000

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	@ (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	@ (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	@ (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	88fb      	ldrh	r3, [r7, #6]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	@ 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	@ 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001630:	f7ff ff8e 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	@ (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff29 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff40 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff90 	bl	80015a4 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5f 	bl	8001550 <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff33 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa4 	bl	800160c <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016d4:	f3bf 8f5f 	dmb	sy
}
 80016d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016da:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <HAL_MPU_Disable+0x28>)
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	4a06      	ldr	r2, [pc, #24]	@ (80016f8 <HAL_MPU_Disable+0x28>)
 80016e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016e6:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_MPU_Disable+0x2c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	605a      	str	r2, [r3, #4]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00
 80016fc:	e000ed90 	.word	0xe000ed90

08001700 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001708:	4a0b      	ldr	r2, [pc, #44]	@ (8001738 <HAL_MPU_Enable+0x38>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001712:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <HAL_MPU_Enable+0x3c>)
 8001714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001716:	4a09      	ldr	r2, [pc, #36]	@ (800173c <HAL_MPU_Enable+0x3c>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800171c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800171e:	f3bf 8f4f 	dsb	sy
}
 8001722:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001724:	f3bf 8f6f 	isb	sy
}
 8001728:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed90 	.word	0xe000ed90
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	785a      	ldrb	r2, [r3, #1]
 800174c:	4b1b      	ldr	r3, [pc, #108]	@ (80017bc <HAL_MPU_ConfigRegion+0x7c>)
 800174e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001750:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <HAL_MPU_ConfigRegion+0x7c>)
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	4a19      	ldr	r2, [pc, #100]	@ (80017bc <HAL_MPU_ConfigRegion+0x7c>)
 8001756:	f023 0301 	bic.w	r3, r3, #1
 800175a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800175c:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <HAL_MPU_ConfigRegion+0x7c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7b1b      	ldrb	r3, [r3, #12]
 8001768:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7adb      	ldrb	r3, [r3, #11]
 800176e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001770:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7a9b      	ldrb	r3, [r3, #10]
 8001776:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001778:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7b5b      	ldrb	r3, [r3, #13]
 800177e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001780:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7b9b      	ldrb	r3, [r3, #14]
 8001786:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001788:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7bdb      	ldrb	r3, [r3, #15]
 800178e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001790:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7a5b      	ldrb	r3, [r3, #9]
 8001796:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001798:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7a1b      	ldrb	r3, [r3, #8]
 800179e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	7812      	ldrb	r2, [r2, #0]
 80017a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017a8:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017ac:	6113      	str	r3, [r2, #16]
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed90 	.word	0xe000ed90

080017c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff fe36 	bl	8001438 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e2dc      	b.n	8001d92 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d008      	beq.n	80017f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2280      	movs	r2, #128	@ 0x80
 80017e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e2cd      	b.n	8001d92 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a76      	ldr	r2, [pc, #472]	@ (80019d4 <HAL_DMA_Abort+0x214>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d04a      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a74      	ldr	r2, [pc, #464]	@ (80019d8 <HAL_DMA_Abort+0x218>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d045      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a73      	ldr	r2, [pc, #460]	@ (80019dc <HAL_DMA_Abort+0x21c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d040      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a71      	ldr	r2, [pc, #452]	@ (80019e0 <HAL_DMA_Abort+0x220>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d03b      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a70      	ldr	r2, [pc, #448]	@ (80019e4 <HAL_DMA_Abort+0x224>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d036      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a6e      	ldr	r2, [pc, #440]	@ (80019e8 <HAL_DMA_Abort+0x228>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d031      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6d      	ldr	r2, [pc, #436]	@ (80019ec <HAL_DMA_Abort+0x22c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d02c      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a6b      	ldr	r2, [pc, #428]	@ (80019f0 <HAL_DMA_Abort+0x230>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d027      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6a      	ldr	r2, [pc, #424]	@ (80019f4 <HAL_DMA_Abort+0x234>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d022      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a68      	ldr	r2, [pc, #416]	@ (80019f8 <HAL_DMA_Abort+0x238>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01d      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a67      	ldr	r2, [pc, #412]	@ (80019fc <HAL_DMA_Abort+0x23c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d018      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a65      	ldr	r2, [pc, #404]	@ (8001a00 <HAL_DMA_Abort+0x240>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a64      	ldr	r2, [pc, #400]	@ (8001a04 <HAL_DMA_Abort+0x244>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d00e      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a62      	ldr	r2, [pc, #392]	@ (8001a08 <HAL_DMA_Abort+0x248>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d009      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a61      	ldr	r2, [pc, #388]	@ (8001a0c <HAL_DMA_Abort+0x24c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d004      	beq.n	8001896 <HAL_DMA_Abort+0xd6>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5f      	ldr	r2, [pc, #380]	@ (8001a10 <HAL_DMA_Abort+0x250>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_DMA_Abort+0xda>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_DMA_Abort+0xdc>
 800189a:	2300      	movs	r3, #0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 021e 	bic.w	r2, r2, #30
 80018ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e00a      	b.n	80018de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020e 	bic.w	r2, r2, #14
 80018d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a3c      	ldr	r2, [pc, #240]	@ (80019d4 <HAL_DMA_Abort+0x214>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d072      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a3a      	ldr	r2, [pc, #232]	@ (80019d8 <HAL_DMA_Abort+0x218>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d06d      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a39      	ldr	r2, [pc, #228]	@ (80019dc <HAL_DMA_Abort+0x21c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d068      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a37      	ldr	r2, [pc, #220]	@ (80019e0 <HAL_DMA_Abort+0x220>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d063      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a36      	ldr	r2, [pc, #216]	@ (80019e4 <HAL_DMA_Abort+0x224>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d05e      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a34      	ldr	r2, [pc, #208]	@ (80019e8 <HAL_DMA_Abort+0x228>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d059      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a33      	ldr	r2, [pc, #204]	@ (80019ec <HAL_DMA_Abort+0x22c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d054      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a31      	ldr	r2, [pc, #196]	@ (80019f0 <HAL_DMA_Abort+0x230>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d04f      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a30      	ldr	r2, [pc, #192]	@ (80019f4 <HAL_DMA_Abort+0x234>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d04a      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a2e      	ldr	r2, [pc, #184]	@ (80019f8 <HAL_DMA_Abort+0x238>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d045      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2d      	ldr	r2, [pc, #180]	@ (80019fc <HAL_DMA_Abort+0x23c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d040      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2b      	ldr	r2, [pc, #172]	@ (8001a00 <HAL_DMA_Abort+0x240>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d03b      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a2a      	ldr	r2, [pc, #168]	@ (8001a04 <HAL_DMA_Abort+0x244>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d036      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a28      	ldr	r2, [pc, #160]	@ (8001a08 <HAL_DMA_Abort+0x248>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d031      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <HAL_DMA_Abort+0x24c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d02c      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a25      	ldr	r2, [pc, #148]	@ (8001a10 <HAL_DMA_Abort+0x250>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d027      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a24      	ldr	r2, [pc, #144]	@ (8001a14 <HAL_DMA_Abort+0x254>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d022      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <HAL_DMA_Abort+0x258>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01d      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a21      	ldr	r2, [pc, #132]	@ (8001a1c <HAL_DMA_Abort+0x25c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d018      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a20 <HAL_DMA_Abort+0x260>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <HAL_DMA_Abort+0x264>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00e      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a28 <HAL_DMA_Abort+0x268>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d009      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1b      	ldr	r2, [pc, #108]	@ (8001a2c <HAL_DMA_Abort+0x26c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d004      	beq.n	80019ce <HAL_DMA_Abort+0x20e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	@ (8001a30 <HAL_DMA_Abort+0x270>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d132      	bne.n	8001a34 <HAL_DMA_Abort+0x274>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e031      	b.n	8001a36 <HAL_DMA_Abort+0x276>
 80019d2:	bf00      	nop
 80019d4:	40020010 	.word	0x40020010
 80019d8:	40020028 	.word	0x40020028
 80019dc:	40020040 	.word	0x40020040
 80019e0:	40020058 	.word	0x40020058
 80019e4:	40020070 	.word	0x40020070
 80019e8:	40020088 	.word	0x40020088
 80019ec:	400200a0 	.word	0x400200a0
 80019f0:	400200b8 	.word	0x400200b8
 80019f4:	40020410 	.word	0x40020410
 80019f8:	40020428 	.word	0x40020428
 80019fc:	40020440 	.word	0x40020440
 8001a00:	40020458 	.word	0x40020458
 8001a04:	40020470 	.word	0x40020470
 8001a08:	40020488 	.word	0x40020488
 8001a0c:	400204a0 	.word	0x400204a0
 8001a10:	400204b8 	.word	0x400204b8
 8001a14:	58025408 	.word	0x58025408
 8001a18:	5802541c 	.word	0x5802541c
 8001a1c:	58025430 	.word	0x58025430
 8001a20:	58025444 	.word	0x58025444
 8001a24:	58025458 	.word	0x58025458
 8001a28:	5802546c 	.word	0x5802546c
 8001a2c:	58025480 	.word	0x58025480
 8001a30:	58025494 	.word	0x58025494
 8001a34:	2300      	movs	r3, #0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6d      	ldr	r2, [pc, #436]	@ (8001c04 <HAL_DMA_Abort+0x444>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d04a      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a6b      	ldr	r2, [pc, #428]	@ (8001c08 <HAL_DMA_Abort+0x448>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d045      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6a      	ldr	r2, [pc, #424]	@ (8001c0c <HAL_DMA_Abort+0x44c>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d040      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a68      	ldr	r2, [pc, #416]	@ (8001c10 <HAL_DMA_Abort+0x450>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d03b      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a67      	ldr	r2, [pc, #412]	@ (8001c14 <HAL_DMA_Abort+0x454>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d036      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a65      	ldr	r2, [pc, #404]	@ (8001c18 <HAL_DMA_Abort+0x458>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d031      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a64      	ldr	r2, [pc, #400]	@ (8001c1c <HAL_DMA_Abort+0x45c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d02c      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a62      	ldr	r2, [pc, #392]	@ (8001c20 <HAL_DMA_Abort+0x460>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d027      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a61      	ldr	r2, [pc, #388]	@ (8001c24 <HAL_DMA_Abort+0x464>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d022      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a5f      	ldr	r2, [pc, #380]	@ (8001c28 <HAL_DMA_Abort+0x468>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01d      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c2c <HAL_DMA_Abort+0x46c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d018      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a5c      	ldr	r2, [pc, #368]	@ (8001c30 <HAL_DMA_Abort+0x470>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c34 <HAL_DMA_Abort+0x474>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d00e      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a59      	ldr	r2, [pc, #356]	@ (8001c38 <HAL_DMA_Abort+0x478>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d009      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a58      	ldr	r2, [pc, #352]	@ (8001c3c <HAL_DMA_Abort+0x47c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d004      	beq.n	8001aea <HAL_DMA_Abort+0x32a>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a56      	ldr	r2, [pc, #344]	@ (8001c40 <HAL_DMA_Abort+0x480>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d108      	bne.n	8001afc <HAL_DMA_Abort+0x33c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	e007      	b.n	8001b0c <HAL_DMA_Abort+0x34c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b0c:	e013      	b.n	8001b36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0e:	f7ff fc93 	bl	8001438 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d90c      	bls.n	8001b36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2203      	movs	r2, #3
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e12d      	b.n	8001d92 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1e5      	bne.n	8001b0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a2f      	ldr	r2, [pc, #188]	@ (8001c04 <HAL_DMA_Abort+0x444>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04a      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2d      	ldr	r2, [pc, #180]	@ (8001c08 <HAL_DMA_Abort+0x448>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d045      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001c0c <HAL_DMA_Abort+0x44c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d040      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a2a      	ldr	r2, [pc, #168]	@ (8001c10 <HAL_DMA_Abort+0x450>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d03b      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a29      	ldr	r2, [pc, #164]	@ (8001c14 <HAL_DMA_Abort+0x454>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d036      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a27      	ldr	r2, [pc, #156]	@ (8001c18 <HAL_DMA_Abort+0x458>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d031      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a26      	ldr	r2, [pc, #152]	@ (8001c1c <HAL_DMA_Abort+0x45c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d02c      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a24      	ldr	r2, [pc, #144]	@ (8001c20 <HAL_DMA_Abort+0x460>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d027      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a23      	ldr	r2, [pc, #140]	@ (8001c24 <HAL_DMA_Abort+0x464>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d022      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a21      	ldr	r2, [pc, #132]	@ (8001c28 <HAL_DMA_Abort+0x468>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01d      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a20      	ldr	r2, [pc, #128]	@ (8001c2c <HAL_DMA_Abort+0x46c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d018      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c30 <HAL_DMA_Abort+0x470>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001c34 <HAL_DMA_Abort+0x474>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d00e      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c38 <HAL_DMA_Abort+0x478>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8001c3c <HAL_DMA_Abort+0x47c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d004      	beq.n	8001be2 <HAL_DMA_Abort+0x422>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <HAL_DMA_Abort+0x480>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_DMA_Abort+0x426>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_DMA_Abort+0x428>
 8001be6:	2300      	movs	r3, #0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d02b      	beq.n	8001c44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	223f      	movs	r2, #63	@ 0x3f
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	e02a      	b.n	8001c5a <HAL_DMA_Abort+0x49a>
 8001c04:	40020010 	.word	0x40020010
 8001c08:	40020028 	.word	0x40020028
 8001c0c:	40020040 	.word	0x40020040
 8001c10:	40020058 	.word	0x40020058
 8001c14:	40020070 	.word	0x40020070
 8001c18:	40020088 	.word	0x40020088
 8001c1c:	400200a0 	.word	0x400200a0
 8001c20:	400200b8 	.word	0x400200b8
 8001c24:	40020410 	.word	0x40020410
 8001c28:	40020428 	.word	0x40020428
 8001c2c:	40020440 	.word	0x40020440
 8001c30:	40020458 	.word	0x40020458
 8001c34:	40020470 	.word	0x40020470
 8001c38:	40020488 	.word	0x40020488
 8001c3c:	400204a0 	.word	0x400204a0
 8001c40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	2201      	movs	r2, #1
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a4f      	ldr	r2, [pc, #316]	@ (8001d9c <HAL_DMA_Abort+0x5dc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d072      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a4d      	ldr	r2, [pc, #308]	@ (8001da0 <HAL_DMA_Abort+0x5e0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d06d      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a4c      	ldr	r2, [pc, #304]	@ (8001da4 <HAL_DMA_Abort+0x5e4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d068      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001da8 <HAL_DMA_Abort+0x5e8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d063      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a49      	ldr	r2, [pc, #292]	@ (8001dac <HAL_DMA_Abort+0x5ec>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d05e      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a47      	ldr	r2, [pc, #284]	@ (8001db0 <HAL_DMA_Abort+0x5f0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d059      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a46      	ldr	r2, [pc, #280]	@ (8001db4 <HAL_DMA_Abort+0x5f4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d054      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a44      	ldr	r2, [pc, #272]	@ (8001db8 <HAL_DMA_Abort+0x5f8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d04f      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a43      	ldr	r2, [pc, #268]	@ (8001dbc <HAL_DMA_Abort+0x5fc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d04a      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a41      	ldr	r2, [pc, #260]	@ (8001dc0 <HAL_DMA_Abort+0x600>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d045      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a40      	ldr	r2, [pc, #256]	@ (8001dc4 <HAL_DMA_Abort+0x604>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d040      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc8 <HAL_DMA_Abort+0x608>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d03b      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001dcc <HAL_DMA_Abort+0x60c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d036      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd0 <HAL_DMA_Abort+0x610>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d031      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd4 <HAL_DMA_Abort+0x614>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d02c      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a38      	ldr	r2, [pc, #224]	@ (8001dd8 <HAL_DMA_Abort+0x618>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d027      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a37      	ldr	r2, [pc, #220]	@ (8001ddc <HAL_DMA_Abort+0x61c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d022      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a35      	ldr	r2, [pc, #212]	@ (8001de0 <HAL_DMA_Abort+0x620>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01d      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a34      	ldr	r2, [pc, #208]	@ (8001de4 <HAL_DMA_Abort+0x624>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d018      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a32      	ldr	r2, [pc, #200]	@ (8001de8 <HAL_DMA_Abort+0x628>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a31      	ldr	r2, [pc, #196]	@ (8001dec <HAL_DMA_Abort+0x62c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00e      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2f      	ldr	r2, [pc, #188]	@ (8001df0 <HAL_DMA_Abort+0x630>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8001df4 <HAL_DMA_Abort+0x634>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d004      	beq.n	8001d4a <HAL_DMA_Abort+0x58a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2c      	ldr	r2, [pc, #176]	@ (8001df8 <HAL_DMA_Abort+0x638>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_DMA_Abort+0x58e>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_DMA_Abort+0x590>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d015      	beq.n	8001d80 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d5c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d74:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d7e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40020010 	.word	0x40020010
 8001da0:	40020028 	.word	0x40020028
 8001da4:	40020040 	.word	0x40020040
 8001da8:	40020058 	.word	0x40020058
 8001dac:	40020070 	.word	0x40020070
 8001db0:	40020088 	.word	0x40020088
 8001db4:	400200a0 	.word	0x400200a0
 8001db8:	400200b8 	.word	0x400200b8
 8001dbc:	40020410 	.word	0x40020410
 8001dc0:	40020428 	.word	0x40020428
 8001dc4:	40020440 	.word	0x40020440
 8001dc8:	40020458 	.word	0x40020458
 8001dcc:	40020470 	.word	0x40020470
 8001dd0:	40020488 	.word	0x40020488
 8001dd4:	400204a0 	.word	0x400204a0
 8001dd8:	400204b8 	.word	0x400204b8
 8001ddc:	58025408 	.word	0x58025408
 8001de0:	5802541c 	.word	0x5802541c
 8001de4:	58025430 	.word	0x58025430
 8001de8:	58025444 	.word	0x58025444
 8001dec:	58025458 	.word	0x58025458
 8001df0:	5802546c 	.word	0x5802546c
 8001df4:	58025480 	.word	0x58025480
 8001df8:	58025494 	.word	0x58025494

08001dfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e237      	b.n	800227e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d004      	beq.n	8001e24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2280      	movs	r2, #128	@ 0x80
 8001e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e22c      	b.n	800227e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a5c      	ldr	r2, [pc, #368]	@ (8001f9c <HAL_DMA_Abort_IT+0x1a0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d04a      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a5b      	ldr	r2, [pc, #364]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1a4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d045      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a59      	ldr	r2, [pc, #356]	@ (8001fa4 <HAL_DMA_Abort_IT+0x1a8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d040      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a58      	ldr	r2, [pc, #352]	@ (8001fa8 <HAL_DMA_Abort_IT+0x1ac>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d03b      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a56      	ldr	r2, [pc, #344]	@ (8001fac <HAL_DMA_Abort_IT+0x1b0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d036      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a55      	ldr	r2, [pc, #340]	@ (8001fb0 <HAL_DMA_Abort_IT+0x1b4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d031      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a53      	ldr	r2, [pc, #332]	@ (8001fb4 <HAL_DMA_Abort_IT+0x1b8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02c      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a52      	ldr	r2, [pc, #328]	@ (8001fb8 <HAL_DMA_Abort_IT+0x1bc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d027      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a50      	ldr	r2, [pc, #320]	@ (8001fbc <HAL_DMA_Abort_IT+0x1c0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a4f      	ldr	r2, [pc, #316]	@ (8001fc0 <HAL_DMA_Abort_IT+0x1c4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d01d      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc4 <HAL_DMA_Abort_IT+0x1c8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d018      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc8 <HAL_DMA_Abort_IT+0x1cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8001fcc <HAL_DMA_Abort_IT+0x1d0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a49      	ldr	r2, [pc, #292]	@ (8001fd0 <HAL_DMA_Abort_IT+0x1d4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a47      	ldr	r2, [pc, #284]	@ (8001fd4 <HAL_DMA_Abort_IT+0x1d8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0xc8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a46      	ldr	r2, [pc, #280]	@ (8001fd8 <HAL_DMA_Abort_IT+0x1dc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_DMA_Abort_IT+0xcc>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_DMA_Abort_IT+0xce>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8086 	beq.w	8001fdc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2f      	ldr	r2, [pc, #188]	@ (8001f9c <HAL_DMA_Abort_IT+0x1a0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d04a      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8001fa0 <HAL_DMA_Abort_IT+0x1a4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d045      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa4 <HAL_DMA_Abort_IT+0x1a8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d040      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2b      	ldr	r2, [pc, #172]	@ (8001fa8 <HAL_DMA_Abort_IT+0x1ac>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d03b      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a29      	ldr	r2, [pc, #164]	@ (8001fac <HAL_DMA_Abort_IT+0x1b0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d036      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a28      	ldr	r2, [pc, #160]	@ (8001fb0 <HAL_DMA_Abort_IT+0x1b4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d031      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a26      	ldr	r2, [pc, #152]	@ (8001fb4 <HAL_DMA_Abort_IT+0x1b8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d02c      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a25      	ldr	r2, [pc, #148]	@ (8001fb8 <HAL_DMA_Abort_IT+0x1bc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d027      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a23      	ldr	r2, [pc, #140]	@ (8001fbc <HAL_DMA_Abort_IT+0x1c0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d022      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a22      	ldr	r2, [pc, #136]	@ (8001fc0 <HAL_DMA_Abort_IT+0x1c4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d01d      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <HAL_DMA_Abort_IT+0x1c8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d018      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fc8 <HAL_DMA_Abort_IT+0x1cc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d013      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1d      	ldr	r2, [pc, #116]	@ (8001fcc <HAL_DMA_Abort_IT+0x1d0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00e      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd0 <HAL_DMA_Abort_IT+0x1d4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d009      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	@ (8001fd4 <HAL_DMA_Abort_IT+0x1d8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x17c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_DMA_Abort_IT+0x1dc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d108      	bne.n	8001f8a <HAL_DMA_Abort_IT+0x18e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	e178      	b.n	800227c <HAL_DMA_Abort_IT+0x480>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0201 	bic.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e16f      	b.n	800227c <HAL_DMA_Abort_IT+0x480>
 8001f9c:	40020010 	.word	0x40020010
 8001fa0:	40020028 	.word	0x40020028
 8001fa4:	40020040 	.word	0x40020040
 8001fa8:	40020058 	.word	0x40020058
 8001fac:	40020070 	.word	0x40020070
 8001fb0:	40020088 	.word	0x40020088
 8001fb4:	400200a0 	.word	0x400200a0
 8001fb8:	400200b8 	.word	0x400200b8
 8001fbc:	40020410 	.word	0x40020410
 8001fc0:	40020428 	.word	0x40020428
 8001fc4:	40020440 	.word	0x40020440
 8001fc8:	40020458 	.word	0x40020458
 8001fcc:	40020470 	.word	0x40020470
 8001fd0:	40020488 	.word	0x40020488
 8001fd4:	400204a0 	.word	0x400204a0
 8001fd8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 020e 	bic.w	r2, r2, #14
 8001fea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a6c      	ldr	r2, [pc, #432]	@ (80021a4 <HAL_DMA_Abort_IT+0x3a8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d04a      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6b      	ldr	r2, [pc, #428]	@ (80021a8 <HAL_DMA_Abort_IT+0x3ac>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d045      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a69      	ldr	r2, [pc, #420]	@ (80021ac <HAL_DMA_Abort_IT+0x3b0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d040      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a68      	ldr	r2, [pc, #416]	@ (80021b0 <HAL_DMA_Abort_IT+0x3b4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d03b      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a66      	ldr	r2, [pc, #408]	@ (80021b4 <HAL_DMA_Abort_IT+0x3b8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d036      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a65      	ldr	r2, [pc, #404]	@ (80021b8 <HAL_DMA_Abort_IT+0x3bc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d031      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a63      	ldr	r2, [pc, #396]	@ (80021bc <HAL_DMA_Abort_IT+0x3c0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d02c      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a62      	ldr	r2, [pc, #392]	@ (80021c0 <HAL_DMA_Abort_IT+0x3c4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d027      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a60      	ldr	r2, [pc, #384]	@ (80021c4 <HAL_DMA_Abort_IT+0x3c8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d022      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5f      	ldr	r2, [pc, #380]	@ (80021c8 <HAL_DMA_Abort_IT+0x3cc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d01d      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5d      	ldr	r2, [pc, #372]	@ (80021cc <HAL_DMA_Abort_IT+0x3d0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d018      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5c      	ldr	r2, [pc, #368]	@ (80021d0 <HAL_DMA_Abort_IT+0x3d4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d013      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a5a      	ldr	r2, [pc, #360]	@ (80021d4 <HAL_DMA_Abort_IT+0x3d8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00e      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a59      	ldr	r2, [pc, #356]	@ (80021d8 <HAL_DMA_Abort_IT+0x3dc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d009      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a57      	ldr	r2, [pc, #348]	@ (80021dc <HAL_DMA_Abort_IT+0x3e0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_DMA_Abort_IT+0x290>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a56      	ldr	r2, [pc, #344]	@ (80021e0 <HAL_DMA_Abort_IT+0x3e4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d108      	bne.n	800209e <HAL_DMA_Abort_IT+0x2a2>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e007      	b.n	80020ae <HAL_DMA_Abort_IT+0x2b2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a3c      	ldr	r2, [pc, #240]	@ (80021a4 <HAL_DMA_Abort_IT+0x3a8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d072      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a3a      	ldr	r2, [pc, #232]	@ (80021a8 <HAL_DMA_Abort_IT+0x3ac>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d06d      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a39      	ldr	r2, [pc, #228]	@ (80021ac <HAL_DMA_Abort_IT+0x3b0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d068      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a37      	ldr	r2, [pc, #220]	@ (80021b0 <HAL_DMA_Abort_IT+0x3b4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d063      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a36      	ldr	r2, [pc, #216]	@ (80021b4 <HAL_DMA_Abort_IT+0x3b8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d05e      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a34      	ldr	r2, [pc, #208]	@ (80021b8 <HAL_DMA_Abort_IT+0x3bc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d059      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a33      	ldr	r2, [pc, #204]	@ (80021bc <HAL_DMA_Abort_IT+0x3c0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d054      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a31      	ldr	r2, [pc, #196]	@ (80021c0 <HAL_DMA_Abort_IT+0x3c4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d04f      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a30      	ldr	r2, [pc, #192]	@ (80021c4 <HAL_DMA_Abort_IT+0x3c8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04a      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a2e      	ldr	r2, [pc, #184]	@ (80021c8 <HAL_DMA_Abort_IT+0x3cc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d045      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a2d      	ldr	r2, [pc, #180]	@ (80021cc <HAL_DMA_Abort_IT+0x3d0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a2b      	ldr	r2, [pc, #172]	@ (80021d0 <HAL_DMA_Abort_IT+0x3d4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d03b      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2a      	ldr	r2, [pc, #168]	@ (80021d4 <HAL_DMA_Abort_IT+0x3d8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d036      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a28      	ldr	r2, [pc, #160]	@ (80021d8 <HAL_DMA_Abort_IT+0x3dc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a27      	ldr	r2, [pc, #156]	@ (80021dc <HAL_DMA_Abort_IT+0x3e0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d02c      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a25      	ldr	r2, [pc, #148]	@ (80021e0 <HAL_DMA_Abort_IT+0x3e4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d027      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a24      	ldr	r2, [pc, #144]	@ (80021e4 <HAL_DMA_Abort_IT+0x3e8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a22      	ldr	r2, [pc, #136]	@ (80021e8 <HAL_DMA_Abort_IT+0x3ec>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	@ (80021ec <HAL_DMA_Abort_IT+0x3f0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1f      	ldr	r2, [pc, #124]	@ (80021f0 <HAL_DMA_Abort_IT+0x3f4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1e      	ldr	r2, [pc, #120]	@ (80021f4 <HAL_DMA_Abort_IT+0x3f8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <HAL_DMA_Abort_IT+0x3fc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_DMA_Abort_IT+0x400>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Abort_IT+0x3a2>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	@ (8002200 <HAL_DMA_Abort_IT+0x404>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d132      	bne.n	8002204 <HAL_DMA_Abort_IT+0x408>
 800219e:	2301      	movs	r3, #1
 80021a0:	e031      	b.n	8002206 <HAL_DMA_Abort_IT+0x40a>
 80021a2:	bf00      	nop
 80021a4:	40020010 	.word	0x40020010
 80021a8:	40020028 	.word	0x40020028
 80021ac:	40020040 	.word	0x40020040
 80021b0:	40020058 	.word	0x40020058
 80021b4:	40020070 	.word	0x40020070
 80021b8:	40020088 	.word	0x40020088
 80021bc:	400200a0 	.word	0x400200a0
 80021c0:	400200b8 	.word	0x400200b8
 80021c4:	40020410 	.word	0x40020410
 80021c8:	40020428 	.word	0x40020428
 80021cc:	40020440 	.word	0x40020440
 80021d0:	40020458 	.word	0x40020458
 80021d4:	40020470 	.word	0x40020470
 80021d8:	40020488 	.word	0x40020488
 80021dc:	400204a0 	.word	0x400204a0
 80021e0:	400204b8 	.word	0x400204b8
 80021e4:	58025408 	.word	0x58025408
 80021e8:	5802541c 	.word	0x5802541c
 80021ec:	58025430 	.word	0x58025430
 80021f0:	58025444 	.word	0x58025444
 80021f4:	58025458 	.word	0x58025458
 80021f8:	5802546c 	.word	0x5802546c
 80021fc:	58025480 	.word	0x58025480
 8002200:	58025494 	.word	0x58025494
 8002204:	2300      	movs	r3, #0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d028      	beq.n	800225c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002214:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002218:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	2201      	movs	r2, #1
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002238:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800224c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002250:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800225a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002296:	4b89      	ldr	r3, [pc, #548]	@ (80024bc <HAL_GPIO_Init+0x234>)
 8002298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800229a:	e194      	b.n	80025c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8186 	beq.w	80025c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d005      	beq.n	80022cc <HAL_GPIO_Init+0x44>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d130      	bne.n	800232e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002302:	2201      	movs	r2, #1
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0201 	and.w	r2, r3, #1
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b03      	cmp	r3, #3
 8002338:	d017      	beq.n	800236a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d123      	bne.n	80023be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	69b9      	ldr	r1, [r7, #24]
 80023ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0203 	and.w	r2, r3, #3
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80e0 	beq.w	80025c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002400:	4b2f      	ldr	r3, [pc, #188]	@ (80024c0 <HAL_GPIO_Init+0x238>)
 8002402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002406:	4a2e      	ldr	r2, [pc, #184]	@ (80024c0 <HAL_GPIO_Init+0x238>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002410:	4b2b      	ldr	r3, [pc, #172]	@ (80024c0 <HAL_GPIO_Init+0x238>)
 8002412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800241e:	4a29      	ldr	r2, [pc, #164]	@ (80024c4 <HAL_GPIO_Init+0x23c>)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a20      	ldr	r2, [pc, #128]	@ (80024c8 <HAL_GPIO_Init+0x240>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d052      	beq.n	80024f0 <HAL_GPIO_Init+0x268>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a1f      	ldr	r2, [pc, #124]	@ (80024cc <HAL_GPIO_Init+0x244>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d031      	beq.n	80024b6 <HAL_GPIO_Init+0x22e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1e      	ldr	r2, [pc, #120]	@ (80024d0 <HAL_GPIO_Init+0x248>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d02b      	beq.n	80024b2 <HAL_GPIO_Init+0x22a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1d      	ldr	r2, [pc, #116]	@ (80024d4 <HAL_GPIO_Init+0x24c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d025      	beq.n	80024ae <HAL_GPIO_Init+0x226>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1c      	ldr	r2, [pc, #112]	@ (80024d8 <HAL_GPIO_Init+0x250>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01f      	beq.n	80024aa <HAL_GPIO_Init+0x222>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1b      	ldr	r2, [pc, #108]	@ (80024dc <HAL_GPIO_Init+0x254>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d019      	beq.n	80024a6 <HAL_GPIO_Init+0x21e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1a      	ldr	r2, [pc, #104]	@ (80024e0 <HAL_GPIO_Init+0x258>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_GPIO_Init+0x21a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a19      	ldr	r2, [pc, #100]	@ (80024e4 <HAL_GPIO_Init+0x25c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00d      	beq.n	800249e <HAL_GPIO_Init+0x216>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a18      	ldr	r2, [pc, #96]	@ (80024e8 <HAL_GPIO_Init+0x260>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <HAL_GPIO_Init+0x212>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a17      	ldr	r2, [pc, #92]	@ (80024ec <HAL_GPIO_Init+0x264>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d101      	bne.n	8002496 <HAL_GPIO_Init+0x20e>
 8002492:	2309      	movs	r3, #9
 8002494:	e02d      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 8002496:	230a      	movs	r3, #10
 8002498:	e02b      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 800249a:	2308      	movs	r3, #8
 800249c:	e029      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 800249e:	2307      	movs	r3, #7
 80024a0:	e027      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024a2:	2306      	movs	r3, #6
 80024a4:	e025      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024a6:	2305      	movs	r3, #5
 80024a8:	e023      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024aa:	2304      	movs	r3, #4
 80024ac:	e021      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e01f      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e01d      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e01b      	b.n	80024f2 <HAL_GPIO_Init+0x26a>
 80024ba:	bf00      	nop
 80024bc:	58000080 	.word	0x58000080
 80024c0:	58024400 	.word	0x58024400
 80024c4:	58000400 	.word	0x58000400
 80024c8:	58020000 	.word	0x58020000
 80024cc:	58020400 	.word	0x58020400
 80024d0:	58020800 	.word	0x58020800
 80024d4:	58020c00 	.word	0x58020c00
 80024d8:	58021000 	.word	0x58021000
 80024dc:	58021400 	.word	0x58021400
 80024e0:	58021800 	.word	0x58021800
 80024e4:	58021c00 	.word	0x58021c00
 80024e8:	58022000 	.word	0x58022000
 80024ec:	58022400 	.word	0x58022400
 80024f0:	2300      	movs	r3, #0
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	f002 0203 	and.w	r2, r2, #3
 80024f8:	0092      	lsls	r2, r2, #2
 80024fa:	4093      	lsls	r3, r2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002502:	4938      	ldr	r1, [pc, #224]	@ (80025e4 <HAL_GPIO_Init+0x35c>)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002536:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002564:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	3301      	adds	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f47f ae63 	bne.w	800229c <HAL_GPIO_Init+0x14>
  }
}
 80025d6:	bf00      	nop
 80025d8:	bf00      	nop
 80025da:	3724      	adds	r7, #36	@ 0x24
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	58000400 	.word	0x58000400

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002628:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002634:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f804 	bl	800264e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800266c:	4a08      	ldr	r2, [pc, #32]	@ (8002690 <HAL_HSEM_FastTake+0x2c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3320      	adds	r3, #32
 8002672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002676:	4a07      	ldr	r2, [pc, #28]	@ (8002694 <HAL_HSEM_FastTake+0x30>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e000      	b.n	8002682 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	58026400 	.word	0x58026400
 8002694:	80000300 	.word	0x80000300

08002698 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80026a2:	4906      	ldr	r1, [pc, #24]	@ (80026bc <HAL_HSEM_Release+0x24>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	58026400 	.word	0x58026400

080026c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e08b      	b.n	80027ea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe fb7e 	bl	8000de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2224      	movs	r2, #36	@ 0x24
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002710:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002720:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e006      	b.n	8002748 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002746:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d108      	bne.n	8002762 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	e007      	b.n	8002772 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002770:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <HAL_I2C_Init+0x134>)
 800277e:	430b      	orrs	r3, r1
 8002780:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002790:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69d9      	ldr	r1, [r3, #28]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	02008000 	.word	0x02008000

080027f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	68f9      	ldr	r1, [r7, #12]
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
  }
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b20      	cmp	r3, #32
 8002840:	d138      	bne.n	80028b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800284c:	2302      	movs	r3, #2
 800284e:	e032      	b.n	80028b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2224      	movs	r2, #36	@ 0x24
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800287e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d139      	bne.n	800294c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e033      	b.n	800294e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2224      	movs	r2, #36	@ 0x24
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0201 	bic.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002914:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	e000      	b.n	800294e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002964:	4b29      	ldr	r3, [pc, #164]	@ (8002a0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	2b06      	cmp	r3, #6
 800296e:	d00a      	beq.n	8002986 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002970:	4b26      	ldr	r3, [pc, #152]	@ (8002a0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e040      	b.n	8002a04 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e03e      	b.n	8002a04 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002986:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800298e:	491f      	ldr	r1, [pc, #124]	@ (8002a0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4313      	orrs	r3, r2
 8002994:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002996:	f7fe fd4f 	bl	8001438 <HAL_GetTick>
 800299a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800299c:	e009      	b.n	80029b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800299e:	f7fe fd4b 	bl	8001438 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029ac:	d901      	bls.n	80029b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e028      	b.n	8002a04 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029b2:	4b16      	ldr	r3, [pc, #88]	@ (8002a0c <HAL_PWREx_ConfigSupply+0xb0>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029be:	d1ee      	bne.n	800299e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b1e      	cmp	r3, #30
 80029c4:	d008      	beq.n	80029d8 <HAL_PWREx_ConfigSupply+0x7c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80029ca:	d005      	beq.n	80029d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b1d      	cmp	r3, #29
 80029d0:	d002      	beq.n	80029d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80029d6:	d114      	bne.n	8002a02 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80029d8:	f7fe fd2e 	bl	8001438 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029de:	e009      	b.n	80029f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029e0:	f7fe fd2a 	bl	8001438 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029ee:	d901      	bls.n	80029f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e007      	b.n	8002a04 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <HAL_PWREx_ConfigSupply+0xb0>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a00:	d1ee      	bne.n	80029e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	58024800 	.word	0x58024800

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	@ 0x30
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f000 bc48 	b.w	80032b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8088 	beq.w	8002b42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a32:	4b99      	ldr	r3, [pc, #612]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a3c:	4b96      	ldr	r3, [pc, #600]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d007      	beq.n	8002a58 <HAL_RCC_OscConfig+0x48>
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4a:	2b18      	cmp	r3, #24
 8002a4c:	d111      	bne.n	8002a72 <HAL_RCC_OscConfig+0x62>
 8002a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d10c      	bne.n	8002a72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	4b8f      	ldr	r3, [pc, #572]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d06d      	beq.n	8002b40 <HAL_RCC_OscConfig+0x130>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d169      	bne.n	8002b40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f000 bc21 	b.w	80032b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x7a>
 8002a7c:	4b86      	ldr	r3, [pc, #536]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a85      	ldr	r2, [pc, #532]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e02e      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x9c>
 8002a92:	4b81      	ldr	r3, [pc, #516]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a80      	ldr	r2, [pc, #512]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7d      	ldr	r2, [pc, #500]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002aa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xc0>
 8002ab6:	4b78      	ldr	r3, [pc, #480]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a77      	ldr	r2, [pc, #476]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b75      	ldr	r3, [pc, #468]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a74      	ldr	r2, [pc, #464]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd8>
 8002ad0:	4b71      	ldr	r3, [pc, #452]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a70      	ldr	r2, [pc, #448]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b6e      	ldr	r3, [pc, #440]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6d      	ldr	r2, [pc, #436]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fca2 	bl	8001438 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fc9e 	bl	8001438 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e3d4      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xe8>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fc8e 	bl	8001438 <HAL_GetTick>
 8002b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fc8a 	bl	8001438 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e3c0      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b32:	4b59      	ldr	r3, [pc, #356]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x110>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80ca 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b50:	4b51      	ldr	r3, [pc, #324]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <HAL_RCC_OscConfig+0x166>
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	2b18      	cmp	r3, #24
 8002b6a:	d156      	bne.n	8002c1a <HAL_RCC_OscConfig+0x20a>
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d151      	bne.n	8002c1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b76:	4b48      	ldr	r3, [pc, #288]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_RCC_OscConfig+0x17e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e392      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b8e:	4b42      	ldr	r3, [pc, #264]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0219 	bic.w	r2, r3, #25
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	493f      	ldr	r1, [pc, #252]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fc4a 	bl	8001438 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba8:	f7fe fc46 	bl	8001438 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e37c      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bba:	4b37      	ldr	r3, [pc, #220]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc6:	f7fe fc67 	bl	8001498 <HAL_GetREVID>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d817      	bhi.n	8002c04 <HAL_RCC_OscConfig+0x1f4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b40      	cmp	r3, #64	@ 0x40
 8002bda:	d108      	bne.n	8002bee <HAL_RCC_OscConfig+0x1de>
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002be4:	4a2c      	ldr	r2, [pc, #176]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bec:	e07a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	4b2a      	ldr	r3, [pc, #168]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	031b      	lsls	r3, r3, #12
 8002bfc:	4926      	ldr	r1, [pc, #152]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c02:	e06f      	b.n	8002ce4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b24      	ldr	r3, [pc, #144]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	061b      	lsls	r3, r3, #24
 8002c12:	4921      	ldr	r1, [pc, #132]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c18:	e064      	b.n	8002ce4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d047      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c22:	4b1d      	ldr	r3, [pc, #116]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 0219 	bic.w	r2, r3, #25
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	491a      	ldr	r1, [pc, #104]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fc00 	bl	8001438 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fbfc 	bl	8001438 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e332      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c4e:	4b12      	ldr	r3, [pc, #72]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5a:	f7fe fc1d 	bl	8001498 <HAL_GetREVID>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d819      	bhi.n	8002c9c <HAL_RCC_OscConfig+0x28c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b40      	cmp	r3, #64	@ 0x40
 8002c6e:	d108      	bne.n	8002c82 <HAL_RCC_OscConfig+0x272>
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c78:	4a07      	ldr	r2, [pc, #28]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c7e:	6053      	str	r3, [r2, #4]
 8002c80:	e030      	b.n	8002ce4 <HAL_RCC_OscConfig+0x2d4>
 8002c82:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	031b      	lsls	r3, r3, #12
 8002c90:	4901      	ldr	r1, [pc, #4]	@ (8002c98 <HAL_RCC_OscConfig+0x288>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
 8002c96:	e025      	b.n	8002ce4 <HAL_RCC_OscConfig+0x2d4>
 8002c98:	58024400 	.word	0x58024400
 8002c9c:	4b9a      	ldr	r3, [pc, #616]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	4997      	ldr	r1, [pc, #604]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
 8002cb0:	e018      	b.n	8002ce4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb2:	4b95      	ldr	r3, [pc, #596]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a94      	ldr	r2, [pc, #592]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fbbb 	bl	8001438 <HAL_GetTick>
 8002cc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc6:	f7fe fbb7 	bl	8001438 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e2ed      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cd8:	4b8b      	ldr	r3, [pc, #556]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a9 	beq.w	8002e44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf2:	4b85      	ldr	r3, [pc, #532]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cfc:	4b82      	ldr	r3, [pc, #520]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d007      	beq.n	8002d18 <HAL_RCC_OscConfig+0x308>
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b18      	cmp	r3, #24
 8002d0c:	d13a      	bne.n	8002d84 <HAL_RCC_OscConfig+0x374>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d135      	bne.n	8002d84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d18:	4b7b      	ldr	r3, [pc, #492]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_OscConfig+0x320>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b80      	cmp	r3, #128	@ 0x80
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e2c1      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d30:	f7fe fbb2 	bl	8001498 <HAL_GetREVID>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d817      	bhi.n	8002d6e <HAL_RCC_OscConfig+0x35e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d108      	bne.n	8002d58 <HAL_RCC_OscConfig+0x348>
 8002d46:	4b70      	ldr	r3, [pc, #448]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002d50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d56:	e075      	b.n	8002e44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d58:	4b6b      	ldr	r3, [pc, #428]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	069b      	lsls	r3, r3, #26
 8002d66:	4968      	ldr	r1, [pc, #416]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d6c:	e06a      	b.n	8002e44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d6e:	4b66      	ldr	r3, [pc, #408]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	061b      	lsls	r3, r3, #24
 8002d7c:	4962      	ldr	r1, [pc, #392]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d82:	e05f      	b.n	8002e44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d042      	beq.n	8002e12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a5d      	ldr	r2, [pc, #372]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe fb4e 	bl	8001438 <HAL_GetTick>
 8002d9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002da0:	f7fe fb4a 	bl	8001438 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e280      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002db2:	4b55      	ldr	r3, [pc, #340]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dbe:	f7fe fb6b 	bl	8001498 <HAL_GetREVID>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d817      	bhi.n	8002dfc <HAL_RCC_OscConfig+0x3ec>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d108      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3d6>
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ddc:	4a4a      	ldr	r2, [pc, #296]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002dde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002de2:	6053      	str	r3, [r2, #4]
 8002de4:	e02e      	b.n	8002e44 <HAL_RCC_OscConfig+0x434>
 8002de6:	4b48      	ldr	r3, [pc, #288]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	069b      	lsls	r3, r3, #26
 8002df4:	4944      	ldr	r1, [pc, #272]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
 8002dfa:	e023      	b.n	8002e44 <HAL_RCC_OscConfig+0x434>
 8002dfc:	4b42      	ldr	r3, [pc, #264]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	061b      	lsls	r3, r3, #24
 8002e0a:	493f      	ldr	r1, [pc, #252]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60cb      	str	r3, [r1, #12]
 8002e10:	e018      	b.n	8002e44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e12:	4b3d      	ldr	r3, [pc, #244]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a3c      	ldr	r2, [pc, #240]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002e18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe fb0b 	bl	8001438 <HAL_GetTick>
 8002e22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e26:	f7fe fb07 	bl	8001438 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e23d      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e38:	4b33      	ldr	r3, [pc, #204]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d036      	beq.n	8002ebe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d019      	beq.n	8002e8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e58:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe fae8 	bl	8001438 <HAL_GetTick>
 8002e68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fae4 	bl	8001438 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e21a      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e7e:	4b22      	ldr	r3, [pc, #136]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x45c>
 8002e8a:	e018      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e90:	4a1d      	ldr	r2, [pc, #116]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe face 	bl	8001438 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fe faca 	bl	8001438 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e200      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eb2:	4b15      	ldr	r3, [pc, #84]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d039      	beq.n	8002f3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01c      	beq.n	8002f0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002ed8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002edc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ede:	f7fe faab 	bl	8001438 <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ee6:	f7fe faa7 	bl	8001438 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1dd      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ef8:	4b03      	ldr	r3, [pc, #12]	@ (8002f08 <HAL_RCC_OscConfig+0x4f8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x4d6>
 8002f04:	e01b      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
 8002f06:	bf00      	nop
 8002f08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f0c:	4b9b      	ldr	r3, [pc, #620]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a9a      	ldr	r2, [pc, #616]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002f12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f18:	f7fe fa8e 	bl	8001438 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f20:	f7fe fa8a 	bl	8001438 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e1c0      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f32:	4b92      	ldr	r3, [pc, #584]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8081 	beq.w	800304e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8003180 <HAL_RCC_OscConfig+0x770>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a8b      	ldr	r2, [pc, #556]	@ (8003180 <HAL_RCC_OscConfig+0x770>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f58:	f7fe fa6e 	bl	8001438 <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f60:	f7fe fa6a 	bl	8001438 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	@ 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e1a0      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f72:	4b83      	ldr	r3, [pc, #524]	@ (8003180 <HAL_RCC_OscConfig+0x770>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d106      	bne.n	8002f94 <HAL_RCC_OscConfig+0x584>
 8002f86:	4b7d      	ldr	r3, [pc, #500]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8a:	4a7c      	ldr	r2, [pc, #496]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f92:	e02d      	b.n	8002ff0 <HAL_RCC_OscConfig+0x5e0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x5a6>
 8002f9c:	4b77      	ldr	r3, [pc, #476]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa0:	4a76      	ldr	r2, [pc, #472]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa8:	4b74      	ldr	r3, [pc, #464]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fac:	4a73      	ldr	r2, [pc, #460]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002fae:	f023 0304 	bic.w	r3, r3, #4
 8002fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb4:	e01c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x5e0>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5c8>
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc2:	4a6e      	ldr	r2, [pc, #440]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fca:	4b6c      	ldr	r3, [pc, #432]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	4a6b      	ldr	r2, [pc, #428]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x5e0>
 8002fd8:	4b68      	ldr	r3, [pc, #416]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	4a67      	ldr	r2, [pc, #412]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe4:	4b65      	ldr	r3, [pc, #404]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	4a64      	ldr	r2, [pc, #400]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8002fea:	f023 0304 	bic.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fa1e 	bl	8001438 <HAL_GetTick>
 8002ffc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ffe:	e00a      	b.n	8003016 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe fa1a 	bl	8001438 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e14e      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003016:	4b59      	ldr	r3, [pc, #356]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ee      	beq.n	8003000 <HAL_RCC_OscConfig+0x5f0>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fe fa08 	bl	8001438 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800302a:	e00a      	b.n	8003042 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7fe fa04 	bl	8001438 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e138      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003042:	4b4e      	ldr	r3, [pc, #312]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ee      	bne.n	800302c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 812d 	beq.w	80032b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003058:	4b48      	ldr	r3, [pc, #288]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003060:	2b18      	cmp	r3, #24
 8003062:	f000 80bd 	beq.w	80031e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	2b02      	cmp	r3, #2
 800306c:	f040 809e 	bne.w	80031ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003070:	4b42      	ldr	r3, [pc, #264]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a41      	ldr	r2, [pc, #260]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800307a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe f9dc 	bl	8001438 <HAL_GetTick>
 8003080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe f9d8 	bl	8001438 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e10e      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003096:	4b39      	ldr	r3, [pc, #228]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a2:	4b36      	ldr	r3, [pc, #216]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 80030a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030a6:	4b37      	ldr	r3, [pc, #220]	@ (8003184 <HAL_RCC_OscConfig+0x774>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	430a      	orrs	r2, r1
 80030b6:	4931      	ldr	r1, [pc, #196]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	3b01      	subs	r3, #1
 80030c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ca:	3b01      	subs	r3, #1
 80030cc:	025b      	lsls	r3, r3, #9
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d6:	3b01      	subs	r3, #1
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e4:	3b01      	subs	r3, #1
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80030ec:	4923      	ldr	r1, [pc, #140]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80030f2:	4b22      	ldr	r3, [pc, #136]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 80030f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f6:	4a21      	ldr	r2, [pc, #132]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030fe:	4b1f      	ldr	r3, [pc, #124]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003102:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8003104:	4013      	ands	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800310a:	00d2      	lsls	r2, r2, #3
 800310c:	491b      	ldr	r1, [pc, #108]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 800310e:	4313      	orrs	r3, r2
 8003110:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003112:	4b1a      	ldr	r3, [pc, #104]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003116:	f023 020c 	bic.w	r2, r3, #12
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	4917      	ldr	r1, [pc, #92]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003120:	4313      	orrs	r3, r2
 8003122:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003124:	4b15      	ldr	r3, [pc, #84]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	f023 0202 	bic.w	r2, r3, #2
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	4912      	ldr	r1, [pc, #72]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003136:	4b11      	ldr	r3, [pc, #68]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313a:	4a10      	ldr	r2, [pc, #64]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003140:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003142:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	4a0d      	ldr	r2, [pc, #52]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800314e:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003152:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800315a:	4b08      	ldr	r3, [pc, #32]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	4a07      	ldr	r2, [pc, #28]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003166:	4b05      	ldr	r3, [pc, #20]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a04      	ldr	r2, [pc, #16]	@ (800317c <HAL_RCC_OscConfig+0x76c>)
 800316c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7fe f961 	bl	8001438 <HAL_GetTick>
 8003176:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003178:	e011      	b.n	800319e <HAL_RCC_OscConfig+0x78e>
 800317a:	bf00      	nop
 800317c:	58024400 	.word	0x58024400
 8003180:	58024800 	.word	0x58024800
 8003184:	fffffc0c 	.word	0xfffffc0c
 8003188:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe f954 	bl	8001438 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e08a      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800319e:	4b47      	ldr	r3, [pc, #284]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x77c>
 80031aa:	e082      	b.n	80032b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ac:	4b43      	ldr	r3, [pc, #268]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a42      	ldr	r2, [pc, #264]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 80031b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe f93e 	bl	8001438 <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7fe f93a 	bl	8001438 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e070      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d2:	4b3a      	ldr	r3, [pc, #232]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x7b0>
 80031de:	e068      	b.n	80032b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031e0:	4b36      	ldr	r3, [pc, #216]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031e6:	4b35      	ldr	r3, [pc, #212]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d031      	beq.n	8003258 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f003 0203 	and.w	r2, r3, #3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d12a      	bne.n	8003258 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d122      	bne.n	8003258 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d11a      	bne.n	8003258 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	0a5b      	lsrs	r3, r3, #9
 8003226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d111      	bne.n	8003258 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d108      	bne.n	8003258 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	0e1b      	lsrs	r3, r3, #24
 800324a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003252:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e02b      	b.n	80032b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800325c:	4b17      	ldr	r3, [pc, #92]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 800325e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003260:	08db      	lsrs	r3, r3, #3
 8003262:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003266:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	429a      	cmp	r2, r3
 8003270:	d01f      	beq.n	80032b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003272:	4b12      	ldr	r3, [pc, #72]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	4a11      	ldr	r2, [pc, #68]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800327e:	f7fe f8db 	bl	8001438 <HAL_GetTick>
 8003282:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003284:	bf00      	nop
 8003286:	f7fe f8d7 	bl	8001438 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	4293      	cmp	r3, r2
 8003290:	d0f9      	beq.n	8003286 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003292:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 8003294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <HAL_RCC_OscConfig+0x8b0>)
 8003298:	4013      	ands	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800329e:	00d2      	lsls	r2, r2, #3
 80032a0:	4906      	ldr	r1, [pc, #24]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032a6:	4b05      	ldr	r3, [pc, #20]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032aa:	4a04      	ldr	r2, [pc, #16]	@ (80032bc <HAL_RCC_OscConfig+0x8ac>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3730      	adds	r7, #48	@ 0x30
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	58024400 	.word	0x58024400
 80032c0:	ffff0007 	.word	0xffff0007

080032c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e19c      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b8a      	ldr	r3, [pc, #552]	@ (8003504 <HAL_RCC_ClockConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d910      	bls.n	8003308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b87      	ldr	r3, [pc, #540]	@ (8003504 <HAL_RCC_ClockConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 020f 	bic.w	r2, r3, #15
 80032ee:	4985      	ldr	r1, [pc, #532]	@ (8003504 <HAL_RCC_ClockConfig+0x240>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b83      	ldr	r3, [pc, #524]	@ (8003504 <HAL_RCC_ClockConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e184      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d010      	beq.n	8003336 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	4b7b      	ldr	r3, [pc, #492]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003320:	429a      	cmp	r2, r3
 8003322:	d908      	bls.n	8003336 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003324:	4b78      	ldr	r3, [pc, #480]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	4975      	ldr	r1, [pc, #468]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003332:	4313      	orrs	r3, r2
 8003334:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d010      	beq.n	8003364 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	4b70      	ldr	r3, [pc, #448]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800334e:	429a      	cmp	r2, r3
 8003350:	d908      	bls.n	8003364 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003352:	4b6d      	ldr	r3, [pc, #436]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	496a      	ldr	r1, [pc, #424]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003360:	4313      	orrs	r3, r2
 8003362:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d010      	beq.n	8003392 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	4b64      	ldr	r3, [pc, #400]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800337c:	429a      	cmp	r2, r3
 800337e:	d908      	bls.n	8003392 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003380:	4b61      	ldr	r3, [pc, #388]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	495e      	ldr	r1, [pc, #376]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 800338e:	4313      	orrs	r3, r2
 8003390:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	4b59      	ldr	r3, [pc, #356]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d908      	bls.n	80033c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033ae:	4b56      	ldr	r3, [pc, #344]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4953      	ldr	r1, [pc, #332]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	429a      	cmp	r2, r3
 80033da:	d908      	bls.n	80033ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f023 020f 	bic.w	r2, r3, #15
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4947      	ldr	r1, [pc, #284]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d055      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033fa:	4b43      	ldr	r3, [pc, #268]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	4940      	ldr	r1, [pc, #256]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003408:	4313      	orrs	r3, r2
 800340a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d107      	bne.n	8003424 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003414:	4b3c      	ldr	r3, [pc, #240]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d121      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0f6      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d107      	bne.n	800343c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800342c:	4b36      	ldr	r3, [pc, #216]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d115      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0ea      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d107      	bne.n	8003454 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003444:	4b30      	ldr	r3, [pc, #192]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0de      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003454:	4b2c      	ldr	r3, [pc, #176]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0d6      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003464:	4b28      	ldr	r3, [pc, #160]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f023 0207 	bic.w	r2, r3, #7
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4925      	ldr	r1, [pc, #148]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003472:	4313      	orrs	r3, r2
 8003474:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003476:	f7fd ffdf 	bl	8001438 <HAL_GetTick>
 800347a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347c:	e00a      	b.n	8003494 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	f7fd ffdb 	bl	8001438 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0be      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003494:	4b1c      	ldr	r3, [pc, #112]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d1eb      	bne.n	800347e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d010      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	429a      	cmp	r2, r3
 80034c0:	d208      	bcs.n	80034d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c2:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f023 020f 	bic.w	r2, r3, #15
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	490e      	ldr	r1, [pc, #56]	@ (8003508 <HAL_RCC_ClockConfig+0x244>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003504 <HAL_RCC_ClockConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d214      	bcs.n	800350c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b08      	ldr	r3, [pc, #32]	@ (8003504 <HAL_RCC_ClockConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 020f 	bic.w	r2, r3, #15
 80034ea:	4906      	ldr	r1, [pc, #24]	@ (8003504 <HAL_RCC_ClockConfig+0x240>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b04      	ldr	r3, [pc, #16]	@ (8003504 <HAL_RCC_ClockConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e086      	b.n	8003612 <HAL_RCC_ClockConfig+0x34e>
 8003504:	52002000 	.word	0x52002000
 8003508:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d010      	beq.n	800353a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	4b3f      	ldr	r3, [pc, #252]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003524:	429a      	cmp	r2, r3
 8003526:	d208      	bcs.n	800353a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003528:	4b3c      	ldr	r3, [pc, #240]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	4939      	ldr	r1, [pc, #228]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 8003536:	4313      	orrs	r3, r2
 8003538:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d010      	beq.n	8003568 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	4b34      	ldr	r3, [pc, #208]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003552:	429a      	cmp	r2, r3
 8003554:	d208      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003556:	4b31      	ldr	r3, [pc, #196]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	492e      	ldr	r1, [pc, #184]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 8003564:	4313      	orrs	r3, r2
 8003566:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	4b28      	ldr	r3, [pc, #160]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003580:	429a      	cmp	r2, r3
 8003582:	d208      	bcs.n	8003596 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003584:	4b25      	ldr	r3, [pc, #148]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	4922      	ldr	r1, [pc, #136]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 8003592:	4313      	orrs	r3, r2
 8003594:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d208      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035b2:	4b1a      	ldr	r3, [pc, #104]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4917      	ldr	r1, [pc, #92]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035c4:	f000 f834 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b14      	ldr	r3, [pc, #80]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	4912      	ldr	r1, [pc, #72]	@ (8003620 <HAL_RCC_ClockConfig+0x35c>)
 80035d6:	5ccb      	ldrb	r3, [r1, r3]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	fa22 f303 	lsr.w	r3, r2, r3
 80035e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035e2:	4b0e      	ldr	r3, [pc, #56]	@ (800361c <HAL_RCC_ClockConfig+0x358>)
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003620 <HAL_RCC_ClockConfig+0x35c>)
 80035ec:	5cd3      	ldrb	r3, [r2, r3]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <HAL_RCC_ClockConfig+0x360>)
 80035fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <HAL_RCC_ClockConfig+0x364>)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003602:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <HAL_RCC_ClockConfig+0x368>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd fecc 	bl	80013a4 <HAL_InitTick>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	58024400 	.word	0x58024400
 8003620:	0800aa14 	.word	0x0800aa14
 8003624:	24000004 	.word	0x24000004
 8003628:	24000000 	.word	0x24000000
 800362c:	24000008 	.word	0x24000008

08003630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	b089      	sub	sp, #36	@ 0x24
 8003634:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003636:	4bb3      	ldr	r3, [pc, #716]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800363e:	2b18      	cmp	r3, #24
 8003640:	f200 8155 	bhi.w	80038ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003644:	a201      	add	r2, pc, #4	@ (adr r2, 800364c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	080036b1 	.word	0x080036b1
 8003650:	080038ef 	.word	0x080038ef
 8003654:	080038ef 	.word	0x080038ef
 8003658:	080038ef 	.word	0x080038ef
 800365c:	080038ef 	.word	0x080038ef
 8003660:	080038ef 	.word	0x080038ef
 8003664:	080038ef 	.word	0x080038ef
 8003668:	080038ef 	.word	0x080038ef
 800366c:	080036d7 	.word	0x080036d7
 8003670:	080038ef 	.word	0x080038ef
 8003674:	080038ef 	.word	0x080038ef
 8003678:	080038ef 	.word	0x080038ef
 800367c:	080038ef 	.word	0x080038ef
 8003680:	080038ef 	.word	0x080038ef
 8003684:	080038ef 	.word	0x080038ef
 8003688:	080038ef 	.word	0x080038ef
 800368c:	080036dd 	.word	0x080036dd
 8003690:	080038ef 	.word	0x080038ef
 8003694:	080038ef 	.word	0x080038ef
 8003698:	080038ef 	.word	0x080038ef
 800369c:	080038ef 	.word	0x080038ef
 80036a0:	080038ef 	.word	0x080038ef
 80036a4:	080038ef 	.word	0x080038ef
 80036a8:	080038ef 	.word	0x080038ef
 80036ac:	080036e3 	.word	0x080036e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036b0:	4b94      	ldr	r3, [pc, #592]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036bc:	4b91      	ldr	r3, [pc, #580]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	08db      	lsrs	r3, r3, #3
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	4a90      	ldr	r2, [pc, #576]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
 80036cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036ce:	e111      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036d0:	4b8d      	ldr	r3, [pc, #564]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036d2:	61bb      	str	r3, [r7, #24]
      break;
 80036d4:	e10e      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036d6:	4b8d      	ldr	r3, [pc, #564]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036d8:	61bb      	str	r3, [r7, #24]
      break;
 80036da:	e10b      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80036dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80036de:	61bb      	str	r3, [r7, #24]
      break;
 80036e0:	e108      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80036e2:	4b88      	ldr	r3, [pc, #544]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80036ec:	4b85      	ldr	r3, [pc, #532]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036f8:	4b82      	ldr	r3, [pc, #520]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003702:	4b80      	ldr	r3, [pc, #512]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	08db      	lsrs	r3, r3, #3
 8003708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80e1 	beq.w	80038e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b02      	cmp	r3, #2
 800372a:	f000 8083 	beq.w	8003834 <HAL_RCC_GetSysClockFreq+0x204>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b02      	cmp	r3, #2
 8003732:	f200 80a1 	bhi.w	8003878 <HAL_RCC_GetSysClockFreq+0x248>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x114>
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d056      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003742:	e099      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003744:	4b6f      	ldr	r3, [pc, #444]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d02d      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003750:	4b6c      	ldr	r3, [pc, #432]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	08db      	lsrs	r3, r3, #3
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	4a6b      	ldr	r2, [pc, #428]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800377a:	4b62      	ldr	r3, [pc, #392]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800378a:	ed97 6a02 	vldr	s12, [r7, #8]
 800378e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003914 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800379a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800379e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037aa:	e087      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003918 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037be:	4b51      	ldr	r3, [pc, #324]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80037d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003914 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037ee:	e065      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800391c <HAL_RCC_GetSysClockFreq+0x2ec>
 80037fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003802:	4b40      	ldr	r3, [pc, #256]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003812:	ed97 6a02 	vldr	s12, [r7, #8]
 8003816:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003914 <HAL_RCC_GetSysClockFreq+0x2e4>
 800381a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800382a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003832:	e043      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003920 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003846:	4b2f      	ldr	r3, [pc, #188]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003856:	ed97 6a02 	vldr	s12, [r7, #8]
 800385a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003914 <HAL_RCC_GetSysClockFreq+0x2e4>
 800385e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800386a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003876:	e021      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	ee07 3a90 	vmov	s15, r3
 800387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003882:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800391c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800388a:	4b1e      	ldr	r3, [pc, #120]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800389a:	ed97 6a02 	vldr	s12, [r7, #8]
 800389e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003914 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c0:	0a5b      	lsrs	r3, r3, #9
 80038c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038c6:	3301      	adds	r3, #1
 80038c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80038d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e0:	ee17 3a90 	vmov	r3, s15
 80038e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80038e6:	e005      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
      break;
 80038ec:	e002      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80038ee:	4b07      	ldr	r3, [pc, #28]	@ (800390c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038f0:	61bb      	str	r3, [r7, #24]
      break;
 80038f2:	bf00      	nop
  }

  return sysclockfreq;
 80038f4:	69bb      	ldr	r3, [r7, #24]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3724      	adds	r7, #36	@ 0x24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	58024400 	.word	0x58024400
 8003908:	03d09000 	.word	0x03d09000
 800390c:	003d0900 	.word	0x003d0900
 8003910:	017d7840 	.word	0x017d7840
 8003914:	46000000 	.word	0x46000000
 8003918:	4c742400 	.word	0x4c742400
 800391c:	4a742400 	.word	0x4a742400
 8003920:	4bbebc20 	.word	0x4bbebc20

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800392a:	f7ff fe81 	bl	8003630 <HAL_RCC_GetSysClockFreq>
 800392e:	4602      	mov	r2, r0
 8003930:	4b10      	ldr	r3, [pc, #64]	@ (8003974 <HAL_RCC_GetHCLKFreq+0x50>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	490f      	ldr	r1, [pc, #60]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x54>)
 800393c:	5ccb      	ldrb	r3, [r1, r3]
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003948:	4b0a      	ldr	r3, [pc, #40]	@ (8003974 <HAL_RCC_GetHCLKFreq+0x50>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	4a09      	ldr	r2, [pc, #36]	@ (8003978 <HAL_RCC_GetHCLKFreq+0x54>)
 8003952:	5cd3      	ldrb	r3, [r2, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	fa22 f303 	lsr.w	r3, r2, r3
 800395e:	4a07      	ldr	r2, [pc, #28]	@ (800397c <HAL_RCC_GetHCLKFreq+0x58>)
 8003960:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003962:	4a07      	ldr	r2, [pc, #28]	@ (8003980 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003968:	4b04      	ldr	r3, [pc, #16]	@ (800397c <HAL_RCC_GetHCLKFreq+0x58>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	58024400 	.word	0x58024400
 8003978:	0800aa14 	.word	0x0800aa14
 800397c:	24000004 	.word	0x24000004
 8003980:	24000000 	.word	0x24000000

08003984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003988:	f7ff ffcc 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4904      	ldr	r1, [pc, #16]	@ (80039ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	58024400 	.word	0x58024400
 80039ac:	0800aa14 	.word	0x0800aa14

080039b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80039b4:	f7ff ffb6 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 80039b8:	4602      	mov	r2, r0
 80039ba:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	0a1b      	lsrs	r3, r3, #8
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4904      	ldr	r1, [pc, #16]	@ (80039d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039c6:	5ccb      	ldrb	r3, [r1, r3]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	58024400 	.word	0x58024400
 80039d8:	0800aa14 	.word	0x0800aa14

080039dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e0:	b0ca      	sub	sp, #296	@ 0x128
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039e8:	2300      	movs	r3, #0
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ee:	2300      	movs	r3, #0
 80039f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003a00:	2500      	movs	r5, #0
 8003a02:	ea54 0305 	orrs.w	r3, r4, r5
 8003a06:	d049      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a12:	d02f      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a18:	d828      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a1e:	d01a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a24:	d822      	bhi.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a2e:	d007      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a30:	e01c      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a32:	4bb8      	ldr	r3, [pc, #736]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a36:	4ab7      	ldr	r2, [pc, #732]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a3e:	e01a      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	3308      	adds	r3, #8
 8003a46:	2102      	movs	r1, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f002 fb61 	bl	8006110 <RCCEx_PLL2_Config>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a54:	e00f      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5a:	3328      	adds	r3, #40	@ 0x28
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f002 fc08 	bl	8006274 <RCCEx_PLL3_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a6a:	e004      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a72:	e000      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a7e:	4ba5      	ldr	r3, [pc, #660]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a8c:	4aa1      	ldr	r2, [pc, #644]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a92:	e003      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003aa8:	f04f 0900 	mov.w	r9, #0
 8003aac:	ea58 0309 	orrs.w	r3, r8, r9
 8003ab0:	d047      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d82a      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003abc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003ad9 	.word	0x08003ad9
 8003ac8:	08003ae7 	.word	0x08003ae7
 8003acc:	08003afd 	.word	0x08003afd
 8003ad0:	08003b1b 	.word	0x08003b1b
 8003ad4:	08003b1b 	.word	0x08003b1b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4b8e      	ldr	r3, [pc, #568]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	4a8d      	ldr	r2, [pc, #564]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ae4:	e01a      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	3308      	adds	r3, #8
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 fb0e 	bl	8006110 <RCCEx_PLL2_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003afa:	e00f      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b00:	3328      	adds	r3, #40	@ 0x28
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f002 fbb5 	bl	8006274 <RCCEx_PLL3_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b10:	e004      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b24:	4b7b      	ldr	r3, [pc, #492]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b28:	f023 0107 	bic.w	r1, r3, #7
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b32:	4a78      	ldr	r2, [pc, #480]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b34:	430b      	orrs	r3, r1
 8003b36:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b38:	e003      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003b4e:	f04f 0b00 	mov.w	fp, #0
 8003b52:	ea5a 030b 	orrs.w	r3, sl, fp
 8003b56:	d04c      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b62:	d030      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b68:	d829      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b6c:	d02d      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b70:	d825      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b72:	2b80      	cmp	r3, #128	@ 0x80
 8003b74:	d018      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b76:	2b80      	cmp	r3, #128	@ 0x80
 8003b78:	d821      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b7e:	2b40      	cmp	r3, #64	@ 0x40
 8003b80:	d007      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b82:	e01c      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b84:	4b63      	ldr	r3, [pc, #396]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	4a62      	ldr	r2, [pc, #392]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b90:	e01c      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	3308      	adds	r3, #8
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f002 fab8 	bl	8006110 <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ba6:	e011      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	3328      	adds	r3, #40	@ 0x28
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f002 fb5f 	bl	8006274 <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003bbc:	e006      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc4:	e002      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e000      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be2:	4a4c      	ldr	r2, [pc, #304]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003be4:	430b      	orrs	r3, r1
 8003be6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003bfe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003c08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	d053      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c1e:	d035      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c20:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c24:	d82e      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c2a:	d031      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003c30:	d828      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c36:	d01a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003c38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c3c:	d822      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003c42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c46:	d007      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003c48:	e01c      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4a:	4b32      	ldr	r3, [pc, #200]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4e:	4a31      	ldr	r2, [pc, #196]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c56:	e01c      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f002 fa55 	bl	8006110 <RCCEx_PLL2_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c6c:	e011      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c72:	3328      	adds	r3, #40	@ 0x28
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f002 fafc 	bl	8006274 <RCCEx_PLL3_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c82:	e006      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c8a:	e002      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c8c:	bf00      	nop
 8003c8e:	e000      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003caa:	4a1a      	ldr	r2, [pc, #104]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cac:	430b      	orrs	r3, r1
 8003cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb0:	e003      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003cc6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003cd0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	d056      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ce2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ce6:	d038      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ce8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cec:	d831      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cf2:	d034      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003cf4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cf8:	d82b      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cfe:	d01d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d04:	d825      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003d0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003d10:	e01f      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d12:	bf00      	nop
 8003d14:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d18:	4ba2      	ldr	r3, [pc, #648]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1c:	4aa1      	ldr	r2, [pc, #644]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d24:	e01c      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 f9ee 	bl	8006110 <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d3a:	e011      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d40:	3328      	adds	r3, #40	@ 0x28
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f002 fa95 	bl	8006274 <RCCEx_PLL3_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d58:	e002      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d68:	4b8e      	ldr	r3, [pc, #568]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d78:	4a8a      	ldr	r2, [pc, #552]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d7e:	e003      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003da2:	460b      	mov	r3, r1
 8003da4:	4313      	orrs	r3, r2
 8003da6:	d03a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dae:	2b30      	cmp	r3, #48	@ 0x30
 8003db0:	d01f      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003db2:	2b30      	cmp	r3, #48	@ 0x30
 8003db4:	d819      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d00c      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d815      	bhi.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d019      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d111      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc6:	4b77      	ldr	r3, [pc, #476]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	4a76      	ldr	r2, [pc, #472]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003dd2:	e011      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	3308      	adds	r3, #8
 8003dda:	2102      	movs	r1, #2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f002 f997 	bl	8006110 <RCCEx_PLL2_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003de8:	e006      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003df0:	e002      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003df2:	bf00      	nop
 8003df4:	e000      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e00:	4b68      	ldr	r3, [pc, #416]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e04:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0e:	4a65      	ldr	r2, [pc, #404]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e10:	430b      	orrs	r3, r1
 8003e12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003e2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e34:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	d051      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e48:	d035      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003e4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e4e:	d82e      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e54:	d031      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003e56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e5a:	d828      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e60:	d01a      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e66:	d822      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e70:	d007      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e72:	e01c      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e74:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	4a4a      	ldr	r2, [pc, #296]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e80:	e01c      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	3308      	adds	r3, #8
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f002 f940 	bl	8006110 <RCCEx_PLL2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e96:	e011      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	3328      	adds	r3, #40	@ 0x28
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f002 f9e7 	bl	8006274 <RCCEx_PLL3_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003eac:	e006      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eb4:	e002      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ec4:	4b37      	ldr	r3, [pc, #220]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed2:	4a34      	ldr	r2, [pc, #208]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ed8:	e003      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003eee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ef8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003efc:	460b      	mov	r3, r1
 8003efe:	4313      	orrs	r3, r2
 8003f00:	d056      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f0c:	d033      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003f0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f12:	d82c      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f18:	d02f      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003f1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f1e:	d826      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f24:	d02b      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003f26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f2a:	d820      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f30:	d012      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003f32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f36:	d81a      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d022      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f40:	d115      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	3308      	adds	r3, #8
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f002 f8e0 	bl	8006110 <RCCEx_PLL2_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f56:	e015      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	3328      	adds	r3, #40	@ 0x28
 8003f5e:	2101      	movs	r1, #1
 8003f60:	4618      	mov	r0, r3
 8003f62:	f002 f987 	bl	8006274 <RCCEx_PLL3_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f76:	bf00      	nop
 8003f78:	e004      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f8c:	4b05      	ldr	r3, [pc, #20]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f9a:	4a02      	ldr	r2, [pc, #8]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003fa0:	e006      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003fa2:	bf00      	nop
 8003fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fc6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	d055      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fdc:	d033      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fe2:	d82c      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe8:	d02f      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fee:	d826      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ff0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ff4:	d02b      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003ff6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ffa:	d820      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ffc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004000:	d012      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004006:	d81a      	bhi.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d022      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800400c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004010:	d115      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	3308      	adds	r3, #8
 8004018:	2101      	movs	r1, #1
 800401a:	4618      	mov	r0, r3
 800401c:	f002 f878 	bl	8006110 <RCCEx_PLL2_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004026:	e015      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	3328      	adds	r3, #40	@ 0x28
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f002 f91f 	bl	8006274 <RCCEx_PLL3_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800403c:	e00a      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004044:	e006      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004046:	bf00      	nop
 8004048:	e004      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800404a:	bf00      	nop
 800404c:	e002      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800404e:	bf00      	nop
 8004050:	e000      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800405c:	4ba3      	ldr	r3, [pc, #652]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004068:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800406c:	4a9f      	ldr	r2, [pc, #636]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406e:	430b      	orrs	r3, r1
 8004070:	6593      	str	r3, [r2, #88]	@ 0x58
 8004072:	e003      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004092:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004096:	460b      	mov	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	d037      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040a6:	d00e      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80040a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ac:	d816      	bhi.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80040b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040b6:	d111      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b8:	4b8c      	ldr	r3, [pc, #560]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	4a8b      	ldr	r2, [pc, #556]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040c4:	e00f      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	3308      	adds	r3, #8
 80040cc:	2101      	movs	r1, #1
 80040ce:	4618      	mov	r0, r3
 80040d0:	f002 f81e 	bl	8006110 <RCCEx_PLL2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80040da:	e004      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80040e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10a      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040ee:	4b7f      	ldr	r3, [pc, #508]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	4a7b      	ldr	r2, [pc, #492]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	6513      	str	r3, [r2, #80]	@ 0x50
 8004102:	e003      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004108:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800411c:	2300      	movs	r3, #0
 800411e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004122:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004126:	460b      	mov	r3, r1
 8004128:	4313      	orrs	r3, r2
 800412a:	d039      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004132:	2b03      	cmp	r3, #3
 8004134:	d81c      	bhi.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004136:	a201      	add	r2, pc, #4	@ (adr r2, 800413c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413c:	08004179 	.word	0x08004179
 8004140:	0800414d 	.word	0x0800414d
 8004144:	0800415b 	.word	0x0800415b
 8004148:	08004179 	.word	0x08004179
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414c:	4b67      	ldr	r3, [pc, #412]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800414e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004150:	4a66      	ldr	r2, [pc, #408]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004158:	e00f      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	3308      	adds	r3, #8
 8004160:	2102      	movs	r1, #2
 8004162:	4618      	mov	r0, r3
 8004164:	f001 ffd4 	bl	8006110 <RCCEx_PLL2_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800416e:	e004      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004176:	e000      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004182:	4b5a      	ldr	r3, [pc, #360]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004186:	f023 0103 	bic.w	r1, r3, #3
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004190:	4a56      	ldr	r2, [pc, #344]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004192:	430b      	orrs	r3, r1
 8004194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004196:	e003      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80041ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80041ba:	460b      	mov	r3, r1
 80041bc:	4313      	orrs	r3, r2
 80041be:	f000 809f 	beq.w	8004300 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041c2:	4b4b      	ldr	r3, [pc, #300]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a4a      	ldr	r2, [pc, #296]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ce:	f7fd f933 	bl	8001438 <HAL_GetTick>
 80041d2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041d6:	e00b      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d8:	f7fd f92e 	bl	8001438 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b64      	cmp	r3, #100	@ 0x64
 80041e6:	d903      	bls.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041ee:	e005      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f0:	4b3f      	ldr	r3, [pc, #252]	@ (80042f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0ed      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80041fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004200:	2b00      	cmp	r3, #0
 8004202:	d179      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004204:	4b39      	ldr	r3, [pc, #228]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004206:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004210:	4053      	eors	r3, r2
 8004212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004216:	2b00      	cmp	r3, #0
 8004218:	d015      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800421a:	4b34      	ldr	r3, [pc, #208]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004222:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004226:	4b31      	ldr	r3, [pc, #196]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422a:	4a30      	ldr	r2, [pc, #192]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004230:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004232:	4b2e      	ldr	r3, [pc, #184]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004236:	4a2d      	ldr	r2, [pc, #180]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800423c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800423e:	4a2b      	ldr	r2, [pc, #172]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004240:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004244:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800424e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004252:	d118      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fd f8f0 	bl	8001438 <HAL_GetTick>
 8004258:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800425c:	e00d      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425e:	f7fd f8eb 	bl	8001438 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004268:	1ad2      	subs	r2, r2, r3
 800426a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800426e:	429a      	cmp	r2, r3
 8004270:	d903      	bls.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004278:	e005      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800427a:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0eb      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428a:	2b00      	cmp	r3, #0
 800428c:	d129      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004292:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800429a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800429e:	d10e      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80042a0:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042b0:	091a      	lsrs	r2, r3, #4
 80042b2:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	4a0d      	ldr	r2, [pc, #52]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6113      	str	r3, [r2, #16]
 80042bc:	e005      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80042be:	4b0b      	ldr	r3, [pc, #44]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	4a0a      	ldr	r2, [pc, #40]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042c8:	6113      	str	r3, [r2, #16]
 80042ca:	4b08      	ldr	r3, [pc, #32]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042cc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042da:	4a04      	ldr	r2, [pc, #16]	@ (80042ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042dc:	430b      	orrs	r3, r1
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e0:	e00e      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80042ea:	e009      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80042ec:	58024400 	.word	0x58024400
 80042f0:	58024800 	.word	0x58024800
 80042f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f002 0301 	and.w	r3, r2, #1
 800430c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004310:	2300      	movs	r3, #0
 8004312:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004316:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800431a:	460b      	mov	r3, r1
 800431c:	4313      	orrs	r3, r2
 800431e:	f000 8089 	beq.w	8004434 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004326:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004328:	2b28      	cmp	r3, #40	@ 0x28
 800432a:	d86b      	bhi.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800432c:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	0800440d 	.word	0x0800440d
 8004338:	08004405 	.word	0x08004405
 800433c:	08004405 	.word	0x08004405
 8004340:	08004405 	.word	0x08004405
 8004344:	08004405 	.word	0x08004405
 8004348:	08004405 	.word	0x08004405
 800434c:	08004405 	.word	0x08004405
 8004350:	08004405 	.word	0x08004405
 8004354:	080043d9 	.word	0x080043d9
 8004358:	08004405 	.word	0x08004405
 800435c:	08004405 	.word	0x08004405
 8004360:	08004405 	.word	0x08004405
 8004364:	08004405 	.word	0x08004405
 8004368:	08004405 	.word	0x08004405
 800436c:	08004405 	.word	0x08004405
 8004370:	08004405 	.word	0x08004405
 8004374:	080043ef 	.word	0x080043ef
 8004378:	08004405 	.word	0x08004405
 800437c:	08004405 	.word	0x08004405
 8004380:	08004405 	.word	0x08004405
 8004384:	08004405 	.word	0x08004405
 8004388:	08004405 	.word	0x08004405
 800438c:	08004405 	.word	0x08004405
 8004390:	08004405 	.word	0x08004405
 8004394:	0800440d 	.word	0x0800440d
 8004398:	08004405 	.word	0x08004405
 800439c:	08004405 	.word	0x08004405
 80043a0:	08004405 	.word	0x08004405
 80043a4:	08004405 	.word	0x08004405
 80043a8:	08004405 	.word	0x08004405
 80043ac:	08004405 	.word	0x08004405
 80043b0:	08004405 	.word	0x08004405
 80043b4:	0800440d 	.word	0x0800440d
 80043b8:	08004405 	.word	0x08004405
 80043bc:	08004405 	.word	0x08004405
 80043c0:	08004405 	.word	0x08004405
 80043c4:	08004405 	.word	0x08004405
 80043c8:	08004405 	.word	0x08004405
 80043cc:	08004405 	.word	0x08004405
 80043d0:	08004405 	.word	0x08004405
 80043d4:	0800440d 	.word	0x0800440d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043dc:	3308      	adds	r3, #8
 80043de:	2101      	movs	r1, #1
 80043e0:	4618      	mov	r0, r3
 80043e2:	f001 fe95 	bl	8006110 <RCCEx_PLL2_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043ec:	e00f      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	3328      	adds	r3, #40	@ 0x28
 80043f4:	2101      	movs	r1, #1
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 ff3c 	bl	8006274 <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004402:	e004      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800440a:	e000      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800440c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004416:	4bbf      	ldr	r3, [pc, #764]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004424:	4abb      	ldr	r2, [pc, #748]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004426:	430b      	orrs	r3, r1
 8004428:	6553      	str	r3, [r2, #84]	@ 0x54
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f002 0302 	and.w	r3, r2, #2
 8004440:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004444:	2300      	movs	r3, #0
 8004446:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800444a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800444e:	460b      	mov	r3, r1
 8004450:	4313      	orrs	r3, r2
 8004452:	d041      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800445a:	2b05      	cmp	r3, #5
 800445c:	d824      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800445e:	a201      	add	r2, pc, #4	@ (adr r2, 8004464 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	080044b1 	.word	0x080044b1
 8004468:	0800447d 	.word	0x0800447d
 800446c:	08004493 	.word	0x08004493
 8004470:	080044b1 	.word	0x080044b1
 8004474:	080044b1 	.word	0x080044b1
 8004478:	080044b1 	.word	0x080044b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004480:	3308      	adds	r3, #8
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fe43 	bl	8006110 <RCCEx_PLL2_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004490:	e00f      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	3328      	adds	r3, #40	@ 0x28
 8004498:	2101      	movs	r1, #1
 800449a:	4618      	mov	r0, r3
 800449c:	f001 feea 	bl	8006274 <RCCEx_PLL3_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044a6:	e004      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ae:	e000      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80044b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044ba:	4b96      	ldr	r3, [pc, #600]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	f023 0107 	bic.w	r1, r3, #7
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044c8:	4a92      	ldr	r2, [pc, #584]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044ca:	430b      	orrs	r3, r1
 80044cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80044ce:	e003      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f002 0304 	and.w	r3, r2, #4
 80044e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044e8:	2300      	movs	r3, #0
 80044ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4313      	orrs	r3, r2
 80044f6:	d044      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004500:	2b05      	cmp	r3, #5
 8004502:	d825      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004504:	a201      	add	r2, pc, #4	@ (adr r2, 800450c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004559 	.word	0x08004559
 8004510:	08004525 	.word	0x08004525
 8004514:	0800453b 	.word	0x0800453b
 8004518:	08004559 	.word	0x08004559
 800451c:	08004559 	.word	0x08004559
 8004520:	08004559 	.word	0x08004559
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	3308      	adds	r3, #8
 800452a:	2101      	movs	r1, #1
 800452c:	4618      	mov	r0, r3
 800452e:	f001 fdef 	bl	8006110 <RCCEx_PLL2_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004538:	e00f      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	3328      	adds	r3, #40	@ 0x28
 8004540:	2101      	movs	r1, #1
 8004542:	4618      	mov	r0, r3
 8004544:	f001 fe96 	bl	8006274 <RCCEx_PLL3_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800454e:	e004      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004562:	4b6c      	ldr	r3, [pc, #432]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004566:	f023 0107 	bic.w	r1, r3, #7
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004572:	4a68      	ldr	r2, [pc, #416]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004574:	430b      	orrs	r3, r1
 8004576:	6593      	str	r3, [r2, #88]	@ 0x58
 8004578:	e003      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f002 0320 	and.w	r3, r2, #32
 800458e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004598:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800459c:	460b      	mov	r3, r1
 800459e:	4313      	orrs	r3, r2
 80045a0:	d055      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045ae:	d033      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80045b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045b4:	d82c      	bhi.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ba:	d02f      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c0:	d826      	bhi.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045c6:	d02b      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80045c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80045cc:	d820      	bhi.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045d2:	d012      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80045d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045d8:	d81a      	bhi.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d022      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80045de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045e2:	d115      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e8:	3308      	adds	r3, #8
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 fd8f 	bl	8006110 <RCCEx_PLL2_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045f8:	e015      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	3328      	adds	r3, #40	@ 0x28
 8004600:	2102      	movs	r1, #2
 8004602:	4618      	mov	r0, r3
 8004604:	f001 fe36 	bl	8006274 <RCCEx_PLL3_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800460e:	e00a      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004616:	e006      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004618:	bf00      	nop
 800461a:	e004      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800461c:	bf00      	nop
 800461e:	e002      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004620:	bf00      	nop
 8004622:	e000      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10b      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800462e:	4b39      	ldr	r3, [pc, #228]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004632:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463e:	4a35      	ldr	r2, [pc, #212]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004640:	430b      	orrs	r3, r1
 8004642:	6553      	str	r3, [r2, #84]	@ 0x54
 8004644:	e003      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800465a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004664:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004668:	460b      	mov	r3, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	d058      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004676:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800467a:	d033      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800467c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004680:	d82c      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004686:	d02f      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468c:	d826      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800468e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004692:	d02b      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004694:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004698:	d820      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800469a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800469e:	d012      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80046a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046a4:	d81a      	bhi.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d022      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ae:	d115      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	3308      	adds	r3, #8
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 fd29 	bl	8006110 <RCCEx_PLL2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046c4:	e015      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	3328      	adds	r3, #40	@ 0x28
 80046cc:	2102      	movs	r1, #2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 fdd0 	bl	8006274 <RCCEx_PLL3_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80046da:	e00a      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e2:	e006      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046e4:	bf00      	nop
 80046e6:	e004      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046e8:	bf00      	nop
 80046ea:	e002      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046ec:	bf00      	nop
 80046ee:	e000      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80046f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10e      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046fa:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800470a:	4a02      	ldr	r2, [pc, #8]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800470c:	430b      	orrs	r3, r1
 800470e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004710:	e006      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004712:	bf00      	nop
 8004714:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800472c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004730:	2300      	movs	r3, #0
 8004732:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004736:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800473a:	460b      	mov	r3, r1
 800473c:	4313      	orrs	r3, r2
 800473e:	d055      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004744:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004748:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800474c:	d033      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800474e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004752:	d82c      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004758:	d02f      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800475a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800475e:	d826      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004760:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004764:	d02b      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004766:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800476a:	d820      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800476c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004770:	d012      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004772:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004776:	d81a      	bhi.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d022      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800477c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004780:	d115      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004786:	3308      	adds	r3, #8
 8004788:	2100      	movs	r1, #0
 800478a:	4618      	mov	r0, r3
 800478c:	f001 fcc0 	bl	8006110 <RCCEx_PLL2_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004796:	e015      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479c:	3328      	adds	r3, #40	@ 0x28
 800479e:	2102      	movs	r1, #2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 fd67 	bl	8006274 <RCCEx_PLL3_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047ac:	e00a      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047b4:	e006      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047b6:	bf00      	nop
 80047b8:	e004      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047ba:	bf00      	nop
 80047bc:	e002      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047be:	bf00      	nop
 80047c0:	e000      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80047c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10b      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047cc:	4ba1      	ldr	r3, [pc, #644]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047dc:	4a9d      	ldr	r2, [pc, #628]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047de:	430b      	orrs	r3, r1
 80047e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80047e2:	e003      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	f002 0308 	and.w	r3, r2, #8
 80047f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047fc:	2300      	movs	r3, #0
 80047fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004802:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004806:	460b      	mov	r3, r1
 8004808:	4313      	orrs	r3, r2
 800480a:	d01e      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004818:	d10c      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	3328      	adds	r3, #40	@ 0x28
 8004820:	2102      	movs	r1, #2
 8004822:	4618      	mov	r0, r3
 8004824:	f001 fd26 	bl	8006274 <RCCEx_PLL3_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004834:	4b87      	ldr	r3, [pc, #540]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004838:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004844:	4a83      	ldr	r2, [pc, #524]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004846:	430b      	orrs	r3, r1
 8004848:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f002 0310 	and.w	r3, r2, #16
 8004856:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800485a:	2300      	movs	r3, #0
 800485c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004860:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004864:	460b      	mov	r3, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	d01e      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004876:	d10c      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487c:	3328      	adds	r3, #40	@ 0x28
 800487e:	2102      	movs	r1, #2
 8004880:	4618      	mov	r0, r3
 8004882:	f001 fcf7 	bl	8006274 <RCCEx_PLL3_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004892:	4b70      	ldr	r3, [pc, #448]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004896:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048a2:	4a6c      	ldr	r2, [pc, #432]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80048b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048b8:	2300      	movs	r3, #0
 80048ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d03e      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048d4:	d022      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80048d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048da:	d81b      	bhi.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e4:	d00b      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80048e6:	e015      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ec:	3308      	adds	r3, #8
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 fc0d 	bl	8006110 <RCCEx_PLL2_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048fc:	e00f      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	3328      	adds	r3, #40	@ 0x28
 8004904:	2102      	movs	r1, #2
 8004906:	4618      	mov	r0, r3
 8004908:	f001 fcb4 	bl	8006274 <RCCEx_PLL3_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004912:	e004      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800491a:	e000      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800491c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004926:	4b4b      	ldr	r3, [pc, #300]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800492e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004932:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004936:	4a47      	ldr	r2, [pc, #284]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004938:	430b      	orrs	r3, r1
 800493a:	6593      	str	r3, [r2, #88]	@ 0x58
 800493c:	e003      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004952:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004954:	2300      	movs	r3, #0
 8004956:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004958:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800495c:	460b      	mov	r3, r1
 800495e:	4313      	orrs	r3, r2
 8004960:	d03b      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800496e:	d01f      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004970:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004974:	d818      	bhi.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800497a:	d003      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800497c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004980:	d007      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004982:	e011      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004984:	4b33      	ldr	r3, [pc, #204]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004988:	4a32      	ldr	r2, [pc, #200]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800498a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800498e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004990:	e00f      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004996:	3328      	adds	r3, #40	@ 0x28
 8004998:	2101      	movs	r1, #1
 800499a:	4618      	mov	r0, r3
 800499c:	f001 fc6a 	bl	8006274 <RCCEx_PLL3_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80049a6:	e004      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ae:	e000      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80049b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049ba:	4b26      	ldr	r3, [pc, #152]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ca:	4a22      	ldr	r2, [pc, #136]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049cc:	430b      	orrs	r3, r1
 80049ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80049d0:	e003      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80049e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80049e8:	2300      	movs	r3, #0
 80049ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80049ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80049f0:	460b      	mov	r3, r1
 80049f2:	4313      	orrs	r3, r2
 80049f4:	d034      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80049f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a04:	d007      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004a06:	e011      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a08:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	4a11      	ldr	r2, [pc, #68]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a14:	e00e      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1a:	3308      	adds	r3, #8
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 fb76 	bl	8006110 <RCCEx_PLL2_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a2a:	e003      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10d      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a3c:	4b05      	ldr	r3, [pc, #20]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4a:	4a02      	ldr	r2, [pc, #8]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a50:	e006      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004a52:	bf00      	nop
 8004a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a6e:	2300      	movs	r3, #0
 8004a70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a76:	460b      	mov	r3, r1
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	d00c      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a80:	3328      	adds	r3, #40	@ 0x28
 8004a82:	2102      	movs	r1, #2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 fbf5 	bl	8006274 <RCCEx_PLL3_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004aa2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004aa8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004aac:	460b      	mov	r3, r1
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	d038      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004abe:	d018      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac4:	d811      	bhi.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aca:	d014      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad0:	d80b      	bhi.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d011      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ada:	d106      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004adc:	4bc3      	ldr	r3, [pc, #780]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	4ac2      	ldr	r2, [pc, #776]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ae8:	e008      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004af0:	e004      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004af2:	bf00      	nop
 8004af4:	e002      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10b      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b04:	4bb9      	ldr	r3, [pc, #740]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b08:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b14:	4ab5      	ldr	r2, [pc, #724]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b16:	430b      	orrs	r3, r1
 8004b18:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b1a:	e003      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004b30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b32:	2300      	movs	r3, #0
 8004b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b36:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b40:	4baa      	ldr	r3, [pc, #680]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b44:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4e:	4aa7      	ldr	r2, [pc, #668]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004b60:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b62:	2300      	movs	r3, #0
 8004b64:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b66:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b70:	4b9e      	ldr	r3, [pc, #632]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b80:	4a9a      	ldr	r2, [pc, #616]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b82:	430b      	orrs	r3, r1
 8004b84:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b94:	2300      	movs	r3, #0
 8004b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ba2:	4b92      	ldr	r3, [pc, #584]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bb0:	4a8e      	ldr	r2, [pc, #568]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	d00e      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bd2:	4b86      	ldr	r3, [pc, #536]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	4a85      	ldr	r2, [pc, #532]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bd8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004bdc:	6113      	str	r3, [r2, #16]
 8004bde:	4b83      	ldr	r3, [pc, #524]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be0:	6919      	ldr	r1, [r3, #16]
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004bea:	4a80      	ldr	r2, [pc, #512]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bfe:	2300      	movs	r3, #0
 8004c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c0c:	4b77      	ldr	r3, [pc, #476]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c10:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1a:	4a74      	ldr	r2, [pc, #464]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c2e:	2300      	movs	r3, #0
 8004c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004c36:	460b      	mov	r3, r1
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c3c:	4b6b      	ldr	r3, [pc, #428]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c40:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c4c:	4a67      	ldr	r2, [pc, #412]	@ (8004dec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	d011      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c72:	3308      	adds	r3, #8
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f001 fa4a 	bl	8006110 <RCCEx_PLL2_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	6239      	str	r1, [r7, #32]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4313      	orrs	r3, r2
 8004cac:	d011      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 fa2a 	bl	8006110 <RCCEx_PLL2_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	2100      	movs	r1, #0
 8004cdc:	61b9      	str	r1, [r7, #24]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4313      	orrs	r3, r2
 8004cec:	d011      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 fa0a 	bl	8006110 <RCCEx_PLL2_Config>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	6139      	str	r1, [r7, #16]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	d011      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d32:	3328      	adds	r3, #40	@ 0x28
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 fa9c 	bl	8006274 <RCCEx_PLL3_Config>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	d011      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	3328      	adds	r3, #40	@ 0x28
 8004d74:	2101      	movs	r1, #1
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 fa7c 	bl	8006274 <RCCEx_PLL3_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	6039      	str	r1, [r7, #0]
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004da8:	460b      	mov	r3, r1
 8004daa:	4313      	orrs	r3, r2
 8004dac:	d011      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db2:	3328      	adds	r3, #40	@ 0x28
 8004db4:	2102      	movs	r1, #2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f001 fa5c 	bl	8006274 <RCCEx_PLL3_Config>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004dd2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e000      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004de6:	46bd      	mov	sp, r7
 8004de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dec:	58024400 	.word	0x58024400

08004df0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b090      	sub	sp, #64	@ 0x40
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dfe:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8004e02:	430b      	orrs	r3, r1
 8004e04:	f040 8094 	bne.w	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004e08:	4b9e      	ldr	r3, [pc, #632]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	f200 8087 	bhi.w	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e35 	.word	0x08004e35
 8004e24:	08004e5d 	.word	0x08004e5d
 8004e28:	08004e85 	.word	0x08004e85
 8004e2c:	08004f21 	.word	0x08004f21
 8004e30:	08004ead 	.word	0x08004ead
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e34:	4b93      	ldr	r3, [pc, #588]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e40:	d108      	bne.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 f810 	bl	8005e6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e50:	f000 bd45 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e58:	f000 bd41 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e5c:	4b89      	ldr	r3, [pc, #548]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e68:	d108      	bne.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e6a:	f107 0318 	add.w	r3, r7, #24
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fd54 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e78:	f000 bd31 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e80:	f000 bd2d 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e84:	4b7f      	ldr	r3, [pc, #508]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e90:	d108      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e92:	f107 030c 	add.w	r3, r7, #12
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fe94 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ea0:	f000 bd1d 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ea8:	f000 bd19 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004eac:	4b75      	ldr	r3, [pc, #468]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004eb4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004eb6:	4b73      	ldr	r3, [pc, #460]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ec8:	4b6e      	ldr	r3, [pc, #440]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	08db      	lsrs	r3, r3, #3
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	4a6d      	ldr	r2, [pc, #436]	@ (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eda:	e01f      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004edc:	4b69      	ldr	r3, [pc, #420]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ef0:	d102      	bne.n	8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004ef2:	4b66      	ldr	r3, [pc, #408]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ef6:	e011      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ef8:	4b62      	ldr	r3, [pc, #392]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f04:	d106      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f0c:	d102      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004f0e:	4b60      	ldr	r3, [pc, #384]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f12:	e003      	b.n	8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004f18:	f000 bce1 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004f1c:	f000 bcdf 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f20:	4b5c      	ldr	r3, [pc, #368]	@ (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f24:	f000 bcdb 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f2c:	f000 bcd7 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f34:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	f040 80ad 	bne.w	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004f3e:	4b51      	ldr	r3, [pc, #324]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f42:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004f46:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f4e:	d056      	beq.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f56:	f200 8090 	bhi.w	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f5e:	f000 8088 	beq.w	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f66:	f200 8088 	bhi.w	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	2b80      	cmp	r3, #128	@ 0x80
 8004f6e:	d032      	beq.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f72:	2b80      	cmp	r3, #128	@ 0x80
 8004f74:	f200 8081 	bhi.w	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	2b40      	cmp	r3, #64	@ 0x40
 8004f82:	d014      	beq.n	8004fae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004f84:	e079      	b.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f86:	4b3f      	ldr	r3, [pc, #252]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f92:	d108      	bne.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 ff67 	bl	8005e6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fa2:	f000 bc9c 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004faa:	f000 bc98 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fae:	4b35      	ldr	r3, [pc, #212]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fba:	d108      	bne.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fbc:	f107 0318 	add.w	r3, r7, #24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fcab 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fca:	f000 bc88 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fd2:	f000 bc84 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fe2:	d108      	bne.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fe4:	f107 030c 	add.w	r3, r7, #12
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fdeb 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ff2:	f000 bc74 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ffa:	f000 bc70 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ffe:	4b21      	ldr	r3, [pc, #132]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005002:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005006:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005008:	4b1e      	ldr	r3, [pc, #120]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b04      	cmp	r3, #4
 8005012:	d10c      	bne.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800501a:	4b1a      	ldr	r3, [pc, #104]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	08db      	lsrs	r3, r3, #3
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	4a18      	ldr	r2, [pc, #96]	@ (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005026:	fa22 f303 	lsr.w	r3, r2, r3
 800502a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800502c:	e01f      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800502e:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800503a:	d106      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800503c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800503e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005042:	d102      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005044:	4b11      	ldr	r3, [pc, #68]	@ (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005048:	e011      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800504a:	4b0e      	ldr	r3, [pc, #56]	@ (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005056:	d106      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800505e:	d102      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005064:	e003      	b.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800506a:	f000 bc38 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800506e:	f000 bc36 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005072:	4b08      	ldr	r3, [pc, #32]	@ (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005076:	f000 bc32 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800507e:	f000 bc2e 	b.w	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005082:	bf00      	nop
 8005084:	58024400 	.word	0x58024400
 8005088:	03d09000 	.word	0x03d09000
 800508c:	003d0900 	.word	0x003d0900
 8005090:	017d7840 	.word	0x017d7840
 8005094:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800509c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80050a0:	430b      	orrs	r3, r1
 80050a2:	f040 809c 	bne.w	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80050a6:	4b9e      	ldr	r3, [pc, #632]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050aa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80050ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050b6:	d054      	beq.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050be:	f200 808b 	bhi.w	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80050c8:	f000 8083 	beq.w	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80050cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80050d2:	f200 8081 	bhi.w	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050dc:	d02f      	beq.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050e4:	d878      	bhi.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80050ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050f2:	d012      	beq.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80050f4:	e070      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80050f6:	4b8a      	ldr	r3, [pc, #552]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005102:	d107      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005104:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005108:	4618      	mov	r0, r3
 800510a:	f000 feaf 	bl	8005e6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005112:	e3e4      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005118:	e3e1      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800511a:	4b81      	ldr	r3, [pc, #516]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005122:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005126:	d107      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005128:	f107 0318 	add.w	r3, r7, #24
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fbf5 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005136:	e3d2      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800513c:	e3cf      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800513e:	4b78      	ldr	r3, [pc, #480]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800514a:	d107      	bne.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800514c:	f107 030c 	add.w	r3, r7, #12
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fd37 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800515a:	e3c0      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005160:	e3bd      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005162:	4b6f      	ldr	r3, [pc, #444]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005166:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800516a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800516c:	4b6c      	ldr	r3, [pc, #432]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b04      	cmp	r3, #4
 8005176:	d10c      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800517e:	4b68      	ldr	r3, [pc, #416]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	08db      	lsrs	r3, r3, #3
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	4a66      	ldr	r2, [pc, #408]	@ (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800518a:	fa22 f303 	lsr.w	r3, r2, r3
 800518e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005190:	e01e      	b.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005192:	4b63      	ldr	r3, [pc, #396]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519e:	d106      	bne.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80051a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051a6:	d102      	bne.n	80051ae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051a8:	4b5f      	ldr	r3, [pc, #380]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80051aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ac:	e010      	b.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ba:	d106      	bne.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80051bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051c2:	d102      	bne.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051c4:	4b59      	ldr	r3, [pc, #356]	@ (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80051c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051c8:	e002      	b.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80051ca:	2300      	movs	r3, #0
 80051cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80051ce:	e386      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80051d0:	e385      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80051d2:	4b57      	ldr	r3, [pc, #348]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80051d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051d6:	e382      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051dc:	e37f      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80051de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051e2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80051e6:	430b      	orrs	r3, r1
 80051e8:	f040 80a7 	bne.w	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80051ec:	4b4c      	ldr	r3, [pc, #304]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80051ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80051f4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051fc:	d055      	beq.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80051fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005200:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005204:	f200 8096 	bhi.w	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800520e:	f000 8084 	beq.w	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005218:	f200 808c 	bhi.w	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800521c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005222:	d030      	beq.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800522a:	f200 8083 	bhi.w	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800522e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800523a:	d012      	beq.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800523c:	e07a      	b.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800523e:	4b38      	ldr	r3, [pc, #224]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800524a:	d107      	bne.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800524c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fe0b 	bl	8005e6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800525a:	e340      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005260:	e33d      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005262:	4b2f      	ldr	r3, [pc, #188]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800526a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800526e:	d107      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005270:	f107 0318 	add.w	r3, r7, #24
 8005274:	4618      	mov	r0, r3
 8005276:	f000 fb51 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800527e:	e32e      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005284:	e32b      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005286:	4b26      	ldr	r3, [pc, #152]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800528e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005292:	d107      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fc93 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052a2:	e31c      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052a8:	e319      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d10c      	bne.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80052c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052c6:	4b16      	ldr	r3, [pc, #88]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	08db      	lsrs	r3, r3, #3
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	4a14      	ldr	r2, [pc, #80]	@ (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80052d2:	fa22 f303 	lsr.w	r3, r2, r3
 80052d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052d8:	e01e      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052da:	4b11      	ldr	r3, [pc, #68]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052e6:	d106      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80052e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ee:	d102      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80052f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80052f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f4:	e010      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005302:	d106      	bne.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800530a:	d102      	bne.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800530c:	4b07      	ldr	r3, [pc, #28]	@ (800532c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800530e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005310:	e002      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005316:	e2e2      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005318:	e2e1      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800531a:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800531e:	e2de      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005320:	58024400 	.word	0x58024400
 8005324:	03d09000 	.word	0x03d09000
 8005328:	003d0900 	.word	0x003d0900
 800532c:	017d7840 	.word	0x017d7840
 8005330:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005338:	e2d1      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800533a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800533e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005342:	430b      	orrs	r3, r1
 8005344:	f040 809c 	bne.w	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005348:	4b93      	ldr	r3, [pc, #588]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800534a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800534c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005350:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005354:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005358:	d054      	beq.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005360:	f200 808b 	bhi.w	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005366:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800536a:	f000 8083 	beq.w	8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800536e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005370:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005374:	f200 8081 	bhi.w	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800537e:	d02f      	beq.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005386:	d878      	bhi.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800538e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005394:	d012      	beq.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005396:	e070      	b.n	800547a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005398:	4b7f      	ldr	r3, [pc, #508]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053a4:	d107      	bne.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fd5e 	bl	8005e6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053b4:	e293      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053ba:	e290      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053bc:	4b76      	ldr	r3, [pc, #472]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053c8:	d107      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ca:	f107 0318 	add.w	r3, r7, #24
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 faa4 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053d8:	e281      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053da:	2300      	movs	r3, #0
 80053dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053de:	e27e      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053e0:	4b6d      	ldr	r3, [pc, #436]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ec:	d107      	bne.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053ee:	f107 030c 	add.w	r3, r7, #12
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fbe6 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053fc:	e26f      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053fe:	2300      	movs	r3, #0
 8005400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005402:	e26c      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005404:	4b64      	ldr	r3, [pc, #400]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005408:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800540c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800540e:	4b62      	ldr	r3, [pc, #392]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d10c      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800541a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541c:	2b00      	cmp	r3, #0
 800541e:	d109      	bne.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005420:	4b5d      	ldr	r3, [pc, #372]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	08db      	lsrs	r3, r3, #3
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	4a5c      	ldr	r2, [pc, #368]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
 8005430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005432:	e01e      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005434:	4b58      	ldr	r3, [pc, #352]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800543c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005440:	d106      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005448:	d102      	bne.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800544a:	4b55      	ldr	r3, [pc, #340]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800544e:	e010      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005450:	4b51      	ldr	r3, [pc, #324]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005458:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800545c:	d106      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800545e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005460:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005464:	d102      	bne.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005466:	4b4f      	ldr	r3, [pc, #316]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546a:	e002      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005470:	e235      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005472:	e234      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005474:	4b4c      	ldr	r3, [pc, #304]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005478:	e231      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800547e:	e22e      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005484:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005488:	430b      	orrs	r3, r1
 800548a:	f040 808f 	bne.w	80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800548e:	4b42      	ldr	r3, [pc, #264]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005492:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005496:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800549e:	d06b      	beq.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80054a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054a6:	d874      	bhi.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054ae:	d056      	beq.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80054b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054b6:	d86c      	bhi.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054be:	d03b      	beq.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80054c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054c6:	d864      	bhi.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054ce:	d021      	beq.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80054d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054d6:	d85c      	bhi.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80054d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80054de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e4:	d004      	beq.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80054e6:	e054      	b.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80054e8:	f7fe fa4c 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 80054ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054ee:	e1f6      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054f0:	4b29      	ldr	r3, [pc, #164]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054fc:	d107      	bne.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054fe:	f107 0318 	add.w	r3, r7, #24
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fa0a 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800550c:	e1e7      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005512:	e1e4      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005514:	4b20      	ldr	r3, [pc, #128]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800551c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005520:	d107      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005522:	f107 030c 	add.w	r3, r7, #12
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fb4c 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005530:	e1d5      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005536:	e1d2      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005538:	4b17      	ldr	r3, [pc, #92]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b04      	cmp	r3, #4
 8005542:	d109      	bne.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005544:	4b14      	ldr	r3, [pc, #80]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	08db      	lsrs	r3, r3, #3
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	4a13      	ldr	r2, [pc, #76]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005550:	fa22 f303 	lsr.w	r3, r2, r3
 8005554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005556:	e1c2      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800555c:	e1bf      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800555e:	4b0e      	ldr	r3, [pc, #56]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800556a:	d102      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800556c:	4b0c      	ldr	r3, [pc, #48]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800556e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005570:	e1b5      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005576:	e1b2      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005578:	4b07      	ldr	r3, [pc, #28]	@ (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005584:	d102      	bne.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005586:	4b07      	ldr	r3, [pc, #28]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800558a:	e1a8      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005590:	e1a5      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005596:	e1a2      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005598:	58024400 	.word	0x58024400
 800559c:	03d09000 	.word	0x03d09000
 80055a0:	003d0900 	.word	0x003d0900
 80055a4:	017d7840 	.word	0x017d7840
 80055a8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80055ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80055b4:	430b      	orrs	r3, r1
 80055b6:	d173      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80055b8:	4b9c      	ldr	r3, [pc, #624]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055c8:	d02f      	beq.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80055ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d0:	d863      	bhi.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80055d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80055d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055de:	d012      	beq.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80055e0:	e05b      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055e2:	4b92      	ldr	r3, [pc, #584]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ee:	d107      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055f0:	f107 0318 	add.w	r3, r7, #24
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 f991 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055fe:	e16e      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005604:	e16b      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005606:	4b89      	ldr	r3, [pc, #548]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800560e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005612:	d107      	bne.n	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005614:	f107 030c 	add.w	r3, r7, #12
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fad3 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005622:	e15c      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005628:	e159      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800562a:	4b80      	ldr	r3, [pc, #512]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800562c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800562e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005634:	4b7d      	ldr	r3, [pc, #500]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b04      	cmp	r3, #4
 800563e:	d10c      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005646:	4b79      	ldr	r3, [pc, #484]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	08db      	lsrs	r3, r3, #3
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	4a77      	ldr	r2, [pc, #476]	@ (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005652:	fa22 f303 	lsr.w	r3, r2, r3
 8005656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005658:	e01e      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800565a:	4b74      	ldr	r3, [pc, #464]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005666:	d106      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800566e:	d102      	bne.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005670:	4b70      	ldr	r3, [pc, #448]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005674:	e010      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005676:	4b6d      	ldr	r3, [pc, #436]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800567e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005682:	d106      	bne.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800568a:	d102      	bne.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800568c:	4b6a      	ldr	r3, [pc, #424]	@ (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005690:	e002      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005696:	e122      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005698:	e121      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800569e:	e11e      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80056a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056a4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80056a8:	430b      	orrs	r3, r1
 80056aa:	d133      	bne.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80056ac:	4b5f      	ldr	r3, [pc, #380]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d004      	beq.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80056bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c2:	d012      	beq.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80056c4:	e023      	b.n	800570e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056c6:	4b59      	ldr	r3, [pc, #356]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056d2:	d107      	bne.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fbc7 	bl	8005e6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056e2:	e0fc      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056e8:	e0f9      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056ea:	4b50      	ldr	r3, [pc, #320]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056f6:	d107      	bne.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056f8:	f107 0318 	add.w	r3, r7, #24
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f90d 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005706:	e0ea      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005708:	2300      	movs	r3, #0
 800570a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800570c:	e0e7      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005712:	e0e4      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005718:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800571c:	430b      	orrs	r3, r1
 800571e:	f040 808d 	bne.w	800583c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005722:	4b42      	ldr	r3, [pc, #264]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800572a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800572c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005732:	d06b      	beq.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800573a:	d874      	bhi.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800573c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005742:	d056      	beq.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800574a:	d86c      	bhi.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005752:	d03b      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005756:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800575a:	d864      	bhi.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005762:	d021      	beq.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800576a:	d85c      	bhi.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800576c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d004      	beq.n	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005778:	d004      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800577a:	e054      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800577c:	f000 f8b8 	bl	80058f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005780:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005782:	e0ac      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005784:	4b29      	ldr	r3, [pc, #164]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800578c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005790:	d107      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005792:	f107 0318 	add.w	r3, r7, #24
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f8c0 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057a0:	e09d      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a6:	e09a      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057a8:	4b20      	ldr	r3, [pc, #128]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057b4:	d107      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057b6:	f107 030c 	add.w	r3, r7, #12
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fa02 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057c4:	e08b      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ca:	e088      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057cc:	4b17      	ldr	r3, [pc, #92]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d109      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057d8:	4b14      	ldr	r3, [pc, #80]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	08db      	lsrs	r3, r3, #3
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	4a13      	ldr	r2, [pc, #76]	@ (8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80057e4:	fa22 f303 	lsr.w	r3, r2, r3
 80057e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ea:	e078      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057f0:	e075      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80057f2:	4b0e      	ldr	r3, [pc, #56]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057fe:	d102      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005800:	4b0c      	ldr	r3, [pc, #48]	@ (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005804:	e06b      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800580a:	e068      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800580c:	4b07      	ldr	r3, [pc, #28]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005818:	d102      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800581a:	4b07      	ldr	r3, [pc, #28]	@ (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800581c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800581e:	e05e      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005824:	e05b      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582a:	e058      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800582c:	58024400 	.word	0x58024400
 8005830:	03d09000 	.word	0x03d09000
 8005834:	003d0900 	.word	0x003d0900
 8005838:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800583c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005840:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005844:	430b      	orrs	r3, r1
 8005846:	d148      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005848:	4b27      	ldr	r3, [pc, #156]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800584a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800584c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005850:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005858:	d02a      	beq.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005860:	d838      	bhi.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	2b00      	cmp	r3, #0
 8005866:	d004      	beq.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800586e:	d00d      	beq.n	800588c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005870:	e030      	b.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005872:	4b1d      	ldr	r3, [pc, #116]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800587e:	d102      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005880:	4b1a      	ldr	r3, [pc, #104]	@ (80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005884:	e02b      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800588a:	e028      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800588c:	4b16      	ldr	r3, [pc, #88]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005894:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005898:	d107      	bne.n	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800589a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fae4 	bl	8005e6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058a8:	e019      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058ae:	e016      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058b0:	4b0d      	ldr	r3, [pc, #52]	@ (80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058bc:	d107      	bne.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058be:	f107 0318 	add.w	r3, r7, #24
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f82a 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058cc:	e007      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d2:	e004      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d8:	e001      	b.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80058de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3740      	adds	r7, #64	@ 0x40
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	58024400 	.word	0x58024400
 80058ec:	017d7840 	.word	0x017d7840

080058f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058f4:	f7fe f816 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 80058f8:	4602      	mov	r2, r0
 80058fa:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	4904      	ldr	r1, [pc, #16]	@ (8005918 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005906:	5ccb      	ldrb	r3, [r1, r3]
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	58024400 	.word	0x58024400
 8005918:	0800aa14 	.word	0x0800aa14

0800591c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	@ 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005924:	4ba1      	ldr	r3, [pc, #644]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800592e:	4b9f      	ldr	r3, [pc, #636]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005932:	0b1b      	lsrs	r3, r3, #12
 8005934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005938:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800593a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005946:	4b99      	ldr	r3, [pc, #612]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	fb02 f303 	mul.w	r3, r2, r3
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8111 	beq.w	8005b8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b02      	cmp	r3, #2
 800596e:	f000 8083 	beq.w	8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b02      	cmp	r3, #2
 8005976:	f200 80a1 	bhi.w	8005abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d056      	beq.n	8005a34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005986:	e099      	b.n	8005abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005988:	4b88      	ldr	r3, [pc, #544]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02d      	beq.n	80059f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005994:	4b85      	ldr	r3, [pc, #532]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	08db      	lsrs	r3, r3, #3
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	4a84      	ldr	r2, [pc, #528]	@ (8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	ee07 3a90 	vmov	s15, r3
 80059ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059be:	4b7b      	ldr	r3, [pc, #492]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80059d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059ee:	e087      	b.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80059fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a02:	4b6a      	ldr	r3, [pc, #424]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a32:	e065      	b.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a46:	4b59      	ldr	r3, [pc, #356]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a76:	e043      	b.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b48      	ldr	r3, [pc, #288]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aba:	e021      	b.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b37      	ldr	r3, [pc, #220]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005afe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b00:	4b2a      	ldr	r3, [pc, #168]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b04:	0a5b      	lsrs	r3, r3, #9
 8005b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b26:	ee17 2a90 	vmov	r2, s15
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b38:	ee07 3a90 	vmov	s15, r3
 8005b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b54:	ee17 2a90 	vmov	r2, s15
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b5c:	4b13      	ldr	r3, [pc, #76]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b60:	0e1b      	lsrs	r3, r3, #24
 8005b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b82:	ee17 2a90 	vmov	r2, s15
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b8a:	e008      	b.n	8005b9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	609a      	str	r2, [r3, #8]
}
 8005b9e:	bf00      	nop
 8005ba0:	3724      	adds	r7, #36	@ 0x24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	58024400 	.word	0x58024400
 8005bb0:	03d09000 	.word	0x03d09000
 8005bb4:	46000000 	.word	0x46000000
 8005bb8:	4c742400 	.word	0x4c742400
 8005bbc:	4a742400 	.word	0x4a742400
 8005bc0:	4bbebc20 	.word	0x4bbebc20

08005bc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b089      	sub	sp, #36	@ 0x24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bcc:	4ba1      	ldr	r3, [pc, #644]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bd6:	4b9f      	ldr	r3, [pc, #636]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bda:	0d1b      	lsrs	r3, r3, #20
 8005bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005be0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005be2:	4b9c      	ldr	r3, [pc, #624]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005bee:	4b99      	ldr	r3, [pc, #612]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	08db      	lsrs	r3, r3, #3
 8005bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	fb02 f303 	mul.w	r3, r2, r3
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8111 	beq.w	8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	f000 8083 	beq.w	8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	f200 80a1 	bhi.w	8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d056      	beq.n	8005cdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c2e:	e099      	b.n	8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c30:	4b88      	ldr	r3, [pc, #544]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d02d      	beq.n	8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c3c:	4b85      	ldr	r3, [pc, #532]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	08db      	lsrs	r3, r3, #3
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	4a84      	ldr	r2, [pc, #528]	@ (8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c66:	4b7b      	ldr	r3, [pc, #492]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c96:	e087      	b.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005caa:	4b6a      	ldr	r3, [pc, #424]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cda:	e065      	b.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cee:	4b59      	ldr	r3, [pc, #356]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d1e:	e043      	b.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d32:	4b48      	ldr	r3, [pc, #288]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d62:	e021      	b.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d76:	4b37      	ldr	r3, [pc, #220]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005da6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005da8:	4b2a      	ldr	r3, [pc, #168]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	0a5b      	lsrs	r3, r3, #9
 8005dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dce:	ee17 2a90 	vmov	r2, s15
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dda:	0c1b      	lsrs	r3, r3, #16
 8005ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dfc:	ee17 2a90 	vmov	r2, s15
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e04:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	0e1b      	lsrs	r3, r3, #24
 8005e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e2a:	ee17 2a90 	vmov	r2, s15
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e32:	e008      	b.n	8005e46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	609a      	str	r2, [r3, #8]
}
 8005e46:	bf00      	nop
 8005e48:	3724      	adds	r7, #36	@ 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	58024400 	.word	0x58024400
 8005e58:	03d09000 	.word	0x03d09000
 8005e5c:	46000000 	.word	0x46000000
 8005e60:	4c742400 	.word	0x4c742400
 8005e64:	4a742400 	.word	0x4a742400
 8005e68:	4bbebc20 	.word	0x4bbebc20

08005e6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b089      	sub	sp, #36	@ 0x24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e74:	4ba0      	ldr	r3, [pc, #640]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005e7e:	4b9e      	ldr	r3, [pc, #632]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e88:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005e8a:	4b9b      	ldr	r3, [pc, #620]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005e94:	4b98      	ldr	r3, [pc, #608]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e98:	08db      	lsrs	r3, r3, #3
 8005e9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 8111 	beq.w	80060da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	f000 8083 	beq.w	8005fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	f200 80a1 	bhi.w	800600a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d056      	beq.n	8005f82 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005ed4:	e099      	b.n	800600a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed6:	4b88      	ldr	r3, [pc, #544]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02d      	beq.n	8005f3e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ee2:	4b85      	ldr	r3, [pc, #532]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	4a83      	ldr	r2, [pc, #524]	@ (80060fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005eee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0c:	4b7a      	ldr	r3, [pc, #488]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f14:	ee07 3a90 	vmov	s15, r3
 8005f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f20:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f38:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f3c:	e087      	b.n	800604e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	ee07 3a90 	vmov	s15, r3
 8005f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f48:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006104 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f50:	4b69      	ldr	r3, [pc, #420]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f60:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f64:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f80:	e065      	b.n	800604e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006108 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f94:	4b58      	ldr	r3, [pc, #352]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc4:	e043      	b.n	800604e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	ee07 3a90 	vmov	s15, r3
 8005fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800610c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd8:	4b47      	ldr	r3, [pc, #284]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fec:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006008:	e021      	b.n	800604e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006014:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006104 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601c:	4b36      	ldr	r3, [pc, #216]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800601e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006030:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006100 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006048:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800604c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800604e:	4b2a      	ldr	r3, [pc, #168]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006052:	0a5b      	lsrs	r3, r3, #9
 8006054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006060:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006064:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006068:	edd7 6a07 	vldr	s13, [r7, #28]
 800606c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006074:	ee17 2a90 	vmov	r2, s15
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800607c:	4b1e      	ldr	r3, [pc, #120]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800607e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006080:	0c1b      	lsrs	r3, r3, #16
 8006082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006096:	edd7 6a07 	vldr	s13, [r7, #28]
 800609a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a2:	ee17 2a90 	vmov	r2, s15
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80060aa:	4b13      	ldr	r3, [pc, #76]	@ (80060f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ae:	0e1b      	lsrs	r3, r3, #24
 80060b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060d0:	ee17 2a90 	vmov	r2, s15
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80060d8:	e008      	b.n	80060ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	609a      	str	r2, [r3, #8]
}
 80060ec:	bf00      	nop
 80060ee:	3724      	adds	r7, #36	@ 0x24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	58024400 	.word	0x58024400
 80060fc:	03d09000 	.word	0x03d09000
 8006100:	46000000 	.word	0x46000000
 8006104:	4c742400 	.word	0x4c742400
 8006108:	4a742400 	.word	0x4a742400
 800610c:	4bbebc20 	.word	0x4bbebc20

08006110 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800611e:	4b53      	ldr	r3, [pc, #332]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	2b03      	cmp	r3, #3
 8006128:	d101      	bne.n	800612e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e099      	b.n	8006262 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800612e:	4b4f      	ldr	r3, [pc, #316]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a4e      	ldr	r2, [pc, #312]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006134:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613a:	f7fb f97d 	bl	8001438 <HAL_GetTick>
 800613e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006140:	e008      	b.n	8006154 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006142:	f7fb f979 	bl	8001438 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e086      	b.n	8006262 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006154:	4b45      	ldr	r3, [pc, #276]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f0      	bne.n	8006142 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006160:	4b42      	ldr	r3, [pc, #264]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	493f      	ldr	r1, [pc, #252]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006170:	4313      	orrs	r3, r2
 8006172:	628b      	str	r3, [r1, #40]	@ 0x28
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	3b01      	subs	r3, #1
 800617a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	3b01      	subs	r3, #1
 8006184:	025b      	lsls	r3, r3, #9
 8006186:	b29b      	uxth	r3, r3
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	3b01      	subs	r3, #1
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	3b01      	subs	r3, #1
 800619e:	061b      	lsls	r3, r3, #24
 80061a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061a4:	4931      	ldr	r1, [pc, #196]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061aa:	4b30      	ldr	r3, [pc, #192]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	492d      	ldr	r1, [pc, #180]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061bc:	4b2b      	ldr	r3, [pc, #172]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c0:	f023 0220 	bic.w	r2, r3, #32
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	4928      	ldr	r1, [pc, #160]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061ce:	4b27      	ldr	r3, [pc, #156]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d2:	4a26      	ldr	r2, [pc, #152]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061d4:	f023 0310 	bic.w	r3, r3, #16
 80061d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061da:	4b24      	ldr	r3, [pc, #144]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061de:	4b24      	ldr	r3, [pc, #144]	@ (8006270 <RCCEx_PLL2_Config+0x160>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	69d2      	ldr	r2, [r2, #28]
 80061e6:	00d2      	lsls	r2, r2, #3
 80061e8:	4920      	ldr	r1, [pc, #128]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061ee:	4b1f      	ldr	r3, [pc, #124]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f2:	4a1e      	ldr	r2, [pc, #120]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 80061f4:	f043 0310 	orr.w	r3, r3, #16
 80061f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006200:	4b1a      	ldr	r3, [pc, #104]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	4a19      	ldr	r2, [pc, #100]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006206:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800620a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800620c:	e00f      	b.n	800622e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d106      	bne.n	8006222 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006214:	4b15      	ldr	r3, [pc, #84]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006218:	4a14      	ldr	r2, [pc, #80]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 800621a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800621e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006220:	e005      	b.n	800622e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006222:	4b12      	ldr	r3, [pc, #72]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	4a11      	ldr	r2, [pc, #68]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006228:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800622c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800622e:	4b0f      	ldr	r3, [pc, #60]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a0e      	ldr	r2, [pc, #56]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006234:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800623a:	f7fb f8fd 	bl	8001438 <HAL_GetTick>
 800623e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006240:	e008      	b.n	8006254 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006242:	f7fb f8f9 	bl	8001438 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e006      	b.n	8006262 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006254:	4b05      	ldr	r3, [pc, #20]	@ (800626c <RCCEx_PLL2_Config+0x15c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0f0      	beq.n	8006242 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	58024400 	.word	0x58024400
 8006270:	ffff0007 	.word	0xffff0007

08006274 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006282:	4b53      	ldr	r3, [pc, #332]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	2b03      	cmp	r3, #3
 800628c:	d101      	bne.n	8006292 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e099      	b.n	80063c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006292:	4b4f      	ldr	r3, [pc, #316]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a4e      	ldr	r2, [pc, #312]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800629c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629e:	f7fb f8cb 	bl	8001438 <HAL_GetTick>
 80062a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062a4:	e008      	b.n	80062b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062a6:	f7fb f8c7 	bl	8001438 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e086      	b.n	80063c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062b8:	4b45      	ldr	r3, [pc, #276]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f0      	bne.n	80062a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062c4:	4b42      	ldr	r3, [pc, #264]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	051b      	lsls	r3, r3, #20
 80062d2:	493f      	ldr	r1, [pc, #252]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	3b01      	subs	r3, #1
 80062de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	025b      	lsls	r3, r3, #9
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	041b      	lsls	r3, r3, #16
 80062f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	3b01      	subs	r3, #1
 8006302:	061b      	lsls	r3, r3, #24
 8006304:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006308:	4931      	ldr	r1, [pc, #196]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 800630a:	4313      	orrs	r3, r2
 800630c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800630e:	4b30      	ldr	r3, [pc, #192]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	492d      	ldr	r1, [pc, #180]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 800631c:	4313      	orrs	r3, r2
 800631e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006320:	4b2b      	ldr	r3, [pc, #172]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006324:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	4928      	ldr	r1, [pc, #160]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 800632e:	4313      	orrs	r3, r2
 8006330:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006332:	4b27      	ldr	r3, [pc, #156]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006336:	4a26      	ldr	r2, [pc, #152]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800633c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800633e:	4b24      	ldr	r3, [pc, #144]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006342:	4b24      	ldr	r3, [pc, #144]	@ (80063d4 <RCCEx_PLL3_Config+0x160>)
 8006344:	4013      	ands	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	69d2      	ldr	r2, [r2, #28]
 800634a:	00d2      	lsls	r2, r2, #3
 800634c:	4920      	ldr	r1, [pc, #128]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 800634e:	4313      	orrs	r3, r2
 8006350:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006352:	4b1f      	ldr	r3, [pc, #124]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006356:	4a1e      	ldr	r2, [pc, #120]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800635c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006364:	4b1a      	ldr	r3, [pc, #104]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	4a19      	ldr	r2, [pc, #100]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 800636a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800636e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006370:	e00f      	b.n	8006392 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d106      	bne.n	8006386 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006378:	4b15      	ldr	r3, [pc, #84]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	4a14      	ldr	r2, [pc, #80]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 800637e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006384:	e005      	b.n	8006392 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006386:	4b12      	ldr	r3, [pc, #72]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638a:	4a11      	ldr	r2, [pc, #68]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 800638c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006390:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006392:	4b0f      	ldr	r3, [pc, #60]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a0e      	ldr	r2, [pc, #56]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 8006398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800639c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800639e:	f7fb f84b 	bl	8001438 <HAL_GetTick>
 80063a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063a4:	e008      	b.n	80063b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063a6:	f7fb f847 	bl	8001438 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e006      	b.n	80063c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063b8:	4b05      	ldr	r3, [pc, #20]	@ (80063d0 <RCCEx_PLL3_Config+0x15c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d0f0      	beq.n	80063a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	58024400 	.word	0x58024400
 80063d4:	ffff0007 	.word	0xffff0007

080063d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	@ 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e075      	b.n	80064d6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d105      	bne.n	8006402 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fa fd65 	bl	8000ecc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2204      	movs	r2, #4
 8006406:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f868 	bl	80064e0 <HAL_SD_InitCard>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e05d      	b.n	80064d6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800641a:	f107 0308 	add.w	r3, r7, #8
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fbed 	bl	8006c00 <HAL_SD_GetCardStatus>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e052      	b.n	80064d6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006430:	7e3b      	ldrb	r3, [r7, #24]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006436:	7e7b      	ldrb	r3, [r7, #25]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006440:	2b01      	cmp	r3, #1
 8006442:	d10a      	bne.n	800645a <HAL_SD_Init+0x82>
 8006444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <HAL_SD_Init+0x78>
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006456:	659a      	str	r2, [r3, #88]	@ 0x58
 8006458:	e00b      	b.n	8006472 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645e:	2b01      	cmp	r3, #1
 8006460:	d104      	bne.n	800646c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006468:	659a      	str	r2, [r3, #88]	@ 0x58
 800646a:	e002      	b.n	8006472 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fcab 	bl	8006dd4 <HAL_SD_ConfigWideBusOperation>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e026      	b.n	80064d6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006488:	f7fa ffd6 	bl	8001438 <HAL_GetTick>
 800648c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800648e:	e011      	b.n	80064b4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006490:	f7fa ffd2 	bl	8001438 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800649e:	d109      	bne.n	80064b4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064a6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e010      	b.n	80064d6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fd9f 	bl	8006ff8 <HAL_SD_GetCardState>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d1e7      	bne.n	8006490 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3728      	adds	r7, #40	@ 0x28
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064e0:	b590      	push	{r4, r7, lr}
 80064e2:	b08d      	sub	sp, #52	@ 0x34
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80064f8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80064fc:	f04f 0100 	mov.w	r1, #0
 8006500:	f7fe fc76 	bl	8004df0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006504:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800651a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e070      	b.n	8006602 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	0a1b      	lsrs	r3, r3, #8
 8006524:	4a39      	ldr	r2, [pc, #228]	@ (800660c <HAL_SD_InitCard+0x12c>)
 8006526:	fba2 2303 	umull	r2, r3, r2, r3
 800652a:	091b      	lsrs	r3, r3, #4
 800652c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681c      	ldr	r4, [r3, #0]
 8006532:	466a      	mov	r2, sp
 8006534:	f107 0318 	add.w	r3, r7, #24
 8006538:	e893 0003 	ldmia.w	r3, {r0, r1}
 800653c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006540:	f107 030c 	add.w	r3, r7, #12
 8006544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006546:	4620      	mov	r0, r4
 8006548:	f003 fa56 	bl	80099f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f003 fa88 	bl	8009a66 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006562:	fbb2 f3f3 	udiv	r3, r2, r3
 8006566:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	d007      	beq.n	800657e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800656e:	4a28      	ldr	r2, [pc, #160]	@ (8006610 <HAL_SD_InitCard+0x130>)
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	fbb2 f3f3 	udiv	r3, r2, r3
 8006576:	3301      	adds	r3, #1
 8006578:	4618      	mov	r0, r3
 800657a:	f7fa ff69 	bl	8001450 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fe28 	bl	80071d4 <SD_PowerON>
 8006584:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00b      	beq.n	80065a4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e02e      	b.n	8006602 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fd47 	bl	8007038 <SD_InitCard>
 80065aa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e01b      	b.n	8006602 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80065d2:	4618      	mov	r0, r3
 80065d4:	f003 fadc 	bl	8009b90 <SDMMC_CmdBlockLength>
 80065d8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00f      	beq.n	8006600 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a0b      	ldr	r2, [pc, #44]	@ (8006614 <HAL_SD_InitCard+0x134>)
 80065e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e000      	b.n	8006602 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	372c      	adds	r7, #44	@ 0x2c
 8006606:	46bd      	mov	sp, r7
 8006608:	bd90      	pop	{r4, r7, pc}
 800660a:	bf00      	nop
 800660c:	014f8b59 	.word	0x014f8b59
 8006610:	00012110 	.word	0x00012110
 8006614:	1fe00fff 	.word	0x1fe00fff

08006618 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08c      	sub	sp, #48	@ 0x30
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d107      	bne.n	8006640 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006634:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e08d      	b.n	800675c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	f040 8086 	bne.w	800675a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	441a      	add	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665e:	429a      	cmp	r2, r3
 8006660:	d907      	bls.n	8006672 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006666:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e074      	b.n	800675c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2203      	movs	r2, #3
 8006676:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2200      	movs	r2, #0
 8006680:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	025a      	lsls	r2, r3, #9
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006694:	2b01      	cmp	r3, #1
 8006696:	d002      	beq.n	800669e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	025b      	lsls	r3, r3, #9
 800669c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800669e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066a2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	025b      	lsls	r3, r3, #9
 80066a8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80066aa:	2390      	movs	r3, #144	@ 0x90
 80066ac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80066ae:	2302      	movs	r3, #2
 80066b0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f107 0210 	add.w	r2, r7, #16
 80066c2:	4611      	mov	r1, r2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f003 fa37 	bl	8009b38 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066d8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2201      	movs	r2, #1
 80066e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d90a      	bls.n	8006706 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2282      	movs	r2, #130	@ 0x82
 80066f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066fc:	4618      	mov	r0, r3
 80066fe:	f003 fa8d 	bl	8009c1c <SDMMC_CmdReadMultiBlock>
 8006702:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006704:	e009      	b.n	800671a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2281      	movs	r2, #129	@ 0x81
 800670a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006712:	4618      	mov	r0, r3
 8006714:	f003 fa5f 	bl	8009bd6 <SDMMC_CmdReadSingleBlock>
 8006718:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800671a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d012      	beq.n	8006746 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a0f      	ldr	r2, [pc, #60]	@ (8006764 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006726:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800672c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672e:	431a      	orrs	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e00a      	b.n	800675c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8006754:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	e000      	b.n	800675c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800675a:	2302      	movs	r3, #2
  }
}
 800675c:	4618      	mov	r0, r3
 800675e:	3730      	adds	r7, #48	@ 0x30
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	1fe00fff 	.word	0x1fe00fff

08006768 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08c      	sub	sp, #48	@ 0x30
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d107      	bne.n	8006790 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006784:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e08d      	b.n	80068ac <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	f040 8086 	bne.w	80068aa <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	441a      	add	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d907      	bls.n	80067c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e074      	b.n	80068ac <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2203      	movs	r2, #3
 80067c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2200      	movs	r2, #0
 80067d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	025a      	lsls	r2, r3, #9
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d002      	beq.n	80067ee <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 80067e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ea:	025b      	lsls	r3, r3, #9
 80067ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067f2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	025b      	lsls	r3, r3, #9
 80067f8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80067fa:	2390      	movs	r3, #144	@ 0x90
 80067fc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006802:	2300      	movs	r3, #0
 8006804:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f107 0210 	add.w	r2, r7, #16
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f003 f98f 	bl	8009b38 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006828:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2201      	movs	r2, #1
 8006838:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d90a      	bls.n	8006856 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	22a0      	movs	r2, #160	@ 0xa0
 8006844:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800684c:	4618      	mov	r0, r3
 800684e:	f003 fa2b 	bl	8009ca8 <SDMMC_CmdWriteMultiBlock>
 8006852:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006854:	e009      	b.n	800686a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2290      	movs	r2, #144	@ 0x90
 800685a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006862:	4618      	mov	r0, r3
 8006864:	f003 f9fd 	bl	8009c62 <SDMMC_CmdWriteSingleBlock>
 8006868:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d012      	beq.n	8006896 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a0f      	ldr	r2, [pc, #60]	@ (80068b4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006876:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800687c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687e:	431a      	orrs	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e00a      	b.n	80068ac <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 80068a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	e000      	b.n	80068ac <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80068aa:	2302      	movs	r3, #2
  }
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3730      	adds	r7, #48	@ 0x30
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	1fe00fff 	.word	0x1fe00fff

080068b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c6:	0f9b      	lsrs	r3, r3, #30
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d2:	0e9b      	lsrs	r3, r3, #26
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e4:	0e1b      	lsrs	r3, r3, #24
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006902:	0a1b      	lsrs	r3, r3, #8
 8006904:	b2da      	uxtb	r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800690e:	b2da      	uxtb	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006918:	0d1b      	lsrs	r3, r3, #20
 800691a:	b29a      	uxth	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006924:	0c1b      	lsrs	r3, r3, #16
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	b2da      	uxtb	r2, r3
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006936:	0bdb      	lsrs	r3, r3, #15
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	b2da      	uxtb	r2, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006948:	0b9b      	lsrs	r3, r3, #14
 800694a:	b2db      	uxtb	r3, r3
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	b2da      	uxtb	r2, r3
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800695a:	0b5b      	lsrs	r3, r3, #13
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800696c:	0b1b      	lsrs	r3, r3, #12
 800696e:	b2db      	uxtb	r3, r3
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	b2da      	uxtb	r2, r3
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2200      	movs	r2, #0
 800697e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d163      	bne.n	8006a50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800698c:	009a      	lsls	r2, r3, #2
 800698e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006992:	4013      	ands	r3, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8006998:	0f92      	lsrs	r2, r2, #30
 800699a:	431a      	orrs	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a4:	0edb      	lsrs	r3, r3, #27
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069b6:	0e1b      	lsrs	r3, r3, #24
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069c8:	0d5b      	lsrs	r3, r3, #21
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069da:	0c9b      	lsrs	r3, r3, #18
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ec:	0bdb      	lsrs	r3, r3, #15
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	7e1b      	ldrb	r3, [r3, #24]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	3302      	adds	r3, #2
 8006a10:	2201      	movs	r2, #1
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a1a:	fb03 f202 	mul.w	r2, r3, r2
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	7a1b      	ldrb	r3, [r3, #8]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 030f 	and.w	r3, r3, #15
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006a3c:	0a52      	lsrs	r2, r2, #9
 8006a3e:	fb03 f202 	mul.w	r2, r3, r2
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a4e:	e031      	b.n	8006ab4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d11d      	bne.n	8006a94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a5c:	041b      	lsls	r3, r3, #16
 8006a5e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a66:	0c1b      	lsrs	r3, r3, #16
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	3301      	adds	r3, #1
 8006a74:	029a      	lsls	r2, r3, #10
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a88:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a92:	e00f      	b.n	8006ab4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a58      	ldr	r2, [pc, #352]	@ (8006bfc <HAL_SD_GetCardCSD+0x344>)
 8006a9a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e09d      	b.n	8006bf0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ab8:	0b9b      	lsrs	r3, r3, #14
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aca:	09db      	lsrs	r3, r3, #7
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aec:	0fdb      	lsrs	r3, r3, #31
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006af8:	0f5b      	lsrs	r3, r3, #29
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f003 0303 	and.w	r3, r3, #3
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b0a:	0e9b      	lsrs	r3, r3, #26
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b1c:	0d9b      	lsrs	r3, r3, #22
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b2e:	0d5b      	lsrs	r3, r3, #21
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b4a:	0c1b      	lsrs	r3, r3, #16
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b5e:	0bdb      	lsrs	r3, r3, #15
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b72:	0b9b      	lsrs	r3, r3, #14
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b86:	0b5b      	lsrs	r3, r3, #13
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b9a:	0b1b      	lsrs	r3, r3, #12
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bae:	0a9b      	lsrs	r3, r3, #10
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bd6:	085b      	lsrs	r3, r3, #1
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	1fe00fff 	.word	0x1fe00fff

08006c00 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b094      	sub	sp, #80	@ 0x50
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d101      	bne.n	8006c20 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e0a7      	b.n	8006d70 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006c20:	f107 0308 	add.w	r3, r7, #8
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fb62 	bl	80072f0 <SD_SendSDStatus>
 8006c2c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d011      	beq.n	8006c58 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a4f      	ldr	r2, [pc, #316]	@ (8006d78 <HAL_SD_GetCardStatus+0x178>)
 8006c3a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006c56:	e070      	b.n	8006d3a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	099b      	lsrs	r3, r3, #6
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	0e1b      	lsrs	r3, r3, #24
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	061a      	lsls	r2, r3, #24
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	021b      	lsls	r3, r3, #8
 8006c9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c9e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	0a1b      	lsrs	r3, r3, #8
 8006ca4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ca8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	0e1b      	lsrs	r3, r3, #24
 8006cae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	0a1b      	lsrs	r3, r3, #8
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	0d1b      	lsrs	r3, r3, #20
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	0c1b      	lsrs	r3, r3, #16
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	4313      	orrs	r3, r2
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	0a9b      	lsrs	r3, r3, #10
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	0a1b      	lsrs	r3, r3, #8
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	f003 0303 	and.w	r3, r3, #3
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	091b      	lsrs	r3, r3, #4
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	0e1b      	lsrs	r3, r3, #24
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d42:	4618      	mov	r0, r3
 8006d44:	f002 ff24 	bl	8009b90 <SDMMC_CmdBlockLength>
 8006d48:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00d      	beq.n	8006d6c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a08      	ldr	r2, [pc, #32]	@ (8006d78 <HAL_SD_GetCardStatus+0x178>)
 8006d56:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d5c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8006d6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3750      	adds	r7, #80	@ 0x50
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	1fe00fff 	.word	0x1fe00fff

08006d7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006dd4:	b590      	push	{r4, r7, lr}
 8006dd6:	b08d      	sub	sp, #52	@ 0x34
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2203      	movs	r2, #3
 8006de8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d02e      	beq.n	8006e52 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dfa:	d106      	bne.n	8006e0a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e08:	e029      	b.n	8006e5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e10:	d10a      	bne.n	8006e28 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fb64 	bl	80074e0 <SD_WideBus_Enable>
 8006e18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e26:	e01a      	b.n	8006e5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fba1 	bl	8007576 <SD_WideBus_Disable>
 8006e34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e42:	e00c      	b.n	8006e5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e48:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e50:	e005      	b.n	8006e5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a5f      	ldr	r2, [pc, #380]	@ (8006fe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006e6c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006e74:	e096      	b.n	8006fa4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006e76:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006e7a:	f04f 0100 	mov.w	r1, #0
 8006e7e:	f7fd ffb7 	bl	8004df0 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e82:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 8083 	beq.w	8006f92 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695a      	ldr	r2, [r3, #20]
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4950      	ldr	r1, [pc, #320]	@ (8006fec <HAL_SD_ConfigWideBusOperation+0x218>)
 8006eaa:	fba1 1303 	umull	r1, r3, r1, r3
 8006eae:	0e1b      	lsrs	r3, r3, #24
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d303      	bcc.n	8006ebc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	61bb      	str	r3, [r7, #24]
 8006eba:	e05a      	b.n	8006f72 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ec4:	d103      	bne.n	8006ece <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	e051      	b.n	8006f72 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed6:	d126      	bne.n	8006f26 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10e      	bne.n	8006efe <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4a43      	ldr	r2, [pc, #268]	@ (8006ff0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d906      	bls.n	8006ef6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4a40      	ldr	r2, [pc, #256]	@ (8006fec <HAL_SD_ConfigWideBusOperation+0x218>)
 8006eec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef0:	0e5b      	lsrs	r3, r3, #25
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	e03d      	b.n	8006f72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	e039      	b.n	8006f72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0a:	4a39      	ldr	r2, [pc, #228]	@ (8006ff0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d906      	bls.n	8006f1e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	4a36      	ldr	r2, [pc, #216]	@ (8006fec <HAL_SD_ConfigWideBusOperation+0x218>)
 8006f14:	fba2 2303 	umull	r2, r3, r2, r3
 8006f18:	0e5b      	lsrs	r3, r3, #25
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e029      	b.n	8006f72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	61bb      	str	r3, [r7, #24]
 8006f24:	e025      	b.n	8006f72 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10e      	bne.n	8006f4c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	4a30      	ldr	r2, [pc, #192]	@ (8006ff4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d906      	bls.n	8006f44 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	4a2c      	ldr	r2, [pc, #176]	@ (8006fec <HAL_SD_ConfigWideBusOperation+0x218>)
 8006f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3e:	0e1b      	lsrs	r3, r3, #24
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	e016      	b.n	8006f72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	e012      	b.n	8006f72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f58:	4a26      	ldr	r2, [pc, #152]	@ (8006ff4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d906      	bls.n	8006f6c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4a22      	ldr	r2, [pc, #136]	@ (8006fec <HAL_SD_ConfigWideBusOperation+0x218>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	0e1b      	lsrs	r3, r3, #24
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e002      	b.n	8006f72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681c      	ldr	r4, [r3, #0]
 8006f76:	466a      	mov	r2, sp
 8006f78:	f107 0314 	add.w	r3, r7, #20
 8006f7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f80:	e882 0003 	stmia.w	r2, {r0, r1}
 8006f84:	f107 0308 	add.w	r3, r7, #8
 8006f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f002 fd34 	bl	80099f8 <SDMMC_Init>
 8006f90:	e008      	b.n	8006fa4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f96:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006fac:	4618      	mov	r0, r3
 8006fae:	f002 fdef 	bl	8009b90 <SDMMC_CmdBlockLength>
 8006fb2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8006fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	372c      	adds	r7, #44	@ 0x2c
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd90      	pop	{r4, r7, pc}
 8006fe8:	1fe00fff 	.word	0x1fe00fff
 8006fec:	55e63b89 	.word	0x55e63b89
 8006ff0:	02faf080 	.word	0x02faf080
 8006ff4:	017d7840 	.word	0x017d7840

08006ff8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007004:	f107 030c 	add.w	r3, r7, #12
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa40 	bl	8007490 <SD_SendStatus>
 8007010:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	0a5b      	lsrs	r3, r3, #9
 8007028:	f003 030f 	and.w	r3, r3, #15
 800702c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800702e:	693b      	ldr	r3, [r7, #16]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b090      	sub	sp, #64	@ 0x40
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007044:	f7fa f9f8 	bl	8001438 <HAL_GetTick>
 8007048:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f002 fd1a 	bl	8009a88 <SDMMC_GetPowerState>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d102      	bne.n	8007060 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800705a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800705e:	e0b5      	b.n	80071cc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007064:	2b03      	cmp	r3, #3
 8007066:	d02e      	beq.n	80070c6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f002 ff27 	bl	8009ec0 <SDMMC_CmdSendCID>
 8007072:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <SD_InitCard+0x46>
    {
      return errorstate;
 800707a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707c:	e0a6      	b.n	80071cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f002 fd44 	bl	8009b12 <SDMMC_GetResponse>
 800708a:	4602      	mov	r2, r0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2104      	movs	r1, #4
 8007096:	4618      	mov	r0, r3
 8007098:	f002 fd3b 	bl	8009b12 <SDMMC_GetResponse>
 800709c:	4602      	mov	r2, r0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2108      	movs	r1, #8
 80070a8:	4618      	mov	r0, r3
 80070aa:	f002 fd32 	bl	8009b12 <SDMMC_GetResponse>
 80070ae:	4602      	mov	r2, r0
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	210c      	movs	r1, #12
 80070ba:	4618      	mov	r0, r3
 80070bc:	f002 fd29 	bl	8009b12 <SDMMC_GetResponse>
 80070c0:	4602      	mov	r2, r0
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d01d      	beq.n	800710a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80070ce:	e019      	b.n	8007104 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f107 020a 	add.w	r2, r7, #10
 80070d8:	4611      	mov	r1, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f002 ff2f 	bl	8009f3e <SDMMC_CmdSetRelAdd>
 80070e0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80070e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <SD_InitCard+0xb4>
      {
        return errorstate;
 80070e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ea:	e06f      	b.n	80071cc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80070ec:	f7fa f9a4 	bl	8001438 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d902      	bls.n	8007104 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80070fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007102:	e063      	b.n	80071cc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007104:	897b      	ldrh	r3, [r7, #10]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0e2      	beq.n	80070d0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710e:	2b03      	cmp	r3, #3
 8007110:	d036      	beq.n	8007180 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007112:	897b      	ldrh	r3, [r7, #10]
 8007114:	461a      	mov	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007122:	041b      	lsls	r3, r3, #16
 8007124:	4619      	mov	r1, r3
 8007126:	4610      	mov	r0, r2
 8007128:	f002 fee9 	bl	8009efe <SDMMC_CmdSendCSD>
 800712c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800712e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <SD_InitCard+0x100>
    {
      return errorstate;
 8007134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007136:	e049      	b.n	80071cc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2100      	movs	r1, #0
 800713e:	4618      	mov	r0, r3
 8007140:	f002 fce7 	bl	8009b12 <SDMMC_GetResponse>
 8007144:	4602      	mov	r2, r0
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2104      	movs	r1, #4
 8007150:	4618      	mov	r0, r3
 8007152:	f002 fcde 	bl	8009b12 <SDMMC_GetResponse>
 8007156:	4602      	mov	r2, r0
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2108      	movs	r1, #8
 8007162:	4618      	mov	r0, r3
 8007164:	f002 fcd5 	bl	8009b12 <SDMMC_GetResponse>
 8007168:	4602      	mov	r2, r0
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	210c      	movs	r1, #12
 8007174:	4618      	mov	r0, r3
 8007176:	f002 fccc 	bl	8009b12 <SDMMC_GetResponse>
 800717a:	4602      	mov	r2, r0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2104      	movs	r1, #4
 8007186:	4618      	mov	r0, r3
 8007188:	f002 fcc3 	bl	8009b12 <SDMMC_GetResponse>
 800718c:	4603      	mov	r3, r0
 800718e:	0d1a      	lsrs	r2, r3, #20
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007194:	f107 030c 	add.w	r3, r7, #12
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff fb8c 	bl	80068b8 <HAL_SD_GetCardCSD>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80071aa:	e00f      	b.n	80071cc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f002 fd98 	bl	8009cee <SDMMC_CmdSelDesel>
 80071be:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80071c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <SD_InitCard+0x192>
  {
    return errorstate;
 80071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c8:	e000      	b.n	80071cc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3740      	adds	r7, #64	@ 0x40
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f002 fda1 	bl	8009d34 <SDMMC_CmdGoIdleState>
 80071f2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <SD_PowerON+0x2a>
  {
    return errorstate;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	e072      	b.n	80072e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f002 fdb4 	bl	8009d70 <SDMMC_CmdOperCond>
 8007208:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007210:	d10d      	bne.n	800722e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4618      	mov	r0, r3
 800721e:	f002 fd89 	bl	8009d34 <SDMMC_CmdGoIdleState>
 8007222:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d004      	beq.n	8007234 <SD_PowerON+0x60>
    {
      return errorstate;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	e05a      	b.n	80072e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007238:	2b01      	cmp	r3, #1
 800723a:	d137      	bne.n	80072ac <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f002 fdb4 	bl	8009db0 <SDMMC_CmdAppCommand>
 8007248:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d02d      	beq.n	80072ac <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007250:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007254:	e046      	b.n	80072e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2100      	movs	r1, #0
 800725c:	4618      	mov	r0, r3
 800725e:	f002 fda7 	bl	8009db0 <SDMMC_CmdAppCommand>
 8007262:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <SD_PowerON+0x9a>
    {
      return errorstate;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	e03a      	b.n	80072e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	491e      	ldr	r1, [pc, #120]	@ (80072ec <SD_PowerON+0x118>)
 8007274:	4618      	mov	r0, r3
 8007276:	f002 fdbe 	bl	8009df6 <SDMMC_CmdAppOperCommand>
 800727a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007282:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007286:	e02d      	b.n	80072e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f002 fc3f 	bl	8009b12 <SDMMC_GetResponse>
 8007294:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	0fdb      	lsrs	r3, r3, #31
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <SD_PowerON+0xce>
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <SD_PowerON+0xd0>
 80072a2:	2300      	movs	r3, #0
 80072a4:	613b      	str	r3, [r7, #16]

    count++;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3301      	adds	r3, #1
 80072aa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d802      	bhi.n	80072bc <SD_PowerON+0xe8>
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0cc      	beq.n	8007256 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d902      	bls.n	80072cc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80072c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80072ca:	e00b      	b.n	80072e4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	c1100000 	.word	0xc1100000

080072f0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08c      	sub	sp, #48	@ 0x30
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80072fa:	f7fa f89d 	bl	8001438 <HAL_GetTick>
 80072fe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2100      	movs	r1, #0
 800730a:	4618      	mov	r0, r3
 800730c:	f002 fc01 	bl	8009b12 <SDMMC_GetResponse>
 8007310:	4603      	mov	r3, r0
 8007312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800731a:	d102      	bne.n	8007322 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800731c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007320:	e0b0      	b.n	8007484 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2140      	movs	r1, #64	@ 0x40
 8007328:	4618      	mov	r0, r3
 800732a:	f002 fc31 	bl	8009b90 <SDMMC_CmdBlockLength>
 800732e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	e0a0      	b.n	8007484 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	4619      	mov	r1, r3
 800734e:	4610      	mov	r0, r2
 8007350:	f002 fd2e 	bl	8009db0 <SDMMC_CmdAppCommand>
 8007354:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007356:	6a3b      	ldr	r3, [r7, #32]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	e08d      	b.n	8007484 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007368:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800736c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800736e:	2340      	movs	r3, #64	@ 0x40
 8007370:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007372:	2360      	movs	r3, #96	@ 0x60
 8007374:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007376:	2302      	movs	r3, #2
 8007378:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800737a:	2300      	movs	r3, #0
 800737c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800737e:	2301      	movs	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f107 0208 	add.w	r2, r7, #8
 800738a:	4611      	mov	r1, r2
 800738c:	4618      	mov	r0, r3
 800738e:	f002 fbd3 	bl	8009b38 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f002 fe16 	bl	8009fc8 <SDMMC_CmdStatusRegister>
 800739c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d02b      	beq.n	80073fc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	e069      	b.n	8007484 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d013      	beq.n	80073e6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80073be:	2300      	movs	r3, #0
 80073c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c2:	e00d      	b.n	80073e0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f002 fb3f 	bl	8009a4c <SDMMC_ReadFIFO>
 80073ce:	4602      	mov	r2, r0
 80073d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d2:	601a      	str	r2, [r3, #0]
        pData++;
 80073d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d6:	3304      	adds	r3, #4
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	3301      	adds	r3, #1
 80073de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e2:	2b07      	cmp	r3, #7
 80073e4:	d9ee      	bls.n	80073c4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80073e6:	f7fa f827 	bl	8001438 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073f4:	d102      	bne.n	80073fc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80073f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80073fa:	e043      	b.n	8007484 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007402:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0d2      	beq.n	80073b0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007410:	f003 0308 	and.w	r3, r3, #8
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007418:	2308      	movs	r3, #8
 800741a:	e033      	b.n	8007484 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800742a:	2302      	movs	r3, #2
 800742c:	e02a      	b.n	8007484 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b00      	cmp	r3, #0
 800743a:	d017      	beq.n	800746c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800743c:	2320      	movs	r3, #32
 800743e:	e021      	b.n	8007484 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f002 fb01 	bl	8009a4c <SDMMC_ReadFIFO>
 800744a:	4602      	mov	r2, r0
 800744c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744e:	601a      	str	r2, [r3, #0]
    pData++;
 8007450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007452:	3304      	adds	r3, #4
 8007454:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007456:	f7f9 ffef 	bl	8001438 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007464:	d102      	bne.n	800746c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007466:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800746a:	e00b      	b.n	8007484 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007472:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e2      	bne.n	8007440 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a03      	ldr	r2, [pc, #12]	@ (800748c <SD_SendSDStatus+0x19c>)
 8007480:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3730      	adds	r7, #48	@ 0x30
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	18000f3a 	.word	0x18000f3a

08007490 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d102      	bne.n	80074a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80074a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074a4:	e018      	b.n	80074d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f002 fd65 	bl	8009f82 <SDMMC_CmdSendStatus>
 80074b8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	e009      	b.n	80074d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2100      	movs	r1, #0
 80074ca:	4618      	mov	r0, r3
 80074cc:	f002 fb21 	bl	8009b12 <SDMMC_GetResponse>
 80074d0:	4602      	mov	r2, r0
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	2300      	movs	r3, #0
 80074ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2100      	movs	r1, #0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f002 fb0b 	bl	8009b12 <SDMMC_GetResponse>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007502:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007506:	d102      	bne.n	800750e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007508:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800750c:	e02f      	b.n	800756e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800750e:	f107 030c 	add.w	r3, r7, #12
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f879 	bl	800760c <SD_FindSCR>
 800751a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	e023      	b.n	800756e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01c      	beq.n	800756a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	4619      	mov	r1, r3
 800753c:	4610      	mov	r0, r2
 800753e:	f002 fc37 	bl	8009db0 <SDMMC_CmdAppCommand>
 8007542:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	e00f      	b.n	800756e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2102      	movs	r1, #2
 8007554:	4618      	mov	r0, r3
 8007556:	f002 fc6e 	bl	8009e36 <SDMMC_CmdBusWidth>
 800755a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	e003      	b.n	800756e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007566:	2300      	movs	r3, #0
 8007568:	e001      	b.n	800756e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800756a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b086      	sub	sp, #24
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	2300      	movs	r3, #0
 8007584:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2100      	movs	r1, #0
 800758c:	4618      	mov	r0, r3
 800758e:	f002 fac0 	bl	8009b12 <SDMMC_GetResponse>
 8007592:	4603      	mov	r3, r0
 8007594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007598:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800759c:	d102      	bne.n	80075a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800759e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80075a2:	e02f      	b.n	8007604 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80075a4:	f107 030c 	add.w	r3, r7, #12
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f82e 	bl	800760c <SD_FindSCR>
 80075b0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	e023      	b.n	8007604 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d01c      	beq.n	8007600 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ce:	041b      	lsls	r3, r3, #16
 80075d0:	4619      	mov	r1, r3
 80075d2:	4610      	mov	r0, r2
 80075d4:	f002 fbec 	bl	8009db0 <SDMMC_CmdAppCommand>
 80075d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	e00f      	b.n	8007604 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2100      	movs	r1, #0
 80075ea:	4618      	mov	r0, r3
 80075ec:	f002 fc23 	bl	8009e36 <SDMMC_CmdBusWidth>
 80075f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	e003      	b.n	8007604 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	e001      	b.n	8007604 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007600:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08e      	sub	sp, #56	@ 0x38
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007616:	f7f9 ff0f 	bl	8001438 <HAL_GetTick>
 800761a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007620:	2300      	movs	r3, #0
 8007622:	60bb      	str	r3, [r7, #8]
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2108      	movs	r1, #8
 8007632:	4618      	mov	r0, r3
 8007634:	f002 faac 	bl	8009b90 <SDMMC_CmdBlockLength>
 8007638:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800763a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007642:	e0ad      	b.n	80077a0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800764c:	041b      	lsls	r3, r3, #16
 800764e:	4619      	mov	r1, r3
 8007650:	4610      	mov	r0, r2
 8007652:	f002 fbad 	bl	8009db0 <SDMMC_CmdAppCommand>
 8007656:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <SD_FindSCR+0x56>
  {
    return errorstate;
 800765e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007660:	e09e      	b.n	80077a0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007666:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007668:	2308      	movs	r3, #8
 800766a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800766c:	2330      	movs	r3, #48	@ 0x30
 800766e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007670:	2302      	movs	r3, #2
 8007672:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007674:	2300      	movs	r3, #0
 8007676:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007678:	2301      	movs	r3, #1
 800767a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f107 0210 	add.w	r2, r7, #16
 8007684:	4611      	mov	r1, r2
 8007686:	4618      	mov	r0, r3
 8007688:	f002 fa56 	bl	8009b38 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4618      	mov	r0, r3
 8007692:	f002 fbf3 	bl	8009e7c <SDMMC_CmdSendSCR>
 8007696:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769a:	2b00      	cmp	r3, #0
 800769c:	d027      	beq.n	80076ee <SD_FindSCR+0xe2>
  {
    return errorstate;
 800769e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a0:	e07e      	b.n	80077a0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d113      	bne.n	80076d8 <SD_FindSCR+0xcc>
 80076b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d110      	bne.n	80076d8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f002 f9c6 	bl	8009a4c <SDMMC_ReadFIFO>
 80076c0:	4603      	mov	r3, r0
 80076c2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f002 f9bf 	bl	8009a4c <SDMMC_ReadFIFO>
 80076ce:	4603      	mov	r3, r0
 80076d0:	60fb      	str	r3, [r7, #12]
      index++;
 80076d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d4:	3301      	adds	r3, #1
 80076d6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80076d8:	f7f9 feae 	bl	8001438 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076e6:	d102      	bne.n	80076ee <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80076e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80076ec:	e058      	b.n	80077a0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076f4:	f240 532a 	movw	r3, #1322	@ 0x52a
 80076f8:	4013      	ands	r3, r2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0d1      	beq.n	80076a2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2208      	movs	r2, #8
 8007712:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007714:	2308      	movs	r3, #8
 8007716:	e043      	b.n	80077a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d005      	beq.n	8007732 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2202      	movs	r2, #2
 800772c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800772e:	2302      	movs	r3, #2
 8007730:	e036      	b.n	80077a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2220      	movs	r2, #32
 8007746:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007748:	2320      	movs	r3, #32
 800774a:	e029      	b.n	80077a0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a15      	ldr	r2, [pc, #84]	@ (80077a8 <SD_FindSCR+0x19c>)
 8007752:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	061a      	lsls	r2, r3, #24
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	021b      	lsls	r3, r3, #8
 800775c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007760:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800776a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	0e1b      	lsrs	r3, r3, #24
 8007770:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8007772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007774:	601a      	str	r2, [r3, #0]
    scr++;
 8007776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007778:	3304      	adds	r3, #4
 800777a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	061a      	lsls	r2, r3, #24
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	021b      	lsls	r3, r3, #8
 8007784:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007788:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	0a1b      	lsrs	r3, r3, #8
 800778e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8007792:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	0e1b      	lsrs	r3, r3, #24
 8007798:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3738      	adds	r7, #56	@ 0x38
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	18000f3a 	.word	0x18000f3a

080077ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e10f      	b.n	80079de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a87      	ldr	r2, [pc, #540]	@ (80079e8 <HAL_SPI_Init+0x23c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00f      	beq.n	80077ee <HAL_SPI_Init+0x42>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a86      	ldr	r2, [pc, #536]	@ (80079ec <HAL_SPI_Init+0x240>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00a      	beq.n	80077ee <HAL_SPI_Init+0x42>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a84      	ldr	r2, [pc, #528]	@ (80079f0 <HAL_SPI_Init+0x244>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d005      	beq.n	80077ee <HAL_SPI_Init+0x42>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	2b0f      	cmp	r3, #15
 80077e8:	d901      	bls.n	80077ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e0f7      	b.n	80079de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fbba 	bl	8007f68 <SPI_GetPacketSize>
 80077f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a7b      	ldr	r2, [pc, #492]	@ (80079e8 <HAL_SPI_Init+0x23c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00c      	beq.n	800781a <HAL_SPI_Init+0x6e>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a79      	ldr	r2, [pc, #484]	@ (80079ec <HAL_SPI_Init+0x240>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d007      	beq.n	800781a <HAL_SPI_Init+0x6e>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a78      	ldr	r2, [pc, #480]	@ (80079f0 <HAL_SPI_Init+0x244>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d002      	beq.n	800781a <HAL_SPI_Init+0x6e>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b08      	cmp	r3, #8
 8007818:	d811      	bhi.n	800783e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800781e:	4a72      	ldr	r2, [pc, #456]	@ (80079e8 <HAL_SPI_Init+0x23c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d009      	beq.n	8007838 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a70      	ldr	r2, [pc, #448]	@ (80079ec <HAL_SPI_Init+0x240>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d004      	beq.n	8007838 <HAL_SPI_Init+0x8c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a6f      	ldr	r2, [pc, #444]	@ (80079f0 <HAL_SPI_Init+0x244>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d104      	bne.n	8007842 <HAL_SPI_Init+0x96>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b10      	cmp	r3, #16
 800783c:	d901      	bls.n	8007842 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e0cd      	b.n	80079de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7f9 fbd8 	bl	800100c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0201 	bic.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800787e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007888:	d119      	bne.n	80078be <HAL_SPI_Init+0x112>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007892:	d103      	bne.n	800789c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007898:	2b00      	cmp	r3, #0
 800789a:	d008      	beq.n	80078ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10c      	bne.n	80078be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80078a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ac:	d107      	bne.n	80078be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80078bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00f      	beq.n	80078ea <HAL_SPI_Init+0x13e>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	2b06      	cmp	r3, #6
 80078d0:	d90b      	bls.n	80078ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	e007      	b.n	80078fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007902:	431a      	orrs	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	431a      	orrs	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800790c:	ea42 0103 	orr.w	r1, r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68da      	ldr	r2, [r3, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	431a      	orrs	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800794e:	431a      	orrs	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	431a      	orrs	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800795a:	ea42 0103 	orr.w	r1, r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d113      	bne.n	800799a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007984:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007998:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0201 	bic.w	r2, r2, #1
 80079a8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	40013000 	.word	0x40013000
 80079ec:	40003800 	.word	0x40003800
 80079f0:	40003c00 	.word	0x40003c00

080079f4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08a      	sub	sp, #40	@ 0x28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007a0c:	6a3a      	ldr	r2, [r7, #32]
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	4013      	ands	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a26:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3330      	adds	r3, #48	@ 0x30
 8007a2e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d010      	beq.n	8007a5c <HAL_SPI_IRQHandler+0x68>
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	f003 0308 	and.w	r3, r3, #8
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699a      	ldr	r2, [r3, #24]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a52:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f9c3 	bl	8007de0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007a5a:	e192      	b.n	8007d82 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d113      	bne.n	8007a8e <HAL_SPI_IRQHandler+0x9a>
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10e      	bne.n	8007a8e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
    handled = 1UL;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10f      	bne.n	8007ab8 <HAL_SPI_IRQHandler+0xc4>
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d105      	bne.n	8007ab8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	4798      	blx	r3
    handled = 1UL;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10f      	bne.n	8007ae2 <HAL_SPI_IRQHandler+0xee>
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00a      	beq.n	8007ae2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d105      	bne.n	8007ae2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
    handled = 1UL;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f040 8147 	bne.w	8007d78 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 808b 	beq.w	8007c0c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	699a      	ldr	r2, [r3, #24]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0208 	orr.w	r2, r2, #8
 8007b04:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699a      	ldr	r2, [r3, #24]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0210 	orr.w	r2, r2, #16
 8007b14:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699a      	ldr	r2, [r3, #24]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b24:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691a      	ldr	r2, [r3, #16]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0208 	bic.w	r2, r2, #8
 8007b34:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d13d      	bne.n	8007bc0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007b44:	e036      	b.n	8007bb4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	2b0f      	cmp	r3, #15
 8007b4c:	d90b      	bls.n	8007b66 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b58:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b5e:	1d1a      	adds	r2, r3, #4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	665a      	str	r2, [r3, #100]	@ 0x64
 8007b64:	e01d      	b.n	8007ba2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	2b07      	cmp	r3, #7
 8007b6c:	d90b      	bls.n	8007b86 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	8812      	ldrh	r2, [r2, #0]
 8007b76:	b292      	uxth	r2, r2
 8007b78:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b7e:	1c9a      	adds	r2, r3, #2
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	665a      	str	r2, [r3, #100]	@ 0x64
 8007b84:	e00d      	b.n	8007ba2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b92:	7812      	ldrb	r2, [r2, #0]
 8007b94:	b2d2      	uxtb	r2, r2
 8007b96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1c2      	bne.n	8007b46 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f931 	bl	8007e28 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f8f7 	bl	8007dcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007bde:	e0d0      	b.n	8007d82 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007be0:	7cfb      	ldrb	r3, [r7, #19]
 8007be2:	2b05      	cmp	r3, #5
 8007be4:	d103      	bne.n	8007bee <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f8e6 	bl	8007db8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007bec:	e0c6      	b.n	8007d7c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007bee:	7cfb      	ldrb	r3, [r7, #19]
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d103      	bne.n	8007bfc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f8d5 	bl	8007da4 <HAL_SPI_RxCpltCallback>
    return;
 8007bfa:	e0bf      	b.n	8007d7c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007bfc:	7cfb      	ldrb	r3, [r7, #19]
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	f040 80bc 	bne.w	8007d7c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f8c3 	bl	8007d90 <HAL_SPI_TxCpltCallback>
    return;
 8007c0a:	e0b7      	b.n	8007d7c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 80b5 	beq.w	8007d82 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00f      	beq.n	8007c42 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c28:	f043 0204 	orr.w	r2, r3, #4
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	699a      	ldr	r2, [r3, #24]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c40:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00f      	beq.n	8007c6c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c52:	f043 0201 	orr.w	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c6a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00f      	beq.n	8007c96 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c7c:	f043 0208 	orr.w	r2, r3, #8
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	699a      	ldr	r2, [r3, #24]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c94:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f003 0320 	and.w	r3, r3, #32
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00f      	beq.n	8007cc0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0220 	orr.w	r2, r2, #32
 8007cbe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d05a      	beq.n	8007d80 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0201 	bic.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6919      	ldr	r1, [r3, #16]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	4b28      	ldr	r3, [pc, #160]	@ (8007d88 <HAL_SPI_IRQHandler+0x394>)
 8007ce6:	400b      	ands	r3, r1
 8007ce8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007cf0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007cf4:	d138      	bne.n	8007d68 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007d04:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d013      	beq.n	8007d36 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d12:	4a1e      	ldr	r2, [pc, #120]	@ (8007d8c <HAL_SPI_IRQHandler+0x398>)
 8007d14:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fa f86e 	bl	8001dfc <HAL_DMA_Abort_IT>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d007      	beq.n	8007d36 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d020      	beq.n	8007d80 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d42:	4a12      	ldr	r2, [pc, #72]	@ (8007d8c <HAL_SPI_IRQHandler+0x398>)
 8007d44:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fa f856 	bl	8001dfc <HAL_DMA_Abort_IT>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d014      	beq.n	8007d80 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007d66:	e00b      	b.n	8007d80 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f82b 	bl	8007dcc <HAL_SPI_ErrorCallback>
    return;
 8007d76:	e003      	b.n	8007d80 <HAL_SPI_IRQHandler+0x38c>
    return;
 8007d78:	bf00      	nop
 8007d7a:	e002      	b.n	8007d82 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007d7c:	bf00      	nop
 8007d7e:	e000      	b.n	8007d82 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007d80:	bf00      	nop
  }
}
 8007d82:	3728      	adds	r7, #40	@ 0x28
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	fffffc94 	.word	0xfffffc94
 8007d8c:	08007df5 	.word	0x08007df5

08007d90 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f7ff ffd6 	bl	8007dcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0208 	orr.w	r2, r2, #8
 8007e46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0210 	orr.w	r2, r2, #16
 8007e56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0201 	bic.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6919      	ldr	r1, [r3, #16]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	4b3c      	ldr	r3, [pc, #240]	@ (8007f64 <SPI_CloseTransfer+0x13c>)
 8007e74:	400b      	ands	r3, r1
 8007e76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007e86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d014      	beq.n	8007ebe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00f      	beq.n	8007ebe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ea4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	699a      	ldr	r2, [r3, #24]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0220 	orr.w	r2, r2, #32
 8007ebc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d014      	beq.n	8007ef4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00f      	beq.n	8007ef4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eda:	f043 0204 	orr.w	r2, r3, #4
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ef2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00f      	beq.n	8007f1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f04:	f043 0201 	orr.w	r2, r3, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	699a      	ldr	r2, [r3, #24]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00f      	beq.n	8007f48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f2e:	f043 0208 	orr.w	r2, r3, #8
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007f58:	bf00      	nop
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	fffffc90 	.word	0xfffffc90

08007f68 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f74:	095b      	lsrs	r3, r3, #5
 8007f76:	3301      	adds	r3, #1
 8007f78:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	3307      	adds	r3, #7
 8007f86:	08db      	lsrs	r3, r3, #3
 8007f88:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e042      	b.n	8008036 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d106      	bne.n	8007fc8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7f9 f8b8 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2224      	movs	r2, #36	@ 0x24
 8007fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f022 0201 	bic.w	r2, r2, #1
 8007fde:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 f987 	bl	80092fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fc1c 	bl	800882c <UART_SetConfig>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e01b      	b.n	8008036 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800800c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800801c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f042 0201 	orr.w	r2, r2, #1
 800802c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 fa06 	bl	8009440 <UART_CheckIdleState>
 8008034:	4603      	mov	r3, r0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b0ba      	sub	sp, #232	@ 0xe8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008066:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800806a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800806e:	4013      	ands	r3, r2
 8008070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008078:	2b00      	cmp	r3, #0
 800807a:	d11b      	bne.n	80080b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008080:	f003 0320 	and.w	r3, r3, #32
 8008084:	2b00      	cmp	r3, #0
 8008086:	d015      	beq.n	80080b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d105      	bne.n	80080a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d009      	beq.n	80080b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8393 	beq.w	80087d0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3
      }
      return;
 80080b2:	e38d      	b.n	80087d0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 8123 	beq.w	8008304 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080c2:	4b8d      	ldr	r3, [pc, #564]	@ (80082f8 <HAL_UART_IRQHandler+0x2b8>)
 80080c4:	4013      	ands	r3, r2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80080ce:	4b8b      	ldr	r3, [pc, #556]	@ (80082fc <HAL_UART_IRQHandler+0x2bc>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f000 8116 	beq.w	8008304 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d011      	beq.n	8008108 <HAL_UART_IRQHandler+0xc8>
 80080e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2201      	movs	r2, #1
 80080f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080fe:	f043 0201 	orr.w	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d011      	beq.n	8008138 <HAL_UART_IRQHandler+0xf8>
 8008114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2202      	movs	r2, #2
 8008126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800812e:	f043 0204 	orr.w	r2, r3, #4
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d011      	beq.n	8008168 <HAL_UART_IRQHandler+0x128>
 8008144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2204      	movs	r2, #4
 8008156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800815e:	f043 0202 	orr.w	r2, r3, #2
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b00      	cmp	r3, #0
 8008172:	d017      	beq.n	80081a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d105      	bne.n	800818c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008180:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008184:	4b5c      	ldr	r3, [pc, #368]	@ (80082f8 <HAL_UART_IRQHandler+0x2b8>)
 8008186:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2208      	movs	r2, #8
 8008192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819a:	f043 0208 	orr.w	r2, r3, #8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d012      	beq.n	80081d6 <HAL_UART_IRQHandler+0x196>
 80081b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00c      	beq.n	80081d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081cc:	f043 0220 	orr.w	r2, r3, #32
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f000 82f9 	beq.w	80087d4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d013      	beq.n	8008216 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d105      	bne.n	8008206 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800821c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822a:	2b40      	cmp	r3, #64	@ 0x40
 800822c:	d005      	beq.n	800823a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800822e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008232:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008236:	2b00      	cmp	r3, #0
 8008238:	d054      	beq.n	80082e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f001 fa18 	bl	8009670 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800824a:	2b40      	cmp	r3, #64	@ 0x40
 800824c:	d146      	bne.n	80082dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3308      	adds	r3, #8
 8008254:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800826c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3308      	adds	r3, #8
 8008276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800827a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800827e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1d9      	bne.n	800824e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d017      	beq.n	80082d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082aa:	4a15      	ldr	r2, [pc, #84]	@ (8008300 <HAL_UART_IRQHandler+0x2c0>)
 80082ac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7f9 fda1 	bl	8001dfc <HAL_DMA_Abort_IT>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d019      	beq.n	80082f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80082ce:	4610      	mov	r0, r2
 80082d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d2:	e00f      	b.n	80082f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fa93 	bl	8008800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082da:	e00b      	b.n	80082f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fa8f 	bl	8008800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e2:	e007      	b.n	80082f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fa8b 	bl	8008800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80082f2:	e26f      	b.n	80087d4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f4:	bf00      	nop
    return;
 80082f6:	e26d      	b.n	80087d4 <HAL_UART_IRQHandler+0x794>
 80082f8:	10000001 	.word	0x10000001
 80082fc:	04000120 	.word	0x04000120
 8008300:	0800973d 	.word	0x0800973d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008308:	2b01      	cmp	r3, #1
 800830a:	f040 8203 	bne.w	8008714 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800830e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008312:	f003 0310 	and.w	r3, r3, #16
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 81fc 	beq.w	8008714 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800831c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008320:	f003 0310 	and.w	r3, r3, #16
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 81f5 	beq.w	8008714 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2210      	movs	r2, #16
 8008330:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800833c:	2b40      	cmp	r3, #64	@ 0x40
 800833e:	f040 816d 	bne.w	800861c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4aa4      	ldr	r2, [pc, #656]	@ (80085dc <HAL_UART_IRQHandler+0x59c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d068      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4aa1      	ldr	r2, [pc, #644]	@ (80085e0 <HAL_UART_IRQHandler+0x5a0>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d061      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a9f      	ldr	r2, [pc, #636]	@ (80085e4 <HAL_UART_IRQHandler+0x5a4>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d05a      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a9c      	ldr	r2, [pc, #624]	@ (80085e8 <HAL_UART_IRQHandler+0x5a8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d053      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a9a      	ldr	r2, [pc, #616]	@ (80085ec <HAL_UART_IRQHandler+0x5ac>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d04c      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a97      	ldr	r2, [pc, #604]	@ (80085f0 <HAL_UART_IRQHandler+0x5b0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d045      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a95      	ldr	r2, [pc, #596]	@ (80085f4 <HAL_UART_IRQHandler+0x5b4>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d03e      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a92      	ldr	r2, [pc, #584]	@ (80085f8 <HAL_UART_IRQHandler+0x5b8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d037      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a90      	ldr	r2, [pc, #576]	@ (80085fc <HAL_UART_IRQHandler+0x5bc>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d030      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a8d      	ldr	r2, [pc, #564]	@ (8008600 <HAL_UART_IRQHandler+0x5c0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d029      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a8b      	ldr	r2, [pc, #556]	@ (8008604 <HAL_UART_IRQHandler+0x5c4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d022      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a88      	ldr	r2, [pc, #544]	@ (8008608 <HAL_UART_IRQHandler+0x5c8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d01b      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a86      	ldr	r2, [pc, #536]	@ (800860c <HAL_UART_IRQHandler+0x5cc>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d014      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a83      	ldr	r2, [pc, #524]	@ (8008610 <HAL_UART_IRQHandler+0x5d0>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d00d      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a81      	ldr	r2, [pc, #516]	@ (8008614 <HAL_UART_IRQHandler+0x5d4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d006      	beq.n	8008422 <HAL_UART_IRQHandler+0x3e2>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a7e      	ldr	r2, [pc, #504]	@ (8008618 <HAL_UART_IRQHandler+0x5d8>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d106      	bne.n	8008430 <HAL_UART_IRQHandler+0x3f0>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	b29b      	uxth	r3, r3
 800842e:	e005      	b.n	800843c <HAL_UART_IRQHandler+0x3fc>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	b29b      	uxth	r3, r3
 800843c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 80ad 	beq.w	80085a4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008450:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008454:	429a      	cmp	r2, r3
 8008456:	f080 80a5 	bcs.w	80085a4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008460:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800846a:	69db      	ldr	r3, [r3, #28]
 800846c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008470:	f000 8087 	beq.w	8008582 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008488:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800848c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800849e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80084aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80084b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1da      	bne.n	8008474 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3308      	adds	r3, #8
 80084c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084d0:	f023 0301 	bic.w	r3, r3, #1
 80084d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3308      	adds	r3, #8
 80084de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80084e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e1      	bne.n	80084be <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3308      	adds	r3, #8
 8008500:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800850a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800850c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3308      	adds	r3, #8
 800851a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800851e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008520:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008524:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800852c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e3      	bne.n	80084fa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800854e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008550:	f023 0310 	bic.w	r3, r3, #16
 8008554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008562:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008564:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008568:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e4      	bne.n	8008540 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800857c:	4618      	mov	r0, r3
 800857e:	f7f9 f91f 	bl	80017c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008594:	b29b      	uxth	r3, r3
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	b29b      	uxth	r3, r3
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f939 	bl	8008814 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80085a2:	e119      	b.n	80087d8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085ae:	429a      	cmp	r2, r3
 80085b0:	f040 8112 	bne.w	80087d8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085c0:	f040 810a 	bne.w	80087d8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f91e 	bl	8008814 <HAL_UARTEx_RxEventCallback>
      return;
 80085d8:	e0fe      	b.n	80087d8 <HAL_UART_IRQHandler+0x798>
 80085da:	bf00      	nop
 80085dc:	40020010 	.word	0x40020010
 80085e0:	40020028 	.word	0x40020028
 80085e4:	40020040 	.word	0x40020040
 80085e8:	40020058 	.word	0x40020058
 80085ec:	40020070 	.word	0x40020070
 80085f0:	40020088 	.word	0x40020088
 80085f4:	400200a0 	.word	0x400200a0
 80085f8:	400200b8 	.word	0x400200b8
 80085fc:	40020410 	.word	0x40020410
 8008600:	40020428 	.word	0x40020428
 8008604:	40020440 	.word	0x40020440
 8008608:	40020458 	.word	0x40020458
 800860c:	40020470 	.word	0x40020470
 8008610:	40020488 	.word	0x40020488
 8008614:	400204a0 	.word	0x400204a0
 8008618:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008628:	b29b      	uxth	r3, r3
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008636:	b29b      	uxth	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 80cf 	beq.w	80087dc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800863e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80ca 	beq.w	80087dc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008658:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800865c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	461a      	mov	r2, r3
 8008666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800866a:	647b      	str	r3, [r7, #68]	@ 0x44
 800866c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e4      	bne.n	8008648 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	3308      	adds	r3, #8
 8008684:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	623b      	str	r3, [r7, #32]
   return(result);
 800868e:	6a3a      	ldr	r2, [r7, #32]
 8008690:	4b55      	ldr	r3, [pc, #340]	@ (80087e8 <HAL_UART_IRQHandler+0x7a8>)
 8008692:	4013      	ands	r3, r2
 8008694:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3308      	adds	r3, #8
 800869e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80086a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80086a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086aa:	e841 2300 	strex	r3, r2, [r1]
 80086ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1e3      	bne.n	800867e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2220      	movs	r2, #32
 80086ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0310 	bic.w	r3, r3, #16
 80086de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086ec:	61fb      	str	r3, [r7, #28]
 80086ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	69b9      	ldr	r1, [r7, #24]
 80086f2:	69fa      	ldr	r2, [r7, #28]
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	617b      	str	r3, [r7, #20]
   return(result);
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e4      	bne.n	80086ca <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008706:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f881 	bl	8008814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008712:	e063      	b.n	80087dc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00e      	beq.n	800873e <HAL_UART_IRQHandler+0x6fe>
 8008720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d008      	beq.n	800873e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008734:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 f83d 	bl	80097b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800873c:	e051      	b.n	80087e2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800873e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008746:	2b00      	cmp	r3, #0
 8008748:	d014      	beq.n	8008774 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800874a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800874e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008752:	2b00      	cmp	r3, #0
 8008754:	d105      	bne.n	8008762 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800875a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d008      	beq.n	8008774 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008766:	2b00      	cmp	r3, #0
 8008768:	d03a      	beq.n	80087e0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
    }
    return;
 8008772:	e035      	b.n	80087e0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <HAL_UART_IRQHandler+0x754>
 8008780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 ffe7 	bl	8009760 <UART_EndTransmit_IT>
    return;
 8008792:	e026      	b.n	80087e2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d009      	beq.n	80087b4 <HAL_UART_IRQHandler+0x774>
 80087a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f001 f816 	bl	80097de <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087b2:	e016      	b.n	80087e2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80087b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d010      	beq.n	80087e2 <HAL_UART_IRQHandler+0x7a2>
 80087c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	da0c      	bge.n	80087e2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fffe 	bl	80097ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087ce:	e008      	b.n	80087e2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80087d0:	bf00      	nop
 80087d2:	e006      	b.n	80087e2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80087d4:	bf00      	nop
 80087d6:	e004      	b.n	80087e2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80087d8:	bf00      	nop
 80087da:	e002      	b.n	80087e2 <HAL_UART_IRQHandler+0x7a2>
      return;
 80087dc:	bf00      	nop
 80087de:	e000      	b.n	80087e2 <HAL_UART_IRQHandler+0x7a2>
    return;
 80087e0:	bf00      	nop
  }
}
 80087e2:	37e8      	adds	r7, #232	@ 0xe8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	effffffe 	.word	0xeffffffe

080087ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800882c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008830:	b092      	sub	sp, #72	@ 0x48
 8008832:	af00      	add	r7, sp, #0
 8008834:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	431a      	orrs	r2, r3
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	431a      	orrs	r2, r3
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	4313      	orrs	r3, r2
 8008852:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	4bbe      	ldr	r3, [pc, #760]	@ (8008b54 <UART_SetConfig+0x328>)
 800885c:	4013      	ands	r3, r2
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	6812      	ldr	r2, [r2, #0]
 8008862:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008864:	430b      	orrs	r3, r1
 8008866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4ab3      	ldr	r2, [pc, #716]	@ (8008b58 <UART_SetConfig+0x32c>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d004      	beq.n	8008898 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008894:	4313      	orrs	r3, r2
 8008896:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	4baf      	ldr	r3, [pc, #700]	@ (8008b5c <UART_SetConfig+0x330>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	6812      	ldr	r2, [r2, #0]
 80088a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80088a8:	430b      	orrs	r3, r1
 80088aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b2:	f023 010f 	bic.w	r1, r3, #15
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4aa6      	ldr	r2, [pc, #664]	@ (8008b60 <UART_SetConfig+0x334>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d177      	bne.n	80089bc <UART_SetConfig+0x190>
 80088cc:	4ba5      	ldr	r3, [pc, #660]	@ (8008b64 <UART_SetConfig+0x338>)
 80088ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088d4:	2b28      	cmp	r3, #40	@ 0x28
 80088d6:	d86d      	bhi.n	80089b4 <UART_SetConfig+0x188>
 80088d8:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <UART_SetConfig+0xb4>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	08008985 	.word	0x08008985
 80088e4:	080089b5 	.word	0x080089b5
 80088e8:	080089b5 	.word	0x080089b5
 80088ec:	080089b5 	.word	0x080089b5
 80088f0:	080089b5 	.word	0x080089b5
 80088f4:	080089b5 	.word	0x080089b5
 80088f8:	080089b5 	.word	0x080089b5
 80088fc:	080089b5 	.word	0x080089b5
 8008900:	0800898d 	.word	0x0800898d
 8008904:	080089b5 	.word	0x080089b5
 8008908:	080089b5 	.word	0x080089b5
 800890c:	080089b5 	.word	0x080089b5
 8008910:	080089b5 	.word	0x080089b5
 8008914:	080089b5 	.word	0x080089b5
 8008918:	080089b5 	.word	0x080089b5
 800891c:	080089b5 	.word	0x080089b5
 8008920:	08008995 	.word	0x08008995
 8008924:	080089b5 	.word	0x080089b5
 8008928:	080089b5 	.word	0x080089b5
 800892c:	080089b5 	.word	0x080089b5
 8008930:	080089b5 	.word	0x080089b5
 8008934:	080089b5 	.word	0x080089b5
 8008938:	080089b5 	.word	0x080089b5
 800893c:	080089b5 	.word	0x080089b5
 8008940:	0800899d 	.word	0x0800899d
 8008944:	080089b5 	.word	0x080089b5
 8008948:	080089b5 	.word	0x080089b5
 800894c:	080089b5 	.word	0x080089b5
 8008950:	080089b5 	.word	0x080089b5
 8008954:	080089b5 	.word	0x080089b5
 8008958:	080089b5 	.word	0x080089b5
 800895c:	080089b5 	.word	0x080089b5
 8008960:	080089a5 	.word	0x080089a5
 8008964:	080089b5 	.word	0x080089b5
 8008968:	080089b5 	.word	0x080089b5
 800896c:	080089b5 	.word	0x080089b5
 8008970:	080089b5 	.word	0x080089b5
 8008974:	080089b5 	.word	0x080089b5
 8008978:	080089b5 	.word	0x080089b5
 800897c:	080089b5 	.word	0x080089b5
 8008980:	080089ad 	.word	0x080089ad
 8008984:	2301      	movs	r3, #1
 8008986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800898a:	e222      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 800898c:	2304      	movs	r3, #4
 800898e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008992:	e21e      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008994:	2308      	movs	r3, #8
 8008996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800899a:	e21a      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 800899c:	2310      	movs	r3, #16
 800899e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089a2:	e216      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 80089a4:	2320      	movs	r3, #32
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089aa:	e212      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 80089ac:	2340      	movs	r3, #64	@ 0x40
 80089ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b2:	e20e      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 80089b4:	2380      	movs	r3, #128	@ 0x80
 80089b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ba:	e20a      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a69      	ldr	r2, [pc, #420]	@ (8008b68 <UART_SetConfig+0x33c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d130      	bne.n	8008a28 <UART_SetConfig+0x1fc>
 80089c6:	4b67      	ldr	r3, [pc, #412]	@ (8008b64 <UART_SetConfig+0x338>)
 80089c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ca:	f003 0307 	and.w	r3, r3, #7
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	d826      	bhi.n	8008a20 <UART_SetConfig+0x1f4>
 80089d2:	a201      	add	r2, pc, #4	@ (adr r2, 80089d8 <UART_SetConfig+0x1ac>)
 80089d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d8:	080089f1 	.word	0x080089f1
 80089dc:	080089f9 	.word	0x080089f9
 80089e0:	08008a01 	.word	0x08008a01
 80089e4:	08008a09 	.word	0x08008a09
 80089e8:	08008a11 	.word	0x08008a11
 80089ec:	08008a19 	.word	0x08008a19
 80089f0:	2300      	movs	r3, #0
 80089f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f6:	e1ec      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 80089f8:	2304      	movs	r3, #4
 80089fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fe:	e1e8      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a00:	2308      	movs	r3, #8
 8008a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a06:	e1e4      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a08:	2310      	movs	r3, #16
 8008a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0e:	e1e0      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a10:	2320      	movs	r3, #32
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a16:	e1dc      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a18:	2340      	movs	r3, #64	@ 0x40
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1e:	e1d8      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a20:	2380      	movs	r3, #128	@ 0x80
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a26:	e1d4      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a4f      	ldr	r2, [pc, #316]	@ (8008b6c <UART_SetConfig+0x340>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d130      	bne.n	8008a94 <UART_SetConfig+0x268>
 8008a32:	4b4c      	ldr	r3, [pc, #304]	@ (8008b64 <UART_SetConfig+0x338>)
 8008a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	2b05      	cmp	r3, #5
 8008a3c:	d826      	bhi.n	8008a8c <UART_SetConfig+0x260>
 8008a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a44 <UART_SetConfig+0x218>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008a5d 	.word	0x08008a5d
 8008a48:	08008a65 	.word	0x08008a65
 8008a4c:	08008a6d 	.word	0x08008a6d
 8008a50:	08008a75 	.word	0x08008a75
 8008a54:	08008a7d 	.word	0x08008a7d
 8008a58:	08008a85 	.word	0x08008a85
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a62:	e1b6      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a64:	2304      	movs	r3, #4
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6a:	e1b2      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a6c:	2308      	movs	r3, #8
 8008a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a72:	e1ae      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a74:	2310      	movs	r3, #16
 8008a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7a:	e1aa      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a7c:	2320      	movs	r3, #32
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a82:	e1a6      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a84:	2340      	movs	r3, #64	@ 0x40
 8008a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8a:	e1a2      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a8c:	2380      	movs	r3, #128	@ 0x80
 8008a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a92:	e19e      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a35      	ldr	r2, [pc, #212]	@ (8008b70 <UART_SetConfig+0x344>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d130      	bne.n	8008b00 <UART_SetConfig+0x2d4>
 8008a9e:	4b31      	ldr	r3, [pc, #196]	@ (8008b64 <UART_SetConfig+0x338>)
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa2:	f003 0307 	and.w	r3, r3, #7
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	d826      	bhi.n	8008af8 <UART_SetConfig+0x2cc>
 8008aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab0 <UART_SetConfig+0x284>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008ac9 	.word	0x08008ac9
 8008ab4:	08008ad1 	.word	0x08008ad1
 8008ab8:	08008ad9 	.word	0x08008ad9
 8008abc:	08008ae1 	.word	0x08008ae1
 8008ac0:	08008ae9 	.word	0x08008ae9
 8008ac4:	08008af1 	.word	0x08008af1
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ace:	e180      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad6:	e17c      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008ad8:	2308      	movs	r3, #8
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ade:	e178      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008ae0:	2310      	movs	r3, #16
 8008ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae6:	e174      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008ae8:	2320      	movs	r3, #32
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aee:	e170      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008af0:	2340      	movs	r3, #64	@ 0x40
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af6:	e16c      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008af8:	2380      	movs	r3, #128	@ 0x80
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afe:	e168      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a1b      	ldr	r2, [pc, #108]	@ (8008b74 <UART_SetConfig+0x348>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d142      	bne.n	8008b90 <UART_SetConfig+0x364>
 8008b0a:	4b16      	ldr	r3, [pc, #88]	@ (8008b64 <UART_SetConfig+0x338>)
 8008b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b0e:	f003 0307 	and.w	r3, r3, #7
 8008b12:	2b05      	cmp	r3, #5
 8008b14:	d838      	bhi.n	8008b88 <UART_SetConfig+0x35c>
 8008b16:	a201      	add	r2, pc, #4	@ (adr r2, 8008b1c <UART_SetConfig+0x2f0>)
 8008b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1c:	08008b35 	.word	0x08008b35
 8008b20:	08008b3d 	.word	0x08008b3d
 8008b24:	08008b45 	.word	0x08008b45
 8008b28:	08008b4d 	.word	0x08008b4d
 8008b2c:	08008b79 	.word	0x08008b79
 8008b30:	08008b81 	.word	0x08008b81
 8008b34:	2300      	movs	r3, #0
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3a:	e14a      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b42:	e146      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008b44:	2308      	movs	r3, #8
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4a:	e142      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008b4c:	2310      	movs	r3, #16
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b52:	e13e      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008b54:	cfff69f3 	.word	0xcfff69f3
 8008b58:	58000c00 	.word	0x58000c00
 8008b5c:	11fff4ff 	.word	0x11fff4ff
 8008b60:	40011000 	.word	0x40011000
 8008b64:	58024400 	.word	0x58024400
 8008b68:	40004400 	.word	0x40004400
 8008b6c:	40004800 	.word	0x40004800
 8008b70:	40004c00 	.word	0x40004c00
 8008b74:	40005000 	.word	0x40005000
 8008b78:	2320      	movs	r3, #32
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7e:	e128      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008b80:	2340      	movs	r3, #64	@ 0x40
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b86:	e124      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008b88:	2380      	movs	r3, #128	@ 0x80
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8e:	e120      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4acb      	ldr	r2, [pc, #812]	@ (8008ec4 <UART_SetConfig+0x698>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d176      	bne.n	8008c88 <UART_SetConfig+0x45c>
 8008b9a:	4bcb      	ldr	r3, [pc, #812]	@ (8008ec8 <UART_SetConfig+0x69c>)
 8008b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ba2:	2b28      	cmp	r3, #40	@ 0x28
 8008ba4:	d86c      	bhi.n	8008c80 <UART_SetConfig+0x454>
 8008ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bac <UART_SetConfig+0x380>)
 8008ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bac:	08008c51 	.word	0x08008c51
 8008bb0:	08008c81 	.word	0x08008c81
 8008bb4:	08008c81 	.word	0x08008c81
 8008bb8:	08008c81 	.word	0x08008c81
 8008bbc:	08008c81 	.word	0x08008c81
 8008bc0:	08008c81 	.word	0x08008c81
 8008bc4:	08008c81 	.word	0x08008c81
 8008bc8:	08008c81 	.word	0x08008c81
 8008bcc:	08008c59 	.word	0x08008c59
 8008bd0:	08008c81 	.word	0x08008c81
 8008bd4:	08008c81 	.word	0x08008c81
 8008bd8:	08008c81 	.word	0x08008c81
 8008bdc:	08008c81 	.word	0x08008c81
 8008be0:	08008c81 	.word	0x08008c81
 8008be4:	08008c81 	.word	0x08008c81
 8008be8:	08008c81 	.word	0x08008c81
 8008bec:	08008c61 	.word	0x08008c61
 8008bf0:	08008c81 	.word	0x08008c81
 8008bf4:	08008c81 	.word	0x08008c81
 8008bf8:	08008c81 	.word	0x08008c81
 8008bfc:	08008c81 	.word	0x08008c81
 8008c00:	08008c81 	.word	0x08008c81
 8008c04:	08008c81 	.word	0x08008c81
 8008c08:	08008c81 	.word	0x08008c81
 8008c0c:	08008c69 	.word	0x08008c69
 8008c10:	08008c81 	.word	0x08008c81
 8008c14:	08008c81 	.word	0x08008c81
 8008c18:	08008c81 	.word	0x08008c81
 8008c1c:	08008c81 	.word	0x08008c81
 8008c20:	08008c81 	.word	0x08008c81
 8008c24:	08008c81 	.word	0x08008c81
 8008c28:	08008c81 	.word	0x08008c81
 8008c2c:	08008c71 	.word	0x08008c71
 8008c30:	08008c81 	.word	0x08008c81
 8008c34:	08008c81 	.word	0x08008c81
 8008c38:	08008c81 	.word	0x08008c81
 8008c3c:	08008c81 	.word	0x08008c81
 8008c40:	08008c81 	.word	0x08008c81
 8008c44:	08008c81 	.word	0x08008c81
 8008c48:	08008c81 	.word	0x08008c81
 8008c4c:	08008c79 	.word	0x08008c79
 8008c50:	2301      	movs	r3, #1
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c56:	e0bc      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008c58:	2304      	movs	r3, #4
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e0b8      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008c60:	2308      	movs	r3, #8
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e0b4      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008c68:	2310      	movs	r3, #16
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e0b0      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008c70:	2320      	movs	r3, #32
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e0ac      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008c78:	2340      	movs	r3, #64	@ 0x40
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e0a8      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008c80:	2380      	movs	r3, #128	@ 0x80
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e0a4      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a8f      	ldr	r2, [pc, #572]	@ (8008ecc <UART_SetConfig+0x6a0>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d130      	bne.n	8008cf4 <UART_SetConfig+0x4c8>
 8008c92:	4b8d      	ldr	r3, [pc, #564]	@ (8008ec8 <UART_SetConfig+0x69c>)
 8008c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c96:	f003 0307 	and.w	r3, r3, #7
 8008c9a:	2b05      	cmp	r3, #5
 8008c9c:	d826      	bhi.n	8008cec <UART_SetConfig+0x4c0>
 8008c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca4 <UART_SetConfig+0x478>)
 8008ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca4:	08008cbd 	.word	0x08008cbd
 8008ca8:	08008cc5 	.word	0x08008cc5
 8008cac:	08008ccd 	.word	0x08008ccd
 8008cb0:	08008cd5 	.word	0x08008cd5
 8008cb4:	08008cdd 	.word	0x08008cdd
 8008cb8:	08008ce5 	.word	0x08008ce5
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e086      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008cc4:	2304      	movs	r3, #4
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e082      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008ccc:	2308      	movs	r3, #8
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e07e      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008cd4:	2310      	movs	r3, #16
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e07a      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008cdc:	2320      	movs	r3, #32
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e076      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008ce4:	2340      	movs	r3, #64	@ 0x40
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e072      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008cec:	2380      	movs	r3, #128	@ 0x80
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e06e      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a75      	ldr	r2, [pc, #468]	@ (8008ed0 <UART_SetConfig+0x6a4>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d130      	bne.n	8008d60 <UART_SetConfig+0x534>
 8008cfe:	4b72      	ldr	r3, [pc, #456]	@ (8008ec8 <UART_SetConfig+0x69c>)
 8008d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d02:	f003 0307 	and.w	r3, r3, #7
 8008d06:	2b05      	cmp	r3, #5
 8008d08:	d826      	bhi.n	8008d58 <UART_SetConfig+0x52c>
 8008d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d10 <UART_SetConfig+0x4e4>)
 8008d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d10:	08008d29 	.word	0x08008d29
 8008d14:	08008d31 	.word	0x08008d31
 8008d18:	08008d39 	.word	0x08008d39
 8008d1c:	08008d41 	.word	0x08008d41
 8008d20:	08008d49 	.word	0x08008d49
 8008d24:	08008d51 	.word	0x08008d51
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2e:	e050      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008d30:	2304      	movs	r3, #4
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d36:	e04c      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008d38:	2308      	movs	r3, #8
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3e:	e048      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008d40:	2310      	movs	r3, #16
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d46:	e044      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008d48:	2320      	movs	r3, #32
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4e:	e040      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008d50:	2340      	movs	r3, #64	@ 0x40
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d56:	e03c      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008d58:	2380      	movs	r3, #128	@ 0x80
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5e:	e038      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a5b      	ldr	r2, [pc, #364]	@ (8008ed4 <UART_SetConfig+0x6a8>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d130      	bne.n	8008dcc <UART_SetConfig+0x5a0>
 8008d6a:	4b57      	ldr	r3, [pc, #348]	@ (8008ec8 <UART_SetConfig+0x69c>)
 8008d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d6e:	f003 0307 	and.w	r3, r3, #7
 8008d72:	2b05      	cmp	r3, #5
 8008d74:	d826      	bhi.n	8008dc4 <UART_SetConfig+0x598>
 8008d76:	a201      	add	r2, pc, #4	@ (adr r2, 8008d7c <UART_SetConfig+0x550>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008d95 	.word	0x08008d95
 8008d80:	08008d9d 	.word	0x08008d9d
 8008d84:	08008da5 	.word	0x08008da5
 8008d88:	08008dad 	.word	0x08008dad
 8008d8c:	08008db5 	.word	0x08008db5
 8008d90:	08008dbd 	.word	0x08008dbd
 8008d94:	2302      	movs	r3, #2
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9a:	e01a      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008d9c:	2304      	movs	r3, #4
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da2:	e016      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008da4:	2308      	movs	r3, #8
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008daa:	e012      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008dac:	2310      	movs	r3, #16
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db2:	e00e      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008db4:	2320      	movs	r3, #32
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dba:	e00a      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008dbc:	2340      	movs	r3, #64	@ 0x40
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc2:	e006      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008dc4:	2380      	movs	r3, #128	@ 0x80
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dca:	e002      	b.n	8008dd2 <UART_SetConfig+0x5a6>
 8008dcc:	2380      	movs	r3, #128	@ 0x80
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a3f      	ldr	r2, [pc, #252]	@ (8008ed4 <UART_SetConfig+0x6a8>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	f040 80f8 	bne.w	8008fce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008dde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	dc46      	bgt.n	8008e74 <UART_SetConfig+0x648>
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	f2c0 8082 	blt.w	8008ef0 <UART_SetConfig+0x6c4>
 8008dec:	3b02      	subs	r3, #2
 8008dee:	2b1e      	cmp	r3, #30
 8008df0:	d87e      	bhi.n	8008ef0 <UART_SetConfig+0x6c4>
 8008df2:	a201      	add	r2, pc, #4	@ (adr r2, 8008df8 <UART_SetConfig+0x5cc>)
 8008df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df8:	08008e7b 	.word	0x08008e7b
 8008dfc:	08008ef1 	.word	0x08008ef1
 8008e00:	08008e83 	.word	0x08008e83
 8008e04:	08008ef1 	.word	0x08008ef1
 8008e08:	08008ef1 	.word	0x08008ef1
 8008e0c:	08008ef1 	.word	0x08008ef1
 8008e10:	08008e93 	.word	0x08008e93
 8008e14:	08008ef1 	.word	0x08008ef1
 8008e18:	08008ef1 	.word	0x08008ef1
 8008e1c:	08008ef1 	.word	0x08008ef1
 8008e20:	08008ef1 	.word	0x08008ef1
 8008e24:	08008ef1 	.word	0x08008ef1
 8008e28:	08008ef1 	.word	0x08008ef1
 8008e2c:	08008ef1 	.word	0x08008ef1
 8008e30:	08008ea3 	.word	0x08008ea3
 8008e34:	08008ef1 	.word	0x08008ef1
 8008e38:	08008ef1 	.word	0x08008ef1
 8008e3c:	08008ef1 	.word	0x08008ef1
 8008e40:	08008ef1 	.word	0x08008ef1
 8008e44:	08008ef1 	.word	0x08008ef1
 8008e48:	08008ef1 	.word	0x08008ef1
 8008e4c:	08008ef1 	.word	0x08008ef1
 8008e50:	08008ef1 	.word	0x08008ef1
 8008e54:	08008ef1 	.word	0x08008ef1
 8008e58:	08008ef1 	.word	0x08008ef1
 8008e5c:	08008ef1 	.word	0x08008ef1
 8008e60:	08008ef1 	.word	0x08008ef1
 8008e64:	08008ef1 	.word	0x08008ef1
 8008e68:	08008ef1 	.word	0x08008ef1
 8008e6c:	08008ef1 	.word	0x08008ef1
 8008e70:	08008ee3 	.word	0x08008ee3
 8008e74:	2b40      	cmp	r3, #64	@ 0x40
 8008e76:	d037      	beq.n	8008ee8 <UART_SetConfig+0x6bc>
 8008e78:	e03a      	b.n	8008ef0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008e7a:	f7fc fd39 	bl	80058f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e80:	e03c      	b.n	8008efc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fc fd48 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e90:	e034      	b.n	8008efc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e92:	f107 0318 	add.w	r3, r7, #24
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fc fe94 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ea0:	e02c      	b.n	8008efc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ea2:	4b09      	ldr	r3, [pc, #36]	@ (8008ec8 <UART_SetConfig+0x69c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0320 	and.w	r3, r3, #32
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d016      	beq.n	8008edc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008eae:	4b06      	ldr	r3, [pc, #24]	@ (8008ec8 <UART_SetConfig+0x69c>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	08db      	lsrs	r3, r3, #3
 8008eb4:	f003 0303 	and.w	r3, r3, #3
 8008eb8:	4a07      	ldr	r2, [pc, #28]	@ (8008ed8 <UART_SetConfig+0x6ac>)
 8008eba:	fa22 f303 	lsr.w	r3, r2, r3
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ec0:	e01c      	b.n	8008efc <UART_SetConfig+0x6d0>
 8008ec2:	bf00      	nop
 8008ec4:	40011400 	.word	0x40011400
 8008ec8:	58024400 	.word	0x58024400
 8008ecc:	40007800 	.word	0x40007800
 8008ed0:	40007c00 	.word	0x40007c00
 8008ed4:	58000c00 	.word	0x58000c00
 8008ed8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008edc:	4b9d      	ldr	r3, [pc, #628]	@ (8009154 <UART_SetConfig+0x928>)
 8008ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee0:	e00c      	b.n	8008efc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ee2:	4b9d      	ldr	r3, [pc, #628]	@ (8009158 <UART_SetConfig+0x92c>)
 8008ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee6:	e009      	b.n	8008efc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ee8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eee:	e005      	b.n	8008efc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008efa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f000 81de 	beq.w	80092c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f08:	4a94      	ldr	r2, [pc, #592]	@ (800915c <UART_SetConfig+0x930>)
 8008f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f12:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f16:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	005b      	lsls	r3, r3, #1
 8008f20:	4413      	add	r3, r2
 8008f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d305      	bcc.n	8008f34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d903      	bls.n	8008f3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f3a:	e1c1      	b.n	80092c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f3e:	2200      	movs	r2, #0
 8008f40:	60bb      	str	r3, [r7, #8]
 8008f42:	60fa      	str	r2, [r7, #12]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f48:	4a84      	ldr	r2, [pc, #528]	@ (800915c <UART_SetConfig+0x930>)
 8008f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	2200      	movs	r2, #0
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	607a      	str	r2, [r7, #4]
 8008f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f5e:	f7f7 f9bb 	bl	80002d8 <__aeabi_uldivmod>
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	4610      	mov	r0, r2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	f04f 0200 	mov.w	r2, #0
 8008f6e:	f04f 0300 	mov.w	r3, #0
 8008f72:	020b      	lsls	r3, r1, #8
 8008f74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f78:	0202      	lsls	r2, r0, #8
 8008f7a:	6979      	ldr	r1, [r7, #20]
 8008f7c:	6849      	ldr	r1, [r1, #4]
 8008f7e:	0849      	lsrs	r1, r1, #1
 8008f80:	2000      	movs	r0, #0
 8008f82:	460c      	mov	r4, r1
 8008f84:	4605      	mov	r5, r0
 8008f86:	eb12 0804 	adds.w	r8, r2, r4
 8008f8a:	eb43 0905 	adc.w	r9, r3, r5
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	469a      	mov	sl, r3
 8008f96:	4693      	mov	fp, r2
 8008f98:	4652      	mov	r2, sl
 8008f9a:	465b      	mov	r3, fp
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	f7f7 f99a 	bl	80002d8 <__aeabi_uldivmod>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4613      	mov	r3, r2
 8008faa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fb2:	d308      	bcc.n	8008fc6 <UART_SetConfig+0x79a>
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fba:	d204      	bcs.n	8008fc6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fc2:	60da      	str	r2, [r3, #12]
 8008fc4:	e17c      	b.n	80092c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008fcc:	e178      	b.n	80092c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fd6:	f040 80c5 	bne.w	8009164 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008fda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008fde:	2b20      	cmp	r3, #32
 8008fe0:	dc48      	bgt.n	8009074 <UART_SetConfig+0x848>
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	db7b      	blt.n	80090de <UART_SetConfig+0x8b2>
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	d879      	bhi.n	80090de <UART_SetConfig+0x8b2>
 8008fea:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff0 <UART_SetConfig+0x7c4>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	0800907b 	.word	0x0800907b
 8008ff4:	08009083 	.word	0x08009083
 8008ff8:	080090df 	.word	0x080090df
 8008ffc:	080090df 	.word	0x080090df
 8009000:	0800908b 	.word	0x0800908b
 8009004:	080090df 	.word	0x080090df
 8009008:	080090df 	.word	0x080090df
 800900c:	080090df 	.word	0x080090df
 8009010:	0800909b 	.word	0x0800909b
 8009014:	080090df 	.word	0x080090df
 8009018:	080090df 	.word	0x080090df
 800901c:	080090df 	.word	0x080090df
 8009020:	080090df 	.word	0x080090df
 8009024:	080090df 	.word	0x080090df
 8009028:	080090df 	.word	0x080090df
 800902c:	080090df 	.word	0x080090df
 8009030:	080090ab 	.word	0x080090ab
 8009034:	080090df 	.word	0x080090df
 8009038:	080090df 	.word	0x080090df
 800903c:	080090df 	.word	0x080090df
 8009040:	080090df 	.word	0x080090df
 8009044:	080090df 	.word	0x080090df
 8009048:	080090df 	.word	0x080090df
 800904c:	080090df 	.word	0x080090df
 8009050:	080090df 	.word	0x080090df
 8009054:	080090df 	.word	0x080090df
 8009058:	080090df 	.word	0x080090df
 800905c:	080090df 	.word	0x080090df
 8009060:	080090df 	.word	0x080090df
 8009064:	080090df 	.word	0x080090df
 8009068:	080090df 	.word	0x080090df
 800906c:	080090df 	.word	0x080090df
 8009070:	080090d1 	.word	0x080090d1
 8009074:	2b40      	cmp	r3, #64	@ 0x40
 8009076:	d02e      	beq.n	80090d6 <UART_SetConfig+0x8aa>
 8009078:	e031      	b.n	80090de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800907a:	f7fa fc83 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 800907e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009080:	e033      	b.n	80090ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009082:	f7fa fc95 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 8009086:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009088:	e02f      	b.n	80090ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800908a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800908e:	4618      	mov	r0, r3
 8009090:	f7fc fc44 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009098:	e027      	b.n	80090ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800909a:	f107 0318 	add.w	r3, r7, #24
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fc fd90 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a8:	e01f      	b.n	80090ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090aa:	4b2d      	ldr	r3, [pc, #180]	@ (8009160 <UART_SetConfig+0x934>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0320 	and.w	r3, r3, #32
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d009      	beq.n	80090ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090b6:	4b2a      	ldr	r3, [pc, #168]	@ (8009160 <UART_SetConfig+0x934>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	08db      	lsrs	r3, r3, #3
 80090bc:	f003 0303 	and.w	r3, r3, #3
 80090c0:	4a24      	ldr	r2, [pc, #144]	@ (8009154 <UART_SetConfig+0x928>)
 80090c2:	fa22 f303 	lsr.w	r3, r2, r3
 80090c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090c8:	e00f      	b.n	80090ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80090ca:	4b22      	ldr	r3, [pc, #136]	@ (8009154 <UART_SetConfig+0x928>)
 80090cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ce:	e00c      	b.n	80090ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090d0:	4b21      	ldr	r3, [pc, #132]	@ (8009158 <UART_SetConfig+0x92c>)
 80090d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090d4:	e009      	b.n	80090ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090dc:	e005      	b.n	80090ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80090e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 80e7 	beq.w	80092c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f6:	4a19      	ldr	r2, [pc, #100]	@ (800915c <UART_SetConfig+0x930>)
 80090f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090fc:	461a      	mov	r2, r3
 80090fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009100:	fbb3 f3f2 	udiv	r3, r3, r2
 8009104:	005a      	lsls	r2, r3, #1
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	085b      	lsrs	r3, r3, #1
 800910c:	441a      	add	r2, r3
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	fbb2 f3f3 	udiv	r3, r2, r3
 8009116:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911a:	2b0f      	cmp	r3, #15
 800911c:	d916      	bls.n	800914c <UART_SetConfig+0x920>
 800911e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009124:	d212      	bcs.n	800914c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009128:	b29b      	uxth	r3, r3
 800912a:	f023 030f 	bic.w	r3, r3, #15
 800912e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009132:	085b      	lsrs	r3, r3, #1
 8009134:	b29b      	uxth	r3, r3
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	b29a      	uxth	r2, r3
 800913c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800913e:	4313      	orrs	r3, r2
 8009140:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009148:	60da      	str	r2, [r3, #12]
 800914a:	e0b9      	b.n	80092c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009152:	e0b5      	b.n	80092c0 <UART_SetConfig+0xa94>
 8009154:	03d09000 	.word	0x03d09000
 8009158:	003d0900 	.word	0x003d0900
 800915c:	0800aa24 	.word	0x0800aa24
 8009160:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009164:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009168:	2b20      	cmp	r3, #32
 800916a:	dc49      	bgt.n	8009200 <UART_SetConfig+0x9d4>
 800916c:	2b00      	cmp	r3, #0
 800916e:	db7c      	blt.n	800926a <UART_SetConfig+0xa3e>
 8009170:	2b20      	cmp	r3, #32
 8009172:	d87a      	bhi.n	800926a <UART_SetConfig+0xa3e>
 8009174:	a201      	add	r2, pc, #4	@ (adr r2, 800917c <UART_SetConfig+0x950>)
 8009176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917a:	bf00      	nop
 800917c:	08009207 	.word	0x08009207
 8009180:	0800920f 	.word	0x0800920f
 8009184:	0800926b 	.word	0x0800926b
 8009188:	0800926b 	.word	0x0800926b
 800918c:	08009217 	.word	0x08009217
 8009190:	0800926b 	.word	0x0800926b
 8009194:	0800926b 	.word	0x0800926b
 8009198:	0800926b 	.word	0x0800926b
 800919c:	08009227 	.word	0x08009227
 80091a0:	0800926b 	.word	0x0800926b
 80091a4:	0800926b 	.word	0x0800926b
 80091a8:	0800926b 	.word	0x0800926b
 80091ac:	0800926b 	.word	0x0800926b
 80091b0:	0800926b 	.word	0x0800926b
 80091b4:	0800926b 	.word	0x0800926b
 80091b8:	0800926b 	.word	0x0800926b
 80091bc:	08009237 	.word	0x08009237
 80091c0:	0800926b 	.word	0x0800926b
 80091c4:	0800926b 	.word	0x0800926b
 80091c8:	0800926b 	.word	0x0800926b
 80091cc:	0800926b 	.word	0x0800926b
 80091d0:	0800926b 	.word	0x0800926b
 80091d4:	0800926b 	.word	0x0800926b
 80091d8:	0800926b 	.word	0x0800926b
 80091dc:	0800926b 	.word	0x0800926b
 80091e0:	0800926b 	.word	0x0800926b
 80091e4:	0800926b 	.word	0x0800926b
 80091e8:	0800926b 	.word	0x0800926b
 80091ec:	0800926b 	.word	0x0800926b
 80091f0:	0800926b 	.word	0x0800926b
 80091f4:	0800926b 	.word	0x0800926b
 80091f8:	0800926b 	.word	0x0800926b
 80091fc:	0800925d 	.word	0x0800925d
 8009200:	2b40      	cmp	r3, #64	@ 0x40
 8009202:	d02e      	beq.n	8009262 <UART_SetConfig+0xa36>
 8009204:	e031      	b.n	800926a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009206:	f7fa fbbd 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 800920a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800920c:	e033      	b.n	8009276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800920e:	f7fa fbcf 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 8009212:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009214:	e02f      	b.n	8009276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800921a:	4618      	mov	r0, r3
 800921c:	f7fc fb7e 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009224:	e027      	b.n	8009276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009226:	f107 0318 	add.w	r3, r7, #24
 800922a:	4618      	mov	r0, r3
 800922c:	f7fc fcca 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009234:	e01f      	b.n	8009276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009236:	4b2d      	ldr	r3, [pc, #180]	@ (80092ec <UART_SetConfig+0xac0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d009      	beq.n	8009256 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009242:	4b2a      	ldr	r3, [pc, #168]	@ (80092ec <UART_SetConfig+0xac0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	08db      	lsrs	r3, r3, #3
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	4a28      	ldr	r2, [pc, #160]	@ (80092f0 <UART_SetConfig+0xac4>)
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009254:	e00f      	b.n	8009276 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009256:	4b26      	ldr	r3, [pc, #152]	@ (80092f0 <UART_SetConfig+0xac4>)
 8009258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800925a:	e00c      	b.n	8009276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800925c:	4b25      	ldr	r3, [pc, #148]	@ (80092f4 <UART_SetConfig+0xac8>)
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009260:	e009      	b.n	8009276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009268:	e005      	b.n	8009276 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009274:	bf00      	nop
    }

    if (pclk != 0U)
 8009276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d021      	beq.n	80092c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009280:	4a1d      	ldr	r2, [pc, #116]	@ (80092f8 <UART_SetConfig+0xacc>)
 8009282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009286:	461a      	mov	r2, r3
 8009288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800928a:	fbb3 f2f2 	udiv	r2, r3, r2
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	085b      	lsrs	r3, r3, #1
 8009294:	441a      	add	r2, r3
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	fbb2 f3f3 	udiv	r3, r2, r3
 800929e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a2:	2b0f      	cmp	r3, #15
 80092a4:	d909      	bls.n	80092ba <UART_SetConfig+0xa8e>
 80092a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092ac:	d205      	bcs.n	80092ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60da      	str	r2, [r3, #12]
 80092b8:	e002      	b.n	80092c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2200      	movs	r2, #0
 80092d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2200      	movs	r2, #0
 80092da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80092dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3748      	adds	r7, #72	@ 0x48
 80092e4:	46bd      	mov	sp, r7
 80092e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ea:	bf00      	nop
 80092ec:	58024400 	.word	0x58024400
 80092f0:	03d09000 	.word	0x03d09000
 80092f4:	003d0900 	.word	0x003d0900
 80092f8:	0800aa24 	.word	0x0800aa24

080092fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009308:	f003 0308 	and.w	r3, r3, #8
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00a      	beq.n	8009326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00a      	beq.n	800936a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009390:	f003 0310 	and.w	r3, r3, #16
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00a      	beq.n	80093ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01a      	beq.n	8009412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093fa:	d10a      	bne.n	8009412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00a      	beq.n	8009434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	605a      	str	r2, [r3, #4]
  }
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b098      	sub	sp, #96	@ 0x60
 8009444:	af02      	add	r7, sp, #8
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009450:	f7f7 fff2 	bl	8001438 <HAL_GetTick>
 8009454:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0308 	and.w	r3, r3, #8
 8009460:	2b08      	cmp	r3, #8
 8009462:	d12f      	bne.n	80094c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009464:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800946c:	2200      	movs	r2, #0
 800946e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f88e 	bl	8009594 <UART_WaitOnFlagUntilTimeout>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d022      	beq.n	80094c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800948c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800948e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009492:	653b      	str	r3, [r7, #80]	@ 0x50
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800949c:	647b      	str	r3, [r7, #68]	@ 0x44
 800949e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e6      	bne.n	800947e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e063      	b.n	800958c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	d149      	bne.n	8009566 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094da:	2200      	movs	r2, #0
 80094dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f857 	bl	8009594 <UART_WaitOnFlagUntilTimeout>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d03c      	beq.n	8009566 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	623b      	str	r3, [r7, #32]
   return(result);
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009500:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800950a:	633b      	str	r3, [r7, #48]	@ 0x30
 800950c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e6      	bne.n	80094ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3308      	adds	r3, #8
 8009524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	60fb      	str	r3, [r7, #12]
   return(result);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f023 0301 	bic.w	r3, r3, #1
 8009534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3308      	adds	r3, #8
 800953c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800953e:	61fa      	str	r2, [r7, #28]
 8009540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	69b9      	ldr	r1, [r7, #24]
 8009544:	69fa      	ldr	r2, [r7, #28]
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	617b      	str	r3, [r7, #20]
   return(result);
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e5      	bne.n	800951e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2220      	movs	r2, #32
 8009556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e012      	b.n	800958c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2220      	movs	r2, #32
 800956a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3758      	adds	r7, #88	@ 0x58
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	603b      	str	r3, [r7, #0]
 80095a0:	4613      	mov	r3, r2
 80095a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095a4:	e04f      	b.n	8009646 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095ac:	d04b      	beq.n	8009646 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095ae:	f7f7 ff43 	bl	8001438 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	69ba      	ldr	r2, [r7, #24]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d302      	bcc.n	80095c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e04e      	b.n	8009666 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d037      	beq.n	8009646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	2b80      	cmp	r3, #128	@ 0x80
 80095da:	d034      	beq.n	8009646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	2b40      	cmp	r3, #64	@ 0x40
 80095e0:	d031      	beq.n	8009646 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	f003 0308 	and.w	r3, r3, #8
 80095ec:	2b08      	cmp	r3, #8
 80095ee:	d110      	bne.n	8009612 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2208      	movs	r2, #8
 80095f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 f839 	bl	8009670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2208      	movs	r2, #8
 8009602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e029      	b.n	8009666 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	69db      	ldr	r3, [r3, #28]
 8009618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800961c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009620:	d111      	bne.n	8009646 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800962a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 f81f 	bl	8009670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2220      	movs	r2, #32
 8009636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e00f      	b.n	8009666 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	69da      	ldr	r2, [r3, #28]
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	4013      	ands	r3, r2
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	429a      	cmp	r2, r3
 8009654:	bf0c      	ite	eq
 8009656:	2301      	moveq	r3, #1
 8009658:	2300      	movne	r3, #0
 800965a:	b2db      	uxtb	r3, r3
 800965c:	461a      	mov	r2, r3
 800965e:	79fb      	ldrb	r3, [r7, #7]
 8009660:	429a      	cmp	r2, r3
 8009662:	d0a0      	beq.n	80095a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
	...

08009670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009670:	b480      	push	{r7}
 8009672:	b095      	sub	sp, #84	@ 0x54
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800968c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009696:	643b      	str	r3, [r7, #64]	@ 0x40
 8009698:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800969c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e6      	bne.n	8009678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3308      	adds	r3, #8
 80096b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80096ba:	69fa      	ldr	r2, [r7, #28]
 80096bc:	4b1e      	ldr	r3, [pc, #120]	@ (8009738 <UART_EndRxTransfer+0xc8>)
 80096be:	4013      	ands	r3, r2
 80096c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3308      	adds	r3, #8
 80096c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e5      	bne.n	80096aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d118      	bne.n	8009718 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	e853 3f00 	ldrex	r3, [r3]
 80096f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f023 0310 	bic.w	r3, r3, #16
 80096fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	461a      	mov	r2, r3
 8009702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009704:	61bb      	str	r3, [r7, #24]
 8009706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	6979      	ldr	r1, [r7, #20]
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	613b      	str	r3, [r7, #16]
   return(result);
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e6      	bne.n	80096e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2220      	movs	r2, #32
 800971c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800972c:	bf00      	nop
 800972e:	3754      	adds	r7, #84	@ 0x54
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	effffffe 	.word	0xeffffffe

0800973c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7ff f854 	bl	8008800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009758:	bf00      	nop
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	e853 3f00 	ldrex	r3, [r3]
 8009774:	60bb      	str	r3, [r7, #8]
   return(result);
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800977c:	61fb      	str	r3, [r7, #28]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978a:	6979      	ldr	r1, [r7, #20]
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	e841 2300 	strex	r3, r2, [r1]
 8009792:	613b      	str	r3, [r7, #16]
   return(result);
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1e6      	bne.n	8009768 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2220      	movs	r2, #32
 800979e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff f81f 	bl	80087ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097ae:	bf00      	nop
 80097b0:	3720      	adds	r7, #32
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b083      	sub	sp, #12
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097be:	bf00      	nop
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b083      	sub	sp, #12
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80097d2:	bf00      	nop
 80097d4:	370c      	adds	r7, #12
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80097de:	b480      	push	{r7}
 80097e0:	b083      	sub	sp, #12
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b085      	sub	sp, #20
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009800:	2b01      	cmp	r3, #1
 8009802:	d101      	bne.n	8009808 <HAL_UARTEx_DisableFifoMode+0x16>
 8009804:	2302      	movs	r3, #2
 8009806:	e027      	b.n	8009858 <HAL_UARTEx_DisableFifoMode+0x66>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2224      	movs	r2, #36	@ 0x24
 8009814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f022 0201 	bic.w	r2, r2, #1
 800982e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009836:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2220      	movs	r2, #32
 800984a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009874:	2b01      	cmp	r3, #1
 8009876:	d101      	bne.n	800987c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009878:	2302      	movs	r3, #2
 800987a:	e02d      	b.n	80098d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2224      	movs	r2, #36	@ 0x24
 8009888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 0201 	bic.w	r2, r2, #1
 80098a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	430a      	orrs	r2, r1
 80098b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f84f 	bl	800995c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2220      	movs	r2, #32
 80098ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d101      	bne.n	80098f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098f4:	2302      	movs	r3, #2
 80098f6:	e02d      	b.n	8009954 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2224      	movs	r2, #36	@ 0x24
 8009904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f022 0201 	bic.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f811 	bl	800995c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2220      	movs	r2, #32
 8009946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009968:	2b00      	cmp	r3, #0
 800996a:	d108      	bne.n	800997e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800997c:	e031      	b.n	80099e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800997e:	2310      	movs	r3, #16
 8009980:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009982:	2310      	movs	r3, #16
 8009984:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	0e5b      	lsrs	r3, r3, #25
 800998e:	b2db      	uxtb	r3, r3
 8009990:	f003 0307 	and.w	r3, r3, #7
 8009994:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	0f5b      	lsrs	r3, r3, #29
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	f003 0307 	and.w	r3, r3, #7
 80099a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	7b3a      	ldrb	r2, [r7, #12]
 80099aa:	4911      	ldr	r1, [pc, #68]	@ (80099f0 <UARTEx_SetNbDataToProcess+0x94>)
 80099ac:	5c8a      	ldrb	r2, [r1, r2]
 80099ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099b2:	7b3a      	ldrb	r2, [r7, #12]
 80099b4:	490f      	ldr	r1, [pc, #60]	@ (80099f4 <UARTEx_SetNbDataToProcess+0x98>)
 80099b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80099bc:	b29a      	uxth	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
 80099c6:	7b7a      	ldrb	r2, [r7, #13]
 80099c8:	4909      	ldr	r1, [pc, #36]	@ (80099f0 <UARTEx_SetNbDataToProcess+0x94>)
 80099ca:	5c8a      	ldrb	r2, [r1, r2]
 80099cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80099d0:	7b7a      	ldrb	r2, [r7, #13]
 80099d2:	4908      	ldr	r1, [pc, #32]	@ (80099f4 <UARTEx_SetNbDataToProcess+0x98>)
 80099d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80099da:	b29a      	uxth	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80099e2:	bf00      	nop
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	0800aa3c 	.word	0x0800aa3c
 80099f4:	0800aa44 	.word	0x0800aa44

080099f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80099f8:	b084      	sub	sp, #16
 80099fa:	b480      	push	{r7}
 80099fc:	b085      	sub	sp, #20
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	f107 001c 	add.w	r0, r7, #28
 8009a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009a0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009a10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009a12:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8009a16:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8009a1a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8009a1e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	4b07      	ldr	r3, [pc, #28]	@ (8009a48 <SDMMC_Init+0x50>)
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	b004      	add	sp, #16
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	ffc02c00 	.word	0xffc02c00

08009a4c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b083      	sub	sp, #12
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f043 0203 	orr.w	r2, r3, #3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0303 	and.w	r3, r3, #3
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009ac2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009ac8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009ace:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	4b06      	ldr	r3, [pc, #24]	@ (8009af4 <SDMMC_SendCommand+0x50>)
 8009adc:	4013      	ands	r3, r2
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	fffee0c0 	.word	0xfffee0c0

08009af8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	b2db      	uxtb	r3, r3
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b085      	sub	sp, #20
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3314      	adds	r3, #20
 8009b20:	461a      	mov	r2, r3
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	4413      	add	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	685a      	ldr	r2, [r3, #4]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009b5e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009b64:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009b6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0

}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b088      	sub	sp, #32
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009b9e:	2310      	movs	r3, #16
 8009ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bb2:	f107 0308 	add.w	r3, r7, #8
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff ff73 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bc2:	2110      	movs	r1, #16
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fa21 	bl	800a00c <SDMMC_GetCmdResp1>
 8009bca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bcc:	69fb      	ldr	r3, [r7, #28]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3720      	adds	r7, #32
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b088      	sub	sp, #32
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009be4:	2311      	movs	r3, #17
 8009be6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009be8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bf8:	f107 0308 	add.w	r3, r7, #8
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff ff50 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c08:	2111      	movs	r1, #17
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f9fe 	bl	800a00c <SDMMC_GetCmdResp1>
 8009c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c12:	69fb      	ldr	r3, [r7, #28]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3720      	adds	r7, #32
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009c2a:	2312      	movs	r3, #18
 8009c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c3e:	f107 0308 	add.w	r3, r7, #8
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff ff2d 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c4e:	2112      	movs	r1, #18
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f9db 	bl	800a00c <SDMMC_GetCmdResp1>
 8009c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c58:	69fb      	ldr	r3, [r7, #28]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3720      	adds	r7, #32
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b088      	sub	sp, #32
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009c70:	2318      	movs	r3, #24
 8009c72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c84:	f107 0308 	add.w	r3, r7, #8
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7ff ff0a 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c94:	2118      	movs	r1, #24
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f9b8 	bl	800a00c <SDMMC_GetCmdResp1>
 8009c9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3720      	adds	r7, #32
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009cb6:	2319      	movs	r3, #25
 8009cb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009cc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cca:	f107 0308 	add.w	r3, r7, #8
 8009cce:	4619      	mov	r1, r3
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7ff fee7 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cda:	2119      	movs	r1, #25
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f995 	bl	800a00c <SDMMC_GetCmdResp1>
 8009ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ce4:	69fb      	ldr	r3, [r7, #28]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3720      	adds	r7, #32
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b088      	sub	sp, #32
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009cfc:	2307      	movs	r3, #7
 8009cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d06:	2300      	movs	r3, #0
 8009d08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d10:	f107 0308 	add.w	r3, r7, #8
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff fec4 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d20:	2107      	movs	r1, #7
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f972 	bl	800a00c <SDMMC_GetCmdResp1>
 8009d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3720      	adds	r7, #32
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009d44:	2300      	movs	r3, #0
 8009d46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d52:	f107 0308 	add.w	r3, r7, #8
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff fea3 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fb96 	bl	800a490 <SDMMC_GetCmdError>
 8009d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d66:	69fb      	ldr	r3, [r7, #28]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3720      	adds	r7, #32
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009d78:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d7e:	2308      	movs	r3, #8
 8009d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff fe83 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fb28 	bl	800a3f4 <SDMMC_GetCmdResp7>
 8009da4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009da6:	69fb      	ldr	r3, [r7, #28]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3720      	adds	r7, #32
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b088      	sub	sp, #32
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009dbe:	2337      	movs	r3, #55	@ 0x37
 8009dc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009dd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff fe63 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009de2:	2137      	movs	r1, #55	@ 0x37
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f911 	bl	800a00c <SDMMC_GetCmdResp1>
 8009dea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dec:	69fb      	ldr	r3, [r7, #28]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3720      	adds	r7, #32
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b088      	sub	sp, #32
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009e04:	2329      	movs	r3, #41	@ 0x29
 8009e06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e18:	f107 0308 	add.w	r3, r7, #8
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff fe40 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fa2d 	bl	800a284 <SDMMC_GetCmdResp3>
 8009e2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e2c:	69fb      	ldr	r3, [r7, #28]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3720      	adds	r7, #32
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b088      	sub	sp, #32
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009e44:	2306      	movs	r3, #6
 8009e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e58:	f107 0308 	add.w	r3, r7, #8
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f7ff fe20 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e68:	2106      	movs	r1, #6
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f8ce 	bl	800a00c <SDMMC_GetCmdResp1>
 8009e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e72:	69fb      	ldr	r3, [r7, #28]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3720      	adds	r7, #32
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009e88:	2333      	movs	r3, #51	@ 0x33
 8009e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e92:	2300      	movs	r3, #0
 8009e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e9c:	f107 0308 	add.w	r3, r7, #8
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7ff fdfe 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009eac:	2133      	movs	r1, #51	@ 0x33
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f8ac 	bl	800a00c <SDMMC_GetCmdResp1>
 8009eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eb6:	69fb      	ldr	r3, [r7, #28]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3720      	adds	r7, #32
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ecc:	2302      	movs	r3, #2
 8009ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ed0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009ed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ede:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ee0:	f107 0308 	add.w	r3, r7, #8
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7ff fddc 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f97f 	bl	800a1f0 <SDMMC_GetCmdResp2>
 8009ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3720      	adds	r7, #32
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b088      	sub	sp, #32
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009f0c:	2309      	movs	r3, #9
 8009f0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009f10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009f14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f16:	2300      	movs	r3, #0
 8009f18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f20:	f107 0308 	add.w	r3, r7, #8
 8009f24:	4619      	mov	r1, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7ff fdbc 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f95f 	bl	800a1f0 <SDMMC_GetCmdResp2>
 8009f32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f34:	69fb      	ldr	r3, [r7, #28]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3720      	adds	r7, #32
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b088      	sub	sp, #32
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f56:	2300      	movs	r3, #0
 8009f58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f60:	f107 0308 	add.w	r3, r7, #8
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff fd9c 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	2103      	movs	r1, #3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f9c7 	bl	800a304 <SDMMC_GetCmdResp6>
 8009f76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f78:	69fb      	ldr	r3, [r7, #28]
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3720      	adds	r7, #32
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b088      	sub	sp, #32
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f90:	230d      	movs	r3, #13
 8009f92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fa4:	f107 0308 	add.w	r3, r7, #8
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7ff fd7a 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fb4:	210d      	movs	r1, #13
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f828 	bl	800a00c <SDMMC_GetCmdResp1>
 8009fbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fbe:	69fb      	ldr	r3, [r7, #28]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3720      	adds	r7, #32
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009fd4:	230d      	movs	r3, #13
 8009fd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fe8:	f107 0308 	add.w	r3, r7, #8
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7ff fd58 	bl	8009aa4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ff8:	210d      	movs	r1, #13
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f806 	bl	800a00c <SDMMC_GetCmdResp1>
 800a000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a002:	69fb      	ldr	r3, [r7, #28]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3720      	adds	r7, #32
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b088      	sub	sp, #32
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	460b      	mov	r3, r1
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a01a:	4b70      	ldr	r3, [pc, #448]	@ (800a1dc <SDMMC_GetCmdResp1+0x1d0>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a70      	ldr	r2, [pc, #448]	@ (800a1e0 <SDMMC_GetCmdResp1+0x1d4>)
 800a020:	fba2 2303 	umull	r2, r3, r2, r3
 800a024:	0a5a      	lsrs	r2, r3, #9
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	fb02 f303 	mul.w	r3, r2, r3
 800a02c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	1e5a      	subs	r2, r3, #1
 800a032:	61fa      	str	r2, [r7, #28]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a038:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a03c:	e0c9      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a042:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	4b67      	ldr	r3, [pc, #412]	@ (800a1e4 <SDMMC_GetCmdResp1+0x1d8>)
 800a048:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0ef      	beq.n	800a02e <SDMMC_GetCmdResp1+0x22>
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1ea      	bne.n	800a02e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2204      	movs	r2, #4
 800a068:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a06a:	2304      	movs	r3, #4
 800a06c:	e0b1      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a080:	2301      	movs	r3, #1
 800a082:	e0a6      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4a58      	ldr	r2, [pc, #352]	@ (800a1e8 <SDMMC_GetCmdResp1+0x1dc>)
 800a088:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f7ff fd34 	bl	8009af8 <SDMMC_GetCommandResponse>
 800a090:	4603      	mov	r3, r0
 800a092:	461a      	mov	r2, r3
 800a094:	7afb      	ldrb	r3, [r7, #11]
 800a096:	4293      	cmp	r3, r2
 800a098:	d001      	beq.n	800a09e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e099      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a09e:	2100      	movs	r1, #0
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f7ff fd36 	bl	8009b12 <SDMMC_GetResponse>
 800a0a6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	4b50      	ldr	r3, [pc, #320]	@ (800a1ec <SDMMC_GetCmdResp1+0x1e0>)
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e08d      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	da02      	bge.n	800a0c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a0bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0c0:	e087      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0cc:	2340      	movs	r3, #64	@ 0x40
 800a0ce:	e080      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d001      	beq.n	800a0de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0da:	2380      	movs	r3, #128	@ 0x80
 800a0dc:	e079      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a0e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0ec:	e071      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a0f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0fc:	e069      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a108:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a10c:	e061      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a118:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a11c:	e059      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a12c:	e051      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a138:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a13c:	e049      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a148:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a14c:	e041      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a15c:	e039      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a168:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a16c:	e031      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a178:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a17c:	e029      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a188:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a18c:	e021      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a198:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a19c:	e019      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a1a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a1ac:	e011      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a1b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a1bc:	e009      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f003 0308 	and.w	r3, r3, #8
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a1c8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a1cc:	e001      	b.n	800a1d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a1ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3720      	adds	r7, #32
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	24000000 	.word	0x24000000
 800a1e0:	10624dd3 	.word	0x10624dd3
 800a1e4:	00200045 	.word	0x00200045
 800a1e8:	002000c5 	.word	0x002000c5
 800a1ec:	fdffe008 	.word	0xfdffe008

0800a1f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1f8:	4b1f      	ldr	r3, [pc, #124]	@ (800a278 <SDMMC_GetCmdResp2+0x88>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a1f      	ldr	r2, [pc, #124]	@ (800a27c <SDMMC_GetCmdResp2+0x8c>)
 800a1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a202:	0a5b      	lsrs	r3, r3, #9
 800a204:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a208:	fb02 f303 	mul.w	r3, r2, r3
 800a20c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	1e5a      	subs	r2, r3, #1
 800a212:	60fa      	str	r2, [r7, #12]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a218:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a21c:	e026      	b.n	800a26c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a222:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0ef      	beq.n	800a20e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1ea      	bne.n	800a20e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b00      	cmp	r3, #0
 800a242:	d004      	beq.n	800a24e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2204      	movs	r2, #4
 800a248:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a24a:	2304      	movs	r3, #4
 800a24c:	e00e      	b.n	800a26c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d004      	beq.n	800a264 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a260:	2301      	movs	r3, #1
 800a262:	e003      	b.n	800a26c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a06      	ldr	r2, [pc, #24]	@ (800a280 <SDMMC_GetCmdResp2+0x90>)
 800a268:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	24000000 	.word	0x24000000
 800a27c:	10624dd3 	.word	0x10624dd3
 800a280:	002000c5 	.word	0x002000c5

0800a284 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a28c:	4b1a      	ldr	r3, [pc, #104]	@ (800a2f8 <SDMMC_GetCmdResp3+0x74>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a1a      	ldr	r2, [pc, #104]	@ (800a2fc <SDMMC_GetCmdResp3+0x78>)
 800a292:	fba2 2303 	umull	r2, r3, r2, r3
 800a296:	0a5b      	lsrs	r3, r3, #9
 800a298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a29c:	fb02 f303 	mul.w	r3, r2, r3
 800a2a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	1e5a      	subs	r2, r3, #1
 800a2a6:	60fa      	str	r2, [r7, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a2b0:	e01b      	b.n	800a2ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d0ef      	beq.n	800a2a2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1ea      	bne.n	800a2a2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d004      	beq.n	800a2e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2204      	movs	r2, #4
 800a2dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2de:	2304      	movs	r3, #4
 800a2e0:	e003      	b.n	800a2ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a06      	ldr	r2, [pc, #24]	@ (800a300 <SDMMC_GetCmdResp3+0x7c>)
 800a2e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	24000000 	.word	0x24000000
 800a2fc:	10624dd3 	.word	0x10624dd3
 800a300:	002000c5 	.word	0x002000c5

0800a304 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b088      	sub	sp, #32
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	460b      	mov	r3, r1
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a312:	4b35      	ldr	r3, [pc, #212]	@ (800a3e8 <SDMMC_GetCmdResp6+0xe4>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a35      	ldr	r2, [pc, #212]	@ (800a3ec <SDMMC_GetCmdResp6+0xe8>)
 800a318:	fba2 2303 	umull	r2, r3, r2, r3
 800a31c:	0a5b      	lsrs	r3, r3, #9
 800a31e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a322:	fb02 f303 	mul.w	r3, r2, r3
 800a326:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	1e5a      	subs	r2, r3, #1
 800a32c:	61fa      	str	r2, [r7, #28]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a332:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a336:	e052      	b.n	800a3de <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a33c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a344:	2b00      	cmp	r3, #0
 800a346:	d0ef      	beq.n	800a328 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1ea      	bne.n	800a328 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a356:	f003 0304 	and.w	r3, r3, #4
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d004      	beq.n	800a368 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2204      	movs	r2, #4
 800a362:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a364:	2304      	movs	r3, #4
 800a366:	e03a      	b.n	800a3de <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	2b00      	cmp	r3, #0
 800a372:	d004      	beq.n	800a37e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2201      	movs	r2, #1
 800a378:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e02f      	b.n	800a3de <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f7ff fbba 	bl	8009af8 <SDMMC_GetCommandResponse>
 800a384:	4603      	mov	r3, r0
 800a386:	461a      	mov	r2, r3
 800a388:	7afb      	ldrb	r3, [r7, #11]
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d001      	beq.n	800a392 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a38e:	2301      	movs	r3, #1
 800a390:	e025      	b.n	800a3de <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	4a16      	ldr	r2, [pc, #88]	@ (800a3f0 <SDMMC_GetCmdResp6+0xec>)
 800a396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a398:	2100      	movs	r1, #0
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f7ff fbb9 	bl	8009b12 <SDMMC_GetResponse>
 800a3a0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d106      	bne.n	800a3ba <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	0c1b      	lsrs	r3, r3, #16
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e011      	b.n	800a3de <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a3c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a3c8:	e009      	b.n	800a3de <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3d8:	e001      	b.n	800a3de <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3720      	adds	r7, #32
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	24000000 	.word	0x24000000
 800a3ec:	10624dd3 	.word	0x10624dd3
 800a3f0:	002000c5 	.word	0x002000c5

0800a3f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3fc:	4b22      	ldr	r3, [pc, #136]	@ (800a488 <SDMMC_GetCmdResp7+0x94>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a22      	ldr	r2, [pc, #136]	@ (800a48c <SDMMC_GetCmdResp7+0x98>)
 800a402:	fba2 2303 	umull	r2, r3, r2, r3
 800a406:	0a5b      	lsrs	r3, r3, #9
 800a408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a40c:	fb02 f303 	mul.w	r3, r2, r3
 800a410:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	1e5a      	subs	r2, r3, #1
 800a416:	60fa      	str	r2, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d102      	bne.n	800a422 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a41c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a420:	e02c      	b.n	800a47c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a426:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0ef      	beq.n	800a412 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1ea      	bne.n	800a412 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a440:	f003 0304 	and.w	r3, r3, #4
 800a444:	2b00      	cmp	r3, #0
 800a446:	d004      	beq.n	800a452 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2204      	movs	r2, #4
 800a44c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a44e:	2304      	movs	r3, #4
 800a450:	e014      	b.n	800a47c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a456:	f003 0301 	and.w	r3, r3, #1
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d004      	beq.n	800a468 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a464:	2301      	movs	r3, #1
 800a466:	e009      	b.n	800a47c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a46c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a470:	2b00      	cmp	r3, #0
 800a472:	d002      	beq.n	800a47a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2240      	movs	r2, #64	@ 0x40
 800a478:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a47a:	2300      	movs	r3, #0

}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	24000000 	.word	0x24000000
 800a48c:	10624dd3 	.word	0x10624dd3

0800a490 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a498:	4b11      	ldr	r3, [pc, #68]	@ (800a4e0 <SDMMC_GetCmdError+0x50>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a11      	ldr	r2, [pc, #68]	@ (800a4e4 <SDMMC_GetCmdError+0x54>)
 800a49e:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a2:	0a5b      	lsrs	r3, r3, #9
 800a4a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4a8:	fb02 f303 	mul.w	r3, r2, r3
 800a4ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	1e5a      	subs	r2, r3, #1
 800a4b2:	60fa      	str	r2, [r7, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d102      	bne.n	800a4be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a4bc:	e009      	b.n	800a4d2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0f1      	beq.n	800a4ae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a06      	ldr	r2, [pc, #24]	@ (800a4e8 <SDMMC_GetCmdError+0x58>)
 800a4ce:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	24000000 	.word	0x24000000
 800a4e4:	10624dd3 	.word	0x10624dd3
 800a4e8:	002000c5 	.word	0x002000c5

0800a4ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a4f0:	4904      	ldr	r1, [pc, #16]	@ (800a504 <MX_FATFS_Init+0x18>)
 800a4f2:	4805      	ldr	r0, [pc, #20]	@ (800a508 <MX_FATFS_Init+0x1c>)
 800a4f4:	f000 fa46 	bl	800a984 <FATFS_LinkDriver>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	4b03      	ldr	r3, [pc, #12]	@ (800a50c <MX_FATFS_Init+0x20>)
 800a4fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a500:	bf00      	nop
 800a502:	bd80      	pop	{r7, pc}
 800a504:	24000220 	.word	0x24000220
 800a508:	0800aa4c 	.word	0x0800aa4c
 800a50c:	2400021c 	.word	0x2400021c

0800a510 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a51a:	f000 f871 	bl	800a600 <BSP_SD_IsDetected>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b01      	cmp	r3, #1
 800a522:	d001      	beq.n	800a528 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800a524:	2302      	movs	r3, #2
 800a526:	e012      	b.n	800a54e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800a528:	480b      	ldr	r0, [pc, #44]	@ (800a558 <BSP_SD_Init+0x48>)
 800a52a:	f7fb ff55 	bl	80063d8 <HAL_SD_Init>
 800a52e:	4603      	mov	r3, r0
 800a530:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a532:	79fb      	ldrb	r3, [r7, #7]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d109      	bne.n	800a54c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a538:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a53c:	4806      	ldr	r0, [pc, #24]	@ (800a558 <BSP_SD_Init+0x48>)
 800a53e:	f7fc fc49 	bl	8006dd4 <HAL_SD_ConfigWideBusOperation>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a54c:	79fb      	ldrb	r3, [r7, #7]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	24000080 	.word	0x24000080

0800a55c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	68f9      	ldr	r1, [r7, #12]
 800a572:	4806      	ldr	r0, [pc, #24]	@ (800a58c <BSP_SD_ReadBlocks_DMA+0x30>)
 800a574:	f7fc f850 	bl	8006618 <HAL_SD_ReadBlocks_DMA>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a582:	7dfb      	ldrb	r3, [r7, #23]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3718      	adds	r7, #24
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	24000080 	.word	0x24000080

0800a590 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	68f9      	ldr	r1, [r7, #12]
 800a5a6:	4806      	ldr	r0, [pc, #24]	@ (800a5c0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a5a8:	f7fc f8de 	bl	8006768 <HAL_SD_WriteBlocks_DMA>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	24000080 	.word	0x24000080

0800a5c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a5c8:	4805      	ldr	r0, [pc, #20]	@ (800a5e0 <BSP_SD_GetCardState+0x1c>)
 800a5ca:	f7fc fd15 	bl	8006ff8 <HAL_SD_GetCardState>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	bf14      	ite	ne
 800a5d4:	2301      	movne	r3, #1
 800a5d6:	2300      	moveq	r3, #0
 800a5d8:	b2db      	uxtb	r3, r3
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	24000080 	.word	0x24000080

0800a5e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	4803      	ldr	r0, [pc, #12]	@ (800a5fc <BSP_SD_GetCardInfo+0x18>)
 800a5f0:	f7fc fbc4 	bl	8006d7c <HAL_SD_GetCardInfo>
}
 800a5f4:	bf00      	nop
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	24000080 	.word	0x24000080

0800a600 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a606:	2301      	movs	r3, #1
 800a608:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800a60a:	79fb      	ldrb	r3, [r7, #7]
 800a60c:	b2db      	uxtb	r3, r3
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a622:	f7f6 ff09 	bl	8001438 <HAL_GetTick>
 800a626:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a628:	e006      	b.n	800a638 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a62a:	f7ff ffcb 	bl	800a5c4 <BSP_SD_GetCardState>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a634:	2300      	movs	r3, #0
 800a636:	e009      	b.n	800a64c <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a638:	f7f6 fefe 	bl	8001438 <HAL_GetTick>
 800a63c:	4602      	mov	r2, r0
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	429a      	cmp	r2, r3
 800a646:	d8f0      	bhi.n	800a62a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3710      	adds	r7, #16
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a65e:	4b0b      	ldr	r3, [pc, #44]	@ (800a68c <SD_CheckStatus+0x38>)
 800a660:	2201      	movs	r2, #1
 800a662:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a664:	f7ff ffae 	bl	800a5c4 <BSP_SD_GetCardState>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d107      	bne.n	800a67e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a66e:	4b07      	ldr	r3, [pc, #28]	@ (800a68c <SD_CheckStatus+0x38>)
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f023 0301 	bic.w	r3, r3, #1
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	4b04      	ldr	r3, [pc, #16]	@ (800a68c <SD_CheckStatus+0x38>)
 800a67c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a67e:	4b03      	ldr	r3, [pc, #12]	@ (800a68c <SD_CheckStatus+0x38>)
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	b2db      	uxtb	r3, r3
}
 800a684:	4618      	mov	r0, r3
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	2400000d 	.word	0x2400000d

0800a690 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a69a:	f7ff ff39 	bl	800a510 <BSP_SD_Init>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d107      	bne.n	800a6b4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7ff ffd4 	bl	800a654 <SD_CheckStatus>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	4b04      	ldr	r3, [pc, #16]	@ (800a6c4 <SD_initialize+0x34>)
 800a6b2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a6b4:	4b03      	ldr	r3, [pc, #12]	@ (800a6c4 <SD_initialize+0x34>)
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	b2db      	uxtb	r3, r3
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	2400000d 	.word	0x2400000d

0800a6c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a6d2:	79fb      	ldrb	r3, [r7, #7]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7ff ffbd 	bl	800a654 <SD_CheckStatus>
 800a6da:	4603      	mov	r3, r0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60b9      	str	r1, [r7, #8]
 800a6ec:	607a      	str	r2, [r7, #4]
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a6f8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a6fc:	f7ff ff8d 	bl	800a61a <SD_CheckStatusWithTimeout>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	da01      	bge.n	800a70a <SD_read+0x26>
  {
    return res;
 800a706:	7dfb      	ldrb	r3, [r7, #23]
 800a708:	e03b      	b.n	800a782 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a70a:	683a      	ldr	r2, [r7, #0]
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	68b8      	ldr	r0, [r7, #8]
 800a710:	f7ff ff24 	bl	800a55c <BSP_SD_ReadBlocks_DMA>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d132      	bne.n	800a780 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a71a:	4b1c      	ldr	r3, [pc, #112]	@ (800a78c <SD_read+0xa8>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a720:	f7f6 fe8a 	bl	8001438 <HAL_GetTick>
 800a724:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a726:	bf00      	nop
 800a728:	4b18      	ldr	r3, [pc, #96]	@ (800a78c <SD_read+0xa8>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d108      	bne.n	800a742 <SD_read+0x5e>
 800a730:	f7f6 fe82 	bl	8001438 <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a73e:	4293      	cmp	r3, r2
 800a740:	d9f2      	bls.n	800a728 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a742:	4b12      	ldr	r3, [pc, #72]	@ (800a78c <SD_read+0xa8>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d102      	bne.n	800a750 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	75fb      	strb	r3, [r7, #23]
 800a74e:	e017      	b.n	800a780 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a750:	4b0e      	ldr	r3, [pc, #56]	@ (800a78c <SD_read+0xa8>)
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a756:	f7f6 fe6f 	bl	8001438 <HAL_GetTick>
 800a75a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a75c:	e007      	b.n	800a76e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a75e:	f7ff ff31 	bl	800a5c4 <BSP_SD_GetCardState>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d102      	bne.n	800a76e <SD_read+0x8a>
          {
            res = RES_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a76c:	e008      	b.n	800a780 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a76e:	f7f6 fe63 	bl	8001438 <HAL_GetTick>
 800a772:	4602      	mov	r2, r0
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d9ee      	bls.n	800a75e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a780:	7dfb      	ldrb	r3, [r7, #23]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	24000228 	.word	0x24000228

0800a790 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	607a      	str	r2, [r7, #4]
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	4603      	mov	r3, r0
 800a79e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a7a4:	4b24      	ldr	r3, [pc, #144]	@ (800a838 <SD_write+0xa8>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a7aa:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a7ae:	f7ff ff34 	bl	800a61a <SD_CheckStatusWithTimeout>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	da01      	bge.n	800a7bc <SD_write+0x2c>
  {
    return res;
 800a7b8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ba:	e038      	b.n	800a82e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	68b8      	ldr	r0, [r7, #8]
 800a7c2:	f7ff fee5 	bl	800a590 <BSP_SD_WriteBlocks_DMA>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d12f      	bne.n	800a82c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a7cc:	f7f6 fe34 	bl	8001438 <HAL_GetTick>
 800a7d0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a7d2:	bf00      	nop
 800a7d4:	4b18      	ldr	r3, [pc, #96]	@ (800a838 <SD_write+0xa8>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d108      	bne.n	800a7ee <SD_write+0x5e>
 800a7dc:	f7f6 fe2c 	bl	8001438 <HAL_GetTick>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d9f2      	bls.n	800a7d4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a7ee:	4b12      	ldr	r3, [pc, #72]	@ (800a838 <SD_write+0xa8>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d102      	bne.n	800a7fc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	75fb      	strb	r3, [r7, #23]
 800a7fa:	e017      	b.n	800a82c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a7fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a838 <SD_write+0xa8>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a802:	f7f6 fe19 	bl	8001438 <HAL_GetTick>
 800a806:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a808:	e007      	b.n	800a81a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a80a:	f7ff fedb 	bl	800a5c4 <BSP_SD_GetCardState>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d102      	bne.n	800a81a <SD_write+0x8a>
          {
            res = RES_OK;
 800a814:	2300      	movs	r3, #0
 800a816:	75fb      	strb	r3, [r7, #23]
            break;
 800a818:	e008      	b.n	800a82c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a81a:	f7f6 fe0d 	bl	8001438 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a828:	4293      	cmp	r3, r2
 800a82a:	d9ee      	bls.n	800a80a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	24000224 	.word	0x24000224

0800a83c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b08c      	sub	sp, #48	@ 0x30
 800a840:	af00      	add	r7, sp, #0
 800a842:	4603      	mov	r3, r0
 800a844:	603a      	str	r2, [r7, #0]
 800a846:	71fb      	strb	r3, [r7, #7]
 800a848:	460b      	mov	r3, r1
 800a84a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a852:	4b25      	ldr	r3, [pc, #148]	@ (800a8e8 <SD_ioctl+0xac>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	f003 0301 	and.w	r3, r3, #1
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <SD_ioctl+0x28>
 800a860:	2303      	movs	r3, #3
 800a862:	e03c      	b.n	800a8de <SD_ioctl+0xa2>

  switch (cmd)
 800a864:	79bb      	ldrb	r3, [r7, #6]
 800a866:	2b03      	cmp	r3, #3
 800a868:	d834      	bhi.n	800a8d4 <SD_ioctl+0x98>
 800a86a:	a201      	add	r2, pc, #4	@ (adr r2, 800a870 <SD_ioctl+0x34>)
 800a86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a870:	0800a881 	.word	0x0800a881
 800a874:	0800a889 	.word	0x0800a889
 800a878:	0800a8a1 	.word	0x0800a8a1
 800a87c:	0800a8bb 	.word	0x0800a8bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a886:	e028      	b.n	800a8da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a888:	f107 0308 	add.w	r3, r7, #8
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7ff fea9 	bl	800a5e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a892:	6a3a      	ldr	r2, [r7, #32]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a89e:	e01c      	b.n	800a8da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a8a0:	f107 0308 	add.w	r3, r7, #8
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fe9d 	bl	800a5e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a8b8:	e00f      	b.n	800a8da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a8ba:	f107 0308 	add.w	r3, r7, #8
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7ff fe90 	bl	800a5e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c6:	0a5a      	lsrs	r2, r3, #9
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a8d2:	e002      	b.n	800a8da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a8d4:	2304      	movs	r3, #4
 800a8d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a8da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3730      	adds	r7, #48	@ 0x30
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	2400000d 	.word	0x2400000d

0800a8ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a902:	4b1f      	ldr	r3, [pc, #124]	@ (800a980 <FATFS_LinkDriverEx+0x94>)
 800a904:	7a5b      	ldrb	r3, [r3, #9]
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d131      	bne.n	800a970 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a90c:	4b1c      	ldr	r3, [pc, #112]	@ (800a980 <FATFS_LinkDriverEx+0x94>)
 800a90e:	7a5b      	ldrb	r3, [r3, #9]
 800a910:	b2db      	uxtb	r3, r3
 800a912:	461a      	mov	r2, r3
 800a914:	4b1a      	ldr	r3, [pc, #104]	@ (800a980 <FATFS_LinkDriverEx+0x94>)
 800a916:	2100      	movs	r1, #0
 800a918:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a91a:	4b19      	ldr	r3, [pc, #100]	@ (800a980 <FATFS_LinkDriverEx+0x94>)
 800a91c:	7a5b      	ldrb	r3, [r3, #9]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	4a17      	ldr	r2, [pc, #92]	@ (800a980 <FATFS_LinkDriverEx+0x94>)
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a92a:	4b15      	ldr	r3, [pc, #84]	@ (800a980 <FATFS_LinkDriverEx+0x94>)
 800a92c:	7a5b      	ldrb	r3, [r3, #9]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	461a      	mov	r2, r3
 800a932:	4b13      	ldr	r3, [pc, #76]	@ (800a980 <FATFS_LinkDriverEx+0x94>)
 800a934:	4413      	add	r3, r2
 800a936:	79fa      	ldrb	r2, [r7, #7]
 800a938:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a93a:	4b11      	ldr	r3, [pc, #68]	@ (800a980 <FATFS_LinkDriverEx+0x94>)
 800a93c:	7a5b      	ldrb	r3, [r3, #9]
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	b2d1      	uxtb	r1, r2
 800a944:	4a0e      	ldr	r2, [pc, #56]	@ (800a980 <FATFS_LinkDriverEx+0x94>)
 800a946:	7251      	strb	r1, [r2, #9]
 800a948:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a94a:	7dbb      	ldrb	r3, [r7, #22]
 800a94c:	3330      	adds	r3, #48	@ 0x30
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	3301      	adds	r3, #1
 800a958:	223a      	movs	r2, #58	@ 0x3a
 800a95a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	3302      	adds	r3, #2
 800a960:	222f      	movs	r2, #47	@ 0x2f
 800a962:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	3303      	adds	r3, #3
 800a968:	2200      	movs	r2, #0
 800a96a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a970:	7dfb      	ldrb	r3, [r7, #23]
}
 800a972:	4618      	mov	r0, r3
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	2400022c 	.word	0x2400022c

0800a984 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a98e:	2200      	movs	r2, #0
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7ff ffaa 	bl	800a8ec <FATFS_LinkDriverEx>
 800a998:	4603      	mov	r3, r0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <memset>:
 800a9a2:	4402      	add	r2, r0
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d100      	bne.n	800a9ac <memset+0xa>
 800a9aa:	4770      	bx	lr
 800a9ac:	f803 1b01 	strb.w	r1, [r3], #1
 800a9b0:	e7f9      	b.n	800a9a6 <memset+0x4>
	...

0800a9b4 <__libc_init_array>:
 800a9b4:	b570      	push	{r4, r5, r6, lr}
 800a9b6:	4d0d      	ldr	r5, [pc, #52]	@ (800a9ec <__libc_init_array+0x38>)
 800a9b8:	4c0d      	ldr	r4, [pc, #52]	@ (800a9f0 <__libc_init_array+0x3c>)
 800a9ba:	1b64      	subs	r4, r4, r5
 800a9bc:	10a4      	asrs	r4, r4, #2
 800a9be:	2600      	movs	r6, #0
 800a9c0:	42a6      	cmp	r6, r4
 800a9c2:	d109      	bne.n	800a9d8 <__libc_init_array+0x24>
 800a9c4:	4d0b      	ldr	r5, [pc, #44]	@ (800a9f4 <__libc_init_array+0x40>)
 800a9c6:	4c0c      	ldr	r4, [pc, #48]	@ (800a9f8 <__libc_init_array+0x44>)
 800a9c8:	f000 f818 	bl	800a9fc <_init>
 800a9cc:	1b64      	subs	r4, r4, r5
 800a9ce:	10a4      	asrs	r4, r4, #2
 800a9d0:	2600      	movs	r6, #0
 800a9d2:	42a6      	cmp	r6, r4
 800a9d4:	d105      	bne.n	800a9e2 <__libc_init_array+0x2e>
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9dc:	4798      	blx	r3
 800a9de:	3601      	adds	r6, #1
 800a9e0:	e7ee      	b.n	800a9c0 <__libc_init_array+0xc>
 800a9e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e6:	4798      	blx	r3
 800a9e8:	3601      	adds	r6, #1
 800a9ea:	e7f2      	b.n	800a9d2 <__libc_init_array+0x1e>
 800a9ec:	0800aa68 	.word	0x0800aa68
 800a9f0:	0800aa68 	.word	0x0800aa68
 800a9f4:	0800aa68 	.word	0x0800aa68
 800a9f8:	0800aa6c 	.word	0x0800aa6c

0800a9fc <_init>:
 800a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fe:	bf00      	nop
 800aa00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa02:	bc08      	pop	{r3}
 800aa04:	469e      	mov	lr, r3
 800aa06:	4770      	bx	lr

0800aa08 <_fini>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	bf00      	nop
 800aa0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0e:	bc08      	pop	{r3}
 800aa10:	469e      	mov	lr, r3
 800aa12:	4770      	bx	lr
